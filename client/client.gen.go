// Package client provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package client

import (
	"bytes"
	"context"
	"encoding/json"
	"encoding/xml"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"
	"time"

	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	OAuth2Scopes = "OAuth2.Scopes"
)

// Defines values for UpdateAccountCenterSettingsJSONBodyFieldsAvatar.
const (
	UpdateAccountCenterSettingsJSONBodyFieldsAvatarEdit     UpdateAccountCenterSettingsJSONBodyFieldsAvatar = "Edit"
	UpdateAccountCenterSettingsJSONBodyFieldsAvatarOff      UpdateAccountCenterSettingsJSONBodyFieldsAvatar = "Off"
	UpdateAccountCenterSettingsJSONBodyFieldsAvatarReadOnly UpdateAccountCenterSettingsJSONBodyFieldsAvatar = "ReadOnly"
)

// Defines values for UpdateAccountCenterSettingsJSONBodyFieldsCustomData.
const (
	UpdateAccountCenterSettingsJSONBodyFieldsCustomDataEdit     UpdateAccountCenterSettingsJSONBodyFieldsCustomData = "Edit"
	UpdateAccountCenterSettingsJSONBodyFieldsCustomDataOff      UpdateAccountCenterSettingsJSONBodyFieldsCustomData = "Off"
	UpdateAccountCenterSettingsJSONBodyFieldsCustomDataReadOnly UpdateAccountCenterSettingsJSONBodyFieldsCustomData = "ReadOnly"
)

// Defines values for UpdateAccountCenterSettingsJSONBodyFieldsEmail.
const (
	UpdateAccountCenterSettingsJSONBodyFieldsEmailEdit     UpdateAccountCenterSettingsJSONBodyFieldsEmail = "Edit"
	UpdateAccountCenterSettingsJSONBodyFieldsEmailOff      UpdateAccountCenterSettingsJSONBodyFieldsEmail = "Off"
	UpdateAccountCenterSettingsJSONBodyFieldsEmailReadOnly UpdateAccountCenterSettingsJSONBodyFieldsEmail = "ReadOnly"
)

// Defines values for UpdateAccountCenterSettingsJSONBodyFieldsMfa.
const (
	UpdateAccountCenterSettingsJSONBodyFieldsMfaEdit     UpdateAccountCenterSettingsJSONBodyFieldsMfa = "Edit"
	UpdateAccountCenterSettingsJSONBodyFieldsMfaOff      UpdateAccountCenterSettingsJSONBodyFieldsMfa = "Off"
	UpdateAccountCenterSettingsJSONBodyFieldsMfaReadOnly UpdateAccountCenterSettingsJSONBodyFieldsMfa = "ReadOnly"
)

// Defines values for UpdateAccountCenterSettingsJSONBodyFieldsName.
const (
	UpdateAccountCenterSettingsJSONBodyFieldsNameEdit     UpdateAccountCenterSettingsJSONBodyFieldsName = "Edit"
	UpdateAccountCenterSettingsJSONBodyFieldsNameOff      UpdateAccountCenterSettingsJSONBodyFieldsName = "Off"
	UpdateAccountCenterSettingsJSONBodyFieldsNameReadOnly UpdateAccountCenterSettingsJSONBodyFieldsName = "ReadOnly"
)

// Defines values for UpdateAccountCenterSettingsJSONBodyFieldsPassword.
const (
	UpdateAccountCenterSettingsJSONBodyFieldsPasswordEdit     UpdateAccountCenterSettingsJSONBodyFieldsPassword = "Edit"
	UpdateAccountCenterSettingsJSONBodyFieldsPasswordOff      UpdateAccountCenterSettingsJSONBodyFieldsPassword = "Off"
	UpdateAccountCenterSettingsJSONBodyFieldsPasswordReadOnly UpdateAccountCenterSettingsJSONBodyFieldsPassword = "ReadOnly"
)

// Defines values for UpdateAccountCenterSettingsJSONBodyFieldsPhone.
const (
	UpdateAccountCenterSettingsJSONBodyFieldsPhoneEdit     UpdateAccountCenterSettingsJSONBodyFieldsPhone = "Edit"
	UpdateAccountCenterSettingsJSONBodyFieldsPhoneOff      UpdateAccountCenterSettingsJSONBodyFieldsPhone = "Off"
	UpdateAccountCenterSettingsJSONBodyFieldsPhoneReadOnly UpdateAccountCenterSettingsJSONBodyFieldsPhone = "ReadOnly"
)

// Defines values for UpdateAccountCenterSettingsJSONBodyFieldsProfile.
const (
	UpdateAccountCenterSettingsJSONBodyFieldsProfileEdit     UpdateAccountCenterSettingsJSONBodyFieldsProfile = "Edit"
	UpdateAccountCenterSettingsJSONBodyFieldsProfileOff      UpdateAccountCenterSettingsJSONBodyFieldsProfile = "Off"
	UpdateAccountCenterSettingsJSONBodyFieldsProfileReadOnly UpdateAccountCenterSettingsJSONBodyFieldsProfile = "ReadOnly"
)

// Defines values for UpdateAccountCenterSettingsJSONBodyFieldsSocial.
const (
	UpdateAccountCenterSettingsJSONBodyFieldsSocialEdit     UpdateAccountCenterSettingsJSONBodyFieldsSocial = "Edit"
	UpdateAccountCenterSettingsJSONBodyFieldsSocialOff      UpdateAccountCenterSettingsJSONBodyFieldsSocial = "Off"
	UpdateAccountCenterSettingsJSONBodyFieldsSocialReadOnly UpdateAccountCenterSettingsJSONBodyFieldsSocial = "ReadOnly"
)

// Defines values for UpdateAccountCenterSettingsJSONBodyFieldsUsername.
const (
	UpdateAccountCenterSettingsJSONBodyFieldsUsernameEdit     UpdateAccountCenterSettingsJSONBodyFieldsUsername = "Edit"
	UpdateAccountCenterSettingsJSONBodyFieldsUsernameOff      UpdateAccountCenterSettingsJSONBodyFieldsUsername = "Off"
	UpdateAccountCenterSettingsJSONBodyFieldsUsernameReadOnly UpdateAccountCenterSettingsJSONBodyFieldsUsername = "ReadOnly"
)

// Defines values for ListApplicationsParamsTypes1.
const (
	ListApplicationsParamsTypes1MachineToMachine ListApplicationsParamsTypes1 = "MachineToMachine"
	ListApplicationsParamsTypes1Native           ListApplicationsParamsTypes1 = "Native"
	ListApplicationsParamsTypes1Protected        ListApplicationsParamsTypes1 = "Protected"
	ListApplicationsParamsTypes1SAML             ListApplicationsParamsTypes1 = "SAML"
	ListApplicationsParamsTypes1SPA              ListApplicationsParamsTypes1 = "SPA"
	ListApplicationsParamsTypes1Traditional      ListApplicationsParamsTypes1 = "Traditional"
)

// Defines values for CreateApplicationJSONBodyType.
const (
	CreateApplicationJSONBodyTypeMachineToMachine CreateApplicationJSONBodyType = "MachineToMachine"
	CreateApplicationJSONBodyTypeNative           CreateApplicationJSONBodyType = "Native"
	CreateApplicationJSONBodyTypeProtected        CreateApplicationJSONBodyType = "Protected"
	CreateApplicationJSONBodyTypeSAML             CreateApplicationJSONBodyType = "SAML"
	CreateApplicationJSONBodyTypeSPA              CreateApplicationJSONBodyType = "SPA"
	CreateApplicationJSONBodyTypeTraditional      CreateApplicationJSONBodyType = "Traditional"
)

// Defines values for CreateApplicationUserConsentScopeJSONBodyUserScopes.
const (
	CreateApplicationUserConsentScopeJSONBodyUserScopesAddress                        CreateApplicationUserConsentScopeJSONBodyUserScopes = "address"
	CreateApplicationUserConsentScopeJSONBodyUserScopesCustomData                     CreateApplicationUserConsentScopeJSONBodyUserScopes = "custom_data"
	CreateApplicationUserConsentScopeJSONBodyUserScopesEmail                          CreateApplicationUserConsentScopeJSONBodyUserScopes = "email"
	CreateApplicationUserConsentScopeJSONBodyUserScopesIdentities                     CreateApplicationUserConsentScopeJSONBodyUserScopes = "identities"
	CreateApplicationUserConsentScopeJSONBodyUserScopesPhone                          CreateApplicationUserConsentScopeJSONBodyUserScopes = "phone"
	CreateApplicationUserConsentScopeJSONBodyUserScopesProfile                        CreateApplicationUserConsentScopeJSONBodyUserScopes = "profile"
	CreateApplicationUserConsentScopeJSONBodyUserScopesRoles                          CreateApplicationUserConsentScopeJSONBodyUserScopes = "roles"
	CreateApplicationUserConsentScopeJSONBodyUserScopesUrnLogtoScopeOrganizationRoles CreateApplicationUserConsentScopeJSONBodyUserScopes = "urn:logto:scope:organization_roles"
	CreateApplicationUserConsentScopeJSONBodyUserScopesUrnLogtoScopeOrganizations     CreateApplicationUserConsentScopeJSONBodyUserScopes = "urn:logto:scope:organizations"
)

// Defines values for DeleteApplicationUserConsentScopeParamsScopeType.
const (
	OrganizationResourceScopes DeleteApplicationUserConsentScopeParamsScopeType = "organization-resource-scopes"
	OrganizationScopes         DeleteApplicationUserConsentScopeParamsScopeType = "organization-scopes"
	ResourceScopes             DeleteApplicationUserConsentScopeParamsScopeType = "resource-scopes"
	UserScopes                 DeleteApplicationUserConsentScopeParamsScopeType = "user-scopes"
)

// Defines values for TestJwtCustomizerJSONBody0ContextInteractionInteractionEvent.
const (
	TestJwtCustomizerJSONBody0ContextInteractionInteractionEventForgotPassword TestJwtCustomizerJSONBody0ContextInteractionInteractionEvent = "ForgotPassword"
	TestJwtCustomizerJSONBody0ContextInteractionInteractionEventRegister       TestJwtCustomizerJSONBody0ContextInteractionInteractionEvent = "Register"
	TestJwtCustomizerJSONBody0ContextInteractionInteractionEventSignIn         TestJwtCustomizerJSONBody0ContextInteractionInteractionEvent = "SignIn"
)

// Defines values for TestJwtCustomizerJSONBody0ContextInteractionVerificationRecords0IdentifierType0.
const (
	TestJwtCustomizerJSONBody0ContextInteractionVerificationRecords0IdentifierType0Email    TestJwtCustomizerJSONBody0ContextInteractionVerificationRecords0IdentifierType0 = "email"
	TestJwtCustomizerJSONBody0ContextInteractionVerificationRecords0IdentifierType0Phone    TestJwtCustomizerJSONBody0ContextInteractionVerificationRecords0IdentifierType0 = "phone"
	TestJwtCustomizerJSONBody0ContextInteractionVerificationRecords0IdentifierType0Username TestJwtCustomizerJSONBody0ContextInteractionVerificationRecords0IdentifierType0 = "username"
)

// Defines values for TestJwtCustomizerJSONBody0ContextInteractionVerificationRecords0IdentifierType1.
const (
	TestJwtCustomizerJSONBody0ContextInteractionVerificationRecords0IdentifierType1UserId TestJwtCustomizerJSONBody0ContextInteractionVerificationRecords0IdentifierType1 = "userId"
)

// Defines values for TestJwtCustomizerJSONBody0ContextInteractionVerificationRecords1TemplateType.
const (
	TestJwtCustomizerJSONBody0ContextInteractionVerificationRecords1TemplateTypeBindNewIdentifier        TestJwtCustomizerJSONBody0ContextInteractionVerificationRecords1TemplateType = "BindNewIdentifier"
	TestJwtCustomizerJSONBody0ContextInteractionVerificationRecords1TemplateTypeForgotPassword           TestJwtCustomizerJSONBody0ContextInteractionVerificationRecords1TemplateType = "ForgotPassword"
	TestJwtCustomizerJSONBody0ContextInteractionVerificationRecords1TemplateTypeGeneric                  TestJwtCustomizerJSONBody0ContextInteractionVerificationRecords1TemplateType = "Generic"
	TestJwtCustomizerJSONBody0ContextInteractionVerificationRecords1TemplateTypeOrganizationInvitation   TestJwtCustomizerJSONBody0ContextInteractionVerificationRecords1TemplateType = "OrganizationInvitation"
	TestJwtCustomizerJSONBody0ContextInteractionVerificationRecords1TemplateTypeRegister                 TestJwtCustomizerJSONBody0ContextInteractionVerificationRecords1TemplateType = "Register"
	TestJwtCustomizerJSONBody0ContextInteractionVerificationRecords1TemplateTypeSignIn                   TestJwtCustomizerJSONBody0ContextInteractionVerificationRecords1TemplateType = "SignIn"
	TestJwtCustomizerJSONBody0ContextInteractionVerificationRecords1TemplateTypeUserPermissionValidation TestJwtCustomizerJSONBody0ContextInteractionVerificationRecords1TemplateType = "UserPermissionValidation"
)

// Defines values for TestJwtCustomizerJSONBody0ContextInteractionVerificationRecords2TemplateType.
const (
	TestJwtCustomizerJSONBody0ContextInteractionVerificationRecords2TemplateTypeBindNewIdentifier        TestJwtCustomizerJSONBody0ContextInteractionVerificationRecords2TemplateType = "BindNewIdentifier"
	TestJwtCustomizerJSONBody0ContextInteractionVerificationRecords2TemplateTypeForgotPassword           TestJwtCustomizerJSONBody0ContextInteractionVerificationRecords2TemplateType = "ForgotPassword"
	TestJwtCustomizerJSONBody0ContextInteractionVerificationRecords2TemplateTypeGeneric                  TestJwtCustomizerJSONBody0ContextInteractionVerificationRecords2TemplateType = "Generic"
	TestJwtCustomizerJSONBody0ContextInteractionVerificationRecords2TemplateTypeOrganizationInvitation   TestJwtCustomizerJSONBody0ContextInteractionVerificationRecords2TemplateType = "OrganizationInvitation"
	TestJwtCustomizerJSONBody0ContextInteractionVerificationRecords2TemplateTypeRegister                 TestJwtCustomizerJSONBody0ContextInteractionVerificationRecords2TemplateType = "Register"
	TestJwtCustomizerJSONBody0ContextInteractionVerificationRecords2TemplateTypeSignIn                   TestJwtCustomizerJSONBody0ContextInteractionVerificationRecords2TemplateType = "SignIn"
	TestJwtCustomizerJSONBody0ContextInteractionVerificationRecords2TemplateTypeUserPermissionValidation TestJwtCustomizerJSONBody0ContextInteractionVerificationRecords2TemplateType = "UserPermissionValidation"
)

// Defines values for TestJwtCustomizerJSONBody0ContextInteractionVerificationRecords9IdentifierType.
const (
	TestJwtCustomizerJSONBody0ContextInteractionVerificationRecords9IdentifierTypeEmail    TestJwtCustomizerJSONBody0ContextInteractionVerificationRecords9IdentifierType = "email"
	TestJwtCustomizerJSONBody0ContextInteractionVerificationRecords9IdentifierTypePhone    TestJwtCustomizerJSONBody0ContextInteractionVerificationRecords9IdentifierType = "phone"
	TestJwtCustomizerJSONBody0ContextInteractionVerificationRecords9IdentifierTypeUsername TestJwtCustomizerJSONBody0ContextInteractionVerificationRecords9IdentifierType = "username"
)

// Defines values for TestJwtCustomizerJSONBody0ContextUserMfaVerificationFactors.
const (
	TestJwtCustomizerJSONBody0ContextUserMfaVerificationFactorsBackupCode TestJwtCustomizerJSONBody0ContextUserMfaVerificationFactors = "BackupCode"
	TestJwtCustomizerJSONBody0ContextUserMfaVerificationFactorsTotp       TestJwtCustomizerJSONBody0ContextUserMfaVerificationFactors = "Totp"
	TestJwtCustomizerJSONBody0ContextUserMfaVerificationFactorsWebAuthn   TestJwtCustomizerJSONBody0ContextUserMfaVerificationFactors = "WebAuthn"
)

// Defines values for DeleteJwtCustomizerParamsTokenTypePath.
const (
	DeleteJwtCustomizerParamsTokenTypePathAccessToken       DeleteJwtCustomizerParamsTokenTypePath = "access-token"
	DeleteJwtCustomizerParamsTokenTypePathClientCredentials DeleteJwtCustomizerParamsTokenTypePath = "client-credentials"
)

// Defines values for GetJwtCustomizerParamsTokenTypePath.
const (
	GetJwtCustomizerParamsTokenTypePathAccessToken       GetJwtCustomizerParamsTokenTypePath = "access-token"
	GetJwtCustomizerParamsTokenTypePathClientCredentials GetJwtCustomizerParamsTokenTypePath = "client-credentials"
)

// Defines values for UpdateJwtCustomizerParamsTokenTypePath.
const (
	UpdateJwtCustomizerParamsTokenTypePathAccessToken       UpdateJwtCustomizerParamsTokenTypePath = "access-token"
	UpdateJwtCustomizerParamsTokenTypePathClientCredentials UpdateJwtCustomizerParamsTokenTypePath = "client-credentials"
)

// Defines values for UpsertJwtCustomizerParamsTokenTypePath.
const (
	UpsertJwtCustomizerParamsTokenTypePathAccessToken       UpsertJwtCustomizerParamsTokenTypePath = "access-token"
	UpsertJwtCustomizerParamsTokenTypePathClientCredentials UpsertJwtCustomizerParamsTokenTypePath = "client-credentials"
)

// Defines values for GetOidcKeysParamsKeyType.
const (
	GetOidcKeysParamsKeyTypeCookieKeys  GetOidcKeysParamsKeyType = "cookie-keys"
	GetOidcKeysParamsKeyTypePrivateKeys GetOidcKeysParamsKeyType = "private-keys"
)

// Defines values for RotateOidcKeysParamsKeyType.
const (
	RotateOidcKeysParamsKeyTypeCookieKeys  RotateOidcKeysParamsKeyType = "cookie-keys"
	RotateOidcKeysParamsKeyTypePrivateKeys RotateOidcKeysParamsKeyType = "private-keys"
)

// Defines values for RotateOidcKeysJSONBodySigningKeyAlgorithm.
const (
	EC  RotateOidcKeysJSONBodySigningKeyAlgorithm = "EC"
	RSA RotateOidcKeysJSONBodySigningKeyAlgorithm = "RSA"
)

// Defines values for DeleteOidcKeyParamsKeyType.
const (
	CookieKeys  DeleteOidcKeyParamsKeyType = "cookie-keys"
	PrivateKeys DeleteOidcKeyParamsKeyType = "private-keys"
)

// Defines values for DeleteCustomPhraseParamsLanguageTag.
const (
	DeleteCustomPhraseParamsLanguageTagAfZA  DeleteCustomPhraseParamsLanguageTag = "af-ZA"
	DeleteCustomPhraseParamsLanguageTagAmET  DeleteCustomPhraseParamsLanguageTag = "am-ET"
	DeleteCustomPhraseParamsLanguageTagAr    DeleteCustomPhraseParamsLanguageTag = "ar"
	DeleteCustomPhraseParamsLanguageTagArAR  DeleteCustomPhraseParamsLanguageTag = "ar-AR"
	DeleteCustomPhraseParamsLanguageTagAsIN  DeleteCustomPhraseParamsLanguageTag = "as-IN"
	DeleteCustomPhraseParamsLanguageTagAzAZ  DeleteCustomPhraseParamsLanguageTag = "az-AZ"
	DeleteCustomPhraseParamsLanguageTagBeBY  DeleteCustomPhraseParamsLanguageTag = "be-BY"
	DeleteCustomPhraseParamsLanguageTagBgBG  DeleteCustomPhraseParamsLanguageTag = "bg-BG"
	DeleteCustomPhraseParamsLanguageTagBnIN  DeleteCustomPhraseParamsLanguageTag = "bn-IN"
	DeleteCustomPhraseParamsLanguageTagBrFR  DeleteCustomPhraseParamsLanguageTag = "br-FR"
	DeleteCustomPhraseParamsLanguageTagBsBA  DeleteCustomPhraseParamsLanguageTag = "bs-BA"
	DeleteCustomPhraseParamsLanguageTagCaES  DeleteCustomPhraseParamsLanguageTag = "ca-ES"
	DeleteCustomPhraseParamsLanguageTagCbIQ  DeleteCustomPhraseParamsLanguageTag = "cb-IQ"
	DeleteCustomPhraseParamsLanguageTagCoFR  DeleteCustomPhraseParamsLanguageTag = "co-FR"
	DeleteCustomPhraseParamsLanguageTagCsCZ  DeleteCustomPhraseParamsLanguageTag = "cs-CZ"
	DeleteCustomPhraseParamsLanguageTagCxPH  DeleteCustomPhraseParamsLanguageTag = "cx-PH"
	DeleteCustomPhraseParamsLanguageTagCyGB  DeleteCustomPhraseParamsLanguageTag = "cy-GB"
	DeleteCustomPhraseParamsLanguageTagDaDK  DeleteCustomPhraseParamsLanguageTag = "da-DK"
	DeleteCustomPhraseParamsLanguageTagDe    DeleteCustomPhraseParamsLanguageTag = "de"
	DeleteCustomPhraseParamsLanguageTagDeDE  DeleteCustomPhraseParamsLanguageTag = "de-DE"
	DeleteCustomPhraseParamsLanguageTagElGR  DeleteCustomPhraseParamsLanguageTag = "el-GR"
	DeleteCustomPhraseParamsLanguageTagEn    DeleteCustomPhraseParamsLanguageTag = "en"
	DeleteCustomPhraseParamsLanguageTagEnGB  DeleteCustomPhraseParamsLanguageTag = "en-GB"
	DeleteCustomPhraseParamsLanguageTagEnUS  DeleteCustomPhraseParamsLanguageTag = "en-US"
	DeleteCustomPhraseParamsLanguageTagEoEO  DeleteCustomPhraseParamsLanguageTag = "eo-EO"
	DeleteCustomPhraseParamsLanguageTagEs    DeleteCustomPhraseParamsLanguageTag = "es"
	DeleteCustomPhraseParamsLanguageTagEs419 DeleteCustomPhraseParamsLanguageTag = "es-419"
	DeleteCustomPhraseParamsLanguageTagEsES  DeleteCustomPhraseParamsLanguageTag = "es-ES"
	DeleteCustomPhraseParamsLanguageTagEtEE  DeleteCustomPhraseParamsLanguageTag = "et-EE"
	DeleteCustomPhraseParamsLanguageTagEuES  DeleteCustomPhraseParamsLanguageTag = "eu-ES"
	DeleteCustomPhraseParamsLanguageTagFaIR  DeleteCustomPhraseParamsLanguageTag = "fa-IR"
	DeleteCustomPhraseParamsLanguageTagFfNG  DeleteCustomPhraseParamsLanguageTag = "ff-NG"
	DeleteCustomPhraseParamsLanguageTagFi    DeleteCustomPhraseParamsLanguageTag = "fi"
	DeleteCustomPhraseParamsLanguageTagFiFI  DeleteCustomPhraseParamsLanguageTag = "fi-FI"
	DeleteCustomPhraseParamsLanguageTagFoFO  DeleteCustomPhraseParamsLanguageTag = "fo-FO"
	DeleteCustomPhraseParamsLanguageTagFr    DeleteCustomPhraseParamsLanguageTag = "fr"
	DeleteCustomPhraseParamsLanguageTagFrCA  DeleteCustomPhraseParamsLanguageTag = "fr-CA"
	DeleteCustomPhraseParamsLanguageTagFrFR  DeleteCustomPhraseParamsLanguageTag = "fr-FR"
	DeleteCustomPhraseParamsLanguageTagFyNL  DeleteCustomPhraseParamsLanguageTag = "fy-NL"
	DeleteCustomPhraseParamsLanguageTagGaIE  DeleteCustomPhraseParamsLanguageTag = "ga-IE"
	DeleteCustomPhraseParamsLanguageTagGlES  DeleteCustomPhraseParamsLanguageTag = "gl-ES"
	DeleteCustomPhraseParamsLanguageTagGnPY  DeleteCustomPhraseParamsLanguageTag = "gn-PY"
	DeleteCustomPhraseParamsLanguageTagGuIN  DeleteCustomPhraseParamsLanguageTag = "gu-IN"
	DeleteCustomPhraseParamsLanguageTagHaNG  DeleteCustomPhraseParamsLanguageTag = "ha-NG"
	DeleteCustomPhraseParamsLanguageTagHeIL  DeleteCustomPhraseParamsLanguageTag = "he-IL"
	DeleteCustomPhraseParamsLanguageTagHiIN  DeleteCustomPhraseParamsLanguageTag = "hi-IN"
	DeleteCustomPhraseParamsLanguageTagHrHR  DeleteCustomPhraseParamsLanguageTag = "hr-HR"
	DeleteCustomPhraseParamsLanguageTagHtHT  DeleteCustomPhraseParamsLanguageTag = "ht-HT"
	DeleteCustomPhraseParamsLanguageTagHuHU  DeleteCustomPhraseParamsLanguageTag = "hu-HU"
	DeleteCustomPhraseParamsLanguageTagHyAM  DeleteCustomPhraseParamsLanguageTag = "hy-AM"
	DeleteCustomPhraseParamsLanguageTagIdID  DeleteCustomPhraseParamsLanguageTag = "id-ID"
	DeleteCustomPhraseParamsLanguageTagIkUS  DeleteCustomPhraseParamsLanguageTag = "ik-US"
	DeleteCustomPhraseParamsLanguageTagIsIS  DeleteCustomPhraseParamsLanguageTag = "is-IS"
	DeleteCustomPhraseParamsLanguageTagIt    DeleteCustomPhraseParamsLanguageTag = "it"
	DeleteCustomPhraseParamsLanguageTagItIT  DeleteCustomPhraseParamsLanguageTag = "it-IT"
	DeleteCustomPhraseParamsLanguageTagIuCA  DeleteCustomPhraseParamsLanguageTag = "iu-CA"
	DeleteCustomPhraseParamsLanguageTagJa    DeleteCustomPhraseParamsLanguageTag = "ja"
	DeleteCustomPhraseParamsLanguageTagJaJP  DeleteCustomPhraseParamsLanguageTag = "ja-JP"
	DeleteCustomPhraseParamsLanguageTagJaKS  DeleteCustomPhraseParamsLanguageTag = "ja-KS"
	DeleteCustomPhraseParamsLanguageTagJvID  DeleteCustomPhraseParamsLanguageTag = "jv-ID"
	DeleteCustomPhraseParamsLanguageTagKaGE  DeleteCustomPhraseParamsLanguageTag = "ka-GE"
	DeleteCustomPhraseParamsLanguageTagKkKZ  DeleteCustomPhraseParamsLanguageTag = "kk-KZ"
	DeleteCustomPhraseParamsLanguageTagKmKH  DeleteCustomPhraseParamsLanguageTag = "km-KH"
	DeleteCustomPhraseParamsLanguageTagKnIN  DeleteCustomPhraseParamsLanguageTag = "kn-IN"
	DeleteCustomPhraseParamsLanguageTagKo    DeleteCustomPhraseParamsLanguageTag = "ko"
	DeleteCustomPhraseParamsLanguageTagKoKR  DeleteCustomPhraseParamsLanguageTag = "ko-KR"
	DeleteCustomPhraseParamsLanguageTagKuTR  DeleteCustomPhraseParamsLanguageTag = "ku-TR"
	DeleteCustomPhraseParamsLanguageTagKyKG  DeleteCustomPhraseParamsLanguageTag = "ky-KG"
	DeleteCustomPhraseParamsLanguageTagLoLA  DeleteCustomPhraseParamsLanguageTag = "lo-LA"
	DeleteCustomPhraseParamsLanguageTagLtLT  DeleteCustomPhraseParamsLanguageTag = "lt-LT"
	DeleteCustomPhraseParamsLanguageTagLvLV  DeleteCustomPhraseParamsLanguageTag = "lv-LV"
	DeleteCustomPhraseParamsLanguageTagMgMG  DeleteCustomPhraseParamsLanguageTag = "mg-MG"
	DeleteCustomPhraseParamsLanguageTagMkMK  DeleteCustomPhraseParamsLanguageTag = "mk-MK"
	DeleteCustomPhraseParamsLanguageTagMlIN  DeleteCustomPhraseParamsLanguageTag = "ml-IN"
	DeleteCustomPhraseParamsLanguageTagMnMN  DeleteCustomPhraseParamsLanguageTag = "mn-MN"
	DeleteCustomPhraseParamsLanguageTagMrIN  DeleteCustomPhraseParamsLanguageTag = "mr-IN"
	DeleteCustomPhraseParamsLanguageTagMsMY  DeleteCustomPhraseParamsLanguageTag = "ms-MY"
	DeleteCustomPhraseParamsLanguageTagMtMT  DeleteCustomPhraseParamsLanguageTag = "mt-MT"
	DeleteCustomPhraseParamsLanguageTagMyMM  DeleteCustomPhraseParamsLanguageTag = "my-MM"
	DeleteCustomPhraseParamsLanguageTagNbNO  DeleteCustomPhraseParamsLanguageTag = "nb-NO"
	DeleteCustomPhraseParamsLanguageTagNeNP  DeleteCustomPhraseParamsLanguageTag = "ne-NP"
	DeleteCustomPhraseParamsLanguageTagNl    DeleteCustomPhraseParamsLanguageTag = "nl"
	DeleteCustomPhraseParamsLanguageTagNlBE  DeleteCustomPhraseParamsLanguageTag = "nl-BE"
	DeleteCustomPhraseParamsLanguageTagNlNL  DeleteCustomPhraseParamsLanguageTag = "nl-NL"
	DeleteCustomPhraseParamsLanguageTagNnNO  DeleteCustomPhraseParamsLanguageTag = "nn-NO"
	DeleteCustomPhraseParamsLanguageTagOrIN  DeleteCustomPhraseParamsLanguageTag = "or-IN"
	DeleteCustomPhraseParamsLanguageTagPaIN  DeleteCustomPhraseParamsLanguageTag = "pa-IN"
	DeleteCustomPhraseParamsLanguageTagPlPL  DeleteCustomPhraseParamsLanguageTag = "pl-PL"
	DeleteCustomPhraseParamsLanguageTagPsAF  DeleteCustomPhraseParamsLanguageTag = "ps-AF"
	DeleteCustomPhraseParamsLanguageTagPt    DeleteCustomPhraseParamsLanguageTag = "pt"
	DeleteCustomPhraseParamsLanguageTagPtBR  DeleteCustomPhraseParamsLanguageTag = "pt-BR"
	DeleteCustomPhraseParamsLanguageTagPtPT  DeleteCustomPhraseParamsLanguageTag = "pt-PT"
	DeleteCustomPhraseParamsLanguageTagRoRO  DeleteCustomPhraseParamsLanguageTag = "ro-RO"
	DeleteCustomPhraseParamsLanguageTagRu    DeleteCustomPhraseParamsLanguageTag = "ru"
	DeleteCustomPhraseParamsLanguageTagRuRU  DeleteCustomPhraseParamsLanguageTag = "ru-RU"
	DeleteCustomPhraseParamsLanguageTagRwRW  DeleteCustomPhraseParamsLanguageTag = "rw-RW"
	DeleteCustomPhraseParamsLanguageTagScIT  DeleteCustomPhraseParamsLanguageTag = "sc-IT"
	DeleteCustomPhraseParamsLanguageTagSiLK  DeleteCustomPhraseParamsLanguageTag = "si-LK"
	DeleteCustomPhraseParamsLanguageTagSkSK  DeleteCustomPhraseParamsLanguageTag = "sk-SK"
	DeleteCustomPhraseParamsLanguageTagSlSI  DeleteCustomPhraseParamsLanguageTag = "sl-SI"
	DeleteCustomPhraseParamsLanguageTagSnZW  DeleteCustomPhraseParamsLanguageTag = "sn-ZW"
	DeleteCustomPhraseParamsLanguageTagSqAL  DeleteCustomPhraseParamsLanguageTag = "sq-AL"
	DeleteCustomPhraseParamsLanguageTagSrRS  DeleteCustomPhraseParamsLanguageTag = "sr-RS"
	DeleteCustomPhraseParamsLanguageTagSv    DeleteCustomPhraseParamsLanguageTag = "sv"
	DeleteCustomPhraseParamsLanguageTagSvSE  DeleteCustomPhraseParamsLanguageTag = "sv-SE"
	DeleteCustomPhraseParamsLanguageTagSwKE  DeleteCustomPhraseParamsLanguageTag = "sw-KE"
	DeleteCustomPhraseParamsLanguageTagSySY  DeleteCustomPhraseParamsLanguageTag = "sy-SY"
	DeleteCustomPhraseParamsLanguageTagSzPL  DeleteCustomPhraseParamsLanguageTag = "sz-PL"
	DeleteCustomPhraseParamsLanguageTagTaIN  DeleteCustomPhraseParamsLanguageTag = "ta-IN"
	DeleteCustomPhraseParamsLanguageTagTeIN  DeleteCustomPhraseParamsLanguageTag = "te-IN"
	DeleteCustomPhraseParamsLanguageTagTgTJ  DeleteCustomPhraseParamsLanguageTag = "tg-TJ"
	DeleteCustomPhraseParamsLanguageTagTh    DeleteCustomPhraseParamsLanguageTag = "th"
	DeleteCustomPhraseParamsLanguageTagThTH  DeleteCustomPhraseParamsLanguageTag = "th-TH"
	DeleteCustomPhraseParamsLanguageTagTlPH  DeleteCustomPhraseParamsLanguageTag = "tl-PH"
	DeleteCustomPhraseParamsLanguageTagTr    DeleteCustomPhraseParamsLanguageTag = "tr"
	DeleteCustomPhraseParamsLanguageTagTrTR  DeleteCustomPhraseParamsLanguageTag = "tr-TR"
	DeleteCustomPhraseParamsLanguageTagTtRU  DeleteCustomPhraseParamsLanguageTag = "tt-RU"
	DeleteCustomPhraseParamsLanguageTagTzMA  DeleteCustomPhraseParamsLanguageTag = "tz-MA"
	DeleteCustomPhraseParamsLanguageTagUkUA  DeleteCustomPhraseParamsLanguageTag = "uk-UA"
	DeleteCustomPhraseParamsLanguageTagUrPK  DeleteCustomPhraseParamsLanguageTag = "ur-PK"
	DeleteCustomPhraseParamsLanguageTagUzUZ  DeleteCustomPhraseParamsLanguageTag = "uz-UZ"
	DeleteCustomPhraseParamsLanguageTagViVN  DeleteCustomPhraseParamsLanguageTag = "vi-VN"
	DeleteCustomPhraseParamsLanguageTagZh    DeleteCustomPhraseParamsLanguageTag = "zh"
	DeleteCustomPhraseParamsLanguageTagZhCN  DeleteCustomPhraseParamsLanguageTag = "zh-CN"
	DeleteCustomPhraseParamsLanguageTagZhHK  DeleteCustomPhraseParamsLanguageTag = "zh-HK"
	DeleteCustomPhraseParamsLanguageTagZhMO  DeleteCustomPhraseParamsLanguageTag = "zh-MO"
	DeleteCustomPhraseParamsLanguageTagZhTW  DeleteCustomPhraseParamsLanguageTag = "zh-TW"
	DeleteCustomPhraseParamsLanguageTagZzTR  DeleteCustomPhraseParamsLanguageTag = "zz-TR"
)

// Defines values for GetCustomPhraseParamsLanguageTag.
const (
	GetCustomPhraseParamsLanguageTagAfZA  GetCustomPhraseParamsLanguageTag = "af-ZA"
	GetCustomPhraseParamsLanguageTagAmET  GetCustomPhraseParamsLanguageTag = "am-ET"
	GetCustomPhraseParamsLanguageTagAr    GetCustomPhraseParamsLanguageTag = "ar"
	GetCustomPhraseParamsLanguageTagArAR  GetCustomPhraseParamsLanguageTag = "ar-AR"
	GetCustomPhraseParamsLanguageTagAsIN  GetCustomPhraseParamsLanguageTag = "as-IN"
	GetCustomPhraseParamsLanguageTagAzAZ  GetCustomPhraseParamsLanguageTag = "az-AZ"
	GetCustomPhraseParamsLanguageTagBeBY  GetCustomPhraseParamsLanguageTag = "be-BY"
	GetCustomPhraseParamsLanguageTagBgBG  GetCustomPhraseParamsLanguageTag = "bg-BG"
	GetCustomPhraseParamsLanguageTagBnIN  GetCustomPhraseParamsLanguageTag = "bn-IN"
	GetCustomPhraseParamsLanguageTagBrFR  GetCustomPhraseParamsLanguageTag = "br-FR"
	GetCustomPhraseParamsLanguageTagBsBA  GetCustomPhraseParamsLanguageTag = "bs-BA"
	GetCustomPhraseParamsLanguageTagCaES  GetCustomPhraseParamsLanguageTag = "ca-ES"
	GetCustomPhraseParamsLanguageTagCbIQ  GetCustomPhraseParamsLanguageTag = "cb-IQ"
	GetCustomPhraseParamsLanguageTagCoFR  GetCustomPhraseParamsLanguageTag = "co-FR"
	GetCustomPhraseParamsLanguageTagCsCZ  GetCustomPhraseParamsLanguageTag = "cs-CZ"
	GetCustomPhraseParamsLanguageTagCxPH  GetCustomPhraseParamsLanguageTag = "cx-PH"
	GetCustomPhraseParamsLanguageTagCyGB  GetCustomPhraseParamsLanguageTag = "cy-GB"
	GetCustomPhraseParamsLanguageTagDaDK  GetCustomPhraseParamsLanguageTag = "da-DK"
	GetCustomPhraseParamsLanguageTagDe    GetCustomPhraseParamsLanguageTag = "de"
	GetCustomPhraseParamsLanguageTagDeDE  GetCustomPhraseParamsLanguageTag = "de-DE"
	GetCustomPhraseParamsLanguageTagElGR  GetCustomPhraseParamsLanguageTag = "el-GR"
	GetCustomPhraseParamsLanguageTagEn    GetCustomPhraseParamsLanguageTag = "en"
	GetCustomPhraseParamsLanguageTagEnGB  GetCustomPhraseParamsLanguageTag = "en-GB"
	GetCustomPhraseParamsLanguageTagEnUS  GetCustomPhraseParamsLanguageTag = "en-US"
	GetCustomPhraseParamsLanguageTagEoEO  GetCustomPhraseParamsLanguageTag = "eo-EO"
	GetCustomPhraseParamsLanguageTagEs    GetCustomPhraseParamsLanguageTag = "es"
	GetCustomPhraseParamsLanguageTagEs419 GetCustomPhraseParamsLanguageTag = "es-419"
	GetCustomPhraseParamsLanguageTagEsES  GetCustomPhraseParamsLanguageTag = "es-ES"
	GetCustomPhraseParamsLanguageTagEtEE  GetCustomPhraseParamsLanguageTag = "et-EE"
	GetCustomPhraseParamsLanguageTagEuES  GetCustomPhraseParamsLanguageTag = "eu-ES"
	GetCustomPhraseParamsLanguageTagFaIR  GetCustomPhraseParamsLanguageTag = "fa-IR"
	GetCustomPhraseParamsLanguageTagFfNG  GetCustomPhraseParamsLanguageTag = "ff-NG"
	GetCustomPhraseParamsLanguageTagFi    GetCustomPhraseParamsLanguageTag = "fi"
	GetCustomPhraseParamsLanguageTagFiFI  GetCustomPhraseParamsLanguageTag = "fi-FI"
	GetCustomPhraseParamsLanguageTagFoFO  GetCustomPhraseParamsLanguageTag = "fo-FO"
	GetCustomPhraseParamsLanguageTagFr    GetCustomPhraseParamsLanguageTag = "fr"
	GetCustomPhraseParamsLanguageTagFrCA  GetCustomPhraseParamsLanguageTag = "fr-CA"
	GetCustomPhraseParamsLanguageTagFrFR  GetCustomPhraseParamsLanguageTag = "fr-FR"
	GetCustomPhraseParamsLanguageTagFyNL  GetCustomPhraseParamsLanguageTag = "fy-NL"
	GetCustomPhraseParamsLanguageTagGaIE  GetCustomPhraseParamsLanguageTag = "ga-IE"
	GetCustomPhraseParamsLanguageTagGlES  GetCustomPhraseParamsLanguageTag = "gl-ES"
	GetCustomPhraseParamsLanguageTagGnPY  GetCustomPhraseParamsLanguageTag = "gn-PY"
	GetCustomPhraseParamsLanguageTagGuIN  GetCustomPhraseParamsLanguageTag = "gu-IN"
	GetCustomPhraseParamsLanguageTagHaNG  GetCustomPhraseParamsLanguageTag = "ha-NG"
	GetCustomPhraseParamsLanguageTagHeIL  GetCustomPhraseParamsLanguageTag = "he-IL"
	GetCustomPhraseParamsLanguageTagHiIN  GetCustomPhraseParamsLanguageTag = "hi-IN"
	GetCustomPhraseParamsLanguageTagHrHR  GetCustomPhraseParamsLanguageTag = "hr-HR"
	GetCustomPhraseParamsLanguageTagHtHT  GetCustomPhraseParamsLanguageTag = "ht-HT"
	GetCustomPhraseParamsLanguageTagHuHU  GetCustomPhraseParamsLanguageTag = "hu-HU"
	GetCustomPhraseParamsLanguageTagHyAM  GetCustomPhraseParamsLanguageTag = "hy-AM"
	GetCustomPhraseParamsLanguageTagIdID  GetCustomPhraseParamsLanguageTag = "id-ID"
	GetCustomPhraseParamsLanguageTagIkUS  GetCustomPhraseParamsLanguageTag = "ik-US"
	GetCustomPhraseParamsLanguageTagIsIS  GetCustomPhraseParamsLanguageTag = "is-IS"
	GetCustomPhraseParamsLanguageTagIt    GetCustomPhraseParamsLanguageTag = "it"
	GetCustomPhraseParamsLanguageTagItIT  GetCustomPhraseParamsLanguageTag = "it-IT"
	GetCustomPhraseParamsLanguageTagIuCA  GetCustomPhraseParamsLanguageTag = "iu-CA"
	GetCustomPhraseParamsLanguageTagJa    GetCustomPhraseParamsLanguageTag = "ja"
	GetCustomPhraseParamsLanguageTagJaJP  GetCustomPhraseParamsLanguageTag = "ja-JP"
	GetCustomPhraseParamsLanguageTagJaKS  GetCustomPhraseParamsLanguageTag = "ja-KS"
	GetCustomPhraseParamsLanguageTagJvID  GetCustomPhraseParamsLanguageTag = "jv-ID"
	GetCustomPhraseParamsLanguageTagKaGE  GetCustomPhraseParamsLanguageTag = "ka-GE"
	GetCustomPhraseParamsLanguageTagKkKZ  GetCustomPhraseParamsLanguageTag = "kk-KZ"
	GetCustomPhraseParamsLanguageTagKmKH  GetCustomPhraseParamsLanguageTag = "km-KH"
	GetCustomPhraseParamsLanguageTagKnIN  GetCustomPhraseParamsLanguageTag = "kn-IN"
	GetCustomPhraseParamsLanguageTagKo    GetCustomPhraseParamsLanguageTag = "ko"
	GetCustomPhraseParamsLanguageTagKoKR  GetCustomPhraseParamsLanguageTag = "ko-KR"
	GetCustomPhraseParamsLanguageTagKuTR  GetCustomPhraseParamsLanguageTag = "ku-TR"
	GetCustomPhraseParamsLanguageTagKyKG  GetCustomPhraseParamsLanguageTag = "ky-KG"
	GetCustomPhraseParamsLanguageTagLoLA  GetCustomPhraseParamsLanguageTag = "lo-LA"
	GetCustomPhraseParamsLanguageTagLtLT  GetCustomPhraseParamsLanguageTag = "lt-LT"
	GetCustomPhraseParamsLanguageTagLvLV  GetCustomPhraseParamsLanguageTag = "lv-LV"
	GetCustomPhraseParamsLanguageTagMgMG  GetCustomPhraseParamsLanguageTag = "mg-MG"
	GetCustomPhraseParamsLanguageTagMkMK  GetCustomPhraseParamsLanguageTag = "mk-MK"
	GetCustomPhraseParamsLanguageTagMlIN  GetCustomPhraseParamsLanguageTag = "ml-IN"
	GetCustomPhraseParamsLanguageTagMnMN  GetCustomPhraseParamsLanguageTag = "mn-MN"
	GetCustomPhraseParamsLanguageTagMrIN  GetCustomPhraseParamsLanguageTag = "mr-IN"
	GetCustomPhraseParamsLanguageTagMsMY  GetCustomPhraseParamsLanguageTag = "ms-MY"
	GetCustomPhraseParamsLanguageTagMtMT  GetCustomPhraseParamsLanguageTag = "mt-MT"
	GetCustomPhraseParamsLanguageTagMyMM  GetCustomPhraseParamsLanguageTag = "my-MM"
	GetCustomPhraseParamsLanguageTagNbNO  GetCustomPhraseParamsLanguageTag = "nb-NO"
	GetCustomPhraseParamsLanguageTagNeNP  GetCustomPhraseParamsLanguageTag = "ne-NP"
	GetCustomPhraseParamsLanguageTagNl    GetCustomPhraseParamsLanguageTag = "nl"
	GetCustomPhraseParamsLanguageTagNlBE  GetCustomPhraseParamsLanguageTag = "nl-BE"
	GetCustomPhraseParamsLanguageTagNlNL  GetCustomPhraseParamsLanguageTag = "nl-NL"
	GetCustomPhraseParamsLanguageTagNnNO  GetCustomPhraseParamsLanguageTag = "nn-NO"
	GetCustomPhraseParamsLanguageTagOrIN  GetCustomPhraseParamsLanguageTag = "or-IN"
	GetCustomPhraseParamsLanguageTagPaIN  GetCustomPhraseParamsLanguageTag = "pa-IN"
	GetCustomPhraseParamsLanguageTagPlPL  GetCustomPhraseParamsLanguageTag = "pl-PL"
	GetCustomPhraseParamsLanguageTagPsAF  GetCustomPhraseParamsLanguageTag = "ps-AF"
	GetCustomPhraseParamsLanguageTagPt    GetCustomPhraseParamsLanguageTag = "pt"
	GetCustomPhraseParamsLanguageTagPtBR  GetCustomPhraseParamsLanguageTag = "pt-BR"
	GetCustomPhraseParamsLanguageTagPtPT  GetCustomPhraseParamsLanguageTag = "pt-PT"
	GetCustomPhraseParamsLanguageTagRoRO  GetCustomPhraseParamsLanguageTag = "ro-RO"
	GetCustomPhraseParamsLanguageTagRu    GetCustomPhraseParamsLanguageTag = "ru"
	GetCustomPhraseParamsLanguageTagRuRU  GetCustomPhraseParamsLanguageTag = "ru-RU"
	GetCustomPhraseParamsLanguageTagRwRW  GetCustomPhraseParamsLanguageTag = "rw-RW"
	GetCustomPhraseParamsLanguageTagScIT  GetCustomPhraseParamsLanguageTag = "sc-IT"
	GetCustomPhraseParamsLanguageTagSiLK  GetCustomPhraseParamsLanguageTag = "si-LK"
	GetCustomPhraseParamsLanguageTagSkSK  GetCustomPhraseParamsLanguageTag = "sk-SK"
	GetCustomPhraseParamsLanguageTagSlSI  GetCustomPhraseParamsLanguageTag = "sl-SI"
	GetCustomPhraseParamsLanguageTagSnZW  GetCustomPhraseParamsLanguageTag = "sn-ZW"
	GetCustomPhraseParamsLanguageTagSqAL  GetCustomPhraseParamsLanguageTag = "sq-AL"
	GetCustomPhraseParamsLanguageTagSrRS  GetCustomPhraseParamsLanguageTag = "sr-RS"
	GetCustomPhraseParamsLanguageTagSv    GetCustomPhraseParamsLanguageTag = "sv"
	GetCustomPhraseParamsLanguageTagSvSE  GetCustomPhraseParamsLanguageTag = "sv-SE"
	GetCustomPhraseParamsLanguageTagSwKE  GetCustomPhraseParamsLanguageTag = "sw-KE"
	GetCustomPhraseParamsLanguageTagSySY  GetCustomPhraseParamsLanguageTag = "sy-SY"
	GetCustomPhraseParamsLanguageTagSzPL  GetCustomPhraseParamsLanguageTag = "sz-PL"
	GetCustomPhraseParamsLanguageTagTaIN  GetCustomPhraseParamsLanguageTag = "ta-IN"
	GetCustomPhraseParamsLanguageTagTeIN  GetCustomPhraseParamsLanguageTag = "te-IN"
	GetCustomPhraseParamsLanguageTagTgTJ  GetCustomPhraseParamsLanguageTag = "tg-TJ"
	GetCustomPhraseParamsLanguageTagTh    GetCustomPhraseParamsLanguageTag = "th"
	GetCustomPhraseParamsLanguageTagThTH  GetCustomPhraseParamsLanguageTag = "th-TH"
	GetCustomPhraseParamsLanguageTagTlPH  GetCustomPhraseParamsLanguageTag = "tl-PH"
	GetCustomPhraseParamsLanguageTagTr    GetCustomPhraseParamsLanguageTag = "tr"
	GetCustomPhraseParamsLanguageTagTrTR  GetCustomPhraseParamsLanguageTag = "tr-TR"
	GetCustomPhraseParamsLanguageTagTtRU  GetCustomPhraseParamsLanguageTag = "tt-RU"
	GetCustomPhraseParamsLanguageTagTzMA  GetCustomPhraseParamsLanguageTag = "tz-MA"
	GetCustomPhraseParamsLanguageTagUkUA  GetCustomPhraseParamsLanguageTag = "uk-UA"
	GetCustomPhraseParamsLanguageTagUrPK  GetCustomPhraseParamsLanguageTag = "ur-PK"
	GetCustomPhraseParamsLanguageTagUzUZ  GetCustomPhraseParamsLanguageTag = "uz-UZ"
	GetCustomPhraseParamsLanguageTagViVN  GetCustomPhraseParamsLanguageTag = "vi-VN"
	GetCustomPhraseParamsLanguageTagZh    GetCustomPhraseParamsLanguageTag = "zh"
	GetCustomPhraseParamsLanguageTagZhCN  GetCustomPhraseParamsLanguageTag = "zh-CN"
	GetCustomPhraseParamsLanguageTagZhHK  GetCustomPhraseParamsLanguageTag = "zh-HK"
	GetCustomPhraseParamsLanguageTagZhMO  GetCustomPhraseParamsLanguageTag = "zh-MO"
	GetCustomPhraseParamsLanguageTagZhTW  GetCustomPhraseParamsLanguageTag = "zh-TW"
	GetCustomPhraseParamsLanguageTagZzTR  GetCustomPhraseParamsLanguageTag = "zz-TR"
)

// Defines values for ReplaceCustomPhraseParamsLanguageTag.
const (
	ReplaceCustomPhraseParamsLanguageTagAfZA  ReplaceCustomPhraseParamsLanguageTag = "af-ZA"
	ReplaceCustomPhraseParamsLanguageTagAmET  ReplaceCustomPhraseParamsLanguageTag = "am-ET"
	ReplaceCustomPhraseParamsLanguageTagAr    ReplaceCustomPhraseParamsLanguageTag = "ar"
	ReplaceCustomPhraseParamsLanguageTagArAR  ReplaceCustomPhraseParamsLanguageTag = "ar-AR"
	ReplaceCustomPhraseParamsLanguageTagAsIN  ReplaceCustomPhraseParamsLanguageTag = "as-IN"
	ReplaceCustomPhraseParamsLanguageTagAzAZ  ReplaceCustomPhraseParamsLanguageTag = "az-AZ"
	ReplaceCustomPhraseParamsLanguageTagBeBY  ReplaceCustomPhraseParamsLanguageTag = "be-BY"
	ReplaceCustomPhraseParamsLanguageTagBgBG  ReplaceCustomPhraseParamsLanguageTag = "bg-BG"
	ReplaceCustomPhraseParamsLanguageTagBnIN  ReplaceCustomPhraseParamsLanguageTag = "bn-IN"
	ReplaceCustomPhraseParamsLanguageTagBrFR  ReplaceCustomPhraseParamsLanguageTag = "br-FR"
	ReplaceCustomPhraseParamsLanguageTagBsBA  ReplaceCustomPhraseParamsLanguageTag = "bs-BA"
	ReplaceCustomPhraseParamsLanguageTagCaES  ReplaceCustomPhraseParamsLanguageTag = "ca-ES"
	ReplaceCustomPhraseParamsLanguageTagCbIQ  ReplaceCustomPhraseParamsLanguageTag = "cb-IQ"
	ReplaceCustomPhraseParamsLanguageTagCoFR  ReplaceCustomPhraseParamsLanguageTag = "co-FR"
	ReplaceCustomPhraseParamsLanguageTagCsCZ  ReplaceCustomPhraseParamsLanguageTag = "cs-CZ"
	ReplaceCustomPhraseParamsLanguageTagCxPH  ReplaceCustomPhraseParamsLanguageTag = "cx-PH"
	ReplaceCustomPhraseParamsLanguageTagCyGB  ReplaceCustomPhraseParamsLanguageTag = "cy-GB"
	ReplaceCustomPhraseParamsLanguageTagDaDK  ReplaceCustomPhraseParamsLanguageTag = "da-DK"
	ReplaceCustomPhraseParamsLanguageTagDe    ReplaceCustomPhraseParamsLanguageTag = "de"
	ReplaceCustomPhraseParamsLanguageTagDeDE  ReplaceCustomPhraseParamsLanguageTag = "de-DE"
	ReplaceCustomPhraseParamsLanguageTagElGR  ReplaceCustomPhraseParamsLanguageTag = "el-GR"
	ReplaceCustomPhraseParamsLanguageTagEn    ReplaceCustomPhraseParamsLanguageTag = "en"
	ReplaceCustomPhraseParamsLanguageTagEnGB  ReplaceCustomPhraseParamsLanguageTag = "en-GB"
	ReplaceCustomPhraseParamsLanguageTagEnUS  ReplaceCustomPhraseParamsLanguageTag = "en-US"
	ReplaceCustomPhraseParamsLanguageTagEoEO  ReplaceCustomPhraseParamsLanguageTag = "eo-EO"
	ReplaceCustomPhraseParamsLanguageTagEs    ReplaceCustomPhraseParamsLanguageTag = "es"
	ReplaceCustomPhraseParamsLanguageTagEs419 ReplaceCustomPhraseParamsLanguageTag = "es-419"
	ReplaceCustomPhraseParamsLanguageTagEsES  ReplaceCustomPhraseParamsLanguageTag = "es-ES"
	ReplaceCustomPhraseParamsLanguageTagEtEE  ReplaceCustomPhraseParamsLanguageTag = "et-EE"
	ReplaceCustomPhraseParamsLanguageTagEuES  ReplaceCustomPhraseParamsLanguageTag = "eu-ES"
	ReplaceCustomPhraseParamsLanguageTagFaIR  ReplaceCustomPhraseParamsLanguageTag = "fa-IR"
	ReplaceCustomPhraseParamsLanguageTagFfNG  ReplaceCustomPhraseParamsLanguageTag = "ff-NG"
	ReplaceCustomPhraseParamsLanguageTagFi    ReplaceCustomPhraseParamsLanguageTag = "fi"
	ReplaceCustomPhraseParamsLanguageTagFiFI  ReplaceCustomPhraseParamsLanguageTag = "fi-FI"
	ReplaceCustomPhraseParamsLanguageTagFoFO  ReplaceCustomPhraseParamsLanguageTag = "fo-FO"
	ReplaceCustomPhraseParamsLanguageTagFr    ReplaceCustomPhraseParamsLanguageTag = "fr"
	ReplaceCustomPhraseParamsLanguageTagFrCA  ReplaceCustomPhraseParamsLanguageTag = "fr-CA"
	ReplaceCustomPhraseParamsLanguageTagFrFR  ReplaceCustomPhraseParamsLanguageTag = "fr-FR"
	ReplaceCustomPhraseParamsLanguageTagFyNL  ReplaceCustomPhraseParamsLanguageTag = "fy-NL"
	ReplaceCustomPhraseParamsLanguageTagGaIE  ReplaceCustomPhraseParamsLanguageTag = "ga-IE"
	ReplaceCustomPhraseParamsLanguageTagGlES  ReplaceCustomPhraseParamsLanguageTag = "gl-ES"
	ReplaceCustomPhraseParamsLanguageTagGnPY  ReplaceCustomPhraseParamsLanguageTag = "gn-PY"
	ReplaceCustomPhraseParamsLanguageTagGuIN  ReplaceCustomPhraseParamsLanguageTag = "gu-IN"
	ReplaceCustomPhraseParamsLanguageTagHaNG  ReplaceCustomPhraseParamsLanguageTag = "ha-NG"
	ReplaceCustomPhraseParamsLanguageTagHeIL  ReplaceCustomPhraseParamsLanguageTag = "he-IL"
	ReplaceCustomPhraseParamsLanguageTagHiIN  ReplaceCustomPhraseParamsLanguageTag = "hi-IN"
	ReplaceCustomPhraseParamsLanguageTagHrHR  ReplaceCustomPhraseParamsLanguageTag = "hr-HR"
	ReplaceCustomPhraseParamsLanguageTagHtHT  ReplaceCustomPhraseParamsLanguageTag = "ht-HT"
	ReplaceCustomPhraseParamsLanguageTagHuHU  ReplaceCustomPhraseParamsLanguageTag = "hu-HU"
	ReplaceCustomPhraseParamsLanguageTagHyAM  ReplaceCustomPhraseParamsLanguageTag = "hy-AM"
	ReplaceCustomPhraseParamsLanguageTagIdID  ReplaceCustomPhraseParamsLanguageTag = "id-ID"
	ReplaceCustomPhraseParamsLanguageTagIkUS  ReplaceCustomPhraseParamsLanguageTag = "ik-US"
	ReplaceCustomPhraseParamsLanguageTagIsIS  ReplaceCustomPhraseParamsLanguageTag = "is-IS"
	ReplaceCustomPhraseParamsLanguageTagIt    ReplaceCustomPhraseParamsLanguageTag = "it"
	ReplaceCustomPhraseParamsLanguageTagItIT  ReplaceCustomPhraseParamsLanguageTag = "it-IT"
	ReplaceCustomPhraseParamsLanguageTagIuCA  ReplaceCustomPhraseParamsLanguageTag = "iu-CA"
	ReplaceCustomPhraseParamsLanguageTagJa    ReplaceCustomPhraseParamsLanguageTag = "ja"
	ReplaceCustomPhraseParamsLanguageTagJaJP  ReplaceCustomPhraseParamsLanguageTag = "ja-JP"
	ReplaceCustomPhraseParamsLanguageTagJaKS  ReplaceCustomPhraseParamsLanguageTag = "ja-KS"
	ReplaceCustomPhraseParamsLanguageTagJvID  ReplaceCustomPhraseParamsLanguageTag = "jv-ID"
	ReplaceCustomPhraseParamsLanguageTagKaGE  ReplaceCustomPhraseParamsLanguageTag = "ka-GE"
	ReplaceCustomPhraseParamsLanguageTagKkKZ  ReplaceCustomPhraseParamsLanguageTag = "kk-KZ"
	ReplaceCustomPhraseParamsLanguageTagKmKH  ReplaceCustomPhraseParamsLanguageTag = "km-KH"
	ReplaceCustomPhraseParamsLanguageTagKnIN  ReplaceCustomPhraseParamsLanguageTag = "kn-IN"
	ReplaceCustomPhraseParamsLanguageTagKo    ReplaceCustomPhraseParamsLanguageTag = "ko"
	ReplaceCustomPhraseParamsLanguageTagKoKR  ReplaceCustomPhraseParamsLanguageTag = "ko-KR"
	ReplaceCustomPhraseParamsLanguageTagKuTR  ReplaceCustomPhraseParamsLanguageTag = "ku-TR"
	ReplaceCustomPhraseParamsLanguageTagKyKG  ReplaceCustomPhraseParamsLanguageTag = "ky-KG"
	ReplaceCustomPhraseParamsLanguageTagLoLA  ReplaceCustomPhraseParamsLanguageTag = "lo-LA"
	ReplaceCustomPhraseParamsLanguageTagLtLT  ReplaceCustomPhraseParamsLanguageTag = "lt-LT"
	ReplaceCustomPhraseParamsLanguageTagLvLV  ReplaceCustomPhraseParamsLanguageTag = "lv-LV"
	ReplaceCustomPhraseParamsLanguageTagMgMG  ReplaceCustomPhraseParamsLanguageTag = "mg-MG"
	ReplaceCustomPhraseParamsLanguageTagMkMK  ReplaceCustomPhraseParamsLanguageTag = "mk-MK"
	ReplaceCustomPhraseParamsLanguageTagMlIN  ReplaceCustomPhraseParamsLanguageTag = "ml-IN"
	ReplaceCustomPhraseParamsLanguageTagMnMN  ReplaceCustomPhraseParamsLanguageTag = "mn-MN"
	ReplaceCustomPhraseParamsLanguageTagMrIN  ReplaceCustomPhraseParamsLanguageTag = "mr-IN"
	ReplaceCustomPhraseParamsLanguageTagMsMY  ReplaceCustomPhraseParamsLanguageTag = "ms-MY"
	ReplaceCustomPhraseParamsLanguageTagMtMT  ReplaceCustomPhraseParamsLanguageTag = "mt-MT"
	ReplaceCustomPhraseParamsLanguageTagMyMM  ReplaceCustomPhraseParamsLanguageTag = "my-MM"
	ReplaceCustomPhraseParamsLanguageTagNbNO  ReplaceCustomPhraseParamsLanguageTag = "nb-NO"
	ReplaceCustomPhraseParamsLanguageTagNeNP  ReplaceCustomPhraseParamsLanguageTag = "ne-NP"
	ReplaceCustomPhraseParamsLanguageTagNl    ReplaceCustomPhraseParamsLanguageTag = "nl"
	ReplaceCustomPhraseParamsLanguageTagNlBE  ReplaceCustomPhraseParamsLanguageTag = "nl-BE"
	ReplaceCustomPhraseParamsLanguageTagNlNL  ReplaceCustomPhraseParamsLanguageTag = "nl-NL"
	ReplaceCustomPhraseParamsLanguageTagNnNO  ReplaceCustomPhraseParamsLanguageTag = "nn-NO"
	ReplaceCustomPhraseParamsLanguageTagOrIN  ReplaceCustomPhraseParamsLanguageTag = "or-IN"
	ReplaceCustomPhraseParamsLanguageTagPaIN  ReplaceCustomPhraseParamsLanguageTag = "pa-IN"
	ReplaceCustomPhraseParamsLanguageTagPlPL  ReplaceCustomPhraseParamsLanguageTag = "pl-PL"
	ReplaceCustomPhraseParamsLanguageTagPsAF  ReplaceCustomPhraseParamsLanguageTag = "ps-AF"
	ReplaceCustomPhraseParamsLanguageTagPt    ReplaceCustomPhraseParamsLanguageTag = "pt"
	ReplaceCustomPhraseParamsLanguageTagPtBR  ReplaceCustomPhraseParamsLanguageTag = "pt-BR"
	ReplaceCustomPhraseParamsLanguageTagPtPT  ReplaceCustomPhraseParamsLanguageTag = "pt-PT"
	ReplaceCustomPhraseParamsLanguageTagRoRO  ReplaceCustomPhraseParamsLanguageTag = "ro-RO"
	ReplaceCustomPhraseParamsLanguageTagRu    ReplaceCustomPhraseParamsLanguageTag = "ru"
	ReplaceCustomPhraseParamsLanguageTagRuRU  ReplaceCustomPhraseParamsLanguageTag = "ru-RU"
	ReplaceCustomPhraseParamsLanguageTagRwRW  ReplaceCustomPhraseParamsLanguageTag = "rw-RW"
	ReplaceCustomPhraseParamsLanguageTagScIT  ReplaceCustomPhraseParamsLanguageTag = "sc-IT"
	ReplaceCustomPhraseParamsLanguageTagSiLK  ReplaceCustomPhraseParamsLanguageTag = "si-LK"
	ReplaceCustomPhraseParamsLanguageTagSkSK  ReplaceCustomPhraseParamsLanguageTag = "sk-SK"
	ReplaceCustomPhraseParamsLanguageTagSlSI  ReplaceCustomPhraseParamsLanguageTag = "sl-SI"
	ReplaceCustomPhraseParamsLanguageTagSnZW  ReplaceCustomPhraseParamsLanguageTag = "sn-ZW"
	ReplaceCustomPhraseParamsLanguageTagSqAL  ReplaceCustomPhraseParamsLanguageTag = "sq-AL"
	ReplaceCustomPhraseParamsLanguageTagSrRS  ReplaceCustomPhraseParamsLanguageTag = "sr-RS"
	ReplaceCustomPhraseParamsLanguageTagSv    ReplaceCustomPhraseParamsLanguageTag = "sv"
	ReplaceCustomPhraseParamsLanguageTagSvSE  ReplaceCustomPhraseParamsLanguageTag = "sv-SE"
	ReplaceCustomPhraseParamsLanguageTagSwKE  ReplaceCustomPhraseParamsLanguageTag = "sw-KE"
	ReplaceCustomPhraseParamsLanguageTagSySY  ReplaceCustomPhraseParamsLanguageTag = "sy-SY"
	ReplaceCustomPhraseParamsLanguageTagSzPL  ReplaceCustomPhraseParamsLanguageTag = "sz-PL"
	ReplaceCustomPhraseParamsLanguageTagTaIN  ReplaceCustomPhraseParamsLanguageTag = "ta-IN"
	ReplaceCustomPhraseParamsLanguageTagTeIN  ReplaceCustomPhraseParamsLanguageTag = "te-IN"
	ReplaceCustomPhraseParamsLanguageTagTgTJ  ReplaceCustomPhraseParamsLanguageTag = "tg-TJ"
	ReplaceCustomPhraseParamsLanguageTagTh    ReplaceCustomPhraseParamsLanguageTag = "th"
	ReplaceCustomPhraseParamsLanguageTagThTH  ReplaceCustomPhraseParamsLanguageTag = "th-TH"
	ReplaceCustomPhraseParamsLanguageTagTlPH  ReplaceCustomPhraseParamsLanguageTag = "tl-PH"
	ReplaceCustomPhraseParamsLanguageTagTr    ReplaceCustomPhraseParamsLanguageTag = "tr"
	ReplaceCustomPhraseParamsLanguageTagTrTR  ReplaceCustomPhraseParamsLanguageTag = "tr-TR"
	ReplaceCustomPhraseParamsLanguageTagTtRU  ReplaceCustomPhraseParamsLanguageTag = "tt-RU"
	ReplaceCustomPhraseParamsLanguageTagTzMA  ReplaceCustomPhraseParamsLanguageTag = "tz-MA"
	ReplaceCustomPhraseParamsLanguageTagUkUA  ReplaceCustomPhraseParamsLanguageTag = "uk-UA"
	ReplaceCustomPhraseParamsLanguageTagUrPK  ReplaceCustomPhraseParamsLanguageTag = "ur-PK"
	ReplaceCustomPhraseParamsLanguageTagUzUZ  ReplaceCustomPhraseParamsLanguageTag = "uz-UZ"
	ReplaceCustomPhraseParamsLanguageTagViVN  ReplaceCustomPhraseParamsLanguageTag = "vi-VN"
	ReplaceCustomPhraseParamsLanguageTagZh    ReplaceCustomPhraseParamsLanguageTag = "zh"
	ReplaceCustomPhraseParamsLanguageTagZhCN  ReplaceCustomPhraseParamsLanguageTag = "zh-CN"
	ReplaceCustomPhraseParamsLanguageTagZhHK  ReplaceCustomPhraseParamsLanguageTag = "zh-HK"
	ReplaceCustomPhraseParamsLanguageTagZhMO  ReplaceCustomPhraseParamsLanguageTag = "zh-MO"
	ReplaceCustomPhraseParamsLanguageTagZhTW  ReplaceCustomPhraseParamsLanguageTag = "zh-TW"
	ReplaceCustomPhraseParamsLanguageTagZzTR  ReplaceCustomPhraseParamsLanguageTag = "zz-TR"
)

// Defines values for DeleteEmailTemplatesParamsTemplateType.
const (
	DeleteEmailTemplatesParamsTemplateTypeBindNewIdentifier        DeleteEmailTemplatesParamsTemplateType = "BindNewIdentifier"
	DeleteEmailTemplatesParamsTemplateTypeForgotPassword           DeleteEmailTemplatesParamsTemplateType = "ForgotPassword"
	DeleteEmailTemplatesParamsTemplateTypeGeneric                  DeleteEmailTemplatesParamsTemplateType = "Generic"
	DeleteEmailTemplatesParamsTemplateTypeOrganizationInvitation   DeleteEmailTemplatesParamsTemplateType = "OrganizationInvitation"
	DeleteEmailTemplatesParamsTemplateTypeRegister                 DeleteEmailTemplatesParamsTemplateType = "Register"
	DeleteEmailTemplatesParamsTemplateTypeSignIn                   DeleteEmailTemplatesParamsTemplateType = "SignIn"
	DeleteEmailTemplatesParamsTemplateTypeUserPermissionValidation DeleteEmailTemplatesParamsTemplateType = "UserPermissionValidation"
)

// Defines values for ListEmailTemplatesParamsTemplateType.
const (
	ListEmailTemplatesParamsTemplateTypeBindNewIdentifier        ListEmailTemplatesParamsTemplateType = "BindNewIdentifier"
	ListEmailTemplatesParamsTemplateTypeForgotPassword           ListEmailTemplatesParamsTemplateType = "ForgotPassword"
	ListEmailTemplatesParamsTemplateTypeGeneric                  ListEmailTemplatesParamsTemplateType = "Generic"
	ListEmailTemplatesParamsTemplateTypeOrganizationInvitation   ListEmailTemplatesParamsTemplateType = "OrganizationInvitation"
	ListEmailTemplatesParamsTemplateTypeRegister                 ListEmailTemplatesParamsTemplateType = "Register"
	ListEmailTemplatesParamsTemplateTypeSignIn                   ListEmailTemplatesParamsTemplateType = "SignIn"
	ListEmailTemplatesParamsTemplateTypeUserPermissionValidation ListEmailTemplatesParamsTemplateType = "UserPermissionValidation"
)

// Defines values for ReplaceEmailTemplatesJSONBodyTemplatesTemplateType.
const (
	ReplaceEmailTemplatesJSONBodyTemplatesTemplateTypeBindNewIdentifier        ReplaceEmailTemplatesJSONBodyTemplatesTemplateType = "BindNewIdentifier"
	ReplaceEmailTemplatesJSONBodyTemplatesTemplateTypeForgotPassword           ReplaceEmailTemplatesJSONBodyTemplatesTemplateType = "ForgotPassword"
	ReplaceEmailTemplatesJSONBodyTemplatesTemplateTypeGeneric                  ReplaceEmailTemplatesJSONBodyTemplatesTemplateType = "Generic"
	ReplaceEmailTemplatesJSONBodyTemplatesTemplateTypeOrganizationInvitation   ReplaceEmailTemplatesJSONBodyTemplatesTemplateType = "OrganizationInvitation"
	ReplaceEmailTemplatesJSONBodyTemplatesTemplateTypeRegister                 ReplaceEmailTemplatesJSONBodyTemplatesTemplateType = "Register"
	ReplaceEmailTemplatesJSONBodyTemplatesTemplateTypeSignIn                   ReplaceEmailTemplatesJSONBodyTemplatesTemplateType = "SignIn"
	ReplaceEmailTemplatesJSONBodyTemplatesTemplateTypeUserPermissionValidation ReplaceEmailTemplatesJSONBodyTemplatesTemplateType = "UserPermissionValidation"
)

// Defines values for InitInteractionJSONBodyInteractionEvent.
const (
	InitInteractionJSONBodyInteractionEventForgotPassword InitInteractionJSONBodyInteractionEvent = "ForgotPassword"
	InitInteractionJSONBodyInteractionEventRegister       InitInteractionJSONBodyInteractionEvent = "Register"
	InitInteractionJSONBodyInteractionEventSignIn         InitInteractionJSONBodyInteractionEvent = "SignIn"
)

// Defines values for UpdateInteractionEventJSONBodyInteractionEvent.
const (
	UpdateInteractionEventJSONBodyInteractionEventForgotPassword UpdateInteractionEventJSONBodyInteractionEvent = "ForgotPassword"
	UpdateInteractionEventJSONBodyInteractionEventRegister       UpdateInteractionEventJSONBodyInteractionEvent = "Register"
	UpdateInteractionEventJSONBodyInteractionEventSignIn         UpdateInteractionEventJSONBodyInteractionEvent = "SignIn"
)

// Defines values for BindMfaVerificationJSONBodyType.
const (
	BindMfaVerificationJSONBodyTypeBackupCode BindMfaVerificationJSONBodyType = "BackupCode"
	BindMfaVerificationJSONBodyTypeTotp       BindMfaVerificationJSONBodyType = "Totp"
	BindMfaVerificationJSONBodyTypeWebAuthn   BindMfaVerificationJSONBodyType = "WebAuthn"
)

// Defines values for CreatePasswordVerificationJSONBodyIdentifierType.
const (
	CreatePasswordVerificationJSONBodyIdentifierTypeEmail    CreatePasswordVerificationJSONBodyIdentifierType = "email"
	CreatePasswordVerificationJSONBodyIdentifierTypePhone    CreatePasswordVerificationJSONBodyIdentifierType = "phone"
	CreatePasswordVerificationJSONBodyIdentifierTypeUsername CreatePasswordVerificationJSONBodyIdentifierType = "username"
)

// Defines values for CreateAndSendVerificationCodeJSONBodyIdentifierType.
const (
	CreateAndSendVerificationCodeJSONBodyIdentifierTypeEmail CreateAndSendVerificationCodeJSONBodyIdentifierType = "email"
	CreateAndSendVerificationCodeJSONBodyIdentifierTypePhone CreateAndSendVerificationCodeJSONBodyIdentifierType = "phone"
)

// Defines values for CreateAndSendVerificationCodeJSONBodyInteractionEvent.
const (
	CreateAndSendVerificationCodeJSONBodyInteractionEventForgotPassword CreateAndSendVerificationCodeJSONBodyInteractionEvent = "ForgotPassword"
	CreateAndSendVerificationCodeJSONBodyInteractionEventRegister       CreateAndSendVerificationCodeJSONBodyInteractionEvent = "Register"
	CreateAndSendVerificationCodeJSONBodyInteractionEventSignIn         CreateAndSendVerificationCodeJSONBodyInteractionEvent = "SignIn"
)

// Defines values for VerifyVerificationCodeVerificationJSONBodyIdentifierType.
const (
	VerifyVerificationCodeVerificationJSONBodyIdentifierTypeEmail VerifyVerificationCodeVerificationJSONBodyIdentifierType = "email"
	VerifyVerificationCodeVerificationJSONBodyIdentifierTypePhone VerifyVerificationCodeVerificationJSONBodyIdentifierType = "phone"
)

// Defines values for VerifyWebAuthnAuthenticationVerificationJSONBodyPayloadAuthenticatorAttachment.
const (
	VerifyWebAuthnAuthenticationVerificationJSONBodyPayloadAuthenticatorAttachmentCrossPlatform VerifyWebAuthnAuthenticationVerificationJSONBodyPayloadAuthenticatorAttachment = "cross-platform"
	VerifyWebAuthnAuthenticationVerificationJSONBodyPayloadAuthenticatorAttachmentPlatform      VerifyWebAuthnAuthenticationVerificationJSONBodyPayloadAuthenticatorAttachment = "platform"
)

// Defines values for VerifyWebAuthnRegistrationVerificationJSONBodyPayloadAuthenticatorAttachment.
const (
	VerifyWebAuthnRegistrationVerificationJSONBodyPayloadAuthenticatorAttachmentCrossPlatform VerifyWebAuthnRegistrationVerificationJSONBodyPayloadAuthenticatorAttachment = "cross-platform"
	VerifyWebAuthnRegistrationVerificationJSONBodyPayloadAuthenticatorAttachmentPlatform      VerifyWebAuthnRegistrationVerificationJSONBodyPayloadAuthenticatorAttachment = "platform"
)

// Defines values for VerifyWebAuthnRegistrationVerificationJSONBodyPayloadResponseTransports.
const (
	VerifyWebAuthnRegistrationVerificationJSONBodyPayloadResponseTransportsBle       VerifyWebAuthnRegistrationVerificationJSONBodyPayloadResponseTransports = "ble"
	VerifyWebAuthnRegistrationVerificationJSONBodyPayloadResponseTransportsCable     VerifyWebAuthnRegistrationVerificationJSONBodyPayloadResponseTransports = "cable"
	VerifyWebAuthnRegistrationVerificationJSONBodyPayloadResponseTransportsHybrid    VerifyWebAuthnRegistrationVerificationJSONBodyPayloadResponseTransports = "hybrid"
	VerifyWebAuthnRegistrationVerificationJSONBodyPayloadResponseTransportsInternal  VerifyWebAuthnRegistrationVerificationJSONBodyPayloadResponseTransports = "internal"
	VerifyWebAuthnRegistrationVerificationJSONBodyPayloadResponseTransportsNfc       VerifyWebAuthnRegistrationVerificationJSONBodyPayloadResponseTransports = "nfc"
	VerifyWebAuthnRegistrationVerificationJSONBodyPayloadResponseTransportsSmartCard VerifyWebAuthnRegistrationVerificationJSONBodyPayloadResponseTransports = "smart-card"
	VerifyWebAuthnRegistrationVerificationJSONBodyPayloadResponseTransportsUsb       VerifyWebAuthnRegistrationVerificationJSONBodyPayloadResponseTransports = "usb"
)

// Defines values for CreateHookJSONBodyEvent.
const (
	CreateHookJSONBodyEventOrganizationCreated           CreateHookJSONBodyEvent = "Organization.Created"
	CreateHookJSONBodyEventOrganizationDataUpdated       CreateHookJSONBodyEvent = "Organization.Data.Updated"
	CreateHookJSONBodyEventOrganizationDeleted           CreateHookJSONBodyEvent = "Organization.Deleted"
	CreateHookJSONBodyEventOrganizationMembershipUpdated CreateHookJSONBodyEvent = "Organization.Membership.Updated"
	CreateHookJSONBodyEventOrganizationRoleCreated       CreateHookJSONBodyEvent = "OrganizationRole.Created"
	CreateHookJSONBodyEventOrganizationRoleDataUpdated   CreateHookJSONBodyEvent = "OrganizationRole.Data.Updated"
	CreateHookJSONBodyEventOrganizationRoleDeleted       CreateHookJSONBodyEvent = "OrganizationRole.Deleted"
	CreateHookJSONBodyEventOrganizationRoleScopesUpdated CreateHookJSONBodyEvent = "OrganizationRole.Scopes.Updated"
	CreateHookJSONBodyEventOrganizationScopeCreated      CreateHookJSONBodyEvent = "OrganizationScope.Created"
	CreateHookJSONBodyEventOrganizationScopeDataUpdated  CreateHookJSONBodyEvent = "OrganizationScope.Data.Updated"
	CreateHookJSONBodyEventOrganizationScopeDeleted      CreateHookJSONBodyEvent = "OrganizationScope.Deleted"
	CreateHookJSONBodyEventPostRegister                  CreateHookJSONBodyEvent = "PostRegister"
	CreateHookJSONBodyEventPostResetPassword             CreateHookJSONBodyEvent = "PostResetPassword"
	CreateHookJSONBodyEventPostSignIn                    CreateHookJSONBodyEvent = "PostSignIn"
	CreateHookJSONBodyEventRoleCreated                   CreateHookJSONBodyEvent = "Role.Created"
	CreateHookJSONBodyEventRoleDataUpdated               CreateHookJSONBodyEvent = "Role.Data.Updated"
	CreateHookJSONBodyEventRoleDeleted                   CreateHookJSONBodyEvent = "Role.Deleted"
	CreateHookJSONBodyEventRoleScopesUpdated             CreateHookJSONBodyEvent = "Role.Scopes.Updated"
	CreateHookJSONBodyEventScopeCreated                  CreateHookJSONBodyEvent = "Scope.Created"
	CreateHookJSONBodyEventScopeDataUpdated              CreateHookJSONBodyEvent = "Scope.Data.Updated"
	CreateHookJSONBodyEventScopeDeleted                  CreateHookJSONBodyEvent = "Scope.Deleted"
	CreateHookJSONBodyEventUserCreated                   CreateHookJSONBodyEvent = "User.Created"
	CreateHookJSONBodyEventUserDataUpdated               CreateHookJSONBodyEvent = "User.Data.Updated"
	CreateHookJSONBodyEventUserDeleted                   CreateHookJSONBodyEvent = "User.Deleted"
	CreateHookJSONBodyEventUserSuspensionStatusUpdated   CreateHookJSONBodyEvent = "User.SuspensionStatus.Updated"
)

// Defines values for CreateHookJSONBodyEvents.
const (
	CreateHookJSONBodyEventsOrganizationCreated           CreateHookJSONBodyEvents = "Organization.Created"
	CreateHookJSONBodyEventsOrganizationDataUpdated       CreateHookJSONBodyEvents = "Organization.Data.Updated"
	CreateHookJSONBodyEventsOrganizationDeleted           CreateHookJSONBodyEvents = "Organization.Deleted"
	CreateHookJSONBodyEventsOrganizationMembershipUpdated CreateHookJSONBodyEvents = "Organization.Membership.Updated"
	CreateHookJSONBodyEventsOrganizationRoleCreated       CreateHookJSONBodyEvents = "OrganizationRole.Created"
	CreateHookJSONBodyEventsOrganizationRoleDataUpdated   CreateHookJSONBodyEvents = "OrganizationRole.Data.Updated"
	CreateHookJSONBodyEventsOrganizationRoleDeleted       CreateHookJSONBodyEvents = "OrganizationRole.Deleted"
	CreateHookJSONBodyEventsOrganizationRoleScopesUpdated CreateHookJSONBodyEvents = "OrganizationRole.Scopes.Updated"
	CreateHookJSONBodyEventsOrganizationScopeCreated      CreateHookJSONBodyEvents = "OrganizationScope.Created"
	CreateHookJSONBodyEventsOrganizationScopeDataUpdated  CreateHookJSONBodyEvents = "OrganizationScope.Data.Updated"
	CreateHookJSONBodyEventsOrganizationScopeDeleted      CreateHookJSONBodyEvents = "OrganizationScope.Deleted"
	CreateHookJSONBodyEventsPostRegister                  CreateHookJSONBodyEvents = "PostRegister"
	CreateHookJSONBodyEventsPostResetPassword             CreateHookJSONBodyEvents = "PostResetPassword"
	CreateHookJSONBodyEventsPostSignIn                    CreateHookJSONBodyEvents = "PostSignIn"
	CreateHookJSONBodyEventsRoleCreated                   CreateHookJSONBodyEvents = "Role.Created"
	CreateHookJSONBodyEventsRoleDataUpdated               CreateHookJSONBodyEvents = "Role.Data.Updated"
	CreateHookJSONBodyEventsRoleDeleted                   CreateHookJSONBodyEvents = "Role.Deleted"
	CreateHookJSONBodyEventsRoleScopesUpdated             CreateHookJSONBodyEvents = "Role.Scopes.Updated"
	CreateHookJSONBodyEventsScopeCreated                  CreateHookJSONBodyEvents = "Scope.Created"
	CreateHookJSONBodyEventsScopeDataUpdated              CreateHookJSONBodyEvents = "Scope.Data.Updated"
	CreateHookJSONBodyEventsScopeDeleted                  CreateHookJSONBodyEvents = "Scope.Deleted"
	CreateHookJSONBodyEventsUserCreated                   CreateHookJSONBodyEvents = "User.Created"
	CreateHookJSONBodyEventsUserDataUpdated               CreateHookJSONBodyEvents = "User.Data.Updated"
	CreateHookJSONBodyEventsUserDeleted                   CreateHookJSONBodyEvents = "User.Deleted"
	CreateHookJSONBodyEventsUserSuspensionStatusUpdated   CreateHookJSONBodyEvents = "User.SuspensionStatus.Updated"
)

// Defines values for UpdateHookJSONBodyEvent.
const (
	UpdateHookJSONBodyEventOrganizationCreated           UpdateHookJSONBodyEvent = "Organization.Created"
	UpdateHookJSONBodyEventOrganizationDataUpdated       UpdateHookJSONBodyEvent = "Organization.Data.Updated"
	UpdateHookJSONBodyEventOrganizationDeleted           UpdateHookJSONBodyEvent = "Organization.Deleted"
	UpdateHookJSONBodyEventOrganizationMembershipUpdated UpdateHookJSONBodyEvent = "Organization.Membership.Updated"
	UpdateHookJSONBodyEventOrganizationRoleCreated       UpdateHookJSONBodyEvent = "OrganizationRole.Created"
	UpdateHookJSONBodyEventOrganizationRoleDataUpdated   UpdateHookJSONBodyEvent = "OrganizationRole.Data.Updated"
	UpdateHookJSONBodyEventOrganizationRoleDeleted       UpdateHookJSONBodyEvent = "OrganizationRole.Deleted"
	UpdateHookJSONBodyEventOrganizationRoleScopesUpdated UpdateHookJSONBodyEvent = "OrganizationRole.Scopes.Updated"
	UpdateHookJSONBodyEventOrganizationScopeCreated      UpdateHookJSONBodyEvent = "OrganizationScope.Created"
	UpdateHookJSONBodyEventOrganizationScopeDataUpdated  UpdateHookJSONBodyEvent = "OrganizationScope.Data.Updated"
	UpdateHookJSONBodyEventOrganizationScopeDeleted      UpdateHookJSONBodyEvent = "OrganizationScope.Deleted"
	UpdateHookJSONBodyEventPostRegister                  UpdateHookJSONBodyEvent = "PostRegister"
	UpdateHookJSONBodyEventPostResetPassword             UpdateHookJSONBodyEvent = "PostResetPassword"
	UpdateHookJSONBodyEventPostSignIn                    UpdateHookJSONBodyEvent = "PostSignIn"
	UpdateHookJSONBodyEventRoleCreated                   UpdateHookJSONBodyEvent = "Role.Created"
	UpdateHookJSONBodyEventRoleDataUpdated               UpdateHookJSONBodyEvent = "Role.Data.Updated"
	UpdateHookJSONBodyEventRoleDeleted                   UpdateHookJSONBodyEvent = "Role.Deleted"
	UpdateHookJSONBodyEventRoleScopesUpdated             UpdateHookJSONBodyEvent = "Role.Scopes.Updated"
	UpdateHookJSONBodyEventScopeCreated                  UpdateHookJSONBodyEvent = "Scope.Created"
	UpdateHookJSONBodyEventScopeDataUpdated              UpdateHookJSONBodyEvent = "Scope.Data.Updated"
	UpdateHookJSONBodyEventScopeDeleted                  UpdateHookJSONBodyEvent = "Scope.Deleted"
	UpdateHookJSONBodyEventUserCreated                   UpdateHookJSONBodyEvent = "User.Created"
	UpdateHookJSONBodyEventUserDataUpdated               UpdateHookJSONBodyEvent = "User.Data.Updated"
	UpdateHookJSONBodyEventUserDeleted                   UpdateHookJSONBodyEvent = "User.Deleted"
	UpdateHookJSONBodyEventUserSuspensionStatusUpdated   UpdateHookJSONBodyEvent = "User.SuspensionStatus.Updated"
)

// Defines values for UpdateHookJSONBodyEvents.
const (
	UpdateHookJSONBodyEventsOrganizationCreated           UpdateHookJSONBodyEvents = "Organization.Created"
	UpdateHookJSONBodyEventsOrganizationDataUpdated       UpdateHookJSONBodyEvents = "Organization.Data.Updated"
	UpdateHookJSONBodyEventsOrganizationDeleted           UpdateHookJSONBodyEvents = "Organization.Deleted"
	UpdateHookJSONBodyEventsOrganizationMembershipUpdated UpdateHookJSONBodyEvents = "Organization.Membership.Updated"
	UpdateHookJSONBodyEventsOrganizationRoleCreated       UpdateHookJSONBodyEvents = "OrganizationRole.Created"
	UpdateHookJSONBodyEventsOrganizationRoleDataUpdated   UpdateHookJSONBodyEvents = "OrganizationRole.Data.Updated"
	UpdateHookJSONBodyEventsOrganizationRoleDeleted       UpdateHookJSONBodyEvents = "OrganizationRole.Deleted"
	UpdateHookJSONBodyEventsOrganizationRoleScopesUpdated UpdateHookJSONBodyEvents = "OrganizationRole.Scopes.Updated"
	UpdateHookJSONBodyEventsOrganizationScopeCreated      UpdateHookJSONBodyEvents = "OrganizationScope.Created"
	UpdateHookJSONBodyEventsOrganizationScopeDataUpdated  UpdateHookJSONBodyEvents = "OrganizationScope.Data.Updated"
	UpdateHookJSONBodyEventsOrganizationScopeDeleted      UpdateHookJSONBodyEvents = "OrganizationScope.Deleted"
	UpdateHookJSONBodyEventsPostRegister                  UpdateHookJSONBodyEvents = "PostRegister"
	UpdateHookJSONBodyEventsPostResetPassword             UpdateHookJSONBodyEvents = "PostResetPassword"
	UpdateHookJSONBodyEventsPostSignIn                    UpdateHookJSONBodyEvents = "PostSignIn"
	UpdateHookJSONBodyEventsRoleCreated                   UpdateHookJSONBodyEvents = "Role.Created"
	UpdateHookJSONBodyEventsRoleDataUpdated               UpdateHookJSONBodyEvents = "Role.Data.Updated"
	UpdateHookJSONBodyEventsRoleDeleted                   UpdateHookJSONBodyEvents = "Role.Deleted"
	UpdateHookJSONBodyEventsRoleScopesUpdated             UpdateHookJSONBodyEvents = "Role.Scopes.Updated"
	UpdateHookJSONBodyEventsScopeCreated                  UpdateHookJSONBodyEvents = "Scope.Created"
	UpdateHookJSONBodyEventsScopeDataUpdated              UpdateHookJSONBodyEvents = "Scope.Data.Updated"
	UpdateHookJSONBodyEventsScopeDeleted                  UpdateHookJSONBodyEvents = "Scope.Deleted"
	UpdateHookJSONBodyEventsUserCreated                   UpdateHookJSONBodyEvents = "User.Created"
	UpdateHookJSONBodyEventsUserDataUpdated               UpdateHookJSONBodyEvents = "User.Data.Updated"
	UpdateHookJSONBodyEventsUserDeleted                   UpdateHookJSONBodyEvents = "User.Deleted"
	UpdateHookJSONBodyEventsUserSuspensionStatusUpdated   UpdateHookJSONBodyEvents = "User.SuspensionStatus.Updated"
)

// Defines values for CreateHookTestJSONBodyEvents.
const (
	OrganizationCreated           CreateHookTestJSONBodyEvents = "Organization.Created"
	OrganizationDataUpdated       CreateHookTestJSONBodyEvents = "Organization.Data.Updated"
	OrganizationDeleted           CreateHookTestJSONBodyEvents = "Organization.Deleted"
	OrganizationMembershipUpdated CreateHookTestJSONBodyEvents = "Organization.Membership.Updated"
	OrganizationRoleCreated       CreateHookTestJSONBodyEvents = "OrganizationRole.Created"
	OrganizationRoleDataUpdated   CreateHookTestJSONBodyEvents = "OrganizationRole.Data.Updated"
	OrganizationRoleDeleted       CreateHookTestJSONBodyEvents = "OrganizationRole.Deleted"
	OrganizationRoleScopesUpdated CreateHookTestJSONBodyEvents = "OrganizationRole.Scopes.Updated"
	OrganizationScopeCreated      CreateHookTestJSONBodyEvents = "OrganizationScope.Created"
	OrganizationScopeDataUpdated  CreateHookTestJSONBodyEvents = "OrganizationScope.Data.Updated"
	OrganizationScopeDeleted      CreateHookTestJSONBodyEvents = "OrganizationScope.Deleted"
	PostRegister                  CreateHookTestJSONBodyEvents = "PostRegister"
	PostResetPassword             CreateHookTestJSONBodyEvents = "PostResetPassword"
	PostSignIn                    CreateHookTestJSONBodyEvents = "PostSignIn"
	RoleCreated                   CreateHookTestJSONBodyEvents = "Role.Created"
	RoleDataUpdated               CreateHookTestJSONBodyEvents = "Role.Data.Updated"
	RoleDeleted                   CreateHookTestJSONBodyEvents = "Role.Deleted"
	RoleScopesUpdated             CreateHookTestJSONBodyEvents = "Role.Scopes.Updated"
	ScopeCreated                  CreateHookTestJSONBodyEvents = "Scope.Created"
	ScopeDataUpdated              CreateHookTestJSONBodyEvents = "Scope.Data.Updated"
	ScopeDeleted                  CreateHookTestJSONBodyEvents = "Scope.Deleted"
	UserCreated                   CreateHookTestJSONBodyEvents = "User.Created"
	UserDataUpdated               CreateHookTestJSONBodyEvents = "User.Data.Updated"
	UserDeleted                   CreateHookTestJSONBodyEvents = "User.Deleted"
	UserSuspensionStatusUpdated   CreateHookTestJSONBodyEvents = "User.SuspensionStatus.Updated"
)

// Defines values for PutApiInteractionJSONBodyEvent.
const (
	PutApiInteractionJSONBodyEventForgotPassword PutApiInteractionJSONBodyEvent = "ForgotPassword"
	PutApiInteractionJSONBodyEventRegister       PutApiInteractionJSONBodyEvent = "Register"
	PutApiInteractionJSONBodyEventSignIn         PutApiInteractionJSONBodyEvent = "SignIn"
)

// Defines values for PostApiInteractionBindMfaJSONBody1AuthenticatorAttachment.
const (
	PostApiInteractionBindMfaJSONBody1AuthenticatorAttachmentCrossPlatform PostApiInteractionBindMfaJSONBody1AuthenticatorAttachment = "cross-platform"
	PostApiInteractionBindMfaJSONBody1AuthenticatorAttachmentPlatform      PostApiInteractionBindMfaJSONBody1AuthenticatorAttachment = "platform"
)

// Defines values for PostApiInteractionBindMfaJSONBody1ResponseTransports.
const (
	PostApiInteractionBindMfaJSONBody1ResponseTransportsBle       PostApiInteractionBindMfaJSONBody1ResponseTransports = "ble"
	PostApiInteractionBindMfaJSONBody1ResponseTransportsCable     PostApiInteractionBindMfaJSONBody1ResponseTransports = "cable"
	PostApiInteractionBindMfaJSONBody1ResponseTransportsHybrid    PostApiInteractionBindMfaJSONBody1ResponseTransports = "hybrid"
	PostApiInteractionBindMfaJSONBody1ResponseTransportsInternal  PostApiInteractionBindMfaJSONBody1ResponseTransports = "internal"
	PostApiInteractionBindMfaJSONBody1ResponseTransportsNfc       PostApiInteractionBindMfaJSONBody1ResponseTransports = "nfc"
	PostApiInteractionBindMfaJSONBody1ResponseTransportsSmartCard PostApiInteractionBindMfaJSONBody1ResponseTransports = "smart-card"
	PostApiInteractionBindMfaJSONBody1ResponseTransportsUsb       PostApiInteractionBindMfaJSONBody1ResponseTransports = "usb"
)

// Defines values for PutApiInteractionEventJSONBodyEvent.
const (
	PutApiInteractionEventJSONBodyEventForgotPassword PutApiInteractionEventJSONBodyEvent = "ForgotPassword"
	PutApiInteractionEventJSONBodyEventRegister       PutApiInteractionEventJSONBodyEvent = "Register"
	PutApiInteractionEventJSONBodyEventSignIn         PutApiInteractionEventJSONBodyEvent = "SignIn"
)

// Defines values for PutApiInteractionMfaJSONBody1AuthenticatorAttachment.
const (
	PutApiInteractionMfaJSONBody1AuthenticatorAttachmentCrossPlatform PutApiInteractionMfaJSONBody1AuthenticatorAttachment = "cross-platform"
	PutApiInteractionMfaJSONBody1AuthenticatorAttachmentPlatform      PutApiInteractionMfaJSONBody1AuthenticatorAttachment = "platform"
)

// Defines values for AddMfaVerificationJSONBody3Type.
const (
	AddMfaVerificationJSONBody3TypeWebAuthn AddMfaVerificationJSONBody3Type = "WebAuthn"
)

// Defines values for AddMfaVerificationJSONBody4Type.
const (
	TOTP AddMfaVerificationJSONBody4Type = "TOTP"
)

// Defines values for AddMfaVerificationJSONBody5Type.
const (
	BackupCode AddMfaVerificationJSONBody5Type = "BackupCode"
)

// Defines values for ListOneTimeTokensParamsStatus.
const (
	ListOneTimeTokensParamsStatusActive   ListOneTimeTokensParamsStatus = "active"
	ListOneTimeTokensParamsStatusConsumed ListOneTimeTokensParamsStatus = "consumed"
	ListOneTimeTokensParamsStatusExpired  ListOneTimeTokensParamsStatus = "expired"
	ListOneTimeTokensParamsStatusRevoked  ListOneTimeTokensParamsStatus = "revoked"
)

// Defines values for ReplaceOneTimeTokenStatusJSONBodyStatus.
const (
	ReplaceOneTimeTokenStatusJSONBodyStatusActive   ReplaceOneTimeTokenStatusJSONBodyStatus = "active"
	ReplaceOneTimeTokenStatusJSONBodyStatusConsumed ReplaceOneTimeTokenStatusJSONBodyStatus = "consumed"
	ReplaceOneTimeTokenStatusJSONBodyStatusExpired  ReplaceOneTimeTokenStatusJSONBodyStatus = "expired"
	ReplaceOneTimeTokenStatusJSONBodyStatusRevoked  ReplaceOneTimeTokenStatusJSONBodyStatus = "revoked"
)

// Defines values for ReplaceOrganizationInvitationStatusJSONBodyStatus.
const (
	Accepted ReplaceOrganizationInvitationStatusJSONBodyStatus = "Accepted"
	Revoked  ReplaceOrganizationInvitationStatusJSONBodyStatus = "Revoked"
)

// Defines values for CreateOrganizationRoleJSONBodyType.
const (
	CreateOrganizationRoleJSONBodyTypeMachineToMachine CreateOrganizationRoleJSONBodyType = "MachineToMachine"
	CreateOrganizationRoleJSONBodyTypeUser             CreateOrganizationRoleJSONBodyType = "User"
)

// Defines values for UpdateOrganizationRoleJSONBodyType.
const (
	UpdateOrganizationRoleJSONBodyTypeMachineToMachine UpdateOrganizationRoleJSONBodyType = "MachineToMachine"
	UpdateOrganizationRoleJSONBodyTypeUser             UpdateOrganizationRoleJSONBodyType = "User"
)

// Defines values for ListRolesParamsType.
const (
	ListRolesParamsTypeMachineToMachine ListRolesParamsType = "MachineToMachine"
	ListRolesParamsTypeUser             ListRolesParamsType = "User"
)

// Defines values for CreateRoleJSONBodyType.
const (
	CreateRoleJSONBodyTypeMachineToMachine CreateRoleJSONBodyType = "MachineToMachine"
	CreateRoleJSONBodyTypeUser             CreateRoleJSONBodyType = "User"
)

// Defines values for CreateSamlApplicationJSONBodyNameIdFormat.
const (
	CreateSamlApplicationJSONBodyNameIdFormatUrnOasisNamesTcSAML11NameidFormatEmailAddress CreateSamlApplicationJSONBodyNameIdFormat = "urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress"
	CreateSamlApplicationJSONBodyNameIdFormatUrnOasisNamesTcSAML11NameidFormatUnspecified  CreateSamlApplicationJSONBodyNameIdFormat = "urn:oasis:names:tc:SAML:1.1:nameid-format:unspecified"
	CreateSamlApplicationJSONBodyNameIdFormatUrnOasisNamesTcSAML20NameidFormatPersistent   CreateSamlApplicationJSONBodyNameIdFormat = "urn:oasis:names:tc:SAML:2.0:nameid-format:persistent"
	CreateSamlApplicationJSONBodyNameIdFormatUrnOasisNamesTcSAML20NameidFormatTransient    CreateSamlApplicationJSONBodyNameIdFormat = "urn:oasis:names:tc:SAML:2.0:nameid-format:transient"
)

// Defines values for UpdateSamlApplicationJSONBodyNameIdFormat.
const (
	UpdateSamlApplicationJSONBodyNameIdFormatUrnOasisNamesTcSAML11NameidFormatEmailAddress UpdateSamlApplicationJSONBodyNameIdFormat = "urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress"
	UpdateSamlApplicationJSONBodyNameIdFormatUrnOasisNamesTcSAML11NameidFormatUnspecified  UpdateSamlApplicationJSONBodyNameIdFormat = "urn:oasis:names:tc:SAML:1.1:nameid-format:unspecified"
	UpdateSamlApplicationJSONBodyNameIdFormatUrnOasisNamesTcSAML20NameidFormatPersistent   UpdateSamlApplicationJSONBodyNameIdFormat = "urn:oasis:names:tc:SAML:2.0:nameid-format:persistent"
	UpdateSamlApplicationJSONBodyNameIdFormatUrnOasisNamesTcSAML20NameidFormatTransient    UpdateSamlApplicationJSONBodyNameIdFormat = "urn:oasis:names:tc:SAML:2.0:nameid-format:transient"
)

// Defines values for DeleteSentinelActivitiesJSONBodyTargetType.
const (
	App  DeleteSentinelActivitiesJSONBodyTargetType = "App"
	User DeleteSentinelActivitiesJSONBodyTargetType = "User"
)

// Defines values for UpdateSignInExpJSONBodyAgreeToTermsPolicy.
const (
	Automatic              UpdateSignInExpJSONBodyAgreeToTermsPolicy = "Automatic"
	Manual                 UpdateSignInExpJSONBodyAgreeToTermsPolicy = "Manual"
	ManualRegistrationOnly UpdateSignInExpJSONBodyAgreeToTermsPolicy = "ManualRegistrationOnly"
)

// Defines values for UpdateSignInExpJSONBodyLanguageInfoFallbackLanguage.
const (
	UpdateSignInExpJSONBodyLanguageInfoFallbackLanguageAfZA  UpdateSignInExpJSONBodyLanguageInfoFallbackLanguage = "af-ZA"
	UpdateSignInExpJSONBodyLanguageInfoFallbackLanguageAmET  UpdateSignInExpJSONBodyLanguageInfoFallbackLanguage = "am-ET"
	UpdateSignInExpJSONBodyLanguageInfoFallbackLanguageAr    UpdateSignInExpJSONBodyLanguageInfoFallbackLanguage = "ar"
	UpdateSignInExpJSONBodyLanguageInfoFallbackLanguageArAR  UpdateSignInExpJSONBodyLanguageInfoFallbackLanguage = "ar-AR"
	UpdateSignInExpJSONBodyLanguageInfoFallbackLanguageAsIN  UpdateSignInExpJSONBodyLanguageInfoFallbackLanguage = "as-IN"
	UpdateSignInExpJSONBodyLanguageInfoFallbackLanguageAzAZ  UpdateSignInExpJSONBodyLanguageInfoFallbackLanguage = "az-AZ"
	UpdateSignInExpJSONBodyLanguageInfoFallbackLanguageBeBY  UpdateSignInExpJSONBodyLanguageInfoFallbackLanguage = "be-BY"
	UpdateSignInExpJSONBodyLanguageInfoFallbackLanguageBgBG  UpdateSignInExpJSONBodyLanguageInfoFallbackLanguage = "bg-BG"
	UpdateSignInExpJSONBodyLanguageInfoFallbackLanguageBnIN  UpdateSignInExpJSONBodyLanguageInfoFallbackLanguage = "bn-IN"
	UpdateSignInExpJSONBodyLanguageInfoFallbackLanguageBrFR  UpdateSignInExpJSONBodyLanguageInfoFallbackLanguage = "br-FR"
	UpdateSignInExpJSONBodyLanguageInfoFallbackLanguageBsBA  UpdateSignInExpJSONBodyLanguageInfoFallbackLanguage = "bs-BA"
	UpdateSignInExpJSONBodyLanguageInfoFallbackLanguageCaES  UpdateSignInExpJSONBodyLanguageInfoFallbackLanguage = "ca-ES"
	UpdateSignInExpJSONBodyLanguageInfoFallbackLanguageCbIQ  UpdateSignInExpJSONBodyLanguageInfoFallbackLanguage = "cb-IQ"
	UpdateSignInExpJSONBodyLanguageInfoFallbackLanguageCoFR  UpdateSignInExpJSONBodyLanguageInfoFallbackLanguage = "co-FR"
	UpdateSignInExpJSONBodyLanguageInfoFallbackLanguageCsCZ  UpdateSignInExpJSONBodyLanguageInfoFallbackLanguage = "cs-CZ"
	UpdateSignInExpJSONBodyLanguageInfoFallbackLanguageCxPH  UpdateSignInExpJSONBodyLanguageInfoFallbackLanguage = "cx-PH"
	UpdateSignInExpJSONBodyLanguageInfoFallbackLanguageCyGB  UpdateSignInExpJSONBodyLanguageInfoFallbackLanguage = "cy-GB"
	UpdateSignInExpJSONBodyLanguageInfoFallbackLanguageDaDK  UpdateSignInExpJSONBodyLanguageInfoFallbackLanguage = "da-DK"
	UpdateSignInExpJSONBodyLanguageInfoFallbackLanguageDe    UpdateSignInExpJSONBodyLanguageInfoFallbackLanguage = "de"
	UpdateSignInExpJSONBodyLanguageInfoFallbackLanguageDeDE  UpdateSignInExpJSONBodyLanguageInfoFallbackLanguage = "de-DE"
	UpdateSignInExpJSONBodyLanguageInfoFallbackLanguageElGR  UpdateSignInExpJSONBodyLanguageInfoFallbackLanguage = "el-GR"
	UpdateSignInExpJSONBodyLanguageInfoFallbackLanguageEn    UpdateSignInExpJSONBodyLanguageInfoFallbackLanguage = "en"
	UpdateSignInExpJSONBodyLanguageInfoFallbackLanguageEnGB  UpdateSignInExpJSONBodyLanguageInfoFallbackLanguage = "en-GB"
	UpdateSignInExpJSONBodyLanguageInfoFallbackLanguageEnUS  UpdateSignInExpJSONBodyLanguageInfoFallbackLanguage = "en-US"
	UpdateSignInExpJSONBodyLanguageInfoFallbackLanguageEoEO  UpdateSignInExpJSONBodyLanguageInfoFallbackLanguage = "eo-EO"
	UpdateSignInExpJSONBodyLanguageInfoFallbackLanguageEs    UpdateSignInExpJSONBodyLanguageInfoFallbackLanguage = "es"
	UpdateSignInExpJSONBodyLanguageInfoFallbackLanguageEs419 UpdateSignInExpJSONBodyLanguageInfoFallbackLanguage = "es-419"
	UpdateSignInExpJSONBodyLanguageInfoFallbackLanguageEsES  UpdateSignInExpJSONBodyLanguageInfoFallbackLanguage = "es-ES"
	UpdateSignInExpJSONBodyLanguageInfoFallbackLanguageEtEE  UpdateSignInExpJSONBodyLanguageInfoFallbackLanguage = "et-EE"
	UpdateSignInExpJSONBodyLanguageInfoFallbackLanguageEuES  UpdateSignInExpJSONBodyLanguageInfoFallbackLanguage = "eu-ES"
	UpdateSignInExpJSONBodyLanguageInfoFallbackLanguageFaIR  UpdateSignInExpJSONBodyLanguageInfoFallbackLanguage = "fa-IR"
	UpdateSignInExpJSONBodyLanguageInfoFallbackLanguageFfNG  UpdateSignInExpJSONBodyLanguageInfoFallbackLanguage = "ff-NG"
	UpdateSignInExpJSONBodyLanguageInfoFallbackLanguageFi    UpdateSignInExpJSONBodyLanguageInfoFallbackLanguage = "fi"
	UpdateSignInExpJSONBodyLanguageInfoFallbackLanguageFiFI  UpdateSignInExpJSONBodyLanguageInfoFallbackLanguage = "fi-FI"
	UpdateSignInExpJSONBodyLanguageInfoFallbackLanguageFoFO  UpdateSignInExpJSONBodyLanguageInfoFallbackLanguage = "fo-FO"
	UpdateSignInExpJSONBodyLanguageInfoFallbackLanguageFr    UpdateSignInExpJSONBodyLanguageInfoFallbackLanguage = "fr"
	UpdateSignInExpJSONBodyLanguageInfoFallbackLanguageFrCA  UpdateSignInExpJSONBodyLanguageInfoFallbackLanguage = "fr-CA"
	UpdateSignInExpJSONBodyLanguageInfoFallbackLanguageFrFR  UpdateSignInExpJSONBodyLanguageInfoFallbackLanguage = "fr-FR"
	UpdateSignInExpJSONBodyLanguageInfoFallbackLanguageFyNL  UpdateSignInExpJSONBodyLanguageInfoFallbackLanguage = "fy-NL"
	UpdateSignInExpJSONBodyLanguageInfoFallbackLanguageGaIE  UpdateSignInExpJSONBodyLanguageInfoFallbackLanguage = "ga-IE"
	UpdateSignInExpJSONBodyLanguageInfoFallbackLanguageGlES  UpdateSignInExpJSONBodyLanguageInfoFallbackLanguage = "gl-ES"
	UpdateSignInExpJSONBodyLanguageInfoFallbackLanguageGnPY  UpdateSignInExpJSONBodyLanguageInfoFallbackLanguage = "gn-PY"
	UpdateSignInExpJSONBodyLanguageInfoFallbackLanguageGuIN  UpdateSignInExpJSONBodyLanguageInfoFallbackLanguage = "gu-IN"
	UpdateSignInExpJSONBodyLanguageInfoFallbackLanguageHaNG  UpdateSignInExpJSONBodyLanguageInfoFallbackLanguage = "ha-NG"
	UpdateSignInExpJSONBodyLanguageInfoFallbackLanguageHeIL  UpdateSignInExpJSONBodyLanguageInfoFallbackLanguage = "he-IL"
	UpdateSignInExpJSONBodyLanguageInfoFallbackLanguageHiIN  UpdateSignInExpJSONBodyLanguageInfoFallbackLanguage = "hi-IN"
	UpdateSignInExpJSONBodyLanguageInfoFallbackLanguageHrHR  UpdateSignInExpJSONBodyLanguageInfoFallbackLanguage = "hr-HR"
	UpdateSignInExpJSONBodyLanguageInfoFallbackLanguageHtHT  UpdateSignInExpJSONBodyLanguageInfoFallbackLanguage = "ht-HT"
	UpdateSignInExpJSONBodyLanguageInfoFallbackLanguageHuHU  UpdateSignInExpJSONBodyLanguageInfoFallbackLanguage = "hu-HU"
	UpdateSignInExpJSONBodyLanguageInfoFallbackLanguageHyAM  UpdateSignInExpJSONBodyLanguageInfoFallbackLanguage = "hy-AM"
	UpdateSignInExpJSONBodyLanguageInfoFallbackLanguageIdID  UpdateSignInExpJSONBodyLanguageInfoFallbackLanguage = "id-ID"
	UpdateSignInExpJSONBodyLanguageInfoFallbackLanguageIkUS  UpdateSignInExpJSONBodyLanguageInfoFallbackLanguage = "ik-US"
	UpdateSignInExpJSONBodyLanguageInfoFallbackLanguageIsIS  UpdateSignInExpJSONBodyLanguageInfoFallbackLanguage = "is-IS"
	UpdateSignInExpJSONBodyLanguageInfoFallbackLanguageIt    UpdateSignInExpJSONBodyLanguageInfoFallbackLanguage = "it"
	UpdateSignInExpJSONBodyLanguageInfoFallbackLanguageItIT  UpdateSignInExpJSONBodyLanguageInfoFallbackLanguage = "it-IT"
	UpdateSignInExpJSONBodyLanguageInfoFallbackLanguageIuCA  UpdateSignInExpJSONBodyLanguageInfoFallbackLanguage = "iu-CA"
	UpdateSignInExpJSONBodyLanguageInfoFallbackLanguageJa    UpdateSignInExpJSONBodyLanguageInfoFallbackLanguage = "ja"
	UpdateSignInExpJSONBodyLanguageInfoFallbackLanguageJaJP  UpdateSignInExpJSONBodyLanguageInfoFallbackLanguage = "ja-JP"
	UpdateSignInExpJSONBodyLanguageInfoFallbackLanguageJaKS  UpdateSignInExpJSONBodyLanguageInfoFallbackLanguage = "ja-KS"
	UpdateSignInExpJSONBodyLanguageInfoFallbackLanguageJvID  UpdateSignInExpJSONBodyLanguageInfoFallbackLanguage = "jv-ID"
	UpdateSignInExpJSONBodyLanguageInfoFallbackLanguageKaGE  UpdateSignInExpJSONBodyLanguageInfoFallbackLanguage = "ka-GE"
	UpdateSignInExpJSONBodyLanguageInfoFallbackLanguageKkKZ  UpdateSignInExpJSONBodyLanguageInfoFallbackLanguage = "kk-KZ"
	UpdateSignInExpJSONBodyLanguageInfoFallbackLanguageKmKH  UpdateSignInExpJSONBodyLanguageInfoFallbackLanguage = "km-KH"
	UpdateSignInExpJSONBodyLanguageInfoFallbackLanguageKnIN  UpdateSignInExpJSONBodyLanguageInfoFallbackLanguage = "kn-IN"
	UpdateSignInExpJSONBodyLanguageInfoFallbackLanguageKo    UpdateSignInExpJSONBodyLanguageInfoFallbackLanguage = "ko"
	UpdateSignInExpJSONBodyLanguageInfoFallbackLanguageKoKR  UpdateSignInExpJSONBodyLanguageInfoFallbackLanguage = "ko-KR"
	UpdateSignInExpJSONBodyLanguageInfoFallbackLanguageKuTR  UpdateSignInExpJSONBodyLanguageInfoFallbackLanguage = "ku-TR"
	UpdateSignInExpJSONBodyLanguageInfoFallbackLanguageKyKG  UpdateSignInExpJSONBodyLanguageInfoFallbackLanguage = "ky-KG"
	UpdateSignInExpJSONBodyLanguageInfoFallbackLanguageLoLA  UpdateSignInExpJSONBodyLanguageInfoFallbackLanguage = "lo-LA"
	UpdateSignInExpJSONBodyLanguageInfoFallbackLanguageLtLT  UpdateSignInExpJSONBodyLanguageInfoFallbackLanguage = "lt-LT"
	UpdateSignInExpJSONBodyLanguageInfoFallbackLanguageLvLV  UpdateSignInExpJSONBodyLanguageInfoFallbackLanguage = "lv-LV"
	UpdateSignInExpJSONBodyLanguageInfoFallbackLanguageMgMG  UpdateSignInExpJSONBodyLanguageInfoFallbackLanguage = "mg-MG"
	UpdateSignInExpJSONBodyLanguageInfoFallbackLanguageMkMK  UpdateSignInExpJSONBodyLanguageInfoFallbackLanguage = "mk-MK"
	UpdateSignInExpJSONBodyLanguageInfoFallbackLanguageMlIN  UpdateSignInExpJSONBodyLanguageInfoFallbackLanguage = "ml-IN"
	UpdateSignInExpJSONBodyLanguageInfoFallbackLanguageMnMN  UpdateSignInExpJSONBodyLanguageInfoFallbackLanguage = "mn-MN"
	UpdateSignInExpJSONBodyLanguageInfoFallbackLanguageMrIN  UpdateSignInExpJSONBodyLanguageInfoFallbackLanguage = "mr-IN"
	UpdateSignInExpJSONBodyLanguageInfoFallbackLanguageMsMY  UpdateSignInExpJSONBodyLanguageInfoFallbackLanguage = "ms-MY"
	UpdateSignInExpJSONBodyLanguageInfoFallbackLanguageMtMT  UpdateSignInExpJSONBodyLanguageInfoFallbackLanguage = "mt-MT"
	UpdateSignInExpJSONBodyLanguageInfoFallbackLanguageMyMM  UpdateSignInExpJSONBodyLanguageInfoFallbackLanguage = "my-MM"
	UpdateSignInExpJSONBodyLanguageInfoFallbackLanguageNbNO  UpdateSignInExpJSONBodyLanguageInfoFallbackLanguage = "nb-NO"
	UpdateSignInExpJSONBodyLanguageInfoFallbackLanguageNeNP  UpdateSignInExpJSONBodyLanguageInfoFallbackLanguage = "ne-NP"
	UpdateSignInExpJSONBodyLanguageInfoFallbackLanguageNl    UpdateSignInExpJSONBodyLanguageInfoFallbackLanguage = "nl"
	UpdateSignInExpJSONBodyLanguageInfoFallbackLanguageNlBE  UpdateSignInExpJSONBodyLanguageInfoFallbackLanguage = "nl-BE"
	UpdateSignInExpJSONBodyLanguageInfoFallbackLanguageNlNL  UpdateSignInExpJSONBodyLanguageInfoFallbackLanguage = "nl-NL"
	UpdateSignInExpJSONBodyLanguageInfoFallbackLanguageNnNO  UpdateSignInExpJSONBodyLanguageInfoFallbackLanguage = "nn-NO"
	UpdateSignInExpJSONBodyLanguageInfoFallbackLanguageOrIN  UpdateSignInExpJSONBodyLanguageInfoFallbackLanguage = "or-IN"
	UpdateSignInExpJSONBodyLanguageInfoFallbackLanguagePaIN  UpdateSignInExpJSONBodyLanguageInfoFallbackLanguage = "pa-IN"
	UpdateSignInExpJSONBodyLanguageInfoFallbackLanguagePlPL  UpdateSignInExpJSONBodyLanguageInfoFallbackLanguage = "pl-PL"
	UpdateSignInExpJSONBodyLanguageInfoFallbackLanguagePsAF  UpdateSignInExpJSONBodyLanguageInfoFallbackLanguage = "ps-AF"
	UpdateSignInExpJSONBodyLanguageInfoFallbackLanguagePt    UpdateSignInExpJSONBodyLanguageInfoFallbackLanguage = "pt"
	UpdateSignInExpJSONBodyLanguageInfoFallbackLanguagePtBR  UpdateSignInExpJSONBodyLanguageInfoFallbackLanguage = "pt-BR"
	UpdateSignInExpJSONBodyLanguageInfoFallbackLanguagePtPT  UpdateSignInExpJSONBodyLanguageInfoFallbackLanguage = "pt-PT"
	UpdateSignInExpJSONBodyLanguageInfoFallbackLanguageRoRO  UpdateSignInExpJSONBodyLanguageInfoFallbackLanguage = "ro-RO"
	UpdateSignInExpJSONBodyLanguageInfoFallbackLanguageRu    UpdateSignInExpJSONBodyLanguageInfoFallbackLanguage = "ru"
	UpdateSignInExpJSONBodyLanguageInfoFallbackLanguageRuRU  UpdateSignInExpJSONBodyLanguageInfoFallbackLanguage = "ru-RU"
	UpdateSignInExpJSONBodyLanguageInfoFallbackLanguageRwRW  UpdateSignInExpJSONBodyLanguageInfoFallbackLanguage = "rw-RW"
	UpdateSignInExpJSONBodyLanguageInfoFallbackLanguageScIT  UpdateSignInExpJSONBodyLanguageInfoFallbackLanguage = "sc-IT"
	UpdateSignInExpJSONBodyLanguageInfoFallbackLanguageSiLK  UpdateSignInExpJSONBodyLanguageInfoFallbackLanguage = "si-LK"
	UpdateSignInExpJSONBodyLanguageInfoFallbackLanguageSkSK  UpdateSignInExpJSONBodyLanguageInfoFallbackLanguage = "sk-SK"
	UpdateSignInExpJSONBodyLanguageInfoFallbackLanguageSlSI  UpdateSignInExpJSONBodyLanguageInfoFallbackLanguage = "sl-SI"
	UpdateSignInExpJSONBodyLanguageInfoFallbackLanguageSnZW  UpdateSignInExpJSONBodyLanguageInfoFallbackLanguage = "sn-ZW"
	UpdateSignInExpJSONBodyLanguageInfoFallbackLanguageSqAL  UpdateSignInExpJSONBodyLanguageInfoFallbackLanguage = "sq-AL"
	UpdateSignInExpJSONBodyLanguageInfoFallbackLanguageSrRS  UpdateSignInExpJSONBodyLanguageInfoFallbackLanguage = "sr-RS"
	UpdateSignInExpJSONBodyLanguageInfoFallbackLanguageSv    UpdateSignInExpJSONBodyLanguageInfoFallbackLanguage = "sv"
	UpdateSignInExpJSONBodyLanguageInfoFallbackLanguageSvSE  UpdateSignInExpJSONBodyLanguageInfoFallbackLanguage = "sv-SE"
	UpdateSignInExpJSONBodyLanguageInfoFallbackLanguageSwKE  UpdateSignInExpJSONBodyLanguageInfoFallbackLanguage = "sw-KE"
	UpdateSignInExpJSONBodyLanguageInfoFallbackLanguageSySY  UpdateSignInExpJSONBodyLanguageInfoFallbackLanguage = "sy-SY"
	UpdateSignInExpJSONBodyLanguageInfoFallbackLanguageSzPL  UpdateSignInExpJSONBodyLanguageInfoFallbackLanguage = "sz-PL"
	UpdateSignInExpJSONBodyLanguageInfoFallbackLanguageTaIN  UpdateSignInExpJSONBodyLanguageInfoFallbackLanguage = "ta-IN"
	UpdateSignInExpJSONBodyLanguageInfoFallbackLanguageTeIN  UpdateSignInExpJSONBodyLanguageInfoFallbackLanguage = "te-IN"
	UpdateSignInExpJSONBodyLanguageInfoFallbackLanguageTgTJ  UpdateSignInExpJSONBodyLanguageInfoFallbackLanguage = "tg-TJ"
	UpdateSignInExpJSONBodyLanguageInfoFallbackLanguageTh    UpdateSignInExpJSONBodyLanguageInfoFallbackLanguage = "th"
	UpdateSignInExpJSONBodyLanguageInfoFallbackLanguageThTH  UpdateSignInExpJSONBodyLanguageInfoFallbackLanguage = "th-TH"
	UpdateSignInExpJSONBodyLanguageInfoFallbackLanguageTlPH  UpdateSignInExpJSONBodyLanguageInfoFallbackLanguage = "tl-PH"
	UpdateSignInExpJSONBodyLanguageInfoFallbackLanguageTr    UpdateSignInExpJSONBodyLanguageInfoFallbackLanguage = "tr"
	UpdateSignInExpJSONBodyLanguageInfoFallbackLanguageTrTR  UpdateSignInExpJSONBodyLanguageInfoFallbackLanguage = "tr-TR"
	UpdateSignInExpJSONBodyLanguageInfoFallbackLanguageTtRU  UpdateSignInExpJSONBodyLanguageInfoFallbackLanguage = "tt-RU"
	UpdateSignInExpJSONBodyLanguageInfoFallbackLanguageTzMA  UpdateSignInExpJSONBodyLanguageInfoFallbackLanguage = "tz-MA"
	UpdateSignInExpJSONBodyLanguageInfoFallbackLanguageUkUA  UpdateSignInExpJSONBodyLanguageInfoFallbackLanguage = "uk-UA"
	UpdateSignInExpJSONBodyLanguageInfoFallbackLanguageUrPK  UpdateSignInExpJSONBodyLanguageInfoFallbackLanguage = "ur-PK"
	UpdateSignInExpJSONBodyLanguageInfoFallbackLanguageUzUZ  UpdateSignInExpJSONBodyLanguageInfoFallbackLanguage = "uz-UZ"
	UpdateSignInExpJSONBodyLanguageInfoFallbackLanguageViVN  UpdateSignInExpJSONBodyLanguageInfoFallbackLanguage = "vi-VN"
	UpdateSignInExpJSONBodyLanguageInfoFallbackLanguageZh    UpdateSignInExpJSONBodyLanguageInfoFallbackLanguage = "zh"
	UpdateSignInExpJSONBodyLanguageInfoFallbackLanguageZhCN  UpdateSignInExpJSONBodyLanguageInfoFallbackLanguage = "zh-CN"
	UpdateSignInExpJSONBodyLanguageInfoFallbackLanguageZhHK  UpdateSignInExpJSONBodyLanguageInfoFallbackLanguage = "zh-HK"
	UpdateSignInExpJSONBodyLanguageInfoFallbackLanguageZhMO  UpdateSignInExpJSONBodyLanguageInfoFallbackLanguage = "zh-MO"
	UpdateSignInExpJSONBodyLanguageInfoFallbackLanguageZhTW  UpdateSignInExpJSONBodyLanguageInfoFallbackLanguage = "zh-TW"
	UpdateSignInExpJSONBodyLanguageInfoFallbackLanguageZzTR  UpdateSignInExpJSONBodyLanguageInfoFallbackLanguage = "zz-TR"
)

// Defines values for UpdateSignInExpJSONBodyMfaFactors.
const (
	UpdateSignInExpJSONBodyMfaFactorsBackupCode UpdateSignInExpJSONBodyMfaFactors = "BackupCode"
	UpdateSignInExpJSONBodyMfaFactorsTotp       UpdateSignInExpJSONBodyMfaFactors = "Totp"
	UpdateSignInExpJSONBodyMfaFactorsWebAuthn   UpdateSignInExpJSONBodyMfaFactors = "WebAuthn"
)

// Defines values for UpdateSignInExpJSONBodyMfaOrganizationRequiredMfaPolicy.
const (
	UpdateSignInExpJSONBodyMfaOrganizationRequiredMfaPolicyMandatory UpdateSignInExpJSONBodyMfaOrganizationRequiredMfaPolicy = "Mandatory"
	UpdateSignInExpJSONBodyMfaOrganizationRequiredMfaPolicyNoPrompt  UpdateSignInExpJSONBodyMfaOrganizationRequiredMfaPolicy = "NoPrompt"
)

// Defines values for UpdateSignInExpJSONBodyMfaPolicy.
const (
	UpdateSignInExpJSONBodyMfaPolicyMandatory               UpdateSignInExpJSONBodyMfaPolicy = "Mandatory"
	UpdateSignInExpJSONBodyMfaPolicyNoPrompt                UpdateSignInExpJSONBodyMfaPolicy = "NoPrompt"
	UpdateSignInExpJSONBodyMfaPolicyPromptAtSignInAndSignUp UpdateSignInExpJSONBodyMfaPolicy = "PromptAtSignInAndSignUp"
	UpdateSignInExpJSONBodyMfaPolicyPromptOnlyAtSignIn      UpdateSignInExpJSONBodyMfaPolicy = "PromptOnlyAtSignIn"
	UpdateSignInExpJSONBodyMfaPolicyUserControlled          UpdateSignInExpJSONBodyMfaPolicy = "UserControlled"
)

// Defines values for UpdateSignInExpJSONBodySignInMethodsIdentifier.
const (
	UpdateSignInExpJSONBodySignInMethodsIdentifierEmail    UpdateSignInExpJSONBodySignInMethodsIdentifier = "email"
	UpdateSignInExpJSONBodySignInMethodsIdentifierPhone    UpdateSignInExpJSONBodySignInMethodsIdentifier = "phone"
	UpdateSignInExpJSONBodySignInMethodsIdentifierUsername UpdateSignInExpJSONBodySignInMethodsIdentifier = "username"
)

// Defines values for UpdateSignInExpJSONBodySignInMode.
const (
	UpdateSignInExpJSONBodySignInModeRegister          UpdateSignInExpJSONBodySignInMode = "Register"
	UpdateSignInExpJSONBodySignInModeSignIn            UpdateSignInExpJSONBodySignInMode = "SignIn"
	UpdateSignInExpJSONBodySignInModeSignInAndRegister UpdateSignInExpJSONBodySignInMode = "SignInAndRegister"
)

// Defines values for UpdateSignInExpJSONBodySignUpIdentifiers.
const (
	UpdateSignInExpJSONBodySignUpIdentifiersEmail    UpdateSignInExpJSONBodySignUpIdentifiers = "email"
	UpdateSignInExpJSONBodySignUpIdentifiersPhone    UpdateSignInExpJSONBodySignUpIdentifiers = "phone"
	UpdateSignInExpJSONBodySignUpIdentifiersUsername UpdateSignInExpJSONBodySignUpIdentifiers = "username"
)

// Defines values for UpdateSignInExpJSONBodySignUpSecondaryIdentifiersIdentifier0.
const (
	UpdateSignInExpJSONBodySignUpSecondaryIdentifiersIdentifier0Email    UpdateSignInExpJSONBodySignUpSecondaryIdentifiersIdentifier0 = "email"
	UpdateSignInExpJSONBodySignUpSecondaryIdentifiersIdentifier0Phone    UpdateSignInExpJSONBodySignUpSecondaryIdentifiersIdentifier0 = "phone"
	UpdateSignInExpJSONBodySignUpSecondaryIdentifiersIdentifier0Username UpdateSignInExpJSONBodySignUpSecondaryIdentifiersIdentifier0 = "username"
)

// Defines values for UpdateSignInExpJSONBodySignUpSecondaryIdentifiersIdentifier1.
const (
	EmailOrPhone UpdateSignInExpJSONBodySignUpSecondaryIdentifiersIdentifier1 = "emailOrPhone"
)

// Defines values for CreateUserJSONBodyPasswordAlgorithm.
const (
	Argon2d  CreateUserJSONBodyPasswordAlgorithm = "Argon2d"
	Argon2i  CreateUserJSONBodyPasswordAlgorithm = "Argon2i"
	Argon2id CreateUserJSONBodyPasswordAlgorithm = "Argon2id"
	Bcrypt   CreateUserJSONBodyPasswordAlgorithm = "Bcrypt"
	Legacy   CreateUserJSONBodyPasswordAlgorithm = "Legacy"
	MD5      CreateUserJSONBodyPasswordAlgorithm = "MD5"
	SHA1     CreateUserJSONBodyPasswordAlgorithm = "SHA1"
	SHA256   CreateUserJSONBodyPasswordAlgorithm = "SHA256"
)

// Defines values for CreateVerificationByVerificationCodeJSONBodyIdentifierType.
const (
	CreateVerificationByVerificationCodeJSONBodyIdentifierTypeEmail CreateVerificationByVerificationCodeJSONBodyIdentifierType = "email"
	CreateVerificationByVerificationCodeJSONBodyIdentifierTypePhone CreateVerificationByVerificationCodeJSONBodyIdentifierType = "phone"
)

// Defines values for VerifyVerificationByVerificationCodeJSONBodyIdentifierType.
const (
	Email VerifyVerificationByVerificationCodeJSONBodyIdentifierType = "email"
	Phone VerifyVerificationByVerificationCodeJSONBodyIdentifierType = "phone"
)

// Defines values for VerifyWebAuthnRegistrationJSONBodyPayloadAuthenticatorAttachment.
const (
	CrossPlatform VerifyWebAuthnRegistrationJSONBodyPayloadAuthenticatorAttachment = "cross-platform"
	Platform      VerifyWebAuthnRegistrationJSONBodyPayloadAuthenticatorAttachment = "platform"
)

// Defines values for VerifyWebAuthnRegistrationJSONBodyPayloadResponseTransports.
const (
	Ble       VerifyWebAuthnRegistrationJSONBodyPayloadResponseTransports = "ble"
	Cable     VerifyWebAuthnRegistrationJSONBodyPayloadResponseTransports = "cable"
	Hybrid    VerifyWebAuthnRegistrationJSONBodyPayloadResponseTransports = "hybrid"
	Internal  VerifyWebAuthnRegistrationJSONBodyPayloadResponseTransports = "internal"
	Nfc       VerifyWebAuthnRegistrationJSONBodyPayloadResponseTransports = "nfc"
	SmartCard VerifyWebAuthnRegistrationJSONBodyPayloadResponseTransports = "smart-card"
	Usb       VerifyWebAuthnRegistrationJSONBodyPayloadResponseTransports = "usb"
)

// ApplicationLegacySecret The internal client secret. Note it is only used for internal validation, and the actual secrets should be retrieved from `/api/applications/{id}/secrets` endpoints.
type ApplicationLegacySecret = string

// Translation defines model for Translation.
type Translation struct {
	union json.RawMessage
}

// Translation0 defines model for .
type Translation0 = string

// TranslationObject defines model for TranslationObject.
type TranslationObject struct {
	TranslationKey *Translation `json:"[translationKey],omitempty"`
}

// ApplicationId defines model for applicationId.
type ApplicationId = string

// ApplicationIdRoot defines model for applicationId-root.
type ApplicationIdRoot = string

// ConnectorFactoryIdRoot defines model for connectorFactoryId-root.
type ConnectorFactoryIdRoot = string

// ConnectorId defines model for connectorId.
type ConnectorId = string

// ConnectorIdRoot defines model for connectorId-root.
type ConnectorIdRoot = string

// DomainIdRoot defines model for domainId-root.
type DomainIdRoot = string

// EmailTemplateIdRoot defines model for emailTemplateId-root.
type EmailTemplateIdRoot = string

// FactoryId defines model for factoryId.
type FactoryId = string

// HookIdRoot defines model for hookId-root.
type HookIdRoot = string

// KeyId defines model for keyId.
type KeyId = string

// LogIdRoot defines model for logId-root.
type LogIdRoot = string

// OneTimeTokenIdRoot defines model for oneTimeTokenId-root.
type OneTimeTokenIdRoot = string

// OrganizationId defines model for organizationId.
type OrganizationId = string

// OrganizationIdRoot defines model for organizationId-root.
type OrganizationIdRoot = string

// OrganizationInvitationIdRoot defines model for organizationInvitationId-root.
type OrganizationInvitationIdRoot = string

// OrganizationRoleId defines model for organizationRoleId.
type OrganizationRoleId = string

// OrganizationRoleIdRoot defines model for organizationRoleId-root.
type OrganizationRoleIdRoot = string

// OrganizationScopeId defines model for organizationScopeId.
type OrganizationScopeId = string

// OrganizationScopeIdRoot defines model for organizationScopeId-root.
type OrganizationScopeIdRoot = string

// ResourceId defines model for resourceId.
type ResourceId = string

// ResourceIdRoot defines model for resourceId-root.
type ResourceIdRoot = string

// RoleId defines model for roleId.
type RoleId = string

// RoleIdRoot defines model for roleId-root.
type RoleIdRoot = string

// SamlApplicationIdRoot defines model for samlApplicationId-root.
type SamlApplicationIdRoot = string

// SamlIdRoot defines model for samlId-root.
type SamlIdRoot = string

// ScopeId defines model for scopeId.
type ScopeId = string

// SecretId defines model for secretId.
type SecretId = string

// SsoConnectorId defines model for ssoConnectorId.
type SsoConnectorId = string

// SsoConnectorIdRoot defines model for ssoConnectorId-root.
type SsoConnectorIdRoot = string

// UserId defines model for userId.
type UserId = string

// VerificationId defines model for verificationId.
type VerificationId = string

// GetWellKnownExperienceParams defines parameters for GetWellKnownExperience.
type GetWellKnownExperienceParams struct {
	OrganizationId *string `form:"organizationId,omitempty" json:"organizationId,omitempty"`
	AppId          *string `form:"appId,omitempty" json:"appId,omitempty"`
}

// GetSignInExperiencePhrasesParams defines parameters for GetSignInExperiencePhrases.
type GetSignInExperiencePhrasesParams struct {
	// Lng The language tag for localization.
	Lng *string `form:"lng,omitempty" json:"lng,omitempty"`
}

// GetSignInExperienceConfigParams defines parameters for GetSignInExperienceConfig.
type GetSignInExperienceConfigParams struct {
	OrganizationId *string `form:"organizationId,omitempty" json:"organizationId,omitempty"`
	AppId          *string `form:"appId,omitempty" json:"appId,omitempty"`
}

// UpdateAccountCenterSettingsJSONBody defines parameters for UpdateAccountCenterSettings.
type UpdateAccountCenterSettingsJSONBody struct {
	// Enabled Enable or disable the account API.
	Enabled *bool `json:"enabled,omitempty"`

	// Fields The fields settings for the account API.
	Fields *struct {
		Avatar     *UpdateAccountCenterSettingsJSONBodyFieldsAvatar     `json:"avatar,omitempty"`
		CustomData *UpdateAccountCenterSettingsJSONBodyFieldsCustomData `json:"customData,omitempty"`
		Email      *UpdateAccountCenterSettingsJSONBodyFieldsEmail      `json:"email,omitempty"`
		Mfa        *UpdateAccountCenterSettingsJSONBodyFieldsMfa        `json:"mfa,omitempty"`
		Name       *UpdateAccountCenterSettingsJSONBodyFieldsName       `json:"name,omitempty"`
		Password   *UpdateAccountCenterSettingsJSONBodyFieldsPassword   `json:"password,omitempty"`
		Phone      *UpdateAccountCenterSettingsJSONBodyFieldsPhone      `json:"phone,omitempty"`
		Profile    *UpdateAccountCenterSettingsJSONBodyFieldsProfile    `json:"profile,omitempty"`
		Social     *UpdateAccountCenterSettingsJSONBodyFieldsSocial     `json:"social,omitempty"`
		Username   *UpdateAccountCenterSettingsJSONBodyFieldsUsername   `json:"username,omitempty"`
	} `json:"fields,omitempty"`

	// WebauthnRelatedOrigins The allowed domains for webauthn.
	WebauthnRelatedOrigins *[]string `json:"webauthnRelatedOrigins,omitempty"`
}

// UpdateAccountCenterSettingsJSONBodyFieldsAvatar defines parameters for UpdateAccountCenterSettings.
type UpdateAccountCenterSettingsJSONBodyFieldsAvatar string

// UpdateAccountCenterSettingsJSONBodyFieldsCustomData defines parameters for UpdateAccountCenterSettings.
type UpdateAccountCenterSettingsJSONBodyFieldsCustomData string

// UpdateAccountCenterSettingsJSONBodyFieldsEmail defines parameters for UpdateAccountCenterSettings.
type UpdateAccountCenterSettingsJSONBodyFieldsEmail string

// UpdateAccountCenterSettingsJSONBodyFieldsMfa defines parameters for UpdateAccountCenterSettings.
type UpdateAccountCenterSettingsJSONBodyFieldsMfa string

// UpdateAccountCenterSettingsJSONBodyFieldsName defines parameters for UpdateAccountCenterSettings.
type UpdateAccountCenterSettingsJSONBodyFieldsName string

// UpdateAccountCenterSettingsJSONBodyFieldsPassword defines parameters for UpdateAccountCenterSettings.
type UpdateAccountCenterSettingsJSONBodyFieldsPassword string

// UpdateAccountCenterSettingsJSONBodyFieldsPhone defines parameters for UpdateAccountCenterSettings.
type UpdateAccountCenterSettingsJSONBodyFieldsPhone string

// UpdateAccountCenterSettingsJSONBodyFieldsProfile defines parameters for UpdateAccountCenterSettings.
type UpdateAccountCenterSettingsJSONBodyFieldsProfile string

// UpdateAccountCenterSettingsJSONBodyFieldsSocial defines parameters for UpdateAccountCenterSettings.
type UpdateAccountCenterSettingsJSONBodyFieldsSocial string

// UpdateAccountCenterSettingsJSONBodyFieldsUsername defines parameters for UpdateAccountCenterSettings.
type UpdateAccountCenterSettingsJSONBodyFieldsUsername string

// ListApplicationsParams defines parameters for ListApplications.
type ListApplicationsParams struct {
	// Types An array of application types to filter applications.
	Types *struct {
		union json.RawMessage
	} `form:"types,omitempty" json:"types,omitempty"`
	ExcludeRoleId         *string `form:"excludeRoleId,omitempty" json:"excludeRoleId,omitempty"`
	ExcludeOrganizationId *string `form:"excludeOrganizationId,omitempty" json:"excludeOrganizationId,omitempty"`
	IsThirdParty          *struct {
		union json.RawMessage
	} `form:"isThirdParty,omitempty" json:"isThirdParty,omitempty"`

	// Page Page number (starts from 1).
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// PageSize Entries per page.
	PageSize *int `form:"page_size,omitempty" json:"page_size,omitempty"`

	// SearchParams Search query parameters.
	SearchParams *map[string]string `form:"search_params,omitempty" json:"search_params,omitempty"`
}

// ListApplicationsParamsTypes0 defines parameters for ListApplications.
type ListApplicationsParamsTypes0 = []ListApplicationsParamsTypes0

// ListApplicationsParamsTypes0 defines parameters for ListApplications.
type ListApplicationsParamsTypes0 string

// ListApplicationsParamsTypes1 defines parameters for ListApplications.
type ListApplicationsParamsTypes1 string

// ListApplicationsParamsIsThirdParty0 defines parameters for ListApplications.
type ListApplicationsParamsIsThirdParty0 = string

// ListApplicationsParamsIsThirdParty1 defines parameters for ListApplications.
type ListApplicationsParamsIsThirdParty1 = string

// CreateApplicationJSONBody defines parameters for CreateApplication.
type CreateApplicationJSONBody struct {
	CustomClientMetadata *struct {
		AlwaysIssueRefreshToken *bool     `json:"alwaysIssueRefreshToken,omitempty"`
		CorsAllowedOrigins      *[]string `json:"corsAllowedOrigins,omitempty"`
		IdTokenTtl              *float32  `json:"idTokenTtl,omitempty"`
		RefreshTokenTtl         *float32  `json:"refreshTokenTtl,omitempty"`
		RefreshTokenTtlInDays   *float32  `json:"refreshTokenTtlInDays,omitempty"`
		RotateRefreshToken      *bool     `json:"rotateRefreshToken,omitempty"`
		TenantId                *string   `json:"tenantId,omitempty"`
	} `json:"customClientMetadata,omitempty"`

	// CustomData arbitrary
	CustomData         *map[string]interface{} `json:"customData,omitempty"`
	Description        *string                 `json:"description"`
	IsThirdParty       *bool                   `json:"isThirdParty,omitempty"`
	Name               string                  `json:"name"`
	OidcClientMetadata *struct {
		BackchannelLogoutSessionRequired *bool                                                            `json:"backchannelLogoutSessionRequired,omitempty"`
		BackchannelLogoutUri             *string                                                          `json:"backchannelLogoutUri,omitempty"`
		LogoUri                          *string                                                          `json:"logoUri,omitempty"`
		PostLogoutRedirectUris           []string                                                         `json:"postLogoutRedirectUris"`
		RedirectUris                     []CreateApplicationJSONBody_OidcClientMetadata_RedirectUris_Item `json:"redirectUris"`
	} `json:"oidcClientMetadata,omitempty"`

	// ProtectedAppMetadata The data for protected app, this feature is not available for open source version.
	ProtectedAppMetadata *struct {
		// Origin The origin of target website, e.g., https://example.com.
		Origin string `json:"origin"`

		// SubDomain The subdomain prefix, e.g., my-site.
		SubDomain string `json:"subDomain"`
	} `json:"protectedAppMetadata,omitempty"`
	Type CreateApplicationJSONBodyType `json:"type"`
}

// CreateApplicationJSONBodyOidcClientMetadataRedirectUris0 defines parameters for CreateApplication.
type CreateApplicationJSONBodyOidcClientMetadataRedirectUris0 = map[string]interface{}

// CreateApplicationJSONBodyOidcClientMetadataRedirectUris1 defines parameters for CreateApplication.
type CreateApplicationJSONBodyOidcClientMetadataRedirectUris1 = map[string]interface{}

// CreateApplicationJSONBody_OidcClientMetadata_RedirectUris_Item defines parameters for CreateApplication.
type CreateApplicationJSONBody_OidcClientMetadata_RedirectUris_Item struct {
	union json.RawMessage
}

// CreateApplicationJSONBodyType defines parameters for CreateApplication.
type CreateApplicationJSONBodyType string

// UpdateApplicationCustomDataJSONBody defines parameters for UpdateApplicationCustomData.
type UpdateApplicationCustomDataJSONBody = map[string]interface{}

// ListApplicationRolesParams defines parameters for ListApplicationRoles.
type ListApplicationRolesParams struct {
	// Page Page number (starts from 1).
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// PageSize Entries per page.
	PageSize *int `form:"page_size,omitempty" json:"page_size,omitempty"`

	// SearchParams Search query parameters.
	SearchParams *map[string]string `form:"search_params,omitempty" json:"search_params,omitempty"`
}

// AssignApplicationRolesJSONBody defines parameters for AssignApplicationRoles.
type AssignApplicationRolesJSONBody struct {
	// RoleIds An array of API resource role IDs to assign.
	RoleIds []string `json:"roleIds"`
}

// ReplaceApplicationRolesJSONBody defines parameters for ReplaceApplicationRoles.
type ReplaceApplicationRolesJSONBody struct {
	// RoleIds An array of API resource role IDs to update for the application.
	RoleIds []string `json:"roleIds"`
}

// ReplaceApplicationSignInExperienceJSONBody defines parameters for ReplaceApplicationSignInExperience.
type ReplaceApplicationSignInExperienceJSONBody struct {
	Branding *struct {
		DarkFavicon *string `json:"darkFavicon,omitempty"`
		DarkLogoUrl *string `json:"darkLogoUrl,omitempty"`
		Favicon     *string `json:"favicon,omitempty"`
		LogoUrl     *string `json:"logoUrl,omitempty"`
	} `json:"branding,omitempty"`
	Color *struct {
		DarkPrimaryColor  *string `json:"darkPrimaryColor,omitempty"`
		IsDarkModeEnabled *bool   `json:"isDarkModeEnabled,omitempty"`
		PrimaryColor      *string `json:"primaryColor,omitempty"`
	} `json:"color,omitempty"`
	DisplayName      *string                                                     `json:"displayName"`
	PrivacyPolicyUrl ReplaceApplicationSignInExperienceJSONBody_PrivacyPolicyUrl `json:"privacyPolicyUrl"`
	TermsOfUseUrl    ReplaceApplicationSignInExperienceJSONBody_TermsOfUseUrl    `json:"termsOfUseUrl"`
}

// ReplaceApplicationSignInExperienceJSONBodyPrivacyPolicyUrl0 defines parameters for ReplaceApplicationSignInExperience.
type ReplaceApplicationSignInExperienceJSONBodyPrivacyPolicyUrl0 = string

// ReplaceApplicationSignInExperienceJSONBodyPrivacyPolicyUrl1 defines parameters for ReplaceApplicationSignInExperience.
type ReplaceApplicationSignInExperienceJSONBodyPrivacyPolicyUrl1 = string

// ReplaceApplicationSignInExperienceJSONBody_PrivacyPolicyUrl defines parameters for ReplaceApplicationSignInExperience.
type ReplaceApplicationSignInExperienceJSONBody_PrivacyPolicyUrl struct {
	union json.RawMessage
}

// ReplaceApplicationSignInExperienceJSONBodyTermsOfUseUrl0 defines parameters for ReplaceApplicationSignInExperience.
type ReplaceApplicationSignInExperienceJSONBodyTermsOfUseUrl0 = string

// ReplaceApplicationSignInExperienceJSONBodyTermsOfUseUrl1 defines parameters for ReplaceApplicationSignInExperience.
type ReplaceApplicationSignInExperienceJSONBodyTermsOfUseUrl1 = string

// ReplaceApplicationSignInExperienceJSONBody_TermsOfUseUrl defines parameters for ReplaceApplicationSignInExperience.
type ReplaceApplicationSignInExperienceJSONBody_TermsOfUseUrl struct {
	union json.RawMessage
}

// CreateApplicationUserConsentScopeJSONBody defines parameters for CreateApplicationUserConsentScope.
type CreateApplicationUserConsentScopeJSONBody struct {
	// OrganizationResourceScopes A list of organization resource scope id to assign to the application. Throws error if any given resource scope is not found.
	OrganizationResourceScopes *[]string `json:"organizationResourceScopes,omitempty"`

	// OrganizationScopes A list of organization scope id to assign to the application. Throws error if any given organization scope is not found.
	OrganizationScopes *[]string `json:"organizationScopes,omitempty"`

	// ResourceScopes A list of resource scope id to assign to the application. Throws error if any given resource scope is not found.
	ResourceScopes *[]string `json:"resourceScopes,omitempty"`

	// UserScopes A list of user scope enum value to assign to the application.
	UserScopes *[]CreateApplicationUserConsentScopeJSONBodyUserScopes `json:"userScopes,omitempty"`
}

// CreateApplicationUserConsentScopeJSONBodyUserScopes defines parameters for CreateApplicationUserConsentScope.
type CreateApplicationUserConsentScopeJSONBodyUserScopes string

// DeleteApplicationUserConsentScopeParamsScopeType defines parameters for DeleteApplicationUserConsentScope.
type DeleteApplicationUserConsentScopeParamsScopeType string

// UpdateApplicationJSONBody defines parameters for UpdateApplication.
type UpdateApplicationJSONBody struct {
	CustomClientMetadata *struct {
		AlwaysIssueRefreshToken *bool     `json:"alwaysIssueRefreshToken,omitempty"`
		CorsAllowedOrigins      *[]string `json:"corsAllowedOrigins,omitempty"`
		IdTokenTtl              *float32  `json:"idTokenTtl,omitempty"`
		RefreshTokenTtl         *float32  `json:"refreshTokenTtl,omitempty"`
		RefreshTokenTtlInDays   *float32  `json:"refreshTokenTtlInDays,omitempty"`
		RotateRefreshToken      *bool     `json:"rotateRefreshToken,omitempty"`
		TenantId                *string   `json:"tenantId,omitempty"`
	} `json:"customClientMetadata,omitempty"`

	// CustomData arbitrary
	CustomData  *map[string]interface{} `json:"customData,omitempty"`
	Description *string                 `json:"description"`

	// IsAdmin Whether the application has admin access. User can enable the admin access for Machine-to-Machine apps.
	IsAdmin            *bool   `json:"isAdmin,omitempty"`
	Name               *string `json:"name,omitempty"`
	OidcClientMetadata *struct {
		BackchannelLogoutSessionRequired *bool                                                            `json:"backchannelLogoutSessionRequired,omitempty"`
		BackchannelLogoutUri             *string                                                          `json:"backchannelLogoutUri,omitempty"`
		LogoUri                          *string                                                          `json:"logoUri,omitempty"`
		PostLogoutRedirectUris           []string                                                         `json:"postLogoutRedirectUris"`
		RedirectUris                     []UpdateApplicationJSONBody_OidcClientMetadata_RedirectUris_Item `json:"redirectUris"`
	} `json:"oidcClientMetadata,omitempty"`
	ProtectedAppMetadata *struct {
		Origin    *string `json:"origin,omitempty"`
		PageRules *[]struct {
			Path string `json:"path"`
		} `json:"pageRules,omitempty"`
		SessionDuration *float32 `json:"sessionDuration,omitempty"`
	} `json:"protectedAppMetadata,omitempty"`
}

// UpdateApplicationJSONBodyOidcClientMetadataRedirectUris0 defines parameters for UpdateApplication.
type UpdateApplicationJSONBodyOidcClientMetadataRedirectUris0 = map[string]interface{}

// UpdateApplicationJSONBodyOidcClientMetadataRedirectUris1 defines parameters for UpdateApplication.
type UpdateApplicationJSONBodyOidcClientMetadataRedirectUris1 = map[string]interface{}

// UpdateApplicationJSONBody_OidcClientMetadata_RedirectUris_Item defines parameters for UpdateApplication.
type UpdateApplicationJSONBody_OidcClientMetadata_RedirectUris_Item struct {
	union json.RawMessage
}

// ListApplicationOrganizationsParams defines parameters for ListApplicationOrganizations.
type ListApplicationOrganizationsParams struct {
	// Page Page number (starts from 1).
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// PageSize Entries per page.
	PageSize *int `form:"page_size,omitempty" json:"page_size,omitempty"`
}

// CreateApplicationProtectedAppMetadataCustomDomainJSONBody defines parameters for CreateApplicationProtectedAppMetadataCustomDomain.
type CreateApplicationProtectedAppMetadataCustomDomainJSONBody struct {
	// Domain The domain to be added to the application.
	Domain string `json:"domain"`
}

// CreateApplicationSecretJSONBody defines parameters for CreateApplicationSecret.
type CreateApplicationSecretJSONBody struct {
	// ExpiresAt The epoch time in milliseconds when the secret will expire. If not provided, the secret will never expire.
	ExpiresAt *float32 `json:"expiresAt"`

	// Name The secret name. Must be unique within the application.
	Name string `json:"name"`
}

// UpdateApplicationSecretJSONBody defines parameters for UpdateApplicationSecret.
type UpdateApplicationSecretJSONBody struct {
	// Name The secret name to update. Must be unique within the application.
	Name string `json:"name"`
}

// ListApplicationUserConsentOrganizationsParams defines parameters for ListApplicationUserConsentOrganizations.
type ListApplicationUserConsentOrganizationsParams struct {
	// Page Page number (starts from 1).
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// PageSize Entries per page.
	PageSize *int `form:"page_size,omitempty" json:"page_size,omitempty"`
}

// CreateApplicationUserConsentOrganizationJSONBody defines parameters for CreateApplicationUserConsentOrganization.
type CreateApplicationUserConsentOrganizationJSONBody struct {
	// OrganizationIds A list of organization ids to be granted.
	OrganizationIds []string `json:"organizationIds"`
}

// ReplaceApplicationUserConsentOrganizationsJSONBody defines parameters for ReplaceApplicationUserConsentOrganizations.
type ReplaceApplicationUserConsentOrganizationsJSONBody struct {
	// OrganizationIds A list of organization ids to be granted. <br/> All the existing organizations' access will be revoked if not in the list. <br/> If the list is empty, all the organizations' access will be revoked.
	OrganizationIds []string `json:"organizationIds"`
}

// GetHasuraAuthParams defines parameters for GetHasuraAuth.
type GetHasuraAuthParams struct {
	Resource         string  `form:"resource" json:"resource"`
	UnauthorizedRole *string `form:"unauthorizedRole,omitempty" json:"unauthorizedRole,omitempty"`
}

// AssertSamlJSONBody defines parameters for AssertSaml.
type AssertSamlJSONBody = map[string]interface{}

// AssertSingleSignOnSamlJSONBody defines parameters for AssertSingleSignOnSaml.
type AssertSingleSignOnSamlJSONBody struct {
	// RelayState SAML standard parameter that will be transmitted between the identity provider and the service provider. It will be used as the session ID (jti) of the user's Logto authentication session. This API will use this session ID to retrieve the SSO connector authentication session from the database.
	RelayState *string `json:"RelayState,omitempty"`

	// SAMLResponse The SAML assertion response from the identity provider (IdP).
	SAMLResponse string `json:"SAMLResponse"`
}

// UpdateCaptchaProviderJSONBody defines parameters for UpdateCaptchaProvider.
type UpdateCaptchaProviderJSONBody struct {
	// Config The captcha provider config.
	Config UpdateCaptchaProviderJSONBody_Config `json:"config"`
}

// UpdateCaptchaProviderJSONBodyConfig0 defines parameters for UpdateCaptchaProvider.
type UpdateCaptchaProviderJSONBodyConfig0 struct {
	SecretKey string `json:"secretKey"`
	SiteKey   string `json:"siteKey"`
	Type      string `json:"type"`
}

// UpdateCaptchaProviderJSONBodyConfig1 defines parameters for UpdateCaptchaProvider.
type UpdateCaptchaProviderJSONBodyConfig1 struct {
	ProjectId string `json:"projectId"`
	SecretKey string `json:"secretKey"`
	SiteKey   string `json:"siteKey"`
	Type      string `json:"type"`
}

// UpdateCaptchaProviderJSONBody_Config defines parameters for UpdateCaptchaProvider.
type UpdateCaptchaProviderJSONBody_Config struct {
	union json.RawMessage
}

// UpdateAdminConsoleConfigJSONBody defines parameters for UpdateAdminConsoleConfig.
type UpdateAdminConsoleConfigJSONBody struct {
	CheckedChargeNotification *struct {
		ApiResource         *bool `json:"apiResource,omitempty"`
		MachineToMachineApp *bool `json:"machineToMachineApp,omitempty"`
		TenantMember        *bool `json:"tenantMember,omitempty"`
		Token               *bool `json:"token,omitempty"`
	} `json:"checkedChargeNotification,omitempty"`
	DevelopmentTenantMigrationNotification *struct {
		IsPaidTenant bool     `json:"isPaidTenant"`
		ReadAt       *float32 `json:"readAt,omitempty"`
		Tag          string   `json:"tag"`
	} `json:"developmentTenantMigrationNotification,omitempty"`
	OrganizationCreated        *bool `json:"organizationCreated,omitempty"`
	SignInExperienceCustomized *bool `json:"signInExperienceCustomized,omitempty"`
}

// TestJwtCustomizerJSONBody defines parameters for TestJwtCustomizer.
type TestJwtCustomizerJSONBody struct {
	Payload *struct {
		// ContextSample The sample context for the JWT customizer script testing purpose.
		ContextSample *interface{} `json:"contextSample,omitempty"`

		// EnvironmentVariables The environment variables for the JWT customizer.
		EnvironmentVariables *interface{} `json:"environmentVariables,omitempty"`

		// Script The code snippet of the JWT customizer.
		Script *interface{} `json:"script,omitempty"`

		// TokenSample The sample token payload for the JWT customizer script testing purpose.
		TokenSample *interface{} `json:"tokenSample,omitempty"`
	} `json:"payload,omitempty"`

	// TokenType The token type to test the JWT customizer for.
	TokenType *interface{} `json:"tokenType,omitempty"`
	union     json.RawMessage
}

// TestJwtCustomizerJSONBody0 defines parameters for TestJwtCustomizer.
type TestJwtCustomizerJSONBody0 struct {
	Context struct {
		Grant *struct {
			// SubjectTokenContext arbitrary
			SubjectTokenContext *map[string]interface{} `json:"subjectTokenContext,omitempty"`
			Type                *string                 `json:"type,omitempty"`
		} `json:"grant,omitempty"`
		Interaction *struct {
			InteractionEvent    *TestJwtCustomizerJSONBody0ContextInteractionInteractionEvent               `json:"interactionEvent,omitempty"`
			UserId              *string                                                                     `json:"userId,omitempty"`
			VerificationRecords *[]TestJwtCustomizerJSONBody_0_Context_Interaction_VerificationRecords_Item `json:"verificationRecords,omitempty"`
		} `json:"interaction,omitempty"`
		User struct {
			ApplicationId *string  `json:"applicationId"`
			Avatar        *string  `json:"avatar"`
			CreatedAt     *float32 `json:"createdAt,omitempty"`

			// CustomData arbitrary
			CustomData  *map[string]interface{} `json:"customData,omitempty"`
			HasPassword *bool                   `json:"hasPassword,omitempty"`
			Id          *string                 `json:"id,omitempty"`
			Identities  *map[string]struct {
				// Details arbitrary
				Details *map[string]interface{} `json:"details,omitempty"`
				UserId  string                  `json:"userId"`
			} `json:"identities,omitempty"`
			IsSuspended            *bool                                                          `json:"isSuspended,omitempty"`
			LastSignInAt           *float32                                                       `json:"lastSignInAt"`
			MfaVerificationFactors *[]TestJwtCustomizerJSONBody0ContextUserMfaVerificationFactors `json:"mfaVerificationFactors,omitempty"`
			Name                   *string                                                        `json:"name"`
			OrganizationRoles      *[]struct {
				OrganizationId string `json:"organizationId"`
				RoleId         string `json:"roleId"`
				RoleName       string `json:"roleName"`
			} `json:"organizationRoles,omitempty"`
			Organizations *[]struct {
				Description *string `json:"description"`
				Id          string  `json:"id"`
				Name        string  `json:"name"`
			} `json:"organizations,omitempty"`
			PrimaryEmail *string `json:"primaryEmail"`
			PrimaryPhone *string `json:"primaryPhone"`
			Profile      *struct {
				Address *struct {
					Country       *string `json:"country,omitempty"`
					Formatted     *string `json:"formatted,omitempty"`
					Locality      *string `json:"locality,omitempty"`
					PostalCode    *string `json:"postalCode,omitempty"`
					Region        *string `json:"region,omitempty"`
					StreetAddress *string `json:"streetAddress,omitempty"`
				} `json:"address,omitempty"`
				Birthdate         *string `json:"birthdate,omitempty"`
				FamilyName        *string `json:"familyName,omitempty"`
				Gender            *string `json:"gender,omitempty"`
				GivenName         *string `json:"givenName,omitempty"`
				Locale            *string `json:"locale,omitempty"`
				MiddleName        *string `json:"middleName,omitempty"`
				Nickname          *string `json:"nickname,omitempty"`
				PreferredUsername *string `json:"preferredUsername,omitempty"`
				Profile           *string `json:"profile,omitempty"`
				Website           *string `json:"website,omitempty"`
				Zoneinfo          *string `json:"zoneinfo,omitempty"`
			} `json:"profile,omitempty"`
			Roles *[]struct {
				Description string `json:"description"`
				Id          string `json:"id"`
				Name        string `json:"name"`
				Scopes      []struct {
					Description *string `json:"description"`
					Id          string  `json:"id"`
					Name        string  `json:"name"`
					Resource    struct {
						AccessTokenTtl float32 `json:"accessTokenTtl"`
						Id             string  `json:"id"`
						Indicator      string  `json:"indicator"`
						IsDefault      bool    `json:"isDefault"`
						Name           string  `json:"name"`
						TenantId       string  `json:"tenantId"`
					} `json:"resource"`
					ResourceId string `json:"resourceId"`
				} `json:"scopes"`
			} `json:"roles,omitempty"`
			SsoIdentities *[]struct {
				// Detail arbitrary
				Detail     map[string]interface{} `json:"detail"`
				IdentityId string                 `json:"identityId"`
				Issuer     string                 `json:"issuer"`
			} `json:"ssoIdentities,omitempty"`
			UpdatedAt *float32 `json:"updatedAt,omitempty"`
			Username  *string  `json:"username"`
		} `json:"user"`
	} `json:"context"`
	EnvironmentVariables *map[string]string `json:"environmentVariables,omitempty"`
	Script               string             `json:"script"`
	Token                struct {
		AccountId          *string                                `json:"accountId,omitempty"`
		Aud                *TestJwtCustomizerJSONBody_0_Token_Aud `json:"aud,omitempty"`
		ClientId           *string                                `json:"clientId,omitempty"`
		ExpiresWithSession *bool                                  `json:"expiresWithSession,omitempty"`
		GrantId            *string                                `json:"grantId,omitempty"`
		Gty                *string                                `json:"gty,omitempty"`
		Jti                *string                                `json:"jti,omitempty"`
		Kind               *string                                `json:"kind,omitempty"`
		Scope              *string                                `json:"scope,omitempty"`
		SessionUid         *string                                `json:"sessionUid,omitempty"`
		Sid                *string                                `json:"sid,omitempty"`
	} `json:"token"`
	TokenType string `json:"tokenType"`
}

// TestJwtCustomizerJSONBody0ContextInteractionInteractionEvent defines parameters for TestJwtCustomizer.
type TestJwtCustomizerJSONBody0ContextInteractionInteractionEvent string

// TestJwtCustomizerJSONBody0ContextInteractionVerificationRecords0 defines parameters for TestJwtCustomizer.
type TestJwtCustomizerJSONBody0ContextInteractionVerificationRecords0 struct {
	Id         string `json:"id"`
	Identifier struct {
		Type  TestJwtCustomizerJSONBody_0_Context_Interaction_VerificationRecords_0_Identifier_Type `json:"type"`
		Value string                                                                                `json:"value"`
	} `json:"identifier"`
	Type     string `json:"type"`
	Verified bool   `json:"verified"`
}

// TestJwtCustomizerJSONBody0ContextInteractionVerificationRecords0IdentifierType0 defines parameters for TestJwtCustomizer.
type TestJwtCustomizerJSONBody0ContextInteractionVerificationRecords0IdentifierType0 string

// TestJwtCustomizerJSONBody0ContextInteractionVerificationRecords0IdentifierType1 defines parameters for TestJwtCustomizer.
type TestJwtCustomizerJSONBody0ContextInteractionVerificationRecords0IdentifierType1 string

// TestJwtCustomizerJSONBody_0_Context_Interaction_VerificationRecords_0_Identifier_Type defines parameters for TestJwtCustomizer.
type TestJwtCustomizerJSONBody_0_Context_Interaction_VerificationRecords_0_Identifier_Type struct {
	union json.RawMessage
}

// TestJwtCustomizerJSONBody0ContextInteractionVerificationRecords1 defines parameters for TestJwtCustomizer.
type TestJwtCustomizerJSONBody0ContextInteractionVerificationRecords1 struct {
	Id         string `json:"id"`
	Identifier struct {
		Type  string `json:"type"`
		Value string `json:"value"`
	} `json:"identifier"`
	TemplateType TestJwtCustomizerJSONBody0ContextInteractionVerificationRecords1TemplateType `json:"templateType"`
	Type         string                                                                       `json:"type"`
	Verified     bool                                                                         `json:"verified"`
}

// TestJwtCustomizerJSONBody0ContextInteractionVerificationRecords1TemplateType defines parameters for TestJwtCustomizer.
type TestJwtCustomizerJSONBody0ContextInteractionVerificationRecords1TemplateType string

// TestJwtCustomizerJSONBody0ContextInteractionVerificationRecords2 defines parameters for TestJwtCustomizer.
type TestJwtCustomizerJSONBody0ContextInteractionVerificationRecords2 struct {
	Id         string `json:"id"`
	Identifier struct {
		Type  string `json:"type"`
		Value string `json:"value"`
	} `json:"identifier"`
	TemplateType TestJwtCustomizerJSONBody0ContextInteractionVerificationRecords2TemplateType `json:"templateType"`
	Type         string                                                                       `json:"type"`
	Verified     bool                                                                         `json:"verified"`
}

// TestJwtCustomizerJSONBody0ContextInteractionVerificationRecords2TemplateType defines parameters for TestJwtCustomizer.
type TestJwtCustomizerJSONBody0ContextInteractionVerificationRecords2TemplateType string

// TestJwtCustomizerJSONBody0ContextInteractionVerificationRecords3 defines parameters for TestJwtCustomizer.
type TestJwtCustomizerJSONBody0ContextInteractionVerificationRecords3 struct {
	ConnectorId    string `json:"connectorId"`
	Id             string `json:"id"`
	SocialUserInfo *struct {
		Avatar  *string                                                                                       `json:"avatar,omitempty"`
		Email   *string                                                                                       `json:"email,omitempty"`
		Id      string                                                                                        `json:"id"`
		Name    *string                                                                                       `json:"name,omitempty"`
		Phone   *string                                                                                       `json:"phone,omitempty"`
		RawData *TestJwtCustomizerJSONBody_0_Context_Interaction_VerificationRecords_3_SocialUserInfo_RawData `json:"rawData"`
	} `json:"socialUserInfo,omitempty"`
	Type string `json:"type"`
}

// TestJwtCustomizerJSONBody0ContextInteractionVerificationRecords3SocialUserInfoRawData0 defines parameters for TestJwtCustomizer.
type TestJwtCustomizerJSONBody0ContextInteractionVerificationRecords3SocialUserInfoRawData0 = map[string]interface{}

// TestJwtCustomizerJSONBody0ContextInteractionVerificationRecords3SocialUserInfoRawData1 defines parameters for TestJwtCustomizer.
type TestJwtCustomizerJSONBody0ContextInteractionVerificationRecords3SocialUserInfoRawData1 = []TestJwtCustomizerJSONBody_0_Context_Interaction_VerificationRecords_3_SocialUserInfo_RawData_1_Item

// TestJwtCustomizerJSONBody0ContextInteractionVerificationRecords3SocialUserInfoRawData10 defines parameters for TestJwtCustomizer.
type TestJwtCustomizerJSONBody0ContextInteractionVerificationRecords3SocialUserInfoRawData10 = string

// TestJwtCustomizerJSONBody0ContextInteractionVerificationRecords3SocialUserInfoRawData11 defines parameters for TestJwtCustomizer.
type TestJwtCustomizerJSONBody0ContextInteractionVerificationRecords3SocialUserInfoRawData11 = float32

// TestJwtCustomizerJSONBody0ContextInteractionVerificationRecords3SocialUserInfoRawData12 defines parameters for TestJwtCustomizer.
type TestJwtCustomizerJSONBody0ContextInteractionVerificationRecords3SocialUserInfoRawData12 = bool

// TestJwtCustomizerJSONBody0ContextInteractionVerificationRecords3SocialUserInfoRawData13 defines parameters for TestJwtCustomizer.
type TestJwtCustomizerJSONBody0ContextInteractionVerificationRecords3SocialUserInfoRawData13 = interface{}

// TestJwtCustomizerJSONBody0ContextInteractionVerificationRecords3SocialUserInfoRawData14 defines parameters for TestJwtCustomizer.
type TestJwtCustomizerJSONBody0ContextInteractionVerificationRecords3SocialUserInfoRawData14 = map[string]interface{}

// TestJwtCustomizerJSONBody_0_Context_Interaction_VerificationRecords_3_SocialUserInfo_RawData_1_Item defines parameters for TestJwtCustomizer.
type TestJwtCustomizerJSONBody_0_Context_Interaction_VerificationRecords_3_SocialUserInfo_RawData_1_Item struct {
	union json.RawMessage
}

// TestJwtCustomizerJSONBody0ContextInteractionVerificationRecords3SocialUserInfoRawData2 defines parameters for TestJwtCustomizer.
type TestJwtCustomizerJSONBody0ContextInteractionVerificationRecords3SocialUserInfoRawData2 = string

// TestJwtCustomizerJSONBody0ContextInteractionVerificationRecords3SocialUserInfoRawData3 defines parameters for TestJwtCustomizer.
type TestJwtCustomizerJSONBody0ContextInteractionVerificationRecords3SocialUserInfoRawData3 = float32

// TestJwtCustomizerJSONBody0ContextInteractionVerificationRecords3SocialUserInfoRawData4 defines parameters for TestJwtCustomizer.
type TestJwtCustomizerJSONBody0ContextInteractionVerificationRecords3SocialUserInfoRawData4 = bool

// TestJwtCustomizerJSONBody_0_Context_Interaction_VerificationRecords_3_SocialUserInfo_RawData defines parameters for TestJwtCustomizer.
type TestJwtCustomizerJSONBody_0_Context_Interaction_VerificationRecords_3_SocialUserInfo_RawData struct {
	union json.RawMessage
}

// TestJwtCustomizerJSONBody0ContextInteractionVerificationRecords4 defines parameters for TestJwtCustomizer.
type TestJwtCustomizerJSONBody0ContextInteractionVerificationRecords4 struct {
	ConnectorId           string `json:"connectorId"`
	EnterpriseSsoUserInfo *struct {
		Avatar  *string                                                                                              `json:"avatar,omitempty"`
		Email   *string                                                                                              `json:"email,omitempty"`
		Id      string                                                                                               `json:"id"`
		Name    *string                                                                                              `json:"name,omitempty"`
		Phone   *string                                                                                              `json:"phone,omitempty"`
		RawData *TestJwtCustomizerJSONBody_0_Context_Interaction_VerificationRecords_4_EnterpriseSsoUserInfo_RawData `json:"rawData"`
	} `json:"enterpriseSsoUserInfo,omitempty"`
	Id     string  `json:"id"`
	Issuer *string `json:"issuer,omitempty"`
	Type   string  `json:"type"`
}

// TestJwtCustomizerJSONBody0ContextInteractionVerificationRecords4EnterpriseSsoUserInfoRawData0 defines parameters for TestJwtCustomizer.
type TestJwtCustomizerJSONBody0ContextInteractionVerificationRecords4EnterpriseSsoUserInfoRawData0 = map[string]interface{}

// TestJwtCustomizerJSONBody0ContextInteractionVerificationRecords4EnterpriseSsoUserInfoRawData1 defines parameters for TestJwtCustomizer.
type TestJwtCustomizerJSONBody0ContextInteractionVerificationRecords4EnterpriseSsoUserInfoRawData1 = []TestJwtCustomizerJSONBody_0_Context_Interaction_VerificationRecords_4_EnterpriseSsoUserInfo_RawData_1_Item

// TestJwtCustomizerJSONBody0ContextInteractionVerificationRecords4EnterpriseSsoUserInfoRawData10 defines parameters for TestJwtCustomizer.
type TestJwtCustomizerJSONBody0ContextInteractionVerificationRecords4EnterpriseSsoUserInfoRawData10 = string

// TestJwtCustomizerJSONBody0ContextInteractionVerificationRecords4EnterpriseSsoUserInfoRawData11 defines parameters for TestJwtCustomizer.
type TestJwtCustomizerJSONBody0ContextInteractionVerificationRecords4EnterpriseSsoUserInfoRawData11 = float32

// TestJwtCustomizerJSONBody0ContextInteractionVerificationRecords4EnterpriseSsoUserInfoRawData12 defines parameters for TestJwtCustomizer.
type TestJwtCustomizerJSONBody0ContextInteractionVerificationRecords4EnterpriseSsoUserInfoRawData12 = bool

// TestJwtCustomizerJSONBody0ContextInteractionVerificationRecords4EnterpriseSsoUserInfoRawData13 defines parameters for TestJwtCustomizer.
type TestJwtCustomizerJSONBody0ContextInteractionVerificationRecords4EnterpriseSsoUserInfoRawData13 = interface{}

// TestJwtCustomizerJSONBody0ContextInteractionVerificationRecords4EnterpriseSsoUserInfoRawData14 defines parameters for TestJwtCustomizer.
type TestJwtCustomizerJSONBody0ContextInteractionVerificationRecords4EnterpriseSsoUserInfoRawData14 = map[string]interface{}

// TestJwtCustomizerJSONBody_0_Context_Interaction_VerificationRecords_4_EnterpriseSsoUserInfo_RawData_1_Item defines parameters for TestJwtCustomizer.
type TestJwtCustomizerJSONBody_0_Context_Interaction_VerificationRecords_4_EnterpriseSsoUserInfo_RawData_1_Item struct {
	union json.RawMessage
}

// TestJwtCustomizerJSONBody0ContextInteractionVerificationRecords4EnterpriseSsoUserInfoRawData2 defines parameters for TestJwtCustomizer.
type TestJwtCustomizerJSONBody0ContextInteractionVerificationRecords4EnterpriseSsoUserInfoRawData2 = string

// TestJwtCustomizerJSONBody0ContextInteractionVerificationRecords4EnterpriseSsoUserInfoRawData3 defines parameters for TestJwtCustomizer.
type TestJwtCustomizerJSONBody0ContextInteractionVerificationRecords4EnterpriseSsoUserInfoRawData3 = float32

// TestJwtCustomizerJSONBody0ContextInteractionVerificationRecords4EnterpriseSsoUserInfoRawData4 defines parameters for TestJwtCustomizer.
type TestJwtCustomizerJSONBody0ContextInteractionVerificationRecords4EnterpriseSsoUserInfoRawData4 = bool

// TestJwtCustomizerJSONBody_0_Context_Interaction_VerificationRecords_4_EnterpriseSsoUserInfo_RawData defines parameters for TestJwtCustomizer.
type TestJwtCustomizerJSONBody_0_Context_Interaction_VerificationRecords_4_EnterpriseSsoUserInfo_RawData struct {
	union json.RawMessage
}

// TestJwtCustomizerJSONBody0ContextInteractionVerificationRecords5 defines parameters for TestJwtCustomizer.
type TestJwtCustomizerJSONBody0ContextInteractionVerificationRecords5 struct {
	Id       string `json:"id"`
	Type     string `json:"type"`
	UserId   string `json:"userId"`
	Verified bool   `json:"verified"`
}

// TestJwtCustomizerJSONBody0ContextInteractionVerificationRecords6 defines parameters for TestJwtCustomizer.
type TestJwtCustomizerJSONBody0ContextInteractionVerificationRecords6 struct {
	Code   *string `json:"code,omitempty"`
	Id     string  `json:"id"`
	Type   string  `json:"type"`
	UserId string  `json:"userId"`
}

// TestJwtCustomizerJSONBody0ContextInteractionVerificationRecords7 defines parameters for TestJwtCustomizer.
type TestJwtCustomizerJSONBody0ContextInteractionVerificationRecords7 struct {
	Id       string `json:"id"`
	Type     string `json:"type"`
	UserId   string `json:"userId"`
	Verified bool   `json:"verified"`
}

// TestJwtCustomizerJSONBody0ContextInteractionVerificationRecords8 defines parameters for TestJwtCustomizer.
type TestJwtCustomizerJSONBody0ContextInteractionVerificationRecords8 struct {
	Id         string `json:"id"`
	Identifier struct {
		Type  string `json:"type"`
		Value string `json:"value"`
	} `json:"identifier"`
	OneTimeTokenContext *struct {
		JitOrganizationIds *[]string `json:"jitOrganizationIds,omitempty"`
	} `json:"oneTimeTokenContext,omitempty"`
	Type     string `json:"type"`
	Verified bool   `json:"verified"`
}

// TestJwtCustomizerJSONBody0ContextInteractionVerificationRecords9 defines parameters for TestJwtCustomizer.
type TestJwtCustomizerJSONBody0ContextInteractionVerificationRecords9 struct {
	Id         string `json:"id"`
	Identifier struct {
		Type  TestJwtCustomizerJSONBody0ContextInteractionVerificationRecords9IdentifierType `json:"type"`
		Value string                                                                         `json:"value"`
	} `json:"identifier"`
	Type string `json:"type"`
}

// TestJwtCustomizerJSONBody0ContextInteractionVerificationRecords9IdentifierType defines parameters for TestJwtCustomizer.
type TestJwtCustomizerJSONBody0ContextInteractionVerificationRecords9IdentifierType string

// TestJwtCustomizerJSONBody_0_Context_Interaction_VerificationRecords_Item defines parameters for TestJwtCustomizer.
type TestJwtCustomizerJSONBody_0_Context_Interaction_VerificationRecords_Item struct {
	union json.RawMessage
}

// TestJwtCustomizerJSONBody0ContextUserMfaVerificationFactors defines parameters for TestJwtCustomizer.
type TestJwtCustomizerJSONBody0ContextUserMfaVerificationFactors string

// TestJwtCustomizerJSONBody0TokenAud0 defines parameters for TestJwtCustomizer.
type TestJwtCustomizerJSONBody0TokenAud0 = string

// TestJwtCustomizerJSONBody0TokenAud1 defines parameters for TestJwtCustomizer.
type TestJwtCustomizerJSONBody0TokenAud1 = []string

// TestJwtCustomizerJSONBody_0_Token_Aud defines parameters for TestJwtCustomizer.
type TestJwtCustomizerJSONBody_0_Token_Aud struct {
	union json.RawMessage
}

// TestJwtCustomizerJSONBody1 defines parameters for TestJwtCustomizer.
type TestJwtCustomizerJSONBody1 struct {
	EnvironmentVariables *map[string]string `json:"environmentVariables,omitempty"`
	Script               string             `json:"script"`
	Token                struct {
		Aud      *TestJwtCustomizerJSONBody_1_Token_Aud `json:"aud,omitempty"`
		ClientId *string                                `json:"clientId,omitempty"`
		Jti      *string                                `json:"jti,omitempty"`
		Kind     *string                                `json:"kind,omitempty"`
		Scope    *string                                `json:"scope,omitempty"`
	} `json:"token"`
	TokenType string `json:"tokenType"`
}

// TestJwtCustomizerJSONBody1TokenAud0 defines parameters for TestJwtCustomizer.
type TestJwtCustomizerJSONBody1TokenAud0 = string

// TestJwtCustomizerJSONBody1TokenAud1 defines parameters for TestJwtCustomizer.
type TestJwtCustomizerJSONBody1TokenAud1 = []string

// TestJwtCustomizerJSONBody_1_Token_Aud defines parameters for TestJwtCustomizer.
type TestJwtCustomizerJSONBody_1_Token_Aud struct {
	union json.RawMessage
}

// DeleteJwtCustomizerParamsTokenTypePath defines parameters for DeleteJwtCustomizer.
type DeleteJwtCustomizerParamsTokenTypePath string

// GetJwtCustomizerParamsTokenTypePath defines parameters for GetJwtCustomizer.
type GetJwtCustomizerParamsTokenTypePath string

// UpdateJwtCustomizerJSONBody defines parameters for UpdateJwtCustomizer.
type UpdateJwtCustomizerJSONBody struct {
	// ContextSample The sample context for the JWT customizer script testing purpose.
	ContextSample *interface{} `json:"contextSample,omitempty"`

	// EnvironmentVariables The environment variables for the JWT customizer.
	EnvironmentVariables *interface{} `json:"environmentVariables,omitempty"`

	// Script The script of the JWT customizer.
	Script *interface{} `json:"script,omitempty"`

	// TokenSample The sample raw token payload for the JWT customizer script testing purpose.
	TokenSample *interface{} `json:"tokenSample,omitempty"`
}

// UpdateJwtCustomizerParamsTokenTypePath defines parameters for UpdateJwtCustomizer.
type UpdateJwtCustomizerParamsTokenTypePath string

// UpsertJwtCustomizerJSONBody defines parameters for UpsertJwtCustomizer.
type UpsertJwtCustomizerJSONBody struct {
	// ContextSample The sample context for the JWT customizer script testing purpose.
	ContextSample *interface{} `json:"contextSample,omitempty"`

	// EnvironmentVariables The environment variables for the JWT customizer.
	EnvironmentVariables *interface{} `json:"environmentVariables,omitempty"`

	// Script The script of the JWT customizer.
	Script *interface{} `json:"script,omitempty"`

	// TokenSample The sample raw token payload for the JWT customizer script testing purpose.
	TokenSample *interface{} `json:"tokenSample,omitempty"`
}

// UpsertJwtCustomizerParamsTokenTypePath defines parameters for UpsertJwtCustomizer.
type UpsertJwtCustomizerParamsTokenTypePath string

// GetOidcKeysParamsKeyType defines parameters for GetOidcKeys.
type GetOidcKeysParamsKeyType string

// RotateOidcKeysJSONBody defines parameters for RotateOidcKeys.
type RotateOidcKeysJSONBody struct {
	// SigningKeyAlgorithm The signing key algorithm the new generated private key is using.
	//
	// Only applicable when `keyType` is `private-keys`.
	SigningKeyAlgorithm *RotateOidcKeysJSONBodySigningKeyAlgorithm `json:"signingKeyAlgorithm,omitempty"`
}

// RotateOidcKeysParamsKeyType defines parameters for RotateOidcKeys.
type RotateOidcKeysParamsKeyType string

// RotateOidcKeysJSONBodySigningKeyAlgorithm defines parameters for RotateOidcKeys.
type RotateOidcKeysJSONBodySigningKeyAlgorithm string

// DeleteOidcKeyParamsKeyType defines parameters for DeleteOidcKey.
type DeleteOidcKeyParamsKeyType string

// ListConnectorsParams defines parameters for ListConnectors.
type ListConnectorsParams struct {
	// Target Filter connectors by target.
	Target *string `form:"target,omitempty" json:"target,omitempty"`
}

// CreateConnectorJSONBody defines parameters for CreateConnector.
type CreateConnectorJSONBody struct {
	// Config The connector config object that will be passed to the connector. The config object should be compatible with the connector factory.
	Config *map[string]interface{} `json:"config,omitempty"`

	// ConnectorId The connector factory ID for creating the connector.
	ConnectorId string `json:"connectorId"`

	// Id The unique ID for the connector. If not provided, a random ID will be generated.
	Id *string `json:"id,omitempty"`

	// Metadata Custom connector metadata, will be used to overwrite the default connector factory metadata.
	Metadata *struct {
		Logo     *string `json:"logo,omitempty"`
		LogoDark *string `json:"logoDark"`

		// Name Validator function
		Name   *map[string]interface{} `json:"name,omitempty"`
		Target *string                 `json:"target,omitempty"`
	} `json:"metadata,omitempty"`

	// SyncProfile Whether to sync user profile from the identity provider to Logto at each sign-in. If `false`, the user profile will only be synced when the user is created.
	SyncProfile *bool `json:"syncProfile,omitempty"`
}

// CreateConnectorAuthorizationUriJSONBody defines parameters for CreateConnectorAuthorizationUri.
type CreateConnectorAuthorizationUriJSONBody struct {
	// RedirectUri The URI to navigate back to after the user is authenticated by the connected social identity provider and has granted access to the connector.
	RedirectUri string `json:"redirectUri"`

	// State A random string generated on the client side to prevent CSRF (Cross-Site Request Forgery) attacks.
	State string `json:"state"`
}

// CreateConnectorTestJSONBody defines parameters for CreateConnectorTest.
type CreateConnectorTestJSONBody struct {
	// Config Connector configuration object for testing.
	Config map[string]interface{} `json:"config"`

	// Email Email address to send test message to. If phone is set, this will be ignored.
	Email *string `json:"email,omitempty"`

	// Locale Preferred language for the message. If not set, the default language will be used. (Applicable only when custom i18n templates are configured.)
	Locale *string `json:"locale,omitempty"`

	// Phone Phone number to send test message to. If this is set, email will be ignored.
	Phone *string `json:"phone,omitempty"`
}

// UpdateConnectorJSONBody defines parameters for UpdateConnector.
type UpdateConnectorJSONBody struct {
	// Config The connector config object that will be passed to the connector. The config object should be compatible with the connector factory.
	Config *map[string]interface{} `json:"config,omitempty"`

	// Metadata Custom connector metadata, will be used to overwrite the default connector metadata.
	Metadata *struct {
		Logo     *string `json:"logo,omitempty"`
		LogoDark *string `json:"logoDark"`

		// Name Validator function
		Name   *map[string]interface{} `json:"name,omitempty"`
		Target *string                 `json:"target,omitempty"`
	} `json:"metadata,omitempty"`

	// SyncProfile Whether to sync user profile from the identity provider to Logto at each sign-in. If `false`, the user profile will only be synced when the user is created.
	SyncProfile *bool `json:"syncProfile,omitempty"`
}

// DeleteCustomPhraseParamsLanguageTag defines parameters for DeleteCustomPhrase.
type DeleteCustomPhraseParamsLanguageTag string

// GetCustomPhraseParamsLanguageTag defines parameters for GetCustomPhrase.
type GetCustomPhraseParamsLanguageTag string

// ReplaceCustomPhraseParamsLanguageTag defines parameters for ReplaceCustomPhrase.
type ReplaceCustomPhraseParamsLanguageTag string

// GetActiveUserCountsParams defines parameters for GetActiveUserCounts.
type GetActiveUserCountsParams struct {
	// Date The date to get active user data.
	Date *string `form:"date,omitempty" json:"date,omitempty"`
}

// CreateDomainJSONBody defines parameters for CreateDomain.
type CreateDomainJSONBody struct {
	// Domain The domain name, e.g. `example.com`.
	Domain string `json:"domain"`
}

// DeleteEmailTemplatesParams defines parameters for DeleteEmailTemplates.
type DeleteEmailTemplatesParams struct {
	// LanguageTag The language tag of the email template, e.g., `en` or `fr`.
	LanguageTag *string `form:"languageTag,omitempty" json:"languageTag,omitempty"`

	// TemplateType The type of the email template, e.g. `SignIn` or `ForgotPassword`
	TemplateType *DeleteEmailTemplatesParamsTemplateType `form:"templateType,omitempty" json:"templateType,omitempty"`
}

// DeleteEmailTemplatesParamsTemplateType defines parameters for DeleteEmailTemplates.
type DeleteEmailTemplatesParamsTemplateType string

// ListEmailTemplatesParams defines parameters for ListEmailTemplates.
type ListEmailTemplatesParams struct {
	// LanguageTag The language tag of the email template, e.g., `en` or `fr`.
	LanguageTag *string `form:"languageTag,omitempty" json:"languageTag,omitempty"`

	// TemplateType The type of the email template, e.g. `SignIn` or `ForgotPassword`
	TemplateType *ListEmailTemplatesParamsTemplateType `form:"templateType,omitempty" json:"templateType,omitempty"`
}

// ListEmailTemplatesParamsTemplateType defines parameters for ListEmailTemplates.
type ListEmailTemplatesParamsTemplateType string

// ReplaceEmailTemplatesJSONBody defines parameters for ReplaceEmailTemplates.
type ReplaceEmailTemplatesJSONBody struct {
	Templates []struct {
		// Details The details of the email template.
		Details struct {
			// Content The template of the email body.
			Content string `json:"content"`

			// ContentType The content type of the email body. (Only required by some specific email providers.)
			ContentType *ReplaceEmailTemplatesJSONBody_Templates_Details_ContentType `json:"contentType,omitempty"`

			// ReplyTo The reply name template of the email. If not provided, the target email address will be used. (The render logic may differ based on the email provider.)
			ReplyTo *string `json:"replyTo,omitempty"`

			// SendFrom The send from name template of the email. If not provided, the default Logto email address will be used. (The render logic may differ based on the email provider.)
			SendFrom *string `json:"sendFrom,omitempty"`

			// Subject The template of the email subject.
			Subject string `json:"subject"`
		} `json:"details"`

		// LanguageTag The language tag of the email template, e.g., `en` or `fr`.
		LanguageTag string `json:"languageTag"`

		// TemplateType The type of the email template, e.g. `SignIn` or `ForgotPassword`
		TemplateType ReplaceEmailTemplatesJSONBodyTemplatesTemplateType `json:"templateType"`
	} `json:"templates"`
}

// ReplaceEmailTemplatesJSONBodyTemplatesDetailsContentType0 defines parameters for ReplaceEmailTemplates.
type ReplaceEmailTemplatesJSONBodyTemplatesDetailsContentType0 = string

// ReplaceEmailTemplatesJSONBodyTemplatesDetailsContentType1 defines parameters for ReplaceEmailTemplates.
type ReplaceEmailTemplatesJSONBodyTemplatesDetailsContentType1 = string

// ReplaceEmailTemplatesJSONBody_Templates_Details_ContentType defines parameters for ReplaceEmailTemplates.
type ReplaceEmailTemplatesJSONBody_Templates_Details_ContentType struct {
	union json.RawMessage
}

// ReplaceEmailTemplatesJSONBodyTemplatesTemplateType defines parameters for ReplaceEmailTemplates.
type ReplaceEmailTemplatesJSONBodyTemplatesTemplateType string

// UpdateEmailTemplateDetailsJSONBody defines parameters for UpdateEmailTemplateDetails.
type UpdateEmailTemplateDetailsJSONBody struct {
	// Content The template of the email body.
	Content *string `json:"content,omitempty"`

	// ContentType The content type of the email body. (Only required by some specific email providers.)
	ContentType *UpdateEmailTemplateDetailsJSONBody_ContentType `json:"contentType,omitempty"`

	// ReplyTo The reply name template of the email. If not provided, the target email address will be used. (The render logic may differ based on the email provider.)
	ReplyTo *string `json:"replyTo,omitempty"`

	// SendFrom The send from name template of the email. If not provided, the default Logto email address will be used. (The render logic may differ based on the email provider.)
	SendFrom *string `json:"sendFrom,omitempty"`

	// Subject The template of the email subject.
	Subject *string `json:"subject,omitempty"`
}

// UpdateEmailTemplateDetailsJSONBodyContentType0 defines parameters for UpdateEmailTemplateDetails.
type UpdateEmailTemplateDetailsJSONBodyContentType0 = string

// UpdateEmailTemplateDetailsJSONBodyContentType1 defines parameters for UpdateEmailTemplateDetails.
type UpdateEmailTemplateDetailsJSONBodyContentType1 = string

// UpdateEmailTemplateDetailsJSONBody_ContentType defines parameters for UpdateEmailTemplateDetails.
type UpdateEmailTemplateDetailsJSONBody_ContentType struct {
	union json.RawMessage
}

// InitInteractionJSONBody defines parameters for InitInteraction.
type InitInteractionJSONBody struct {
	CaptchaToken     *string                                 `json:"captchaToken,omitempty"`
	InteractionEvent InitInteractionJSONBodyInteractionEvent `json:"interactionEvent"`
}

// InitInteractionJSONBodyInteractionEvent defines parameters for InitInteraction.
type InitInteractionJSONBodyInteractionEvent string

// IdentifyUserJSONBody defines parameters for IdentifyUser.
type IdentifyUserJSONBody struct {
	// LinkSocialIdentity Applies only to the SignIn interaction and is used when a SocialVerification type verification ID is provided. <br/>- If `true`, the user is identified using the verified email or phone number from the social identity provider, and the social identity is linked to the user's account. <br/>- If `false` or not provided, the API identifies the user solely through the social identity. <br/>This parameter is used to link a non-existing social identity to a related user account identified by the verified email or phone number.
	LinkSocialIdentity *bool `json:"linkSocialIdentity,omitempty"`

	// VerificationId The ID of the verification record used to identify the user. <br/>- For `SignIn` and `ForgotPassword` interactions: Required to verify the user's identity. <br/>- For `Register` interaction: Optional. If provided, new profile(s) will be attached to the registration session using the information from the verification record and trigger the account creation attempt. If not provided, the user account creation attempt will be triggered using the existing profile data in the interaction.
	VerificationId *string `json:"verificationId,omitempty"`
}

// UpdateInteractionEventJSONBody defines parameters for UpdateInteractionEvent.
type UpdateInteractionEventJSONBody struct {
	// InteractionEvent The type of the interaction event. Only `SignIn` and `Register` are supported.
	InteractionEvent UpdateInteractionEventJSONBodyInteractionEvent `json:"interactionEvent"`
}

// UpdateInteractionEventJSONBodyInteractionEvent defines parameters for UpdateInteractionEvent.
type UpdateInteractionEventJSONBodyInteractionEvent string

// AddUserProfileJSONBody defines parameters for AddUserProfile.
type AddUserProfileJSONBody struct {
	// Type The type of profile data to add. `email`, `phone`, `username`, `password`, etc.
	Type *interface{} `json:"type,omitempty"`

	// Value The plain text value of the profile data. Only supported for profile data types that does not require verification, such as `username` and `password`.
	Value *interface{} `json:"value,omitempty"`

	// VerificationId The ID of the verification record used to verify the profile data. Required for profile data types that require verification, such as `email`, `phone` and `social`.
	VerificationId *interface{} `json:"verificationId,omitempty"`
	union          json.RawMessage
}

// AddUserProfileJSONBody0 defines parameters for AddUserProfile.
type AddUserProfileJSONBody0 struct {
	Type  string `json:"type"`
	Value string `json:"value"`
}

// AddUserProfileJSONBody1 defines parameters for AddUserProfile.
type AddUserProfileJSONBody1 struct {
	Type  string `json:"type"`
	Value string `json:"value"`
}

// AddUserProfileJSONBody2 defines parameters for AddUserProfile.
type AddUserProfileJSONBody2 struct {
	Type           string `json:"type"`
	VerificationId string `json:"verificationId"`
}

// AddUserProfileJSONBody3 defines parameters for AddUserProfile.
type AddUserProfileJSONBody3 struct {
	Type           string `json:"type"`
	VerificationId string `json:"verificationId"`
}

// AddUserProfileJSONBody4 defines parameters for AddUserProfile.
type AddUserProfileJSONBody4 struct {
	Type           string `json:"type"`
	VerificationId string `json:"verificationId"`
}

// BindMfaVerificationJSONBody defines parameters for BindMfaVerification.
type BindMfaVerificationJSONBody struct {
	// Type The type of MFA.
	Type BindMfaVerificationJSONBodyType `json:"type"`

	// VerificationId The ID of the MFA verification record.
	VerificationId string `json:"verificationId"`
}

// BindMfaVerificationJSONBodyType defines parameters for BindMfaVerification.
type BindMfaVerificationJSONBodyType string

// ResetUserPasswordJSONBody defines parameters for ResetUserPassword.
type ResetUserPasswordJSONBody struct {
	// Password The new password to update. The password must meet the password policy requirements and can not be the same as the current password.
	Password string `json:"password"`
}

// GetEnabledSsoConnectorsParams defines parameters for GetEnabledSsoConnectors.
type GetEnabledSsoConnectorsParams struct {
	// Email The email address to find the enabled SSO connectors.
	Email openapi_types.Email `form:"email" json:"email"`
}

// VerifyBackupCodeJSONBody defines parameters for VerifyBackupCode.
type VerifyBackupCodeJSONBody struct {
	// Code The backup code to verify.
	Code string `json:"code"`
}

// CreateNewPasswordIdentityVerificationJSONBody defines parameters for CreateNewPasswordIdentityVerification.
type CreateNewPasswordIdentityVerificationJSONBody struct {
	// Identifier The unique user identifier.  <br/> Currently, only `username` is accepted. For `email` or `phone` registration, a `CodeVerification` record must be created and used to verify the user's email or phone number identifier.
	Identifier struct {
		Type  string `json:"type"`
		Value string `json:"value"`
	} `json:"identifier"`

	// Password The new user password. (A password digest will be created and stored securely in the verification record.)
	Password string `json:"password"`
}

// VerifyOneTimeTokenVerificationJSONBody defines parameters for VerifyOneTimeTokenVerification.
type VerifyOneTimeTokenVerificationJSONBody struct {
	// Identifier The unique user identifier.  <br/> Currently, only `email` is accepted.
	Identifier struct {
		Type  string `json:"type"`
		Value string `json:"value"`
	} `json:"identifier"`

	// Token The one-time token to be verified.
	Token string `json:"token"`
}

// CreatePasswordVerificationJSONBody defines parameters for CreatePasswordVerification.
type CreatePasswordVerificationJSONBody struct {
	// Identifier The unique identifier of the user that will be used to identify the user along with the provided password.
	Identifier struct {
		Type  CreatePasswordVerificationJSONBodyIdentifierType `json:"type"`
		Value string                                           `json:"value"`
	} `json:"identifier"`

	// Password The user password.
	Password string `json:"password"`
}

// CreatePasswordVerificationJSONBodyIdentifierType defines parameters for CreatePasswordVerification.
type CreatePasswordVerificationJSONBodyIdentifierType string

// CreateSocialVerificationJSONBody defines parameters for CreateSocialVerification.
type CreateSocialVerificationJSONBody struct {
	// RedirectUri The URI to redirect the user after the social authorization is completed.
	RedirectUri string `json:"redirectUri"`

	// State The state parameter to pass to the social connector.
	State string `json:"state"`
}

// VerifySocialVerificationJSONBody defines parameters for VerifySocialVerification.
type VerifySocialVerificationJSONBody struct {
	// ConnectorData Arbitrary data returned by the social provider to complete the verification process.
	ConnectorData map[string]interface{} `json:"connectorData"`

	// VerificationId The ID of the social verification record. Optional for Google one tap login, as it does not have a pre-created social verification record in session.
	VerificationId *string `json:"verificationId,omitempty"`
}

// CreateEnterpriseSsoVerificationJSONBody defines parameters for CreateEnterpriseSsoVerification.
type CreateEnterpriseSsoVerificationJSONBody struct {
	// RedirectUri The URI to redirect the user after the SSO authorization is completed.
	RedirectUri string `json:"redirectUri"`

	// State The state parameter to pass to the SSO connector.
	State string `json:"state"`
}

// VerifyEnterpriseSsoVerificationJSONBody defines parameters for VerifyEnterpriseSsoVerification.
type VerifyEnterpriseSsoVerificationJSONBody struct {
	// ConnectorData Arbitrary data returned by the SSO provider to complete the verification process.
	ConnectorData map[string]interface{} `json:"connectorData"`

	// VerificationId The ID of the EnterpriseSSO verification record.
	VerificationId string `json:"verificationId"`
}

// VerifyTotpVerificationJSONBody defines parameters for VerifyTotpVerification.
type VerifyTotpVerificationJSONBody struct {
	// Code The TOTP code to be verified.
	Code string `json:"code"`

	// VerificationId The verification ID of the newly created TOTP secret. This ID is required to verify a newly created TOTP secret that needs to be bound to the user account. If not provided, the API will create a new TOTP verification record and verify the code against the user's existing TOTP secret.
	VerificationId *string `json:"verificationId,omitempty"`
}

// CreateAndSendVerificationCodeJSONBody defines parameters for CreateAndSendVerificationCode.
type CreateAndSendVerificationCodeJSONBody struct {
	// Identifier The identifier (email address or phone number) to send the verification code to.
	Identifier struct {
		Type  CreateAndSendVerificationCodeJSONBodyIdentifierType `json:"type"`
		Value string                                              `json:"value"`
	} `json:"identifier"`

	// InteractionEvent The interaction event for which the verification code will be used. Supported values are `SignIn`, `Register`, and `ForgotPassword`. This determines the template for the verification code.
	InteractionEvent CreateAndSendVerificationCodeJSONBodyInteractionEvent `json:"interactionEvent"`
}

// CreateAndSendVerificationCodeJSONBodyIdentifierType defines parameters for CreateAndSendVerificationCode.
type CreateAndSendVerificationCodeJSONBodyIdentifierType string

// CreateAndSendVerificationCodeJSONBodyInteractionEvent defines parameters for CreateAndSendVerificationCode.
type CreateAndSendVerificationCodeJSONBodyInteractionEvent string

// VerifyVerificationCodeVerificationJSONBody defines parameters for VerifyVerificationCodeVerification.
type VerifyVerificationCodeVerificationJSONBody struct {
	// Code The verification code to be verified.
	Code string `json:"code"`

	// Identifier The identifier (email address or phone number) to verify the code against. Must match the identifier used to send the verification code.
	Identifier struct {
		Type  VerifyVerificationCodeVerificationJSONBodyIdentifierType `json:"type"`
		Value string                                                   `json:"value"`
	} `json:"identifier"`

	// VerificationId The verification ID of the CodeVerification record.
	VerificationId string `json:"verificationId"`
}

// VerifyVerificationCodeVerificationJSONBodyIdentifierType defines parameters for VerifyVerificationCodeVerification.
type VerifyVerificationCodeVerificationJSONBodyIdentifierType string

// VerifyWebAuthnAuthenticationVerificationJSONBody defines parameters for VerifyWebAuthnAuthenticationVerification.
type VerifyWebAuthnAuthenticationVerificationJSONBody struct {
	// Payload The WebAuthn assertion response from the user's WebAuthn credential.
	Payload struct {
		AuthenticatorAttachment *VerifyWebAuthnAuthenticationVerificationJSONBodyPayloadAuthenticatorAttachment `json:"authenticatorAttachment,omitempty"`
		ClientExtensionResults  struct {
			Appid     *bool `json:"appid,omitempty"`
			CrepProps *struct {
				Rk *bool `json:"rk,omitempty"`
			} `json:"crepProps,omitempty"`
			HmacCreateSecret *bool `json:"hmacCreateSecret,omitempty"`
		} `json:"clientExtensionResults"`
		Id       string `json:"id"`
		RawId    string `json:"rawId"`
		Response struct {
			AuthenticatorData string  `json:"authenticatorData"`
			ClientDataJSON    string  `json:"clientDataJSON"`
			Signature         string  `json:"signature"`
			UserHandle        *string `json:"userHandle,omitempty"`
		} `json:"response"`
		Type string `json:"type"`
	} `json:"payload"`

	// VerificationId The verification ID of the WebAuthn authentication verification record.
	VerificationId string `json:"verificationId"`
}

// VerifyWebAuthnAuthenticationVerificationJSONBodyPayloadAuthenticatorAttachment defines parameters for VerifyWebAuthnAuthenticationVerification.
type VerifyWebAuthnAuthenticationVerificationJSONBodyPayloadAuthenticatorAttachment string

// VerifyWebAuthnRegistrationVerificationJSONBody defines parameters for VerifyWebAuthnRegistrationVerification.
type VerifyWebAuthnRegistrationVerificationJSONBody struct {
	// Payload The WebAuthn attestation response from the user's WebAuthn credential.
	Payload struct {
		AuthenticatorAttachment *VerifyWebAuthnRegistrationVerificationJSONBodyPayloadAuthenticatorAttachment `json:"authenticatorAttachment,omitempty"`
		ClientExtensionResults  struct {
			Appid     *bool `json:"appid,omitempty"`
			CrepProps *struct {
				Rk *bool `json:"rk,omitempty"`
			} `json:"crepProps,omitempty"`
			HmacCreateSecret *bool `json:"hmacCreateSecret,omitempty"`
		} `json:"clientExtensionResults"`
		Id       string `json:"id"`
		RawId    string `json:"rawId"`
		Response struct {
			AttestationObject  string                                                                     `json:"attestationObject"`
			AuthenticatorData  *string                                                                    `json:"authenticatorData,omitempty"`
			ClientDataJSON     string                                                                     `json:"clientDataJSON"`
			PublicKey          *string                                                                    `json:"publicKey,omitempty"`
			PublicKeyAlgorithm *float32                                                                   `json:"publicKeyAlgorithm,omitempty"`
			Transports         *[]VerifyWebAuthnRegistrationVerificationJSONBodyPayloadResponseTransports `json:"transports,omitempty"`
		} `json:"response"`
		Type string `json:"type"`
	} `json:"payload"`

	// VerificationId The verification ID of the WebAuthn registration record.
	VerificationId string `json:"verificationId"`
}

// VerifyWebAuthnRegistrationVerificationJSONBodyPayloadAuthenticatorAttachment defines parameters for VerifyWebAuthnRegistrationVerification.
type VerifyWebAuthnRegistrationVerificationJSONBodyPayloadAuthenticatorAttachment string

// VerifyWebAuthnRegistrationVerificationJSONBodyPayloadResponseTransports defines parameters for VerifyWebAuthnRegistrationVerification.
type VerifyWebAuthnRegistrationVerificationJSONBodyPayloadResponseTransports string

// ListHooksParams defines parameters for ListHooks.
type ListHooksParams struct {
	// IncludeExecutionStats Whether to include execution stats in the response.
	IncludeExecutionStats *string `form:"includeExecutionStats,omitempty" json:"includeExecutionStats,omitempty"`

	// Page Page number (starts from 1).
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// PageSize Entries per page.
	PageSize *int `form:"page_size,omitempty" json:"page_size,omitempty"`
}

// CreateHookJSONBody defines parameters for CreateHook.
type CreateHookJSONBody struct {
	Config struct {
		Headers *map[string]string `json:"headers,omitempty"`

		// Retries Now the retry times is fixed to 3. Keep for backward compatibility.
		// Deprecated:
		Retries *float32 `json:"retries,omitempty"`
		Url     string   `json:"url"`
	} `json:"config"`
	CreatedAt *float32 `json:"createdAt,omitempty"`
	Enabled   *bool    `json:"enabled,omitempty"`

	// Event Use `events` instead.
	// Deprecated:
	Event *CreateHookJSONBodyEvent `json:"event,omitempty"`

	// Events An array of hook events.
	Events *[]CreateHookJSONBodyEvents `json:"events,omitempty"`

	// Name The name of the hook.
	Name     *string `json:"name,omitempty"`
	TenantId *string `json:"tenantId,omitempty"`
}

// CreateHookJSONBodyEvent defines parameters for CreateHook.
type CreateHookJSONBodyEvent string

// CreateHookJSONBodyEvents defines parameters for CreateHook.
type CreateHookJSONBodyEvents string

// GetHookParams defines parameters for GetHook.
type GetHookParams struct {
	// IncludeExecutionStats Whether to include execution stats in the response.
	IncludeExecutionStats *string `form:"includeExecutionStats,omitempty" json:"includeExecutionStats,omitempty"`
}

// UpdateHookJSONBody defines parameters for UpdateHook.
type UpdateHookJSONBody struct {
	Config *struct {
		Headers *map[string]string `json:"headers,omitempty"`

		// Retries Now the retry times is fixed to 3. Keep for backward compatibility.
		// Deprecated:
		Retries *float32 `json:"retries,omitempty"`
		Url     string   `json:"url"`
	} `json:"config,omitempty"`
	CreatedAt *float32 `json:"createdAt,omitempty"`
	Enabled   *bool    `json:"enabled,omitempty"`

	// Event Use `events` instead.
	// Deprecated:
	Event *UpdateHookJSONBodyEvent `json:"event"`

	// Events An array of updated hook events.
	Events *[]UpdateHookJSONBodyEvents `json:"events,omitempty"`

	// Name The updated name of the hook.
	Name     *string `json:"name,omitempty"`
	TenantId *string `json:"tenantId,omitempty"`
}

// UpdateHookJSONBodyEvent defines parameters for UpdateHook.
type UpdateHookJSONBodyEvent string

// UpdateHookJSONBodyEvents defines parameters for UpdateHook.
type UpdateHookJSONBodyEvents string

// ListHookRecentLogsParams defines parameters for ListHookRecentLogs.
type ListHookRecentLogsParams struct {
	// LogKey The log key to filter logs.
	LogKey *string `form:"logKey,omitempty" json:"logKey,omitempty"`

	// Page Page number (starts from 1).
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// PageSize Entries per page.
	PageSize *int `form:"page_size,omitempty" json:"page_size,omitempty"`
}

// CreateHookTestJSONBody defines parameters for CreateHookTest.
type CreateHookTestJSONBody struct {
	// Config The hook configuration for testing.
	Config struct {
		Headers *map[string]string `json:"headers,omitempty"`

		// Retries Now the retry times is fixed to 3. Keep for backward compatibility.
		// Deprecated:
		Retries *float32 `json:"retries,omitempty"`
		Url     string   `json:"url"`
	} `json:"config"`

	// Event Use `events` instead.
	// Deprecated:
	Event *interface{} `json:"event,omitempty"`

	// Events An array of hook events for testing.
	Events []CreateHookTestJSONBodyEvents `json:"events"`
}

// CreateHookTestJSONBodyEvents defines parameters for CreateHookTest.
type CreateHookTestJSONBodyEvents string

// PutApiInteractionJSONBody defines parameters for PutApiInteraction.
type PutApiInteractionJSONBody struct {
	Event      PutApiInteractionJSONBodyEvent        `json:"event"`
	Identifier *PutApiInteractionJSONBody_Identifier `json:"identifier,omitempty"`
	Profile    *struct {
		ConnectorId *string `json:"connectorId,omitempty"`
		Email       *string `json:"email,omitempty"`
		Password    *string `json:"password,omitempty"`
		Phone       *string `json:"phone,omitempty"`
		Username    *string `json:"username,omitempty"`
	} `json:"profile,omitempty"`
}

// PutApiInteractionJSONBodyEvent defines parameters for PutApiInteraction.
type PutApiInteractionJSONBodyEvent string

// PutApiInteractionJSONBodyIdentifier0 defines parameters for PutApiInteraction.
type PutApiInteractionJSONBodyIdentifier0 struct {
	Password string `json:"password"`
	Username string `json:"username"`
}

// PutApiInteractionJSONBodyIdentifier1 defines parameters for PutApiInteraction.
type PutApiInteractionJSONBodyIdentifier1 struct {
	Email    string `json:"email"`
	Password string `json:"password"`
}

// PutApiInteractionJSONBodyIdentifier2 defines parameters for PutApiInteraction.
type PutApiInteractionJSONBodyIdentifier2 struct {
	Password string `json:"password"`
	Phone    string `json:"phone"`
}

// PutApiInteractionJSONBodyIdentifier3 defines parameters for PutApiInteraction.
type PutApiInteractionJSONBodyIdentifier3 struct {
	Email            string `json:"email"`
	VerificationCode string `json:"verificationCode"`
}

// PutApiInteractionJSONBodyIdentifier4 defines parameters for PutApiInteraction.
type PutApiInteractionJSONBodyIdentifier4 struct {
	Phone            string `json:"phone"`
	VerificationCode string `json:"verificationCode"`
}

// PutApiInteractionJSONBodyIdentifier5 defines parameters for PutApiInteraction.
type PutApiInteractionJSONBodyIdentifier5 struct {
	// ConnectorData arbitrary
	ConnectorData map[string]interface{} `json:"connectorData"`
	ConnectorId   string                 `json:"connectorId"`
}

// PutApiInteractionJSONBodyIdentifier6 defines parameters for PutApiInteraction.
type PutApiInteractionJSONBodyIdentifier6 struct {
	ConnectorId string `json:"connectorId"`
	Email       string `json:"email"`
}

// PutApiInteractionJSONBodyIdentifier7 defines parameters for PutApiInteraction.
type PutApiInteractionJSONBodyIdentifier7 struct {
	ConnectorId string `json:"connectorId"`
	Phone       string `json:"phone"`
}

// PutApiInteractionJSONBody_Identifier defines parameters for PutApiInteraction.
type PutApiInteractionJSONBody_Identifier struct {
	union json.RawMessage
}

// PostApiInteractionBindMfaJSONBody defines parameters for PostApiInteractionBindMfa.
type PostApiInteractionBindMfaJSONBody struct {
	union json.RawMessage
}

// PostApiInteractionBindMfaJSONBody0 defines parameters for PostApiInteractionBindMfa.
type PostApiInteractionBindMfaJSONBody0 struct {
	Code string `json:"code"`
	Type string `json:"type"`
}

// PostApiInteractionBindMfaJSONBody1 defines parameters for PostApiInteractionBindMfa.
type PostApiInteractionBindMfaJSONBody1 struct {
	AuthenticatorAttachment *PostApiInteractionBindMfaJSONBody1AuthenticatorAttachment `json:"authenticatorAttachment,omitempty"`
	ClientExtensionResults  struct {
		Appid     *bool `json:"appid,omitempty"`
		CrepProps *struct {
			Rk *bool `json:"rk,omitempty"`
		} `json:"crepProps,omitempty"`
		HmacCreateSecret *bool `json:"hmacCreateSecret,omitempty"`
	} `json:"clientExtensionResults"`
	Id       string `json:"id"`
	RawId    string `json:"rawId"`
	Response struct {
		AttestationObject  string                                                  `json:"attestationObject"`
		AuthenticatorData  *string                                                 `json:"authenticatorData,omitempty"`
		ClientDataJSON     string                                                  `json:"clientDataJSON"`
		PublicKey          *string                                                 `json:"publicKey,omitempty"`
		PublicKeyAlgorithm *float32                                                `json:"publicKeyAlgorithm,omitempty"`
		Transports         *[]PostApiInteractionBindMfaJSONBody1ResponseTransports `json:"transports,omitempty"`
	} `json:"response"`
	Type string `json:"type"`
}

// PostApiInteractionBindMfaJSONBody1AuthenticatorAttachment defines parameters for PostApiInteractionBindMfa.
type PostApiInteractionBindMfaJSONBody1AuthenticatorAttachment string

// PostApiInteractionBindMfaJSONBody1ResponseTransports defines parameters for PostApiInteractionBindMfa.
type PostApiInteractionBindMfaJSONBody1ResponseTransports string

// PostApiInteractionBindMfaJSONBody2 defines parameters for PostApiInteractionBindMfa.
type PostApiInteractionBindMfaJSONBody2 struct {
	Type string `json:"type"`
}

// PostApiInteractionConsentJSONBody defines parameters for PostApiInteractionConsent.
type PostApiInteractionConsentJSONBody struct {
	OrganizationIds *[]string `json:"organizationIds,omitempty"`
}

// PutApiInteractionEventJSONBody defines parameters for PutApiInteractionEvent.
type PutApiInteractionEventJSONBody struct {
	Event PutApiInteractionEventJSONBodyEvent `json:"event"`
}

// PutApiInteractionEventJSONBodyEvent defines parameters for PutApiInteractionEvent.
type PutApiInteractionEventJSONBodyEvent string

// PatchApiInteractionIdentifiersJSONBody defines parameters for PatchApiInteractionIdentifiers.
type PatchApiInteractionIdentifiersJSONBody struct {
	union json.RawMessage
}

// PatchApiInteractionIdentifiersJSONBody0 defines parameters for PatchApiInteractionIdentifiers.
type PatchApiInteractionIdentifiersJSONBody0 struct {
	Password string `json:"password"`
	Username string `json:"username"`
}

// PatchApiInteractionIdentifiersJSONBody1 defines parameters for PatchApiInteractionIdentifiers.
type PatchApiInteractionIdentifiersJSONBody1 struct {
	Email    string `json:"email"`
	Password string `json:"password"`
}

// PatchApiInteractionIdentifiersJSONBody2 defines parameters for PatchApiInteractionIdentifiers.
type PatchApiInteractionIdentifiersJSONBody2 struct {
	Password string `json:"password"`
	Phone    string `json:"phone"`
}

// PatchApiInteractionIdentifiersJSONBody3 defines parameters for PatchApiInteractionIdentifiers.
type PatchApiInteractionIdentifiersJSONBody3 struct {
	Email            string `json:"email"`
	VerificationCode string `json:"verificationCode"`
}

// PatchApiInteractionIdentifiersJSONBody4 defines parameters for PatchApiInteractionIdentifiers.
type PatchApiInteractionIdentifiersJSONBody4 struct {
	Phone            string `json:"phone"`
	VerificationCode string `json:"verificationCode"`
}

// PatchApiInteractionIdentifiersJSONBody5 defines parameters for PatchApiInteractionIdentifiers.
type PatchApiInteractionIdentifiersJSONBody5 struct {
	// ConnectorData arbitrary
	ConnectorData map[string]interface{} `json:"connectorData"`
	ConnectorId   string                 `json:"connectorId"`
}

// PatchApiInteractionIdentifiersJSONBody6 defines parameters for PatchApiInteractionIdentifiers.
type PatchApiInteractionIdentifiersJSONBody6 struct {
	ConnectorId string `json:"connectorId"`
	Email       string `json:"email"`
}

// PatchApiInteractionIdentifiersJSONBody7 defines parameters for PatchApiInteractionIdentifiers.
type PatchApiInteractionIdentifiersJSONBody7 struct {
	ConnectorId string `json:"connectorId"`
	Phone       string `json:"phone"`
}

// PutApiInteractionMfaJSONBody defines parameters for PutApiInteractionMfa.
type PutApiInteractionMfaJSONBody struct {
	union json.RawMessage
}

// PutApiInteractionMfaJSONBody0 defines parameters for PutApiInteractionMfa.
type PutApiInteractionMfaJSONBody0 struct {
	Code string `json:"code"`
	Type string `json:"type"`
}

// PutApiInteractionMfaJSONBody1 defines parameters for PutApiInteractionMfa.
type PutApiInteractionMfaJSONBody1 struct {
	AuthenticatorAttachment *PutApiInteractionMfaJSONBody1AuthenticatorAttachment `json:"authenticatorAttachment,omitempty"`
	ClientExtensionResults  struct {
		Appid     *bool `json:"appid,omitempty"`
		CrepProps *struct {
			Rk *bool `json:"rk,omitempty"`
		} `json:"crepProps,omitempty"`
		HmacCreateSecret *bool `json:"hmacCreateSecret,omitempty"`
	} `json:"clientExtensionResults"`
	Id       string `json:"id"`
	RawId    string `json:"rawId"`
	Response struct {
		AuthenticatorData string  `json:"authenticatorData"`
		ClientDataJSON    string  `json:"clientDataJSON"`
		Signature         string  `json:"signature"`
		UserHandle        *string `json:"userHandle,omitempty"`
	} `json:"response"`
	Type string `json:"type"`
}

// PutApiInteractionMfaJSONBody1AuthenticatorAttachment defines parameters for PutApiInteractionMfa.
type PutApiInteractionMfaJSONBody1AuthenticatorAttachment string

// PutApiInteractionMfaJSONBody2 defines parameters for PutApiInteractionMfa.
type PutApiInteractionMfaJSONBody2 struct {
	Code string `json:"code"`
	Type string `json:"type"`
}

// PutApiInteractionMfaSkippedJSONBody defines parameters for PutApiInteractionMfaSkipped.
type PutApiInteractionMfaSkippedJSONBody struct {
	MfaSkipped bool `json:"mfaSkipped"`
}

// PatchApiInteractionProfileJSONBody defines parameters for PatchApiInteractionProfile.
type PatchApiInteractionProfileJSONBody struct {
	ConnectorId *string `json:"connectorId,omitempty"`
	Email       *string `json:"email,omitempty"`
	Password    *string `json:"password,omitempty"`
	Phone       *string `json:"phone,omitempty"`
	Username    *string `json:"username,omitempty"`
}

// PutApiInteractionProfileJSONBody defines parameters for PutApiInteractionProfile.
type PutApiInteractionProfileJSONBody struct {
	ConnectorId *string `json:"connectorId,omitempty"`
	Email       *string `json:"email,omitempty"`
	Password    *string `json:"password,omitempty"`
	Phone       *string `json:"phone,omitempty"`
	Username    *string `json:"username,omitempty"`
}

// GetApiInteractionSingleSignOnConnectorsParams defines parameters for GetApiInteractionSingleSignOnConnectors.
type GetApiInteractionSingleSignOnConnectorsParams struct {
	Email openapi_types.Email `form:"email" json:"email"`
}

// PostApiInteractionSingleSignOnConnectorIdAuthenticationJSONBody defines parameters for PostApiInteractionSingleSignOnConnectorIdAuthentication.
type PostApiInteractionSingleSignOnConnectorIdAuthenticationJSONBody map[string]interface{}

// PostApiInteractionSingleSignOnConnectorIdAuthorizationUrlJSONBody defines parameters for PostApiInteractionSingleSignOnConnectorIdAuthorizationUrl.
type PostApiInteractionSingleSignOnConnectorIdAuthorizationUrlJSONBody struct {
	// RedirectUri Validator function
	RedirectUri map[string]interface{} `json:"redirectUri"`
	State       string                 `json:"state"`
}

// PostApiInteractionVerificationSocialAuthorizationUriJSONBody defines parameters for PostApiInteractionVerificationSocialAuthorizationUri.
type PostApiInteractionVerificationSocialAuthorizationUriJSONBody struct {
	ConnectorId string `json:"connectorId"`

	// RedirectUri Validator function
	RedirectUri map[string]interface{} `json:"redirectUri"`
	State       string                 `json:"state"`
}

// PostApiInteractionVerificationVerificationCodeJSONBody defines parameters for PostApiInteractionVerificationVerificationCode.
type PostApiInteractionVerificationVerificationCodeJSONBody struct {
	union json.RawMessage
}

// PostApiInteractionVerificationVerificationCodeJSONBody0 defines parameters for PostApiInteractionVerificationVerificationCode.
type PostApiInteractionVerificationVerificationCodeJSONBody0 struct {
	Email string `json:"email"`
}

// PostApiInteractionVerificationVerificationCodeJSONBody1 defines parameters for PostApiInteractionVerificationVerificationCode.
type PostApiInteractionVerificationVerificationCodeJSONBody1 struct {
	Phone string `json:"phone"`
}

// ListLogsParams defines parameters for ListLogs.
type ListLogsParams struct {
	// UserId Filter logs by user ID.
	UserId *string `form:"userId,omitempty" json:"userId,omitempty"`

	// ApplicationId Filter logs by application ID.
	ApplicationId *string `form:"applicationId,omitempty" json:"applicationId,omitempty"`

	// LogKey Filter logs by log key.
	LogKey *string `form:"logKey,omitempty" json:"logKey,omitempty"`

	// Page Page number (starts from 1).
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// PageSize Entries per page.
	PageSize *int `form:"page_size,omitempty" json:"page_size,omitempty"`
}

// UpdateProfileJSONBody defines parameters for UpdateProfile.
type UpdateProfileJSONBody struct {
	// Avatar The new avatar for the user, must be a URL.
	Avatar *string `json:"avatar"`

	// Name The new name for the user.
	Name *string `json:"name"`

	// Username The new username for the user, must be a valid username and unique.
	Username *string `json:"username"`
}

// AddUserIdentitiesJSONBody defines parameters for AddUserIdentities.
type AddUserIdentitiesJSONBody struct {
	// NewIdentifierVerificationRecordId The identifier verification record ID for the new social identity ownership verification.
	NewIdentifierVerificationRecordId string `json:"newIdentifierVerificationRecordId"`
}

// AddMfaVerificationJSONBody defines parameters for AddMfaVerification.
type AddMfaVerificationJSONBody struct {
	union json.RawMessage
}

// AddMfaVerificationJSONBody0 defines parameters for AddMfaVerification.
type AddMfaVerificationJSONBody0 struct {
	Name                              *string `json:"name,omitempty"`
	NewIdentifierVerificationRecordId string  `json:"newIdentifierVerificationRecordId"`
	Type                              string  `json:"type"`
}

// AddMfaVerificationJSONBody1 defines parameters for AddMfaVerification.
type AddMfaVerificationJSONBody1 struct {
	Secret string `json:"secret"`
	Type   string `json:"type"`
}

// AddMfaVerificationJSONBody2 defines parameters for AddMfaVerification.
type AddMfaVerificationJSONBody2 struct {
	Codes []string `json:"codes"`
	Type  string   `json:"type"`
}

// AddMfaVerificationJSONBody3 defines parameters for AddMfaVerification.
type AddMfaVerificationJSONBody3 struct {
	// Name The name of the MFA verification, if not provided, the name will be generated from user agent.
	Name *string `json:"name,omitempty"`

	// NewIdentifierVerificationRecordId The identifier verification record ID for the new WebAuthn registration verification.
	NewIdentifierVerificationRecordId string `json:"newIdentifierVerificationRecordId"`

	// Type The type of the MFA verification.
	Type AddMfaVerificationJSONBody3Type `json:"type"`
}

// AddMfaVerificationJSONBody3Type defines parameters for AddMfaVerification.
type AddMfaVerificationJSONBody3Type string

// AddMfaVerificationJSONBody4 defines parameters for AddMfaVerification.
type AddMfaVerificationJSONBody4 struct {
	// Secret The TOTP secret for the MFA verification. Use the generate endpoint to create a secret, and verify the generated code with the user before binding to make sure the user has setup the secret in their authenticator app.
	Secret string `json:"secret"`

	// Type The type of the MFA verification, for TOTP, one user can only bind one TOTP factor.
	Type AddMfaVerificationJSONBody4Type `json:"type"`
}

// AddMfaVerificationJSONBody4Type defines parameters for AddMfaVerification.
type AddMfaVerificationJSONBody4Type string

// AddMfaVerificationJSONBody5 defines parameters for AddMfaVerification.
type AddMfaVerificationJSONBody5 struct {
	// Codes Array of backup codes. Use the generate endpoint to create codes.
	Codes []string `json:"codes"`

	// Type The type of the MFA verification, for backup codes, one user can only bind one set of backup codes and requires at least one other MFA factor.
	Type AddMfaVerificationJSONBody5Type `json:"type"`
}

// AddMfaVerificationJSONBody5Type defines parameters for AddMfaVerification.
type AddMfaVerificationJSONBody5Type string

// UpdateMfaVerificationNameJSONBody defines parameters for UpdateMfaVerificationName.
type UpdateMfaVerificationNameJSONBody struct {
	// Name The name of the MFA verification.
	Name string `json:"name"`
}

// UpdatePasswordJSONBody defines parameters for UpdatePassword.
type UpdatePasswordJSONBody struct {
	// Password The new password for the user.
	Password string `json:"password"`
}

// UpdatePrimaryEmailJSONBody defines parameters for UpdatePrimaryEmail.
type UpdatePrimaryEmailJSONBody struct {
	// Email The new email for the user.
	Email string `json:"email"`

	// NewIdentifierVerificationRecordId The identifier verification record ID for the new email ownership verification.
	NewIdentifierVerificationRecordId string `json:"newIdentifierVerificationRecordId"`
}

// UpdatePrimaryPhoneJSONBody defines parameters for UpdatePrimaryPhone.
type UpdatePrimaryPhoneJSONBody struct {
	// NewIdentifierVerificationRecordId The identifier verification record ID for the new phone ownership verification.
	NewIdentifierVerificationRecordId string `json:"newIdentifierVerificationRecordId"`

	// Phone The new phone for the user.
	Phone string `json:"phone"`
}

// UpdateOtherProfileJSONBody defines parameters for UpdateOtherProfile.
type UpdateOtherProfileJSONBody struct {
	// Address The new address for the user.
	Address *struct {
		Country       *string `json:"country,omitempty"`
		Formatted     *string `json:"formatted,omitempty"`
		Locality      *string `json:"locality,omitempty"`
		PostalCode    *string `json:"postalCode,omitempty"`
		Region        *string `json:"region,omitempty"`
		StreetAddress *string `json:"streetAddress,omitempty"`
	} `json:"address,omitempty"`

	// Birthdate The new birthdate for the user.
	Birthdate *string `json:"birthdate,omitempty"`

	// FamilyName The new family name for the user.
	FamilyName *string `json:"familyName,omitempty"`

	// Gender The new gender for the user.
	Gender *string `json:"gender,omitempty"`

	// GivenName The new given name for the user.
	GivenName *string `json:"givenName,omitempty"`

	// Locale The new locale for the user.
	Locale *string `json:"locale,omitempty"`

	// MiddleName The new middle name for the user.
	MiddleName *string `json:"middleName,omitempty"`

	// Nickname The new nickname for the user.
	Nickname *string `json:"nickname,omitempty"`

	// PreferredUsername The new preferred username for the user.
	PreferredUsername *string `json:"preferredUsername,omitempty"`

	// Profile The new profile for the user.
	Profile *string `json:"profile,omitempty"`

	// Website The new website for the user.
	Website *string `json:"website,omitempty"`

	// Zoneinfo The new zoneinfo for the user.
	Zoneinfo *string `json:"zoneinfo,omitempty"`
}

// ListOneTimeTokensParams defines parameters for ListOneTimeTokens.
type ListOneTimeTokensParams struct {
	// Email Filter one-time tokens by email address.
	Email *string `form:"email,omitempty" json:"email,omitempty"`

	// Status Filter one-time tokens by status.
	Status *ListOneTimeTokensParamsStatus `form:"status,omitempty" json:"status,omitempty"`

	// Page Page number (starts from 1).
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// PageSize Entries per page.
	PageSize *int `form:"page_size,omitempty" json:"page_size,omitempty"`
}

// ListOneTimeTokensParamsStatus defines parameters for ListOneTimeTokens.
type ListOneTimeTokensParamsStatus string

// AddOneTimeTokensJSONBody defines parameters for AddOneTimeTokens.
type AddOneTimeTokensJSONBody struct {
	// Context Additional context to store with the one-time token. This can be used to store arbitrary data that will be associated with the token.
	Context *struct {
		JitOrganizationIds *[]string `json:"jitOrganizationIds,omitempty"`
	} `json:"context,omitempty"`

	// Email The email address to associate with the one-time token.
	Email string `json:"email"`

	// ExpiresIn The expiration time in seconds. If not provided, defaults to 2 days (172,800 seconds).
	ExpiresIn *float32 `json:"expiresIn,omitempty"`
}

// VerifyOneTimeTokenJSONBody defines parameters for VerifyOneTimeToken.
type VerifyOneTimeTokenJSONBody struct {
	// Email The email address associated with the one-time token.
	Email string `json:"email"`

	// Token The one-time token to verify.
	Token string `json:"token"`
}

// ReplaceOneTimeTokenStatusJSONBody defines parameters for ReplaceOneTimeTokenStatus.
type ReplaceOneTimeTokenStatusJSONBody struct {
	// Status The new status of the one-time token.
	Status ReplaceOneTimeTokenStatusJSONBodyStatus `json:"status"`
}

// ReplaceOneTimeTokenStatusJSONBodyStatus defines parameters for ReplaceOneTimeTokenStatus.
type ReplaceOneTimeTokenStatusJSONBodyStatus string

// ListOrganizationInvitationsParams defines parameters for ListOrganizationInvitations.
type ListOrganizationInvitationsParams struct {
	OrganizationId *string `form:"organizationId,omitempty" json:"organizationId,omitempty"`
	InviterId      *string `form:"inviterId,omitempty" json:"inviterId,omitempty"`
	Invitee        *string `form:"invitee,omitempty" json:"invitee,omitempty"`
}

// CreateOrganizationInvitationJSONBody defines parameters for CreateOrganizationInvitation.
type CreateOrganizationInvitationJSONBody struct {
	// ExpiresAt The epoch time in milliseconds when the invitation expires.
	ExpiresAt float32 `json:"expiresAt"`

	// Invitee The email address of the user to invite to join the organization.
	Invitee openapi_types.Email `json:"invitee"`

	// InviterId The ID of the user who is inviting the user to join the organization.
	InviterId *string `json:"inviterId"`

	// MessagePayload The message payload for the "OrganizationInvitation" template to use when sending the invitation via email. If it is `false`, the invitation will not be sent via email.
	MessagePayload CreateOrganizationInvitationJSONBody_MessagePayload `json:"messagePayload"`

	// OrganizationId The ID of the organization to invite the user to join.
	OrganizationId string `json:"organizationId"`

	// OrganizationRoleIds The IDs of the organization roles to assign to the user when they accept the invitation.
	OrganizationRoleIds *[]string `json:"organizationRoleIds,omitempty"`
}

// CreateOrganizationInvitationJSONBodyMessagePayload0 defines parameters for CreateOrganizationInvitation.
type CreateOrganizationInvitationJSONBodyMessagePayload0 struct {
	Code   *string `json:"code,omitempty"`
	Link   *string `json:"link,omitempty"`
	Locale *string `json:"locale,omitempty"`
}

// CreateOrganizationInvitationJSONBodyMessagePayload1 defines parameters for CreateOrganizationInvitation.
type CreateOrganizationInvitationJSONBodyMessagePayload1 = bool

// CreateOrganizationInvitationJSONBody_MessagePayload defines parameters for CreateOrganizationInvitation.
type CreateOrganizationInvitationJSONBody_MessagePayload struct {
	union json.RawMessage
}

// CreateOrganizationInvitationMessageJSONBody defines parameters for CreateOrganizationInvitationMessage.
type CreateOrganizationInvitationMessageJSONBody struct {
	Code   *string `json:"code,omitempty"`
	Link   *string `json:"link,omitempty"`
	Locale *string `json:"locale,omitempty"`
}

// ReplaceOrganizationInvitationStatusJSONBody defines parameters for ReplaceOrganizationInvitationStatus.
type ReplaceOrganizationInvitationStatusJSONBody struct {
	// AcceptedUserId The ID of the user who accepted the organization invitation. Required if the status is "Accepted".
	AcceptedUserId *string `json:"acceptedUserId"`

	// Status The status of the organization invitation.
	Status ReplaceOrganizationInvitationStatusJSONBodyStatus `json:"status"`
}

// ReplaceOrganizationInvitationStatusJSONBodyStatus defines parameters for ReplaceOrganizationInvitationStatus.
type ReplaceOrganizationInvitationStatusJSONBodyStatus string

// ListOrganizationRolesParams defines parameters for ListOrganizationRoles.
type ListOrganizationRolesParams struct {
	Q *string `form:"q,omitempty" json:"q,omitempty"`

	// Page Page number (starts from 1).
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// PageSize Entries per page.
	PageSize *int `form:"page_size,omitempty" json:"page_size,omitempty"`
}

// CreateOrganizationRoleJSONBody defines parameters for CreateOrganizationRole.
type CreateOrganizationRoleJSONBody struct {
	// Description The description of the organization role.
	Description *string `json:"description"`

	// Name The name of the organization role. It must be unique within the organization template.
	Name string `json:"name"`

	// OrganizationScopeIds An array of organization scope IDs to be assigned to the organization role.
	OrganizationScopeIds []string `json:"organizationScopeIds"`

	// ResourceScopeIds An array of resource scope IDs to be assigned to the organization role.
	ResourceScopeIds []string                            `json:"resourceScopeIds"`
	TenantId         *string                             `json:"tenantId,omitempty"`
	Type             *CreateOrganizationRoleJSONBodyType `json:"type,omitempty"`
}

// CreateOrganizationRoleJSONBodyType defines parameters for CreateOrganizationRole.
type CreateOrganizationRoleJSONBodyType string

// UpdateOrganizationRoleJSONBody defines parameters for UpdateOrganizationRole.
type UpdateOrganizationRoleJSONBody struct {
	// Description The updated description of the organization role.
	Description *string `json:"description"`
	Id          *string `json:"id,omitempty"`

	// Name The updated name of the organization role. It must be unique within the organization template.
	Name     *string                             `json:"name,omitempty"`
	TenantId *string                             `json:"tenantId,omitempty"`
	Type     *UpdateOrganizationRoleJSONBodyType `json:"type,omitempty"`
}

// UpdateOrganizationRoleJSONBodyType defines parameters for UpdateOrganizationRole.
type UpdateOrganizationRoleJSONBodyType string

// ListOrganizationRoleResourceScopesParams defines parameters for ListOrganizationRoleResourceScopes.
type ListOrganizationRoleResourceScopesParams struct {
	// Page Page number (starts from 1).
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// PageSize Entries per page.
	PageSize *int `form:"page_size,omitempty" json:"page_size,omitempty"`
}

// CreateOrganizationRoleResourceScopeJSONBody defines parameters for CreateOrganizationRoleResourceScope.
type CreateOrganizationRoleResourceScopeJSONBody struct {
	// ScopeIds An array of resource scope IDs to be assigned. Existed scope IDs assignments will be ignored.
	ScopeIds []string `json:"scopeIds"`
}

// ReplaceOrganizationRoleResourceScopesJSONBody defines parameters for ReplaceOrganizationRoleResourceScopes.
type ReplaceOrganizationRoleResourceScopesJSONBody struct {
	// ScopeIds An array of resource scope IDs to replace existing scopes.
	ScopeIds []string `json:"scopeIds"`
}

// ListOrganizationRoleScopesParams defines parameters for ListOrganizationRoleScopes.
type ListOrganizationRoleScopesParams struct {
	// Page Page number (starts from 1).
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// PageSize Entries per page.
	PageSize *int `form:"page_size,omitempty" json:"page_size,omitempty"`
}

// CreateOrganizationRoleScopeJSONBody defines parameters for CreateOrganizationRoleScope.
type CreateOrganizationRoleScopeJSONBody struct {
	// OrganizationScopeIds An array of organization scope IDs to be assigned. Existed scope IDs assignments will be ignored.
	OrganizationScopeIds []string `json:"organizationScopeIds"`
}

// ReplaceOrganizationRoleScopesJSONBody defines parameters for ReplaceOrganizationRoleScopes.
type ReplaceOrganizationRoleScopesJSONBody struct {
	// OrganizationScopeIds An array of organization scope IDs to replace existing scopes.
	OrganizationScopeIds []string `json:"organizationScopeIds"`
}

// ListOrganizationScopesParams defines parameters for ListOrganizationScopes.
type ListOrganizationScopesParams struct {
	Q *string `form:"q,omitempty" json:"q,omitempty"`

	// Page Page number (starts from 1).
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// PageSize Entries per page.
	PageSize *int `form:"page_size,omitempty" json:"page_size,omitempty"`
}

// CreateOrganizationScopeJSONBody defines parameters for CreateOrganizationScope.
type CreateOrganizationScopeJSONBody struct {
	// Description The description of the organization scope.
	Description *string `json:"description"`

	// Name The name of the organization scope. It must be unique within the organization template.
	Name     string  `json:"name"`
	TenantId *string `json:"tenantId,omitempty"`
}

// UpdateOrganizationScopeJSONBody defines parameters for UpdateOrganizationScope.
type UpdateOrganizationScopeJSONBody struct {
	// Description The updated description of the organization scope.
	Description *string `json:"description"`
	Id          *string `json:"id,omitempty"`

	// Name The updated name of the organization scope. It must be unique within the organization template.
	Name     *string `json:"name,omitempty"`
	TenantId *string `json:"tenantId,omitempty"`
}

// ListOrganizationsParams defines parameters for ListOrganizations.
type ListOrganizationsParams struct {
	// Q The query to filter organizations. It can be a partial ID or name.
	//
	// If not provided, all organizations will be returned.
	Q *string `form:"q,omitempty" json:"q,omitempty"`

	// ShowFeatured Whether to show featured users in the organization. Featured users are randomly selected from the organization members.
	//
	// If not provided, `featuredUsers` will not be included in the response.
	ShowFeatured *string `form:"showFeatured,omitempty" json:"showFeatured,omitempty"`

	// Page Page number (starts from 1).
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// PageSize Entries per page.
	PageSize *int `form:"page_size,omitempty" json:"page_size,omitempty"`
}

// CreateOrganizationJSONBody defines parameters for CreateOrganization.
type CreateOrganizationJSONBody struct {
	Branding *struct {
		DarkFavicon *string `json:"darkFavicon,omitempty"`
		DarkLogoUrl *string `json:"darkLogoUrl,omitempty"`
		Favicon     *string `json:"favicon,omitempty"`
		LogoUrl     *string `json:"logoUrl,omitempty"`
	} `json:"branding,omitempty"`
	CreatedAt *float32 `json:"createdAt,omitempty"`

	// CustomData arbitrary
	CustomData *map[string]interface{} `json:"customData,omitempty"`

	// Description The description of the organization.
	Description   *string `json:"description"`
	IsMfaRequired *bool   `json:"isMfaRequired,omitempty"`

	// Name The name of the organization.
	Name     string  `json:"name"`
	TenantId *string `json:"tenantId,omitempty"`
}

// UpdateOrganizationJSONBody defines parameters for UpdateOrganization.
type UpdateOrganizationJSONBody struct {
	Branding *struct {
		DarkFavicon *string `json:"darkFavicon,omitempty"`
		DarkLogoUrl *string `json:"darkLogoUrl,omitempty"`
		Favicon     *string `json:"favicon,omitempty"`
		LogoUrl     *string `json:"logoUrl,omitempty"`
	} `json:"branding,omitempty"`
	CreatedAt *float32 `json:"createdAt,omitempty"`

	// CustomData arbitrary
	CustomData *map[string]interface{} `json:"customData,omitempty"`

	// Description The updated description of the organization.
	Description   *string `json:"description"`
	Id            *string `json:"id,omitempty"`
	IsMfaRequired *bool   `json:"isMfaRequired,omitempty"`

	// Name The updated name of the organization.
	Name     *string `json:"name,omitempty"`
	TenantId *string `json:"tenantId,omitempty"`
}

// ListOrganizationApplicationsParams defines parameters for ListOrganizationApplications.
type ListOrganizationApplicationsParams struct {
	Q *string `form:"q,omitempty" json:"q,omitempty"`

	// Page Page number (starts from 1).
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// PageSize Entries per page.
	PageSize *int `form:"page_size,omitempty" json:"page_size,omitempty"`
}

// AddOrganizationApplicationsJSONBody defines parameters for AddOrganizationApplications.
type AddOrganizationApplicationsJSONBody struct {
	// ApplicationIds The application IDs to add.
	ApplicationIds []string `json:"applicationIds"`
}

// ReplaceOrganizationApplicationsJSONBody defines parameters for ReplaceOrganizationApplications.
type ReplaceOrganizationApplicationsJSONBody struct {
	// ApplicationIds An array of application IDs to replace existing applications.
	ApplicationIds []string `json:"applicationIds"`
}

// AssignOrganizationRolesToApplicationsJSONBody defines parameters for AssignOrganizationRolesToApplications.
type AssignOrganizationRolesToApplicationsJSONBody struct {
	// ApplicationIds An array of application IDs to assign roles to.
	ApplicationIds []string `json:"applicationIds"`

	// OrganizationRoleIds An array of organization role IDs to assign to the applications.
	OrganizationRoleIds []string `json:"organizationRoleIds"`
}

// ListOrganizationApplicationRolesParams defines parameters for ListOrganizationApplicationRoles.
type ListOrganizationApplicationRolesParams struct {
	// Page Page number (starts from 1).
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// PageSize Entries per page.
	PageSize *int `form:"page_size,omitempty" json:"page_size,omitempty"`
}

// AssignOrganizationRolesToApplicationJSONBody defines parameters for AssignOrganizationRolesToApplication.
type AssignOrganizationRolesToApplicationJSONBody struct {
	// OrganizationRoleIds The role ID to add.
	OrganizationRoleIds []string `json:"organizationRoleIds"`
}

// ReplaceOrganizationApplicationRolesJSONBody defines parameters for ReplaceOrganizationApplicationRoles.
type ReplaceOrganizationApplicationRolesJSONBody struct {
	// OrganizationRoleIds An array of role IDs to replace existing roles.
	OrganizationRoleIds []string `json:"organizationRoleIds"`
}

// ListOrganizationJitEmailDomainsParams defines parameters for ListOrganizationJitEmailDomains.
type ListOrganizationJitEmailDomainsParams struct {
	// Page Page number (starts from 1).
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// PageSize Entries per page.
	PageSize *int `form:"page_size,omitempty" json:"page_size,omitempty"`
}

// CreateOrganizationJitEmailDomainJSONBody defines parameters for CreateOrganizationJitEmailDomain.
type CreateOrganizationJitEmailDomainJSONBody struct {
	// EmailDomain The email domain to add.
	EmailDomain string `json:"emailDomain"`
}

// ReplaceOrganizationJitEmailDomainsJSONBody defines parameters for ReplaceOrganizationJitEmailDomains.
type ReplaceOrganizationJitEmailDomainsJSONBody struct {
	// EmailDomains An array of email domains to replace existing email domains.
	EmailDomains []string `json:"emailDomains"`
}

// ListOrganizationJitRolesParams defines parameters for ListOrganizationJitRoles.
type ListOrganizationJitRolesParams struct {
	// Page Page number (starts from 1).
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// PageSize Entries per page.
	PageSize *int `form:"page_size,omitempty" json:"page_size,omitempty"`
}

// CreateOrganizationJitRoleJSONBody defines parameters for CreateOrganizationJitRole.
type CreateOrganizationJitRoleJSONBody struct {
	// OrganizationRoleIds The organization role IDs to add.
	OrganizationRoleIds []string `json:"organizationRoleIds"`
}

// ReplaceOrganizationJitRolesJSONBody defines parameters for ReplaceOrganizationJitRoles.
type ReplaceOrganizationJitRolesJSONBody struct {
	// OrganizationRoleIds An array of organization role IDs to replace existing organization roles.
	OrganizationRoleIds []string `json:"organizationRoleIds"`
}

// ListOrganizationJitSsoConnectorsParams defines parameters for ListOrganizationJitSsoConnectors.
type ListOrganizationJitSsoConnectorsParams struct {
	// Page Page number (starts from 1).
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// PageSize Entries per page.
	PageSize *int `form:"page_size,omitempty" json:"page_size,omitempty"`
}

// CreateOrganizationJitSsoConnectorJSONBody defines parameters for CreateOrganizationJitSsoConnector.
type CreateOrganizationJitSsoConnectorJSONBody struct {
	// SsoConnectorIds The SSO connector IDs to add.
	SsoConnectorIds []string `json:"ssoConnectorIds"`
}

// ReplaceOrganizationJitSsoConnectorsJSONBody defines parameters for ReplaceOrganizationJitSsoConnectors.
type ReplaceOrganizationJitSsoConnectorsJSONBody struct {
	// SsoConnectorIds An array of SSO connector IDs to replace existing SSO connectors.
	SsoConnectorIds []string `json:"ssoConnectorIds"`
}

// ListOrganizationUsersParams defines parameters for ListOrganizationUsers.
type ListOrganizationUsersParams struct {
	// Q The query to filter users. It will match multiple fields of users, including ID, name, username, email, and phone number.
	//
	// If not provided, all users will be returned.
	Q *string `form:"q,omitempty" json:"q,omitempty"`

	// Page Page number (starts from 1).
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// PageSize Entries per page.
	PageSize *int `form:"page_size,omitempty" json:"page_size,omitempty"`
}

// AddOrganizationUsersJSONBody defines parameters for AddOrganizationUsers.
type AddOrganizationUsersJSONBody struct {
	// UserIds An array of user IDs to be added to the organization. Organization existed users assignment will be ignored.
	UserIds []string `json:"userIds"`
}

// ReplaceOrganizationUsersJSONBody defines parameters for ReplaceOrganizationUsers.
type ReplaceOrganizationUsersJSONBody struct {
	// UserIds An array of user IDs to replace existing users.
	UserIds []string `json:"userIds"`
}

// AssignOrganizationRolesToUsersJSONBody defines parameters for AssignOrganizationRolesToUsers.
type AssignOrganizationRolesToUsersJSONBody struct {
	// OrganizationRoleIds An array of organization role IDs to assign. User existed roles assignment will be ignored.
	OrganizationRoleIds []string `json:"organizationRoleIds"`

	// UserIds An array of user IDs to assign roles.
	UserIds []string `json:"userIds"`
}

// ListOrganizationUserRolesParams defines parameters for ListOrganizationUserRoles.
type ListOrganizationUserRolesParams struct {
	// Page Page number (starts from 1).
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// PageSize Entries per page.
	PageSize *int `form:"page_size,omitempty" json:"page_size,omitempty"`
}

// AssignOrganizationRolesToUserJSONBody defines parameters for AssignOrganizationRolesToUser.
type AssignOrganizationRolesToUserJSONBody struct {
	// OrganizationRoleIds An array of organization role IDs to assign to the user. User existed roles assignment will be ignored.
	OrganizationRoleIds *[]string `json:"organizationRoleIds,omitempty"`

	// OrganizationRoleNames An array of organization role names to assign to the user. User existed roles assignment will be ignored.
	OrganizationRoleNames *[]string `json:"organizationRoleNames,omitempty"`
}

// ReplaceOrganizationUserRolesJSONBody defines parameters for ReplaceOrganizationUserRoles.
type ReplaceOrganizationUserRolesJSONBody struct {
	// OrganizationRoleIds An array of organization role IDs to update for the user.
	OrganizationRoleIds *[]string `json:"organizationRoleIds,omitempty"`

	// OrganizationRoleNames An array of organization role names to update for the user.
	OrganizationRoleNames *[]string `json:"organizationRoleNames,omitempty"`
}

// ListResourcesParams defines parameters for ListResources.
type ListResourcesParams struct {
	// IncludeScopes If it's provided with a truthy value (`true`, `1`, `yes`), the scopes of each resource will be included in the response.
	IncludeScopes *string `form:"includeScopes,omitempty" json:"includeScopes,omitempty"`

	// Page Page number (starts from 1).
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// PageSize Entries per page.
	PageSize *int `form:"page_size,omitempty" json:"page_size,omitempty"`
}

// CreateResourceJSONBody defines parameters for CreateResource.
type CreateResourceJSONBody struct {
	// AccessTokenTtl The access token TTL in seconds. It affects the `exp` claim of the access token granted for this resource.
	AccessTokenTtl *float32 `json:"accessTokenTtl,omitempty"`

	// Indicator The unique resource indicator. Should be a valid URI.
	Indicator string `json:"indicator"`

	// Name The name of the resource.
	Name     string  `json:"name"`
	TenantId *string `json:"tenantId,omitempty"`
}

// UpdateResourceJSONBody defines parameters for UpdateResource.
type UpdateResourceJSONBody struct {
	// AccessTokenTtl The updated access token TTL in seconds.
	AccessTokenTtl *float32 `json:"accessTokenTtl,omitempty"`

	// Name The updated name of the resource.
	Name     *string `json:"name,omitempty"`
	TenantId *string `json:"tenantId,omitempty"`
}

// UpdateResourceIsDefaultJSONBody defines parameters for UpdateResourceIsDefault.
type UpdateResourceIsDefaultJSONBody struct {
	// IsDefault The updated value of the `isDefault` property.
	IsDefault bool `json:"isDefault"`
}

// ListResourceScopesParams defines parameters for ListResourceScopes.
type ListResourceScopesParams struct {
	// Page Page number (starts from 1).
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// PageSize Entries per page.
	PageSize *int `form:"page_size,omitempty" json:"page_size,omitempty"`

	// SearchParams Search query parameters.
	SearchParams *map[string]string `form:"search_params,omitempty" json:"search_params,omitempty"`
}

// CreateResourceScopeJSONBody defines parameters for CreateResourceScope.
type CreateResourceScopeJSONBody struct {
	Description *string `json:"description"`

	// Name The name of the scope. It should be unique for the resource.
	Name string `json:"name"`
}

// UpdateResourceScopeJSONBody defines parameters for UpdateResourceScope.
type UpdateResourceScopeJSONBody struct {
	Description *string `json:"description"`

	// Name The updated name of the scope. It should be unique for the resource.
	Name *string `json:"name,omitempty"`
}

// ListRolesParams defines parameters for ListRoles.
type ListRolesParams struct {
	// ExcludeUserId Exclude roles assigned to a user.
	ExcludeUserId *string `form:"excludeUserId,omitempty" json:"excludeUserId,omitempty"`

	// ExcludeApplicationId Exclude roles assigned to an application.
	ExcludeApplicationId *string `form:"excludeApplicationId,omitempty" json:"excludeApplicationId,omitempty"`

	// Type Filter by role type.
	Type *ListRolesParamsType `form:"type,omitempty" json:"type,omitempty"`

	// Page Page number (starts from 1).
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// PageSize Entries per page.
	PageSize *int `form:"page_size,omitempty" json:"page_size,omitempty"`

	// SearchParams Search query parameters.
	SearchParams *map[string]string `form:"search_params,omitempty" json:"search_params,omitempty"`
}

// ListRolesParamsType defines parameters for ListRoles.
type ListRolesParamsType string

// CreateRoleJSONBody defines parameters for CreateRole.
type CreateRoleJSONBody struct {
	Description string `json:"description"`
	IsDefault   *bool  `json:"isDefault,omitempty"`

	// Name The name of the role. It should be unique within the tenant.
	Name string `json:"name"`

	// ScopeIds The initial API resource scopes assigned to the role.
	ScopeIds *[]string `json:"scopeIds,omitempty"`
	TenantId *string   `json:"tenantId,omitempty"`

	// Type The type of the role. It cannot be changed after creation.
	Type *CreateRoleJSONBodyType `json:"type,omitempty"`
}

// CreateRoleJSONBodyType defines parameters for CreateRole.
type CreateRoleJSONBodyType string

// UpdateRoleJSONBody defines parameters for UpdateRole.
type UpdateRoleJSONBody struct {
	Description *string `json:"description,omitempty"`
	IsDefault   *bool   `json:"isDefault,omitempty"`

	// Name The name of the role. It should be unique within the tenant.
	Name *string `json:"name,omitempty"`
}

// ListRoleApplicationsParams defines parameters for ListRoleApplications.
type ListRoleApplicationsParams struct {
	// Page Page number (starts from 1).
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// PageSize Entries per page.
	PageSize *int `form:"page_size,omitempty" json:"page_size,omitempty"`

	// SearchParams Search query parameters.
	SearchParams *map[string]string `form:"search_params,omitempty" json:"search_params,omitempty"`
}

// CreateRoleApplicationJSONBody defines parameters for CreateRoleApplication.
type CreateRoleApplicationJSONBody struct {
	// ApplicationIds An array of application IDs to be assigned.
	ApplicationIds []string `json:"applicationIds"`
}

// ListRoleScopesParams defines parameters for ListRoleScopes.
type ListRoleScopesParams struct {
	// Page Page number (starts from 1).
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// PageSize Entries per page.
	PageSize *int `form:"page_size,omitempty" json:"page_size,omitempty"`

	// SearchParams Search query parameters.
	SearchParams *map[string]string `form:"search_params,omitempty" json:"search_params,omitempty"`
}

// CreateRoleScopeJSONBody defines parameters for CreateRoleScope.
type CreateRoleScopeJSONBody struct {
	// ScopeIds An array of API resource scope IDs to be linked.
	ScopeIds []string `json:"scopeIds"`
}

// ListRoleUsersParams defines parameters for ListRoleUsers.
type ListRoleUsersParams struct {
	// Page Page number (starts from 1).
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// PageSize Entries per page.
	PageSize *int `form:"page_size,omitempty" json:"page_size,omitempty"`

	// SearchParams Search query parameters.
	SearchParams *map[string]string `form:"search_params,omitempty" json:"search_params,omitempty"`
}

// CreateRoleUserJSONBody defines parameters for CreateRoleUser.
type CreateRoleUserJSONBody struct {
	// UserIds An array of user IDs to be assigned.
	UserIds []string `json:"userIds"`
}

// CreateSamlApplicationJSONBody defines parameters for CreateSamlApplication.
type CreateSamlApplicationJSONBody struct {
	// AcsUrl The Assertion Consumer Service (ACS) URL where the SAML response will be sent.
	AcsUrl           *string `json:"acsUrl"`
	AttributeMapping *struct {
		Address             *string `json:"address,omitempty"`
		Birthdate           *string `json:"birthdate,omitempty"`
		CreatedAt           *string `json:"created_at,omitempty"`
		CustomData          *string `json:"custom_data,omitempty"`
		Email               *string `json:"email,omitempty"`
		EmailVerified       *string `json:"email_verified,omitempty"`
		FamilyName          *string `json:"family_name,omitempty"`
		Gender              *string `json:"gender,omitempty"`
		GivenName           *string `json:"given_name,omitempty"`
		Identities          *string `json:"identities,omitempty"`
		Locale              *string `json:"locale,omitempty"`
		MiddleName          *string `json:"middle_name,omitempty"`
		Name                *string `json:"name,omitempty"`
		Nickname            *string `json:"nickname,omitempty"`
		OrganizationData    *string `json:"organization_data,omitempty"`
		OrganizationRoles   *string `json:"organization_roles,omitempty"`
		Organizations       *string `json:"organizations,omitempty"`
		PhoneNumber         *string `json:"phone_number,omitempty"`
		PhoneNumberVerified *string `json:"phone_number_verified,omitempty"`
		Picture             *string `json:"picture,omitempty"`
		PreferredUsername   *string `json:"preferred_username,omitempty"`
		Profile             *string `json:"profile,omitempty"`
		Roles               *string `json:"roles,omitempty"`
		SsoIdentities       *string `json:"sso_identities,omitempty"`
		Sub                 *string `json:"sub,omitempty"`
		UpdatedAt           *string `json:"updated_at,omitempty"`
		Username            *string `json:"username,omitempty"`
		Website             *string `json:"website,omitempty"`
		Zoneinfo            *string `json:"zoneinfo,omitempty"`
	} `json:"attributeMapping,omitempty"`

	// CustomData Optional custom data for the application.
	CustomData *map[string]interface{} `json:"customData,omitempty"`

	// Description Optional description of the SAML application.
	Description *string `json:"description"`

	// Encryption Validator function
	Encryption *map[string]interface{} `json:"encryption"`
	EntityId   *string                 `json:"entityId"`

	// Name The name of the SAML application.
	Name         string                                    `json:"name"`
	NameIdFormat CreateSamlApplicationJSONBodyNameIdFormat `json:"nameIdFormat"`
}

// CreateSamlApplicationJSONBodyNameIdFormat defines parameters for CreateSamlApplication.
type CreateSamlApplicationJSONBodyNameIdFormat string

// UpdateSamlApplicationJSONBody defines parameters for UpdateSamlApplication.
type UpdateSamlApplicationJSONBody struct {
	// AcsUrl The Assertion Consumer Service (ACS) URL.
	AcsUrl           *string `json:"acsUrl"`
	AttributeMapping *struct {
		Address             *string `json:"address,omitempty"`
		Birthdate           *string `json:"birthdate,omitempty"`
		CreatedAt           *string `json:"created_at,omitempty"`
		CustomData          *string `json:"custom_data,omitempty"`
		Email               *string `json:"email,omitempty"`
		EmailVerified       *string `json:"email_verified,omitempty"`
		FamilyName          *string `json:"family_name,omitempty"`
		Gender              *string `json:"gender,omitempty"`
		GivenName           *string `json:"given_name,omitempty"`
		Identities          *string `json:"identities,omitempty"`
		Locale              *string `json:"locale,omitempty"`
		MiddleName          *string `json:"middle_name,omitempty"`
		Name                *string `json:"name,omitempty"`
		Nickname            *string `json:"nickname,omitempty"`
		OrganizationData    *string `json:"organization_data,omitempty"`
		OrganizationRoles   *string `json:"organization_roles,omitempty"`
		Organizations       *string `json:"organizations,omitempty"`
		PhoneNumber         *string `json:"phone_number,omitempty"`
		PhoneNumberVerified *string `json:"phone_number_verified,omitempty"`
		Picture             *string `json:"picture,omitempty"`
		PreferredUsername   *string `json:"preferred_username,omitempty"`
		Profile             *string `json:"profile,omitempty"`
		Roles               *string `json:"roles,omitempty"`
		SsoIdentities       *string `json:"sso_identities,omitempty"`
		Sub                 *string `json:"sub,omitempty"`
		UpdatedAt           *string `json:"updated_at,omitempty"`
		Username            *string `json:"username,omitempty"`
		Website             *string `json:"website,omitempty"`
		Zoneinfo            *string `json:"zoneinfo,omitempty"`
	} `json:"attributeMapping,omitempty"`

	// CustomData Custom data for the application.
	CustomData *map[string]interface{} `json:"customData,omitempty"`

	// Description Description of the SAML application.
	Description *string `json:"description"`

	// Encryption Validator function
	Encryption *map[string]interface{} `json:"encryption"`
	EntityId   *string                 `json:"entityId"`

	// Name The name of the SAML application.
	Name         *string                                    `json:"name,omitempty"`
	NameIdFormat *UpdateSamlApplicationJSONBodyNameIdFormat `json:"nameIdFormat,omitempty"`
}

// UpdateSamlApplicationJSONBodyNameIdFormat defines parameters for UpdateSamlApplication.
type UpdateSamlApplicationJSONBodyNameIdFormat string

// GetSamlApplicationCallbackParams defines parameters for GetSamlApplicationCallback.
type GetSamlApplicationCallbackParams struct {
	// Code The authorization code from OIDC callback.
	Code *string `form:"code,omitempty" json:"code,omitempty"`

	// State The state parameter from OIDC callback.
	State *string `form:"state,omitempty" json:"state,omitempty"`

	// RedirectUri The redirect URI for the callback.
	RedirectUri      *string `form:"redirectUri,omitempty" json:"redirectUri,omitempty"`
	Error            *string `form:"error,omitempty" json:"error,omitempty"`
	ErrorDescription *string `form:"error_description,omitempty" json:"error_description,omitempty"`
}

// CreateSamlApplicationSecretJSONBody defines parameters for CreateSamlApplicationSecret.
type CreateSamlApplicationSecretJSONBody struct {
	// LifeSpanInYears The lifetime of the certificate in years (minimum 1 year).
	LifeSpanInYears int `json:"lifeSpanInYears"`
}

// UpdateSamlApplicationSecretJSONBody defines parameters for UpdateSamlApplicationSecret.
type UpdateSamlApplicationSecretJSONBody struct {
	// Active Whether the certificate is active.
	Active bool `json:"active"`
}

// GetSamlAuthnParams defines parameters for GetSamlAuthn.
type GetSamlAuthnParams struct {
	// SAMLRequest The SAML request message.
	SAMLRequest string `form:"SAMLRequest" json:"SAMLRequest"`

	// Signature The signature of the request.
	Signature *string `form:"Signature,omitempty" json:"Signature,omitempty"`

	// SigAlg The signature algorithm.
	SigAlg *string `form:"SigAlg,omitempty" json:"SigAlg,omitempty"`

	// RelayState The relay state parameter.
	RelayState *string `form:"RelayState,omitempty" json:"RelayState,omitempty"`
}

// CreateSamlAuthnJSONBody defines parameters for CreateSamlAuthn.
type CreateSamlAuthnJSONBody struct {
	RelayState  *string `json:"RelayState,omitempty"`
	SAMLRequest string  `json:"SAMLRequest"`
}

// CreateSamlAuthnFormdataBody defines parameters for CreateSamlAuthn.
type CreateSamlAuthnFormdataBody struct {
	// RelayState Optional state parameter to be returned in the response.
	RelayState *string `form:"RelayState,omitempty" json:"RelayState,omitempty"`

	// SAMLRequest Base64-encoded SAML request message.
	SAMLRequest string `form:"SAMLRequest" json:"SAMLRequest"`
}

// DeleteSentinelActivitiesJSONBody defines parameters for DeleteSentinelActivities.
type DeleteSentinelActivitiesJSONBody struct {
	TargetType DeleteSentinelActivitiesJSONBodyTargetType `json:"targetType"`
	Targets    []string                                   `json:"targets"`
}

// DeleteSentinelActivitiesJSONBodyTargetType defines parameters for DeleteSentinelActivities.
type DeleteSentinelActivitiesJSONBodyTargetType string

// UpdateSignInExpJSONBody defines parameters for UpdateSignInExp.
type UpdateSignInExpJSONBody struct {
	AgreeToTermsPolicy *UpdateSignInExpJSONBodyAgreeToTermsPolicy `json:"agreeToTermsPolicy,omitempty"`
	Branding           *struct {
		DarkFavicon *string `json:"darkFavicon,omitempty"`
		DarkLogoUrl *string `json:"darkLogoUrl,omitempty"`
		Favicon     *string `json:"favicon,omitempty"`
		LogoUrl     *string `json:"logoUrl,omitempty"`
	} `json:"branding,omitempty"`
	CaptchaPolicy *struct {
		Enabled *bool `json:"enabled,omitempty"`
	} `json:"captchaPolicy,omitempty"`

	// Color Specify the primary branding color for the sign-in page (both light/dark mode).
	Color *struct {
		DarkPrimaryColor  string `json:"darkPrimaryColor"`
		IsDarkModeEnabled bool   `json:"isDarkModeEnabled"`
		PrimaryColor      string `json:"primaryColor"`
	} `json:"color,omitempty"`

	// CustomContent Custom content to display on experience flow pages. the page pathname will be the config key, the content will be the config value.
	CustomContent  *map[string]string `json:"customContent,omitempty"`
	CustomCss      *string            `json:"customCss"`
	CustomUiAssets *struct {
		CreatedAt float32 `json:"createdAt"`
		Id        string  `json:"id"`
	} `json:"customUiAssets"`

	// EmailBlocklistPolicy Define email restriction policies. Users will be prohibited from registering or linking any email addresses that are included in the blocklist.
	EmailBlocklistPolicy *struct {
		// BlockDisposableAddress Cloud only.  Whether to block disposable email addresses. Once enabled, Logto will check the email domain against a list of known disposable email domains. If the domain is found in the list, the email address will be blocked.
		BlockDisposableAddress   *interface{} `json:"blockDisposableAddress,omitempty"`
		BlockDisposableAddresses *bool        `json:"blockDisposableAddresses,omitempty"`

		// BlockSubaddressing Whether to block sub-addresses. (E.g., example+shopping@test.com)
		BlockSubaddressing *bool `json:"blockSubaddressing,omitempty"`

		// CustomBlocklist Custom blocklist of email addresses or domains.
		CustomBlocklist *[]string `json:"customBlocklist,omitempty"`
	} `json:"emailBlocklistPolicy,omitempty"`

	// LanguageInfo Control the language detection policy for the sign-in page.
	LanguageInfo *struct {
		AutoDetect       bool                                                `json:"autoDetect"`
		FallbackLanguage UpdateSignInExpJSONBodyLanguageInfoFallbackLanguage `json:"fallbackLanguage"`
	} `json:"languageInfo,omitempty"`

	// Mfa MFA settings
	Mfa *struct {
		Factors                       []UpdateSignInExpJSONBodyMfaFactors                      `json:"factors"`
		OrganizationRequiredMfaPolicy *UpdateSignInExpJSONBodyMfaOrganizationRequiredMfaPolicy `json:"organizationRequiredMfaPolicy,omitempty"`
		Policy                        UpdateSignInExpJSONBodyMfaPolicy                         `json:"policy"`
	} `json:"mfa,omitempty"`

	// PasswordPolicy Password policies to adjust the password strength requirements.
	PasswordPolicy *struct {
		CharacterTypes *struct {
			Min float32 `json:"min"`
		} `json:"characterTypes,omitempty"`
		Length *struct {
			Max float32 `json:"max"`
			Min float32 `json:"min"`
		} `json:"length,omitempty"`
		Rejects *struct {
			Pwned                 bool     `json:"pwned"`
			RepetitionAndSequence bool     `json:"repetitionAndSequence"`
			UserInfo              bool     `json:"userInfo"`
			Words                 []string `json:"words"`
		} `json:"rejects,omitempty"`
	} `json:"passwordPolicy,omitempty"`
	PrivacyPolicyUrl *UpdateSignInExpJSONBody_PrivacyPolicyUrl `json:"privacyPolicyUrl,omitempty"`

	// SentinelPolicy Custom sentinel policy settings. Use this field to customize the user lockout policy. The default value is 100 failed attempts within one hour. The user will be locked out for 60 minutes after exceeding the limit.
	SentinelPolicy *struct {
		LockoutDuration *float32 `json:"lockoutDuration,omitempty"`
		MaxAttempts     *float32 `json:"maxAttempts,omitempty"`
	} `json:"sentinelPolicy,omitempty"`

	// SignIn Sign-in method settings
	SignIn *struct {
		Methods []struct {
			Identifier        UpdateSignInExpJSONBodySignInMethodsIdentifier `json:"identifier"`
			IsPasswordPrimary bool                                           `json:"isPasswordPrimary"`
			Password          bool                                           `json:"password"`
			VerificationCode  bool                                           `json:"verificationCode"`
		} `json:"methods"`
	} `json:"signIn,omitempty"`
	SignInMode *UpdateSignInExpJSONBodySignInMode `json:"signInMode,omitempty"`

	// SignUp Sign-up method settings
	SignUp *struct {
		// Identifiers Specify allowed identifiers when signing-up.
		Identifiers []UpdateSignInExpJSONBodySignUpIdentifiers `json:"identifiers"`

		// Password Whether the user is required to set a password when signing-up.
		Password             bool `json:"password"`
		SecondaryIdentifiers *[]struct {
			Identifier UpdateSignInExpJSONBody_SignUp_SecondaryIdentifiers_Identifier `json:"identifier"`
			Verify     *bool                                                          `json:"verify,omitempty"`
		} `json:"secondaryIdentifiers,omitempty"`

		// Verify Whether the user is required to verify their email/phone when signing-up.
		Verify bool `json:"verify"`
	} `json:"signUp,omitempty"`
	SingleSignOnEnabled *bool `json:"singleSignOnEnabled,omitempty"`
	SocialSignIn        *struct {
		AutomaticAccountLinking *bool `json:"automaticAccountLinking,omitempty"`
	} `json:"socialSignIn,omitempty"`

	// SocialSignInConnectorTargets Specify the social sign-in connectors to display on the sign-in page.
	SocialSignInConnectorTargets *[]string `json:"socialSignInConnectorTargets,omitempty"`

	// SupportEmail The support email address to display on the error pages.
	SupportEmail *UpdateSignInExpJSONBody_SupportEmail `json:"supportEmail,omitempty"`

	// SupportWebsiteUrl The support website URL to display on the error pages.
	SupportWebsiteUrl *UpdateSignInExpJSONBody_SupportWebsiteUrl `json:"supportWebsiteUrl,omitempty"`
	TenantId          *string                                    `json:"tenantId,omitempty"`
	TermsOfUseUrl     *UpdateSignInExpJSONBody_TermsOfUseUrl     `json:"termsOfUseUrl,omitempty"`

	// UnknownSessionRedirectUrl The fallback URL to redirect users when the sign-in session does not exist or unknown. Client should initiate a new authentication flow after the redirection.
	UnknownSessionRedirectUrl *UpdateSignInExpJSONBody_UnknownSessionRedirectUrl `json:"unknownSessionRedirectUrl,omitempty"`
}

// UpdateSignInExpParams defines parameters for UpdateSignInExp.
type UpdateSignInExpParams struct {
	// RemoveUnusedDemoSocialConnector Whether to remove unused demo social connectors. (These demo social connectors are only used during cloud user onboarding)
	RemoveUnusedDemoSocialConnector *string `form:"removeUnusedDemoSocialConnector,omitempty" json:"removeUnusedDemoSocialConnector,omitempty"`
}

// UpdateSignInExpJSONBodyAgreeToTermsPolicy defines parameters for UpdateSignInExp.
type UpdateSignInExpJSONBodyAgreeToTermsPolicy string

// UpdateSignInExpJSONBodyLanguageInfoFallbackLanguage defines parameters for UpdateSignInExp.
type UpdateSignInExpJSONBodyLanguageInfoFallbackLanguage string

// UpdateSignInExpJSONBodyMfaFactors defines parameters for UpdateSignInExp.
type UpdateSignInExpJSONBodyMfaFactors string

// UpdateSignInExpJSONBodyMfaOrganizationRequiredMfaPolicy defines parameters for UpdateSignInExp.
type UpdateSignInExpJSONBodyMfaOrganizationRequiredMfaPolicy string

// UpdateSignInExpJSONBodyMfaPolicy defines parameters for UpdateSignInExp.
type UpdateSignInExpJSONBodyMfaPolicy string

// UpdateSignInExpJSONBodyPrivacyPolicyUrl0 defines parameters for UpdateSignInExp.
type UpdateSignInExpJSONBodyPrivacyPolicyUrl0 = string

// UpdateSignInExpJSONBodyPrivacyPolicyUrl1 defines parameters for UpdateSignInExp.
type UpdateSignInExpJSONBodyPrivacyPolicyUrl1 = string

// UpdateSignInExpJSONBody_PrivacyPolicyUrl defines parameters for UpdateSignInExp.
type UpdateSignInExpJSONBody_PrivacyPolicyUrl struct {
	union json.RawMessage
}

// UpdateSignInExpJSONBodySignInMethodsIdentifier defines parameters for UpdateSignInExp.
type UpdateSignInExpJSONBodySignInMethodsIdentifier string

// UpdateSignInExpJSONBodySignInMode defines parameters for UpdateSignInExp.
type UpdateSignInExpJSONBodySignInMode string

// UpdateSignInExpJSONBodySignUpIdentifiers defines parameters for UpdateSignInExp.
type UpdateSignInExpJSONBodySignUpIdentifiers string

// UpdateSignInExpJSONBodySignUpSecondaryIdentifiersIdentifier0 defines parameters for UpdateSignInExp.
type UpdateSignInExpJSONBodySignUpSecondaryIdentifiersIdentifier0 string

// UpdateSignInExpJSONBodySignUpSecondaryIdentifiersIdentifier1 defines parameters for UpdateSignInExp.
type UpdateSignInExpJSONBodySignUpSecondaryIdentifiersIdentifier1 string

// UpdateSignInExpJSONBody_SignUp_SecondaryIdentifiers_Identifier defines parameters for UpdateSignInExp.
type UpdateSignInExpJSONBody_SignUp_SecondaryIdentifiers_Identifier struct {
	union json.RawMessage
}

// UpdateSignInExpJSONBodySupportEmail0 defines parameters for UpdateSignInExp.
type UpdateSignInExpJSONBodySupportEmail0 = openapi_types.Email

// UpdateSignInExpJSONBodySupportEmail1 defines parameters for UpdateSignInExp.
type UpdateSignInExpJSONBodySupportEmail1 = string

// UpdateSignInExpJSONBody_SupportEmail defines parameters for UpdateSignInExp.
type UpdateSignInExpJSONBody_SupportEmail struct {
	union json.RawMessage
}

// UpdateSignInExpJSONBodySupportWebsiteUrl0 defines parameters for UpdateSignInExp.
type UpdateSignInExpJSONBodySupportWebsiteUrl0 = string

// UpdateSignInExpJSONBodySupportWebsiteUrl1 defines parameters for UpdateSignInExp.
type UpdateSignInExpJSONBodySupportWebsiteUrl1 = string

// UpdateSignInExpJSONBody_SupportWebsiteUrl defines parameters for UpdateSignInExp.
type UpdateSignInExpJSONBody_SupportWebsiteUrl struct {
	union json.RawMessage
}

// UpdateSignInExpJSONBodyTermsOfUseUrl0 defines parameters for UpdateSignInExp.
type UpdateSignInExpJSONBodyTermsOfUseUrl0 = string

// UpdateSignInExpJSONBodyTermsOfUseUrl1 defines parameters for UpdateSignInExp.
type UpdateSignInExpJSONBodyTermsOfUseUrl1 = string

// UpdateSignInExpJSONBody_TermsOfUseUrl defines parameters for UpdateSignInExp.
type UpdateSignInExpJSONBody_TermsOfUseUrl struct {
	union json.RawMessage
}

// UpdateSignInExpJSONBodyUnknownSessionRedirectUrl0 defines parameters for UpdateSignInExp.
type UpdateSignInExpJSONBodyUnknownSessionRedirectUrl0 = string

// UpdateSignInExpJSONBodyUnknownSessionRedirectUrl1 defines parameters for UpdateSignInExp.
type UpdateSignInExpJSONBodyUnknownSessionRedirectUrl1 = string

// UpdateSignInExpJSONBody_UnknownSessionRedirectUrl defines parameters for UpdateSignInExp.
type UpdateSignInExpJSONBody_UnknownSessionRedirectUrl struct {
	union json.RawMessage
}

// CheckPasswordWithDefaultSignInExperienceJSONBody defines parameters for CheckPasswordWithDefaultSignInExperience.
type CheckPasswordWithDefaultSignInExperienceJSONBody struct {
	// Password The password to check.
	Password string `json:"password"`

	// UserId The user ID to check the password for. It is required if rejects user info is enabled in the password policy.
	UserId *string `json:"userId,omitempty"`
}

// UploadCustomUiAssetsMultipartBody defines parameters for UploadCustomUiAssets.
type UploadCustomUiAssetsMultipartBody struct {
	// File The zip file containing custom web assets such as HTML, CSS, and JavaScript files.
	File *interface{} `json:"file,omitempty"`
}

// ListSsoConnectorsParams defines parameters for ListSsoConnectors.
type ListSsoConnectorsParams struct {
	// Page Page number (starts from 1).
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// PageSize Entries per page.
	PageSize *int `form:"page_size,omitempty" json:"page_size,omitempty"`
}

// CreateSsoConnectorJSONBody defines parameters for CreateSsoConnector.
type CreateSsoConnectorJSONBody struct {
	Branding *struct {
		DarkLogo    *string `json:"darkLogo,omitempty"`
		DisplayName *string `json:"displayName,omitempty"`
		Logo        *string `json:"logo,omitempty"`
	} `json:"branding,omitempty"`

	// Config arbitrary
	Config        *map[string]interface{} `json:"config,omitempty"`
	ConnectorName string                  `json:"connectorName"`
	Domains       *[]string               `json:"domains,omitempty"`
	ProviderName  string                  `json:"providerName"`
	SyncProfile   *bool                   `json:"syncProfile,omitempty"`
}

// UpdateSsoConnectorJSONBody defines parameters for UpdateSsoConnector.
type UpdateSsoConnectorJSONBody struct {
	Branding *struct {
		DarkLogo    *string `json:"darkLogo,omitempty"`
		DisplayName *string `json:"displayName,omitempty"`
		Logo        *string `json:"logo,omitempty"`
	} `json:"branding,omitempty"`

	// Config arbitrary
	Config        *map[string]interface{} `json:"config,omitempty"`
	ConnectorName *string                 `json:"connectorName,omitempty"`
	Domains       *[]string               `json:"domains,omitempty"`
	SyncProfile   *bool                   `json:"syncProfile,omitempty"`
}

// CreateSubjectTokenJSONBody defines parameters for CreateSubjectToken.
type CreateSubjectTokenJSONBody struct {
	// Context The additional context to be included in the token, this can be used in custom JWT.
	Context *map[string]interface{} `json:"context,omitempty"`

	// UserId The ID of the user to impersonate.
	UserId string `json:"userId"`
}

// CreateUserAssetMultipartBody defines parameters for CreateUserAsset.
type CreateUserAssetMultipartBody struct {
	// File The file asset to upload.
	File *interface{} `json:"file,omitempty"`
}

// ListUsersParams defines parameters for ListUsers.
type ListUsersParams struct {
	// Page Page number (starts from 1).
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// PageSize Entries per page.
	PageSize *int `form:"page_size,omitempty" json:"page_size,omitempty"`

	// SearchParams Search query parameters.
	SearchParams *map[string]string `form:"search_params,omitempty" json:"search_params,omitempty"`
}

// CreateUserJSONBody defines parameters for CreateUser.
type CreateUserJSONBody struct {
	Avatar *CreateUserJSONBody_Avatar `json:"avatar"`

	// CustomData arbitrary
	CustomData *map[string]interface{} `json:"customData,omitempty"`
	Name       *string                 `json:"name,omitempty"`

	// Password Plain text password for the user.
	Password *string `json:"password,omitempty"`

	// PasswordAlgorithm The hash algorithm used for the password. It should be one of the supported algorithms: argon2, md5, sha1, sha256. Should the encryption algorithm differ from argon2, it will automatically be upgraded to argon2 upon the user's next sign-in.
	PasswordAlgorithm *CreateUserJSONBodyPasswordAlgorithm `json:"passwordAlgorithm,omitempty"`

	// PasswordDigest In case you already have the password digests and not the passwords, you can use them for the newly created user via this property. The value should be generated with one of the supported algorithms. The algorithm can be specified using the `passwordAlgorithm` property.
	PasswordDigest *string `json:"passwordDigest,omitempty"`

	// PrimaryEmail Primary email address for the user. It should be unique across all users.
	PrimaryEmail *string `json:"primaryEmail,omitempty"`

	// PrimaryPhone Primary phone number for the user. It should be unique across all users.
	PrimaryPhone *string `json:"primaryPhone,omitempty"`
	Profile      *struct {
		Address *struct {
			Country       *string `json:"country,omitempty"`
			Formatted     *string `json:"formatted,omitempty"`
			Locality      *string `json:"locality,omitempty"`
			PostalCode    *string `json:"postalCode,omitempty"`
			Region        *string `json:"region,omitempty"`
			StreetAddress *string `json:"streetAddress,omitempty"`
		} `json:"address,omitempty"`
		Birthdate         *string `json:"birthdate,omitempty"`
		FamilyName        *string `json:"familyName,omitempty"`
		Gender            *string `json:"gender,omitempty"`
		GivenName         *string `json:"givenName,omitempty"`
		Locale            *string `json:"locale,omitempty"`
		MiddleName        *string `json:"middleName,omitempty"`
		Nickname          *string `json:"nickname,omitempty"`
		PreferredUsername *string `json:"preferredUsername,omitempty"`
		Profile           *string `json:"profile,omitempty"`
		Website           *string `json:"website,omitempty"`
		Zoneinfo          *string `json:"zoneinfo,omitempty"`
	} `json:"profile,omitempty"`

	// Username Username for the user. It should be unique across all users.
	Username *string `json:"username,omitempty"`
}

// CreateUserJSONBodyAvatar0 defines parameters for CreateUser.
type CreateUserJSONBodyAvatar0 = string

// CreateUserJSONBodyAvatar1 defines parameters for CreateUser.
type CreateUserJSONBodyAvatar1 = string

// CreateUserJSONBody_Avatar defines parameters for CreateUser.
type CreateUserJSONBody_Avatar struct {
	union json.RawMessage
}

// CreateUserJSONBodyPasswordAlgorithm defines parameters for CreateUser.
type CreateUserJSONBodyPasswordAlgorithm string

// GetUserParams defines parameters for GetUser.
type GetUserParams struct {
	// IncludeSsoIdentities If it's provided with a truthy value (`true`, `1`, `yes`), each user in the response will include a `ssoIdentities` property containing a list of SSO identities associated with the user.
	IncludeSsoIdentities *string `form:"includeSsoIdentities,omitempty" json:"includeSsoIdentities,omitempty"`
}

// UpdateUserJSONBody defines parameters for UpdateUser.
type UpdateUserJSONBody struct {
	Avatar *UpdateUserJSONBody_Avatar `json:"avatar"`

	// CustomData Custom data object to update for the given user ID. Note this will replace the entire custom data object.
	//
	// If you want to perform a partial update, use the `PATCH /api/users/{userId}/custom-data` endpoint instead.
	CustomData *map[string]interface{}  `json:"customData,omitempty"`
	Name       *UpdateUserJSONBody_Name `json:"name"`

	// PrimaryEmail Updated primary email address for the user. It should be unique across all users.
	PrimaryEmail *UpdateUserJSONBody_PrimaryEmail `json:"primaryEmail"`

	// PrimaryPhone Updated primary phone number for the user. It should be unique across all users.
	PrimaryPhone *UpdateUserJSONBody_PrimaryPhone `json:"primaryPhone"`
	Profile      *struct {
		Address *struct {
			Country       *string `json:"country,omitempty"`
			Formatted     *string `json:"formatted,omitempty"`
			Locality      *string `json:"locality,omitempty"`
			PostalCode    *string `json:"postalCode,omitempty"`
			Region        *string `json:"region,omitempty"`
			StreetAddress *string `json:"streetAddress,omitempty"`
		} `json:"address,omitempty"`
		Birthdate         *string `json:"birthdate,omitempty"`
		FamilyName        *string `json:"familyName,omitempty"`
		Gender            *string `json:"gender,omitempty"`
		GivenName         *string `json:"givenName,omitempty"`
		Locale            *string `json:"locale,omitempty"`
		MiddleName        *string `json:"middleName,omitempty"`
		Nickname          *string `json:"nickname,omitempty"`
		PreferredUsername *string `json:"preferredUsername,omitempty"`
		Profile           *string `json:"profile,omitempty"`
		Website           *string `json:"website,omitempty"`
		Zoneinfo          *string `json:"zoneinfo,omitempty"`
	} `json:"profile,omitempty"`

	// Username Updated username for the user. It should be unique across all users.
	Username *UpdateUserJSONBody_Username `json:"username"`
}

// UpdateUserJSONBodyAvatar0 defines parameters for UpdateUser.
type UpdateUserJSONBodyAvatar0 = string

// UpdateUserJSONBodyAvatar1 defines parameters for UpdateUser.
type UpdateUserJSONBodyAvatar1 = string

// UpdateUserJSONBody_Avatar defines parameters for UpdateUser.
type UpdateUserJSONBody_Avatar struct {
	union json.RawMessage
}

// UpdateUserJSONBodyName0 defines parameters for UpdateUser.
type UpdateUserJSONBodyName0 = string

// UpdateUserJSONBodyName1 defines parameters for UpdateUser.
type UpdateUserJSONBodyName1 = string

// UpdateUserJSONBody_Name defines parameters for UpdateUser.
type UpdateUserJSONBody_Name struct {
	union json.RawMessage
}

// UpdateUserJSONBodyPrimaryEmail0 defines parameters for UpdateUser.
type UpdateUserJSONBodyPrimaryEmail0 = string

// UpdateUserJSONBodyPrimaryEmail1 defines parameters for UpdateUser.
type UpdateUserJSONBodyPrimaryEmail1 = string

// UpdateUserJSONBody_PrimaryEmail defines parameters for UpdateUser.
type UpdateUserJSONBody_PrimaryEmail struct {
	union json.RawMessage
}

// UpdateUserJSONBodyPrimaryPhone0 defines parameters for UpdateUser.
type UpdateUserJSONBodyPrimaryPhone0 = string

// UpdateUserJSONBodyPrimaryPhone1 defines parameters for UpdateUser.
type UpdateUserJSONBodyPrimaryPhone1 = string

// UpdateUserJSONBody_PrimaryPhone defines parameters for UpdateUser.
type UpdateUserJSONBody_PrimaryPhone struct {
	union json.RawMessage
}

// UpdateUserJSONBodyUsername0 defines parameters for UpdateUser.
type UpdateUserJSONBodyUsername0 = string

// UpdateUserJSONBodyUsername1 defines parameters for UpdateUser.
type UpdateUserJSONBodyUsername1 = string

// UpdateUserJSONBody_Username defines parameters for UpdateUser.
type UpdateUserJSONBody_Username struct {
	union json.RawMessage
}

// UpdateUserCustomDataJSONBody defines parameters for UpdateUserCustomData.
type UpdateUserCustomDataJSONBody struct {
	// CustomData Partial custom data object to update for the given user ID.
	CustomData map[string]interface{} `json:"customData"`
}

// CreateUserIdentityJSONBody defines parameters for CreateUserIdentity.
type CreateUserIdentityJSONBody struct {
	// ConnectorData A json object constructed from the url query params returned by the social platform. Typically it contains `code`, `state` and `redirectUri` fields.
	ConnectorData map[string]interface{} `json:"connectorData"`

	// ConnectorId The Logto connector ID.
	ConnectorId string `json:"connectorId"`
}

// ReplaceUserIdentityJSONBody defines parameters for ReplaceUserIdentity.
type ReplaceUserIdentityJSONBody struct {
	// Details The user's social identity details.
	Details *map[string]interface{} `json:"details,omitempty"`

	// UserId The user's social identity ID.
	UserId string `json:"userId"`
}

// UpdateUserIsSuspendedJSONBody defines parameters for UpdateUserIsSuspended.
type UpdateUserIsSuspendedJSONBody struct {
	// IsSuspended New suspension status for the user.
	IsSuspended bool `json:"isSuspended"`
}

// CreateUserMfaVerificationJSONBody defines parameters for CreateUserMfaVerification.
type CreateUserMfaVerificationJSONBody struct {
	union json.RawMessage
}

// CreateUserMfaVerificationJSONBody0 defines parameters for CreateUserMfaVerification.
type CreateUserMfaVerificationJSONBody0 struct {
	Secret *string `json:"secret,omitempty"`
	Type   string  `json:"type"`
}

// CreateUserMfaVerificationJSONBody1 defines parameters for CreateUserMfaVerification.
type CreateUserMfaVerificationJSONBody1 struct {
	Codes *[]string `json:"codes,omitempty"`
	Type  string    `json:"type"`
}

// CreateUserMfaVerificationJSONBody2 defines parameters for CreateUserMfaVerification.
type CreateUserMfaVerificationJSONBody2 struct {
	// Secret The secret for the MFA verification, if not provided, a new secret will be generated.
	Secret *string `json:"secret,omitempty"`

	// Type The type of MFA verification to create.
	Type string `json:"type"`
}

// CreateUserMfaVerificationJSONBody3 defines parameters for CreateUserMfaVerification.
type CreateUserMfaVerificationJSONBody3 struct {
	// Codes The backup codes for the MFA verification, if not provided, a new group of backup codes will be generated.
	Codes *[]string `json:"codes,omitempty"`

	// Type The type of MFA verification to create.
	Type string `json:"type"`
}

// UpdateUserPasswordJSONBody defines parameters for UpdateUserPassword.
type UpdateUserPasswordJSONBody struct {
	// Password New password for the user.
	Password string `json:"password"`
}

// VerifyUserPasswordJSONBody defines parameters for VerifyUserPassword.
type VerifyUserPasswordJSONBody struct {
	// Password Password to verify.
	Password string `json:"password"`
}

// CreateUserPersonalAccessTokenJSONBody defines parameters for CreateUserPersonalAccessToken.
type CreateUserPersonalAccessTokenJSONBody struct {
	// ExpiresAt The epoch time in milliseconds when the token will expire. If not provided, the token will never expire.
	ExpiresAt *float32 `json:"expiresAt"`

	// Name The personal access token name. Must be unique within the user.
	Name string `json:"name"`
}

// UpdateUserPersonalAccessTokenJSONBody defines parameters for UpdateUserPersonalAccessToken.
type UpdateUserPersonalAccessTokenJSONBody struct {
	// Name The token name to update. Must be unique within the user.
	Name string `json:"name"`
}

// UpdateUserProfileJSONBody defines parameters for UpdateUserProfile.
type UpdateUserProfileJSONBody struct {
	// Profile Partial profile object to update for the given user ID.
	Profile struct {
		Address *struct {
			Country       *string `json:"country,omitempty"`
			Formatted     *string `json:"formatted,omitempty"`
			Locality      *string `json:"locality,omitempty"`
			PostalCode    *string `json:"postalCode,omitempty"`
			Region        *string `json:"region,omitempty"`
			StreetAddress *string `json:"streetAddress,omitempty"`
		} `json:"address,omitempty"`
		Birthdate         *string `json:"birthdate,omitempty"`
		FamilyName        *string `json:"familyName,omitempty"`
		Gender            *string `json:"gender,omitempty"`
		GivenName         *string `json:"givenName,omitempty"`
		Locale            *string `json:"locale,omitempty"`
		MiddleName        *string `json:"middleName,omitempty"`
		Nickname          *string `json:"nickname,omitempty"`
		PreferredUsername *string `json:"preferredUsername,omitempty"`
		Profile           *string `json:"profile,omitempty"`
		Website           *string `json:"website,omitempty"`
		Zoneinfo          *string `json:"zoneinfo,omitempty"`
	} `json:"profile"`
}

// ListUserRolesParams defines parameters for ListUserRoles.
type ListUserRolesParams struct {
	// Page Page number (starts from 1).
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// PageSize Entries per page.
	PageSize *int `form:"page_size,omitempty" json:"page_size,omitempty"`

	// SearchParams Search query parameters.
	SearchParams *map[string]string `form:"search_params,omitempty" json:"search_params,omitempty"`
}

// AssignUserRolesJSONBody defines parameters for AssignUserRoles.
type AssignUserRolesJSONBody struct {
	// RoleIds An array of API resource role IDs to assign.
	RoleIds []string `json:"roleIds"`
}

// ReplaceUserRolesJSONBody defines parameters for ReplaceUserRoles.
type ReplaceUserRolesJSONBody struct {
	// RoleIds An array of API resource role IDs to assign.
	RoleIds []string `json:"roleIds"`
}

// CreateVerificationCodeJSONBody defines parameters for CreateVerificationCode.
type CreateVerificationCodeJSONBody struct {
	union json.RawMessage
}

// CreateVerificationCodeJSONBody0 defines parameters for CreateVerificationCode.
type CreateVerificationCodeJSONBody0 struct {
	Email string `json:"email"`
}

// CreateVerificationCodeJSONBody1 defines parameters for CreateVerificationCode.
type CreateVerificationCodeJSONBody1 struct {
	Phone string `json:"phone"`
}

// VerifyVerificationCodeJSONBody defines parameters for VerifyVerificationCode.
type VerifyVerificationCodeJSONBody struct {
	union json.RawMessage
}

// VerifyVerificationCodeJSONBody0 defines parameters for VerifyVerificationCode.
type VerifyVerificationCodeJSONBody0 struct {
	Email            string `json:"email"`
	VerificationCode string `json:"verificationCode"`
}

// VerifyVerificationCodeJSONBody1 defines parameters for VerifyVerificationCode.
type VerifyVerificationCodeJSONBody1 struct {
	Phone            string `json:"phone"`
	VerificationCode string `json:"verificationCode"`
}

// CreateVerificationByPasswordJSONBody defines parameters for CreateVerificationByPassword.
type CreateVerificationByPasswordJSONBody struct {
	// Password The password of the user.
	Password string `json:"password"`
}

// CreateVerificationBySocialJSONBody defines parameters for CreateVerificationBySocial.
type CreateVerificationBySocialJSONBody struct {
	// ConnectorId The Logto connector ID.
	ConnectorId string `json:"connectorId"`

	// RedirectUri The URI to navigate back to after the user is authenticated by the connected social identity provider and has granted access to the connector.
	RedirectUri string `json:"redirectUri"`

	// State A random string generated on the client side to prevent CSRF (Cross-Site Request Forgery) attacks.
	State string `json:"state"`
}

// VerifyVerificationBySocialJSONBody defines parameters for VerifyVerificationBySocial.
type VerifyVerificationBySocialJSONBody struct {
	// ConnectorData A json object constructed from the url query params returned by the social platform. Typically it contains `code`, `state` and `redirectUri` fields.
	ConnectorData map[string]interface{} `json:"connectorData"`

	// VerificationId The verification ID of the SocialVerification record.
	VerificationId       *interface{} `json:"verificationId,omitempty"`
	VerificationRecordId string       `json:"verificationRecordId"`
}

// CreateVerificationByVerificationCodeJSONBody defines parameters for CreateVerificationByVerificationCode.
type CreateVerificationByVerificationCodeJSONBody struct {
	// Identifier The identifier (email address or phone number) to send the verification code to.
	Identifier struct {
		Type  CreateVerificationByVerificationCodeJSONBodyIdentifierType `json:"type"`
		Value string                                                     `json:"value"`
	} `json:"identifier"`
}

// CreateVerificationByVerificationCodeJSONBodyIdentifierType defines parameters for CreateVerificationByVerificationCode.
type CreateVerificationByVerificationCodeJSONBodyIdentifierType string

// VerifyVerificationByVerificationCodeJSONBody defines parameters for VerifyVerificationByVerificationCode.
type VerifyVerificationByVerificationCodeJSONBody struct {
	// Code The verification code to be verified.
	Code string `json:"code"`

	// Identifier The identifier (email address or phone number) to verify the code against. Must match the identifier used to send the verification code.
	Identifier struct {
		Type  VerifyVerificationByVerificationCodeJSONBodyIdentifierType `json:"type"`
		Value string                                                     `json:"value"`
	} `json:"identifier"`

	// VerificationId The verification ID of the CodeVerification record.
	VerificationId string `json:"verificationId"`
}

// VerifyVerificationByVerificationCodeJSONBodyIdentifierType defines parameters for VerifyVerificationByVerificationCode.
type VerifyVerificationByVerificationCodeJSONBodyIdentifierType string

// VerifyWebAuthnRegistrationJSONBody defines parameters for VerifyWebAuthnRegistration.
type VerifyWebAuthnRegistrationJSONBody struct {
	// Payload The payload of the WebAuthn device.
	Payload struct {
		AuthenticatorAttachment *VerifyWebAuthnRegistrationJSONBodyPayloadAuthenticatorAttachment `json:"authenticatorAttachment,omitempty"`
		ClientExtensionResults  struct {
			Appid     *bool `json:"appid,omitempty"`
			CrepProps *struct {
				Rk *bool `json:"rk,omitempty"`
			} `json:"crepProps,omitempty"`
			HmacCreateSecret *bool `json:"hmacCreateSecret,omitempty"`
		} `json:"clientExtensionResults"`
		Id       string `json:"id"`
		RawId    string `json:"rawId"`
		Response struct {
			AttestationObject  string                                                         `json:"attestationObject"`
			AuthenticatorData  *string                                                        `json:"authenticatorData,omitempty"`
			ClientDataJSON     string                                                         `json:"clientDataJSON"`
			PublicKey          *string                                                        `json:"publicKey,omitempty"`
			PublicKeyAlgorithm *float32                                                       `json:"publicKeyAlgorithm,omitempty"`
			Transports         *[]VerifyWebAuthnRegistrationJSONBodyPayloadResponseTransports `json:"transports,omitempty"`
		} `json:"response"`
		Type string `json:"type"`
	} `json:"payload"`

	// VerificationRecordId The ID of the verification record.
	VerificationRecordId string `json:"verificationRecordId"`
}

// VerifyWebAuthnRegistrationJSONBodyPayloadAuthenticatorAttachment defines parameters for VerifyWebAuthnRegistration.
type VerifyWebAuthnRegistrationJSONBodyPayloadAuthenticatorAttachment string

// VerifyWebAuthnRegistrationJSONBodyPayloadResponseTransports defines parameters for VerifyWebAuthnRegistration.
type VerifyWebAuthnRegistrationJSONBodyPayloadResponseTransports string

// UpdateAccountCenterSettingsJSONRequestBody defines body for UpdateAccountCenterSettings for application/json ContentType.
type UpdateAccountCenterSettingsJSONRequestBody UpdateAccountCenterSettingsJSONBody

// CreateApplicationJSONRequestBody defines body for CreateApplication for application/json ContentType.
type CreateApplicationJSONRequestBody CreateApplicationJSONBody

// UpdateApplicationCustomDataJSONRequestBody defines body for UpdateApplicationCustomData for application/json ContentType.
type UpdateApplicationCustomDataJSONRequestBody = UpdateApplicationCustomDataJSONBody

// AssignApplicationRolesJSONRequestBody defines body for AssignApplicationRoles for application/json ContentType.
type AssignApplicationRolesJSONRequestBody AssignApplicationRolesJSONBody

// ReplaceApplicationRolesJSONRequestBody defines body for ReplaceApplicationRoles for application/json ContentType.
type ReplaceApplicationRolesJSONRequestBody ReplaceApplicationRolesJSONBody

// ReplaceApplicationSignInExperienceJSONRequestBody defines body for ReplaceApplicationSignInExperience for application/json ContentType.
type ReplaceApplicationSignInExperienceJSONRequestBody ReplaceApplicationSignInExperienceJSONBody

// CreateApplicationUserConsentScopeJSONRequestBody defines body for CreateApplicationUserConsentScope for application/json ContentType.
type CreateApplicationUserConsentScopeJSONRequestBody CreateApplicationUserConsentScopeJSONBody

// UpdateApplicationJSONRequestBody defines body for UpdateApplication for application/json ContentType.
type UpdateApplicationJSONRequestBody UpdateApplicationJSONBody

// CreateApplicationProtectedAppMetadataCustomDomainJSONRequestBody defines body for CreateApplicationProtectedAppMetadataCustomDomain for application/json ContentType.
type CreateApplicationProtectedAppMetadataCustomDomainJSONRequestBody CreateApplicationProtectedAppMetadataCustomDomainJSONBody

// CreateApplicationSecretJSONRequestBody defines body for CreateApplicationSecret for application/json ContentType.
type CreateApplicationSecretJSONRequestBody CreateApplicationSecretJSONBody

// UpdateApplicationSecretJSONRequestBody defines body for UpdateApplicationSecret for application/json ContentType.
type UpdateApplicationSecretJSONRequestBody UpdateApplicationSecretJSONBody

// CreateApplicationUserConsentOrganizationJSONRequestBody defines body for CreateApplicationUserConsentOrganization for application/json ContentType.
type CreateApplicationUserConsentOrganizationJSONRequestBody CreateApplicationUserConsentOrganizationJSONBody

// ReplaceApplicationUserConsentOrganizationsJSONRequestBody defines body for ReplaceApplicationUserConsentOrganizations for application/json ContentType.
type ReplaceApplicationUserConsentOrganizationsJSONRequestBody ReplaceApplicationUserConsentOrganizationsJSONBody

// AssertSamlJSONRequestBody defines body for AssertSaml for application/json ContentType.
type AssertSamlJSONRequestBody = AssertSamlJSONBody

// AssertSingleSignOnSamlJSONRequestBody defines body for AssertSingleSignOnSaml for application/json ContentType.
type AssertSingleSignOnSamlJSONRequestBody AssertSingleSignOnSamlJSONBody

// UpdateCaptchaProviderJSONRequestBody defines body for UpdateCaptchaProvider for application/json ContentType.
type UpdateCaptchaProviderJSONRequestBody UpdateCaptchaProviderJSONBody

// UpdateAdminConsoleConfigJSONRequestBody defines body for UpdateAdminConsoleConfig for application/json ContentType.
type UpdateAdminConsoleConfigJSONRequestBody UpdateAdminConsoleConfigJSONBody

// TestJwtCustomizerJSONRequestBody defines body for TestJwtCustomizer for application/json ContentType.
type TestJwtCustomizerJSONRequestBody TestJwtCustomizerJSONBody

// UpdateJwtCustomizerJSONRequestBody defines body for UpdateJwtCustomizer for application/json ContentType.
type UpdateJwtCustomizerJSONRequestBody UpdateJwtCustomizerJSONBody

// UpsertJwtCustomizerJSONRequestBody defines body for UpsertJwtCustomizer for application/json ContentType.
type UpsertJwtCustomizerJSONRequestBody UpsertJwtCustomizerJSONBody

// RotateOidcKeysJSONRequestBody defines body for RotateOidcKeys for application/json ContentType.
type RotateOidcKeysJSONRequestBody RotateOidcKeysJSONBody

// CreateConnectorJSONRequestBody defines body for CreateConnector for application/json ContentType.
type CreateConnectorJSONRequestBody CreateConnectorJSONBody

// CreateConnectorAuthorizationUriJSONRequestBody defines body for CreateConnectorAuthorizationUri for application/json ContentType.
type CreateConnectorAuthorizationUriJSONRequestBody CreateConnectorAuthorizationUriJSONBody

// CreateConnectorTestJSONRequestBody defines body for CreateConnectorTest for application/json ContentType.
type CreateConnectorTestJSONRequestBody CreateConnectorTestJSONBody

// UpdateConnectorJSONRequestBody defines body for UpdateConnector for application/json ContentType.
type UpdateConnectorJSONRequestBody UpdateConnectorJSONBody

// ReplaceCustomPhraseJSONRequestBody defines body for ReplaceCustomPhrase for application/json ContentType.
type ReplaceCustomPhraseJSONRequestBody = TranslationObject

// CreateDomainJSONRequestBody defines body for CreateDomain for application/json ContentType.
type CreateDomainJSONRequestBody CreateDomainJSONBody

// ReplaceEmailTemplatesJSONRequestBody defines body for ReplaceEmailTemplates for application/json ContentType.
type ReplaceEmailTemplatesJSONRequestBody ReplaceEmailTemplatesJSONBody

// UpdateEmailTemplateDetailsJSONRequestBody defines body for UpdateEmailTemplateDetails for application/json ContentType.
type UpdateEmailTemplateDetailsJSONRequestBody UpdateEmailTemplateDetailsJSONBody

// InitInteractionJSONRequestBody defines body for InitInteraction for application/json ContentType.
type InitInteractionJSONRequestBody InitInteractionJSONBody

// IdentifyUserJSONRequestBody defines body for IdentifyUser for application/json ContentType.
type IdentifyUserJSONRequestBody IdentifyUserJSONBody

// UpdateInteractionEventJSONRequestBody defines body for UpdateInteractionEvent for application/json ContentType.
type UpdateInteractionEventJSONRequestBody UpdateInteractionEventJSONBody

// AddUserProfileJSONRequestBody defines body for AddUserProfile for application/json ContentType.
type AddUserProfileJSONRequestBody AddUserProfileJSONBody

// BindMfaVerificationJSONRequestBody defines body for BindMfaVerification for application/json ContentType.
type BindMfaVerificationJSONRequestBody BindMfaVerificationJSONBody

// ResetUserPasswordJSONRequestBody defines body for ResetUserPassword for application/json ContentType.
type ResetUserPasswordJSONRequestBody ResetUserPasswordJSONBody

// VerifyBackupCodeJSONRequestBody defines body for VerifyBackupCode for application/json ContentType.
type VerifyBackupCodeJSONRequestBody VerifyBackupCodeJSONBody

// CreateNewPasswordIdentityVerificationJSONRequestBody defines body for CreateNewPasswordIdentityVerification for application/json ContentType.
type CreateNewPasswordIdentityVerificationJSONRequestBody CreateNewPasswordIdentityVerificationJSONBody

// VerifyOneTimeTokenVerificationJSONRequestBody defines body for VerifyOneTimeTokenVerification for application/json ContentType.
type VerifyOneTimeTokenVerificationJSONRequestBody VerifyOneTimeTokenVerificationJSONBody

// CreatePasswordVerificationJSONRequestBody defines body for CreatePasswordVerification for application/json ContentType.
type CreatePasswordVerificationJSONRequestBody CreatePasswordVerificationJSONBody

// CreateSocialVerificationJSONRequestBody defines body for CreateSocialVerification for application/json ContentType.
type CreateSocialVerificationJSONRequestBody CreateSocialVerificationJSONBody

// VerifySocialVerificationJSONRequestBody defines body for VerifySocialVerification for application/json ContentType.
type VerifySocialVerificationJSONRequestBody VerifySocialVerificationJSONBody

// CreateEnterpriseSsoVerificationJSONRequestBody defines body for CreateEnterpriseSsoVerification for application/json ContentType.
type CreateEnterpriseSsoVerificationJSONRequestBody CreateEnterpriseSsoVerificationJSONBody

// VerifyEnterpriseSsoVerificationJSONRequestBody defines body for VerifyEnterpriseSsoVerification for application/json ContentType.
type VerifyEnterpriseSsoVerificationJSONRequestBody VerifyEnterpriseSsoVerificationJSONBody

// VerifyTotpVerificationJSONRequestBody defines body for VerifyTotpVerification for application/json ContentType.
type VerifyTotpVerificationJSONRequestBody VerifyTotpVerificationJSONBody

// CreateAndSendVerificationCodeJSONRequestBody defines body for CreateAndSendVerificationCode for application/json ContentType.
type CreateAndSendVerificationCodeJSONRequestBody CreateAndSendVerificationCodeJSONBody

// VerifyVerificationCodeVerificationJSONRequestBody defines body for VerifyVerificationCodeVerification for application/json ContentType.
type VerifyVerificationCodeVerificationJSONRequestBody VerifyVerificationCodeVerificationJSONBody

// VerifyWebAuthnAuthenticationVerificationJSONRequestBody defines body for VerifyWebAuthnAuthenticationVerification for application/json ContentType.
type VerifyWebAuthnAuthenticationVerificationJSONRequestBody VerifyWebAuthnAuthenticationVerificationJSONBody

// VerifyWebAuthnRegistrationVerificationJSONRequestBody defines body for VerifyWebAuthnRegistrationVerification for application/json ContentType.
type VerifyWebAuthnRegistrationVerificationJSONRequestBody VerifyWebAuthnRegistrationVerificationJSONBody

// CreateHookJSONRequestBody defines body for CreateHook for application/json ContentType.
type CreateHookJSONRequestBody CreateHookJSONBody

// UpdateHookJSONRequestBody defines body for UpdateHook for application/json ContentType.
type UpdateHookJSONRequestBody UpdateHookJSONBody

// CreateHookTestJSONRequestBody defines body for CreateHookTest for application/json ContentType.
type CreateHookTestJSONRequestBody CreateHookTestJSONBody

// PutApiInteractionJSONRequestBody defines body for PutApiInteraction for application/json ContentType.
type PutApiInteractionJSONRequestBody PutApiInteractionJSONBody

// PostApiInteractionBindMfaJSONRequestBody defines body for PostApiInteractionBindMfa for application/json ContentType.
type PostApiInteractionBindMfaJSONRequestBody PostApiInteractionBindMfaJSONBody

// PostApiInteractionConsentJSONRequestBody defines body for PostApiInteractionConsent for application/json ContentType.
type PostApiInteractionConsentJSONRequestBody PostApiInteractionConsentJSONBody

// PutApiInteractionEventJSONRequestBody defines body for PutApiInteractionEvent for application/json ContentType.
type PutApiInteractionEventJSONRequestBody PutApiInteractionEventJSONBody

// PatchApiInteractionIdentifiersJSONRequestBody defines body for PatchApiInteractionIdentifiers for application/json ContentType.
type PatchApiInteractionIdentifiersJSONRequestBody PatchApiInteractionIdentifiersJSONBody

// PutApiInteractionMfaJSONRequestBody defines body for PutApiInteractionMfa for application/json ContentType.
type PutApiInteractionMfaJSONRequestBody PutApiInteractionMfaJSONBody

// PutApiInteractionMfaSkippedJSONRequestBody defines body for PutApiInteractionMfaSkipped for application/json ContentType.
type PutApiInteractionMfaSkippedJSONRequestBody PutApiInteractionMfaSkippedJSONBody

// PatchApiInteractionProfileJSONRequestBody defines body for PatchApiInteractionProfile for application/json ContentType.
type PatchApiInteractionProfileJSONRequestBody PatchApiInteractionProfileJSONBody

// PutApiInteractionProfileJSONRequestBody defines body for PutApiInteractionProfile for application/json ContentType.
type PutApiInteractionProfileJSONRequestBody PutApiInteractionProfileJSONBody

// PostApiInteractionSingleSignOnConnectorIdAuthenticationJSONRequestBody defines body for PostApiInteractionSingleSignOnConnectorIdAuthentication for application/json ContentType.
type PostApiInteractionSingleSignOnConnectorIdAuthenticationJSONRequestBody PostApiInteractionSingleSignOnConnectorIdAuthenticationJSONBody

// PostApiInteractionSingleSignOnConnectorIdAuthorizationUrlJSONRequestBody defines body for PostApiInteractionSingleSignOnConnectorIdAuthorizationUrl for application/json ContentType.
type PostApiInteractionSingleSignOnConnectorIdAuthorizationUrlJSONRequestBody PostApiInteractionSingleSignOnConnectorIdAuthorizationUrlJSONBody

// PostApiInteractionVerificationSocialAuthorizationUriJSONRequestBody defines body for PostApiInteractionVerificationSocialAuthorizationUri for application/json ContentType.
type PostApiInteractionVerificationSocialAuthorizationUriJSONRequestBody PostApiInteractionVerificationSocialAuthorizationUriJSONBody

// PostApiInteractionVerificationVerificationCodeJSONRequestBody defines body for PostApiInteractionVerificationVerificationCode for application/json ContentType.
type PostApiInteractionVerificationVerificationCodeJSONRequestBody PostApiInteractionVerificationVerificationCodeJSONBody

// UpdateProfileJSONRequestBody defines body for UpdateProfile for application/json ContentType.
type UpdateProfileJSONRequestBody UpdateProfileJSONBody

// AddUserIdentitiesJSONRequestBody defines body for AddUserIdentities for application/json ContentType.
type AddUserIdentitiesJSONRequestBody AddUserIdentitiesJSONBody

// AddMfaVerificationJSONRequestBody defines body for AddMfaVerification for application/json ContentType.
type AddMfaVerificationJSONRequestBody AddMfaVerificationJSONBody

// UpdateMfaVerificationNameJSONRequestBody defines body for UpdateMfaVerificationName for application/json ContentType.
type UpdateMfaVerificationNameJSONRequestBody UpdateMfaVerificationNameJSONBody

// UpdatePasswordJSONRequestBody defines body for UpdatePassword for application/json ContentType.
type UpdatePasswordJSONRequestBody UpdatePasswordJSONBody

// UpdatePrimaryEmailJSONRequestBody defines body for UpdatePrimaryEmail for application/json ContentType.
type UpdatePrimaryEmailJSONRequestBody UpdatePrimaryEmailJSONBody

// UpdatePrimaryPhoneJSONRequestBody defines body for UpdatePrimaryPhone for application/json ContentType.
type UpdatePrimaryPhoneJSONRequestBody UpdatePrimaryPhoneJSONBody

// UpdateOtherProfileJSONRequestBody defines body for UpdateOtherProfile for application/json ContentType.
type UpdateOtherProfileJSONRequestBody UpdateOtherProfileJSONBody

// AddOneTimeTokensJSONRequestBody defines body for AddOneTimeTokens for application/json ContentType.
type AddOneTimeTokensJSONRequestBody AddOneTimeTokensJSONBody

// VerifyOneTimeTokenJSONRequestBody defines body for VerifyOneTimeToken for application/json ContentType.
type VerifyOneTimeTokenJSONRequestBody VerifyOneTimeTokenJSONBody

// ReplaceOneTimeTokenStatusJSONRequestBody defines body for ReplaceOneTimeTokenStatus for application/json ContentType.
type ReplaceOneTimeTokenStatusJSONRequestBody ReplaceOneTimeTokenStatusJSONBody

// CreateOrganizationInvitationJSONRequestBody defines body for CreateOrganizationInvitation for application/json ContentType.
type CreateOrganizationInvitationJSONRequestBody CreateOrganizationInvitationJSONBody

// CreateOrganizationInvitationMessageJSONRequestBody defines body for CreateOrganizationInvitationMessage for application/json ContentType.
type CreateOrganizationInvitationMessageJSONRequestBody CreateOrganizationInvitationMessageJSONBody

// ReplaceOrganizationInvitationStatusJSONRequestBody defines body for ReplaceOrganizationInvitationStatus for application/json ContentType.
type ReplaceOrganizationInvitationStatusJSONRequestBody ReplaceOrganizationInvitationStatusJSONBody

// CreateOrganizationRoleJSONRequestBody defines body for CreateOrganizationRole for application/json ContentType.
type CreateOrganizationRoleJSONRequestBody CreateOrganizationRoleJSONBody

// UpdateOrganizationRoleJSONRequestBody defines body for UpdateOrganizationRole for application/json ContentType.
type UpdateOrganizationRoleJSONRequestBody UpdateOrganizationRoleJSONBody

// CreateOrganizationRoleResourceScopeJSONRequestBody defines body for CreateOrganizationRoleResourceScope for application/json ContentType.
type CreateOrganizationRoleResourceScopeJSONRequestBody CreateOrganizationRoleResourceScopeJSONBody

// ReplaceOrganizationRoleResourceScopesJSONRequestBody defines body for ReplaceOrganizationRoleResourceScopes for application/json ContentType.
type ReplaceOrganizationRoleResourceScopesJSONRequestBody ReplaceOrganizationRoleResourceScopesJSONBody

// CreateOrganizationRoleScopeJSONRequestBody defines body for CreateOrganizationRoleScope for application/json ContentType.
type CreateOrganizationRoleScopeJSONRequestBody CreateOrganizationRoleScopeJSONBody

// ReplaceOrganizationRoleScopesJSONRequestBody defines body for ReplaceOrganizationRoleScopes for application/json ContentType.
type ReplaceOrganizationRoleScopesJSONRequestBody ReplaceOrganizationRoleScopesJSONBody

// CreateOrganizationScopeJSONRequestBody defines body for CreateOrganizationScope for application/json ContentType.
type CreateOrganizationScopeJSONRequestBody CreateOrganizationScopeJSONBody

// UpdateOrganizationScopeJSONRequestBody defines body for UpdateOrganizationScope for application/json ContentType.
type UpdateOrganizationScopeJSONRequestBody UpdateOrganizationScopeJSONBody

// CreateOrganizationJSONRequestBody defines body for CreateOrganization for application/json ContentType.
type CreateOrganizationJSONRequestBody CreateOrganizationJSONBody

// UpdateOrganizationJSONRequestBody defines body for UpdateOrganization for application/json ContentType.
type UpdateOrganizationJSONRequestBody UpdateOrganizationJSONBody

// AddOrganizationApplicationsJSONRequestBody defines body for AddOrganizationApplications for application/json ContentType.
type AddOrganizationApplicationsJSONRequestBody AddOrganizationApplicationsJSONBody

// ReplaceOrganizationApplicationsJSONRequestBody defines body for ReplaceOrganizationApplications for application/json ContentType.
type ReplaceOrganizationApplicationsJSONRequestBody ReplaceOrganizationApplicationsJSONBody

// AssignOrganizationRolesToApplicationsJSONRequestBody defines body for AssignOrganizationRolesToApplications for application/json ContentType.
type AssignOrganizationRolesToApplicationsJSONRequestBody AssignOrganizationRolesToApplicationsJSONBody

// AssignOrganizationRolesToApplicationJSONRequestBody defines body for AssignOrganizationRolesToApplication for application/json ContentType.
type AssignOrganizationRolesToApplicationJSONRequestBody AssignOrganizationRolesToApplicationJSONBody

// ReplaceOrganizationApplicationRolesJSONRequestBody defines body for ReplaceOrganizationApplicationRoles for application/json ContentType.
type ReplaceOrganizationApplicationRolesJSONRequestBody ReplaceOrganizationApplicationRolesJSONBody

// CreateOrganizationJitEmailDomainJSONRequestBody defines body for CreateOrganizationJitEmailDomain for application/json ContentType.
type CreateOrganizationJitEmailDomainJSONRequestBody CreateOrganizationJitEmailDomainJSONBody

// ReplaceOrganizationJitEmailDomainsJSONRequestBody defines body for ReplaceOrganizationJitEmailDomains for application/json ContentType.
type ReplaceOrganizationJitEmailDomainsJSONRequestBody ReplaceOrganizationJitEmailDomainsJSONBody

// CreateOrganizationJitRoleJSONRequestBody defines body for CreateOrganizationJitRole for application/json ContentType.
type CreateOrganizationJitRoleJSONRequestBody CreateOrganizationJitRoleJSONBody

// ReplaceOrganizationJitRolesJSONRequestBody defines body for ReplaceOrganizationJitRoles for application/json ContentType.
type ReplaceOrganizationJitRolesJSONRequestBody ReplaceOrganizationJitRolesJSONBody

// CreateOrganizationJitSsoConnectorJSONRequestBody defines body for CreateOrganizationJitSsoConnector for application/json ContentType.
type CreateOrganizationJitSsoConnectorJSONRequestBody CreateOrganizationJitSsoConnectorJSONBody

// ReplaceOrganizationJitSsoConnectorsJSONRequestBody defines body for ReplaceOrganizationJitSsoConnectors for application/json ContentType.
type ReplaceOrganizationJitSsoConnectorsJSONRequestBody ReplaceOrganizationJitSsoConnectorsJSONBody

// AddOrganizationUsersJSONRequestBody defines body for AddOrganizationUsers for application/json ContentType.
type AddOrganizationUsersJSONRequestBody AddOrganizationUsersJSONBody

// ReplaceOrganizationUsersJSONRequestBody defines body for ReplaceOrganizationUsers for application/json ContentType.
type ReplaceOrganizationUsersJSONRequestBody ReplaceOrganizationUsersJSONBody

// AssignOrganizationRolesToUsersJSONRequestBody defines body for AssignOrganizationRolesToUsers for application/json ContentType.
type AssignOrganizationRolesToUsersJSONRequestBody AssignOrganizationRolesToUsersJSONBody

// AssignOrganizationRolesToUserJSONRequestBody defines body for AssignOrganizationRolesToUser for application/json ContentType.
type AssignOrganizationRolesToUserJSONRequestBody AssignOrganizationRolesToUserJSONBody

// ReplaceOrganizationUserRolesJSONRequestBody defines body for ReplaceOrganizationUserRoles for application/json ContentType.
type ReplaceOrganizationUserRolesJSONRequestBody ReplaceOrganizationUserRolesJSONBody

// CreateResourceJSONRequestBody defines body for CreateResource for application/json ContentType.
type CreateResourceJSONRequestBody CreateResourceJSONBody

// UpdateResourceJSONRequestBody defines body for UpdateResource for application/json ContentType.
type UpdateResourceJSONRequestBody UpdateResourceJSONBody

// UpdateResourceIsDefaultJSONRequestBody defines body for UpdateResourceIsDefault for application/json ContentType.
type UpdateResourceIsDefaultJSONRequestBody UpdateResourceIsDefaultJSONBody

// CreateResourceScopeJSONRequestBody defines body for CreateResourceScope for application/json ContentType.
type CreateResourceScopeJSONRequestBody CreateResourceScopeJSONBody

// UpdateResourceScopeJSONRequestBody defines body for UpdateResourceScope for application/json ContentType.
type UpdateResourceScopeJSONRequestBody UpdateResourceScopeJSONBody

// CreateRoleJSONRequestBody defines body for CreateRole for application/json ContentType.
type CreateRoleJSONRequestBody CreateRoleJSONBody

// UpdateRoleJSONRequestBody defines body for UpdateRole for application/json ContentType.
type UpdateRoleJSONRequestBody UpdateRoleJSONBody

// CreateRoleApplicationJSONRequestBody defines body for CreateRoleApplication for application/json ContentType.
type CreateRoleApplicationJSONRequestBody CreateRoleApplicationJSONBody

// CreateRoleScopeJSONRequestBody defines body for CreateRoleScope for application/json ContentType.
type CreateRoleScopeJSONRequestBody CreateRoleScopeJSONBody

// CreateRoleUserJSONRequestBody defines body for CreateRoleUser for application/json ContentType.
type CreateRoleUserJSONRequestBody CreateRoleUserJSONBody

// CreateSamlApplicationJSONRequestBody defines body for CreateSamlApplication for application/json ContentType.
type CreateSamlApplicationJSONRequestBody CreateSamlApplicationJSONBody

// UpdateSamlApplicationJSONRequestBody defines body for UpdateSamlApplication for application/json ContentType.
type UpdateSamlApplicationJSONRequestBody UpdateSamlApplicationJSONBody

// CreateSamlApplicationSecretJSONRequestBody defines body for CreateSamlApplicationSecret for application/json ContentType.
type CreateSamlApplicationSecretJSONRequestBody CreateSamlApplicationSecretJSONBody

// UpdateSamlApplicationSecretJSONRequestBody defines body for UpdateSamlApplicationSecret for application/json ContentType.
type UpdateSamlApplicationSecretJSONRequestBody UpdateSamlApplicationSecretJSONBody

// CreateSamlAuthnJSONRequestBody defines body for CreateSamlAuthn for application/json ContentType.
type CreateSamlAuthnJSONRequestBody CreateSamlAuthnJSONBody

// CreateSamlAuthnFormdataRequestBody defines body for CreateSamlAuthn for application/x-www-form-urlencoded ContentType.
type CreateSamlAuthnFormdataRequestBody CreateSamlAuthnFormdataBody

// DeleteSentinelActivitiesJSONRequestBody defines body for DeleteSentinelActivities for application/json ContentType.
type DeleteSentinelActivitiesJSONRequestBody DeleteSentinelActivitiesJSONBody

// UpdateSignInExpJSONRequestBody defines body for UpdateSignInExp for application/json ContentType.
type UpdateSignInExpJSONRequestBody UpdateSignInExpJSONBody

// CheckPasswordWithDefaultSignInExperienceJSONRequestBody defines body for CheckPasswordWithDefaultSignInExperience for application/json ContentType.
type CheckPasswordWithDefaultSignInExperienceJSONRequestBody CheckPasswordWithDefaultSignInExperienceJSONBody

// UploadCustomUiAssetsMultipartRequestBody defines body for UploadCustomUiAssets for multipart/form-data ContentType.
type UploadCustomUiAssetsMultipartRequestBody UploadCustomUiAssetsMultipartBody

// CreateSsoConnectorJSONRequestBody defines body for CreateSsoConnector for application/json ContentType.
type CreateSsoConnectorJSONRequestBody CreateSsoConnectorJSONBody

// UpdateSsoConnectorJSONRequestBody defines body for UpdateSsoConnector for application/json ContentType.
type UpdateSsoConnectorJSONRequestBody UpdateSsoConnectorJSONBody

// CreateSubjectTokenJSONRequestBody defines body for CreateSubjectToken for application/json ContentType.
type CreateSubjectTokenJSONRequestBody CreateSubjectTokenJSONBody

// CreateUserAssetMultipartRequestBody defines body for CreateUserAsset for multipart/form-data ContentType.
type CreateUserAssetMultipartRequestBody CreateUserAssetMultipartBody

// CreateUserJSONRequestBody defines body for CreateUser for application/json ContentType.
type CreateUserJSONRequestBody CreateUserJSONBody

// UpdateUserJSONRequestBody defines body for UpdateUser for application/json ContentType.
type UpdateUserJSONRequestBody UpdateUserJSONBody

// UpdateUserCustomDataJSONRequestBody defines body for UpdateUserCustomData for application/json ContentType.
type UpdateUserCustomDataJSONRequestBody UpdateUserCustomDataJSONBody

// CreateUserIdentityJSONRequestBody defines body for CreateUserIdentity for application/json ContentType.
type CreateUserIdentityJSONRequestBody CreateUserIdentityJSONBody

// ReplaceUserIdentityJSONRequestBody defines body for ReplaceUserIdentity for application/json ContentType.
type ReplaceUserIdentityJSONRequestBody ReplaceUserIdentityJSONBody

// UpdateUserIsSuspendedJSONRequestBody defines body for UpdateUserIsSuspended for application/json ContentType.
type UpdateUserIsSuspendedJSONRequestBody UpdateUserIsSuspendedJSONBody

// CreateUserMfaVerificationJSONRequestBody defines body for CreateUserMfaVerification for application/json ContentType.
type CreateUserMfaVerificationJSONRequestBody CreateUserMfaVerificationJSONBody

// UpdateUserPasswordJSONRequestBody defines body for UpdateUserPassword for application/json ContentType.
type UpdateUserPasswordJSONRequestBody UpdateUserPasswordJSONBody

// VerifyUserPasswordJSONRequestBody defines body for VerifyUserPassword for application/json ContentType.
type VerifyUserPasswordJSONRequestBody VerifyUserPasswordJSONBody

// CreateUserPersonalAccessTokenJSONRequestBody defines body for CreateUserPersonalAccessToken for application/json ContentType.
type CreateUserPersonalAccessTokenJSONRequestBody CreateUserPersonalAccessTokenJSONBody

// UpdateUserPersonalAccessTokenJSONRequestBody defines body for UpdateUserPersonalAccessToken for application/json ContentType.
type UpdateUserPersonalAccessTokenJSONRequestBody UpdateUserPersonalAccessTokenJSONBody

// UpdateUserProfileJSONRequestBody defines body for UpdateUserProfile for application/json ContentType.
type UpdateUserProfileJSONRequestBody UpdateUserProfileJSONBody

// AssignUserRolesJSONRequestBody defines body for AssignUserRoles for application/json ContentType.
type AssignUserRolesJSONRequestBody AssignUserRolesJSONBody

// ReplaceUserRolesJSONRequestBody defines body for ReplaceUserRoles for application/json ContentType.
type ReplaceUserRolesJSONRequestBody ReplaceUserRolesJSONBody

// CreateVerificationCodeJSONRequestBody defines body for CreateVerificationCode for application/json ContentType.
type CreateVerificationCodeJSONRequestBody CreateVerificationCodeJSONBody

// VerifyVerificationCodeJSONRequestBody defines body for VerifyVerificationCode for application/json ContentType.
type VerifyVerificationCodeJSONRequestBody VerifyVerificationCodeJSONBody

// CreateVerificationByPasswordJSONRequestBody defines body for CreateVerificationByPassword for application/json ContentType.
type CreateVerificationByPasswordJSONRequestBody CreateVerificationByPasswordJSONBody

// CreateVerificationBySocialJSONRequestBody defines body for CreateVerificationBySocial for application/json ContentType.
type CreateVerificationBySocialJSONRequestBody CreateVerificationBySocialJSONBody

// VerifyVerificationBySocialJSONRequestBody defines body for VerifyVerificationBySocial for application/json ContentType.
type VerifyVerificationBySocialJSONRequestBody VerifyVerificationBySocialJSONBody

// CreateVerificationByVerificationCodeJSONRequestBody defines body for CreateVerificationByVerificationCode for application/json ContentType.
type CreateVerificationByVerificationCodeJSONRequestBody CreateVerificationByVerificationCodeJSONBody

// VerifyVerificationByVerificationCodeJSONRequestBody defines body for VerifyVerificationByVerificationCode for application/json ContentType.
type VerifyVerificationByVerificationCodeJSONRequestBody VerifyVerificationByVerificationCodeJSONBody

// VerifyWebAuthnRegistrationJSONRequestBody defines body for VerifyWebAuthnRegistration for application/json ContentType.
type VerifyWebAuthnRegistrationJSONRequestBody VerifyWebAuthnRegistrationJSONBody

// AsTranslation0 returns the union data inside the Translation as a Translation0
func (t Translation) AsTranslation0() (Translation0, error) {
	var body Translation0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromTranslation0 overwrites any union data inside the Translation as the provided Translation0
func (t *Translation) FromTranslation0(v Translation0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeTranslation0 performs a merge with any union data inside the Translation, using the provided Translation0
func (t *Translation) MergeTranslation0(v Translation0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t Translation) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *Translation) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetWellKnownExperience request
	GetWellKnownExperience(ctx context.Context, params *GetWellKnownExperienceParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetWellKnownExperienceOpenapiJson request
	GetWellKnownExperienceOpenapiJson(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetWellKnownManagementOpenapiJson request
	GetWellKnownManagementOpenapiJson(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSignInExperiencePhrases request
	GetSignInExperiencePhrases(ctx context.Context, params *GetSignInExperiencePhrasesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSignInExperienceConfig request
	GetSignInExperienceConfig(ctx context.Context, params *GetSignInExperienceConfigParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetWellKnownUserOpenapiJson request
	GetWellKnownUserOpenapiJson(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAccountCenterSettings request
	GetAccountCenterSettings(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateAccountCenterSettingsWithBody request with any body
	UpdateAccountCenterSettingsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateAccountCenterSettings(ctx context.Context, body UpdateAccountCenterSettingsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListApplications request
	ListApplications(ctx context.Context, params *ListApplicationsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateApplicationWithBody request with any body
	CreateApplicationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateApplication(ctx context.Context, body CreateApplicationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateApplicationCustomDataWithBody request with any body
	UpdateApplicationCustomDataWithBody(ctx context.Context, applicationId ApplicationId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateApplicationCustomData(ctx context.Context, applicationId ApplicationId, body UpdateApplicationCustomDataJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListApplicationRoles request
	ListApplicationRoles(ctx context.Context, applicationId ApplicationId, params *ListApplicationRolesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AssignApplicationRolesWithBody request with any body
	AssignApplicationRolesWithBody(ctx context.Context, applicationId ApplicationId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AssignApplicationRoles(ctx context.Context, applicationId ApplicationId, body AssignApplicationRolesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReplaceApplicationRolesWithBody request with any body
	ReplaceApplicationRolesWithBody(ctx context.Context, applicationId ApplicationId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ReplaceApplicationRoles(ctx context.Context, applicationId ApplicationId, body ReplaceApplicationRolesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteApplicationRole request
	DeleteApplicationRole(ctx context.Context, applicationId ApplicationId, roleId RoleId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApplicationSignInExperience request
	GetApplicationSignInExperience(ctx context.Context, applicationId ApplicationId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReplaceApplicationSignInExperienceWithBody request with any body
	ReplaceApplicationSignInExperienceWithBody(ctx context.Context, applicationId ApplicationId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ReplaceApplicationSignInExperience(ctx context.Context, applicationId ApplicationId, body ReplaceApplicationSignInExperienceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListApplicationUserConsentScopes request
	ListApplicationUserConsentScopes(ctx context.Context, applicationId ApplicationId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateApplicationUserConsentScopeWithBody request with any body
	CreateApplicationUserConsentScopeWithBody(ctx context.Context, applicationId ApplicationId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateApplicationUserConsentScope(ctx context.Context, applicationId ApplicationId, body CreateApplicationUserConsentScopeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteApplicationUserConsentScope request
	DeleteApplicationUserConsentScope(ctx context.Context, applicationId ApplicationId, scopeType DeleteApplicationUserConsentScopeParamsScopeType, scopeId ScopeId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteApplication request
	DeleteApplication(ctx context.Context, id ApplicationIdRoot, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApplication request
	GetApplication(ctx context.Context, id ApplicationIdRoot, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateApplicationWithBody request with any body
	UpdateApplicationWithBody(ctx context.Context, id ApplicationIdRoot, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateApplication(ctx context.Context, id ApplicationIdRoot, body UpdateApplicationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteApplicationLegacySecret request
	DeleteApplicationLegacySecret(ctx context.Context, id ApplicationIdRoot, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListApplicationOrganizations request
	ListApplicationOrganizations(ctx context.Context, id ApplicationIdRoot, params *ListApplicationOrganizationsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListApplicationProtectedAppMetadataCustomDomains request
	ListApplicationProtectedAppMetadataCustomDomains(ctx context.Context, id ApplicationIdRoot, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateApplicationProtectedAppMetadataCustomDomainWithBody request with any body
	CreateApplicationProtectedAppMetadataCustomDomainWithBody(ctx context.Context, id ApplicationIdRoot, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateApplicationProtectedAppMetadataCustomDomain(ctx context.Context, id ApplicationIdRoot, body CreateApplicationProtectedAppMetadataCustomDomainJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteApplicationProtectedAppMetadataCustomDomain request
	DeleteApplicationProtectedAppMetadataCustomDomain(ctx context.Context, id ApplicationIdRoot, domain string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListApplicationSecrets request
	ListApplicationSecrets(ctx context.Context, id ApplicationIdRoot, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateApplicationSecretWithBody request with any body
	CreateApplicationSecretWithBody(ctx context.Context, id ApplicationIdRoot, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateApplicationSecret(ctx context.Context, id ApplicationIdRoot, body CreateApplicationSecretJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteApplicationSecret request
	DeleteApplicationSecret(ctx context.Context, id ApplicationIdRoot, name string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateApplicationSecretWithBody request with any body
	UpdateApplicationSecretWithBody(ctx context.Context, id ApplicationIdRoot, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateApplicationSecret(ctx context.Context, id ApplicationIdRoot, name string, body UpdateApplicationSecretJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListApplicationUserConsentOrganizations request
	ListApplicationUserConsentOrganizations(ctx context.Context, id ApplicationIdRoot, userId UserId, params *ListApplicationUserConsentOrganizationsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateApplicationUserConsentOrganizationWithBody request with any body
	CreateApplicationUserConsentOrganizationWithBody(ctx context.Context, id ApplicationIdRoot, userId UserId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateApplicationUserConsentOrganization(ctx context.Context, id ApplicationIdRoot, userId UserId, body CreateApplicationUserConsentOrganizationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReplaceApplicationUserConsentOrganizationsWithBody request with any body
	ReplaceApplicationUserConsentOrganizationsWithBody(ctx context.Context, id ApplicationIdRoot, userId UserId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ReplaceApplicationUserConsentOrganizations(ctx context.Context, id ApplicationIdRoot, userId UserId, body ReplaceApplicationUserConsentOrganizationsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteApplicationUserConsentOrganization request
	DeleteApplicationUserConsentOrganization(ctx context.Context, id ApplicationIdRoot, userId UserId, organizationId OrganizationId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetHasuraAuth request
	GetHasuraAuth(ctx context.Context, params *GetHasuraAuthParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AssertSamlWithBody request with any body
	AssertSamlWithBody(ctx context.Context, connectorId ConnectorId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AssertSaml(ctx context.Context, connectorId ConnectorId, body AssertSamlJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AssertSingleSignOnSamlWithBody request with any body
	AssertSingleSignOnSamlWithBody(ctx context.Context, connectorId ConnectorId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AssertSingleSignOnSaml(ctx context.Context, connectorId ConnectorId, body AssertSingleSignOnSamlJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteCaptchaProvider request
	DeleteCaptchaProvider(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCaptchaProvider request
	GetCaptchaProvider(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateCaptchaProviderWithBody request with any body
	UpdateCaptchaProviderWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateCaptchaProvider(ctx context.Context, body UpdateCaptchaProviderJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAdminConsoleConfig request
	GetAdminConsoleConfig(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateAdminConsoleConfigWithBody request with any body
	UpdateAdminConsoleConfigWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateAdminConsoleConfig(ctx context.Context, body UpdateAdminConsoleConfigJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListJwtCustomizers request
	ListJwtCustomizers(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TestJwtCustomizerWithBody request with any body
	TestJwtCustomizerWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	TestJwtCustomizer(ctx context.Context, body TestJwtCustomizerJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteJwtCustomizer request
	DeleteJwtCustomizer(ctx context.Context, tokenTypePath DeleteJwtCustomizerParamsTokenTypePath, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetJwtCustomizer request
	GetJwtCustomizer(ctx context.Context, tokenTypePath GetJwtCustomizerParamsTokenTypePath, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateJwtCustomizerWithBody request with any body
	UpdateJwtCustomizerWithBody(ctx context.Context, tokenTypePath UpdateJwtCustomizerParamsTokenTypePath, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateJwtCustomizer(ctx context.Context, tokenTypePath UpdateJwtCustomizerParamsTokenTypePath, body UpdateJwtCustomizerJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpsertJwtCustomizerWithBody request with any body
	UpsertJwtCustomizerWithBody(ctx context.Context, tokenTypePath UpsertJwtCustomizerParamsTokenTypePath, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpsertJwtCustomizer(ctx context.Context, tokenTypePath UpsertJwtCustomizerParamsTokenTypePath, body UpsertJwtCustomizerJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetOidcKeys request
	GetOidcKeys(ctx context.Context, keyType GetOidcKeysParamsKeyType, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RotateOidcKeysWithBody request with any body
	RotateOidcKeysWithBody(ctx context.Context, keyType RotateOidcKeysParamsKeyType, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	RotateOidcKeys(ctx context.Context, keyType RotateOidcKeysParamsKeyType, body RotateOidcKeysJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteOidcKey request
	DeleteOidcKey(ctx context.Context, keyType DeleteOidcKeyParamsKeyType, keyId KeyId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListConnectorFactories request
	ListConnectorFactories(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetConnectorFactory request
	GetConnectorFactory(ctx context.Context, id ConnectorFactoryIdRoot, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListConnectors request
	ListConnectors(ctx context.Context, params *ListConnectorsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateConnectorWithBody request with any body
	CreateConnectorWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateConnector(ctx context.Context, body CreateConnectorJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateConnectorAuthorizationUriWithBody request with any body
	CreateConnectorAuthorizationUriWithBody(ctx context.Context, connectorId ConnectorId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateConnectorAuthorizationUri(ctx context.Context, connectorId ConnectorId, body CreateConnectorAuthorizationUriJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateConnectorTestWithBody request with any body
	CreateConnectorTestWithBody(ctx context.Context, factoryId FactoryId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateConnectorTest(ctx context.Context, factoryId FactoryId, body CreateConnectorTestJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteConnector request
	DeleteConnector(ctx context.Context, id ConnectorIdRoot, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetConnector request
	GetConnector(ctx context.Context, id ConnectorIdRoot, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateConnectorWithBody request with any body
	UpdateConnectorWithBody(ctx context.Context, id ConnectorIdRoot, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateConnector(ctx context.Context, id ConnectorIdRoot, body UpdateConnectorJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListCustomPhrases request
	ListCustomPhrases(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteCustomPhrase request
	DeleteCustomPhrase(ctx context.Context, languageTag DeleteCustomPhraseParamsLanguageTag, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCustomPhrase request
	GetCustomPhrase(ctx context.Context, languageTag GetCustomPhraseParamsLanguageTag, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReplaceCustomPhraseWithBody request with any body
	ReplaceCustomPhraseWithBody(ctx context.Context, languageTag ReplaceCustomPhraseParamsLanguageTag, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ReplaceCustomPhrase(ctx context.Context, languageTag ReplaceCustomPhraseParamsLanguageTag, body ReplaceCustomPhraseJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetActiveUserCounts request
	GetActiveUserCounts(ctx context.Context, params *GetActiveUserCountsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetNewUserCounts request
	GetNewUserCounts(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTotalUserCount request
	GetTotalUserCount(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListDomains request
	ListDomains(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateDomainWithBody request with any body
	CreateDomainWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateDomain(ctx context.Context, body CreateDomainJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteDomain request
	DeleteDomain(ctx context.Context, id DomainIdRoot, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetDomain request
	GetDomain(ctx context.Context, id DomainIdRoot, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteEmailTemplates request
	DeleteEmailTemplates(ctx context.Context, params *DeleteEmailTemplatesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListEmailTemplates request
	ListEmailTemplates(ctx context.Context, params *ListEmailTemplatesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReplaceEmailTemplatesWithBody request with any body
	ReplaceEmailTemplatesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ReplaceEmailTemplates(ctx context.Context, body ReplaceEmailTemplatesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteEmailTemplate request
	DeleteEmailTemplate(ctx context.Context, id EmailTemplateIdRoot, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetEmailTemplate request
	GetEmailTemplate(ctx context.Context, id EmailTemplateIdRoot, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateEmailTemplateDetailsWithBody request with any body
	UpdateEmailTemplateDetailsWithBody(ctx context.Context, id EmailTemplateIdRoot, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateEmailTemplateDetails(ctx context.Context, id EmailTemplateIdRoot, body UpdateEmailTemplateDetailsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InitInteractionWithBody request with any body
	InitInteractionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	InitInteraction(ctx context.Context, body InitInteractionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// IdentifyUserWithBody request with any body
	IdentifyUserWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	IdentifyUser(ctx context.Context, body IdentifyUserJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateInteractionEventWithBody request with any body
	UpdateInteractionEventWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateInteractionEvent(ctx context.Context, body UpdateInteractionEventJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AddUserProfileWithBody request with any body
	AddUserProfileWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AddUserProfile(ctx context.Context, body AddUserProfileJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BindMfaVerificationWithBody request with any body
	BindMfaVerificationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	BindMfaVerification(ctx context.Context, body BindMfaVerificationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SkipMfaBindingFlow request
	SkipMfaBindingFlow(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ResetUserPasswordWithBody request with any body
	ResetUserPasswordWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ResetUserPassword(ctx context.Context, body ResetUserPasswordJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetEnabledSsoConnectors request
	GetEnabledSsoConnectors(ctx context.Context, params *GetEnabledSsoConnectorsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SubmitInteraction request
	SubmitInteraction(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GenerateBackupCodes request
	GenerateBackupCodes(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// VerifyBackupCodeWithBody request with any body
	VerifyBackupCodeWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	VerifyBackupCode(ctx context.Context, body VerifyBackupCodeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateNewPasswordIdentityVerificationWithBody request with any body
	CreateNewPasswordIdentityVerificationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateNewPasswordIdentityVerification(ctx context.Context, body CreateNewPasswordIdentityVerificationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// VerifyOneTimeTokenVerificationWithBody request with any body
	VerifyOneTimeTokenVerificationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	VerifyOneTimeTokenVerification(ctx context.Context, body VerifyOneTimeTokenVerificationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreatePasswordVerificationWithBody request with any body
	CreatePasswordVerificationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreatePasswordVerification(ctx context.Context, body CreatePasswordVerificationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateSocialVerificationWithBody request with any body
	CreateSocialVerificationWithBody(ctx context.Context, connectorId ConnectorId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateSocialVerification(ctx context.Context, connectorId ConnectorId, body CreateSocialVerificationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// VerifySocialVerificationWithBody request with any body
	VerifySocialVerificationWithBody(ctx context.Context, connectorId ConnectorId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	VerifySocialVerification(ctx context.Context, connectorId ConnectorId, body VerifySocialVerificationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateEnterpriseSsoVerificationWithBody request with any body
	CreateEnterpriseSsoVerificationWithBody(ctx context.Context, connectorId ConnectorId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateEnterpriseSsoVerification(ctx context.Context, connectorId ConnectorId, body CreateEnterpriseSsoVerificationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// VerifyEnterpriseSsoVerificationWithBody request with any body
	VerifyEnterpriseSsoVerificationWithBody(ctx context.Context, connectorId ConnectorId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	VerifyEnterpriseSsoVerification(ctx context.Context, connectorId ConnectorId, body VerifyEnterpriseSsoVerificationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateTotpSecret request
	CreateTotpSecret(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// VerifyTotpVerificationWithBody request with any body
	VerifyTotpVerificationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	VerifyTotpVerification(ctx context.Context, body VerifyTotpVerificationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateAndSendVerificationCodeWithBody request with any body
	CreateAndSendVerificationCodeWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateAndSendVerificationCode(ctx context.Context, body CreateAndSendVerificationCodeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// VerifyVerificationCodeVerificationWithBody request with any body
	VerifyVerificationCodeVerificationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	VerifyVerificationCodeVerification(ctx context.Context, body VerifyVerificationCodeVerificationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateWebAuthnAuthenticationVerification request
	CreateWebAuthnAuthenticationVerification(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// VerifyWebAuthnAuthenticationVerificationWithBody request with any body
	VerifyWebAuthnAuthenticationVerificationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	VerifyWebAuthnAuthenticationVerification(ctx context.Context, body VerifyWebAuthnAuthenticationVerificationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateWebAuthnRegistrationVerification request
	CreateWebAuthnRegistrationVerification(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// VerifyWebAuthnRegistrationVerificationWithBody request with any body
	VerifyWebAuthnRegistrationVerificationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	VerifyWebAuthnRegistrationVerification(ctx context.Context, body VerifyWebAuthnRegistrationVerificationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListHooks request
	ListHooks(ctx context.Context, params *ListHooksParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateHookWithBody request with any body
	CreateHookWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateHook(ctx context.Context, body CreateHookJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteHook request
	DeleteHook(ctx context.Context, id HookIdRoot, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetHook request
	GetHook(ctx context.Context, id HookIdRoot, params *GetHookParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateHookWithBody request with any body
	UpdateHookWithBody(ctx context.Context, id HookIdRoot, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateHook(ctx context.Context, id HookIdRoot, body UpdateHookJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListHookRecentLogs request
	ListHookRecentLogs(ctx context.Context, id HookIdRoot, params *ListHookRecentLogsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateHookSigningKey request
	UpdateHookSigningKey(ctx context.Context, id HookIdRoot, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateHookTestWithBody request with any body
	CreateHookTestWithBody(ctx context.Context, id HookIdRoot, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateHookTest(ctx context.Context, id HookIdRoot, body CreateHookTestJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteApiInteraction request
	DeleteApiInteraction(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutApiInteractionWithBody request with any body
	PutApiInteractionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutApiInteraction(ctx context.Context, body PutApiInteractionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiInteractionBindMfaWithBody request with any body
	PostApiInteractionBindMfaWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiInteractionBindMfa(ctx context.Context, body PostApiInteractionBindMfaJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiInteractionConsent request
	GetApiInteractionConsent(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiInteractionConsentWithBody request with any body
	PostApiInteractionConsentWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiInteractionConsent(ctx context.Context, body PostApiInteractionConsentJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutApiInteractionEventWithBody request with any body
	PutApiInteractionEventWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutApiInteractionEvent(ctx context.Context, body PutApiInteractionEventJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchApiInteractionIdentifiersWithBody request with any body
	PatchApiInteractionIdentifiersWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchApiInteractionIdentifiers(ctx context.Context, body PatchApiInteractionIdentifiersJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutApiInteractionMfaWithBody request with any body
	PutApiInteractionMfaWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutApiInteractionMfa(ctx context.Context, body PutApiInteractionMfaJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutApiInteractionMfaSkippedWithBody request with any body
	PutApiInteractionMfaSkippedWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutApiInteractionMfaSkipped(ctx context.Context, body PutApiInteractionMfaSkippedJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteApiInteractionProfile request
	DeleteApiInteractionProfile(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchApiInteractionProfileWithBody request with any body
	PatchApiInteractionProfileWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchApiInteractionProfile(ctx context.Context, body PatchApiInteractionProfileJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutApiInteractionProfileWithBody request with any body
	PutApiInteractionProfileWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutApiInteractionProfile(ctx context.Context, body PutApiInteractionProfileJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiInteractionSingleSignOnConnectors request
	GetApiInteractionSingleSignOnConnectors(ctx context.Context, params *GetApiInteractionSingleSignOnConnectorsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiInteractionSingleSignOnConnectorIdAuthenticationWithBody request with any body
	PostApiInteractionSingleSignOnConnectorIdAuthenticationWithBody(ctx context.Context, connectorId ConnectorId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiInteractionSingleSignOnConnectorIdAuthentication(ctx context.Context, connectorId ConnectorId, body PostApiInteractionSingleSignOnConnectorIdAuthenticationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiInteractionSingleSignOnConnectorIdAuthorizationUrlWithBody request with any body
	PostApiInteractionSingleSignOnConnectorIdAuthorizationUrlWithBody(ctx context.Context, connectorId ConnectorId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiInteractionSingleSignOnConnectorIdAuthorizationUrl(ctx context.Context, connectorId ConnectorId, body PostApiInteractionSingleSignOnConnectorIdAuthorizationUrlJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiInteractionSingleSignOnConnectorIdRegistration request
	PostApiInteractionSingleSignOnConnectorIdRegistration(ctx context.Context, connectorId ConnectorId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiInteractionSubmit request
	PostApiInteractionSubmit(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiInteractionVerificationSocialAuthorizationUriWithBody request with any body
	PostApiInteractionVerificationSocialAuthorizationUriWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiInteractionVerificationSocialAuthorizationUri(ctx context.Context, body PostApiInteractionVerificationSocialAuthorizationUriJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiInteractionVerificationTotp request
	PostApiInteractionVerificationTotp(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiInteractionVerificationVerificationCodeWithBody request with any body
	PostApiInteractionVerificationVerificationCodeWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiInteractionVerificationVerificationCode(ctx context.Context, body PostApiInteractionVerificationVerificationCodeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiInteractionVerificationWebauthnAuthentication request
	PostApiInteractionVerificationWebauthnAuthentication(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiInteractionVerificationWebauthnRegistration request
	PostApiInteractionVerificationWebauthnRegistration(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListLogs request
	ListLogs(ctx context.Context, params *ListLogsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetLog request
	GetLog(ctx context.Context, id LogIdRoot, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetProfile request
	GetProfile(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateProfileWithBody request with any body
	UpdateProfileWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateProfile(ctx context.Context, body UpdateProfileJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AddUserIdentitiesWithBody request with any body
	AddUserIdentitiesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AddUserIdentities(ctx context.Context, body AddUserIdentitiesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteIdentity request
	DeleteIdentity(ctx context.Context, target string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetMfaVerifications request
	GetMfaVerifications(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AddMfaVerificationWithBody request with any body
	AddMfaVerificationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AddMfaVerification(ctx context.Context, body AddMfaVerificationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteMfaVerification request
	DeleteMfaVerification(ctx context.Context, verificationId VerificationId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateMfaVerificationNameWithBody request with any body
	UpdateMfaVerificationNameWithBody(ctx context.Context, verificationId VerificationId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateMfaVerificationName(ctx context.Context, verificationId VerificationId, body UpdateMfaVerificationNameJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdatePasswordWithBody request with any body
	UpdatePasswordWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdatePassword(ctx context.Context, body UpdatePasswordJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeletePrimaryEmail request
	DeletePrimaryEmail(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdatePrimaryEmailWithBody request with any body
	UpdatePrimaryEmailWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdatePrimaryEmail(ctx context.Context, body UpdatePrimaryEmailJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeletePrimaryPhone request
	DeletePrimaryPhone(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdatePrimaryPhoneWithBody request with any body
	UpdatePrimaryPhoneWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdatePrimaryPhone(ctx context.Context, body UpdatePrimaryPhoneJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateOtherProfileWithBody request with any body
	UpdateOtherProfileWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateOtherProfile(ctx context.Context, body UpdateOtherProfileJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListOneTimeTokens request
	ListOneTimeTokens(ctx context.Context, params *ListOneTimeTokensParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AddOneTimeTokensWithBody request with any body
	AddOneTimeTokensWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AddOneTimeTokens(ctx context.Context, body AddOneTimeTokensJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// VerifyOneTimeTokenWithBody request with any body
	VerifyOneTimeTokenWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	VerifyOneTimeToken(ctx context.Context, body VerifyOneTimeTokenJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteOneTimeToken request
	DeleteOneTimeToken(ctx context.Context, id OneTimeTokenIdRoot, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetOneTimeToken request
	GetOneTimeToken(ctx context.Context, id OneTimeTokenIdRoot, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReplaceOneTimeTokenStatusWithBody request with any body
	ReplaceOneTimeTokenStatusWithBody(ctx context.Context, id OneTimeTokenIdRoot, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ReplaceOneTimeTokenStatus(ctx context.Context, id OneTimeTokenIdRoot, body ReplaceOneTimeTokenStatusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListOrganizationInvitations request
	ListOrganizationInvitations(ctx context.Context, params *ListOrganizationInvitationsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateOrganizationInvitationWithBody request with any body
	CreateOrganizationInvitationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateOrganizationInvitation(ctx context.Context, body CreateOrganizationInvitationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteOrganizationInvitation request
	DeleteOrganizationInvitation(ctx context.Context, id OrganizationInvitationIdRoot, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetOrganizationInvitation request
	GetOrganizationInvitation(ctx context.Context, id OrganizationInvitationIdRoot, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateOrganizationInvitationMessageWithBody request with any body
	CreateOrganizationInvitationMessageWithBody(ctx context.Context, id OrganizationInvitationIdRoot, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateOrganizationInvitationMessage(ctx context.Context, id OrganizationInvitationIdRoot, body CreateOrganizationInvitationMessageJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReplaceOrganizationInvitationStatusWithBody request with any body
	ReplaceOrganizationInvitationStatusWithBody(ctx context.Context, id OrganizationInvitationIdRoot, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ReplaceOrganizationInvitationStatus(ctx context.Context, id OrganizationInvitationIdRoot, body ReplaceOrganizationInvitationStatusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListOrganizationRoles request
	ListOrganizationRoles(ctx context.Context, params *ListOrganizationRolesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateOrganizationRoleWithBody request with any body
	CreateOrganizationRoleWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateOrganizationRole(ctx context.Context, body CreateOrganizationRoleJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteOrganizationRole request
	DeleteOrganizationRole(ctx context.Context, id OrganizationRoleIdRoot, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetOrganizationRole request
	GetOrganizationRole(ctx context.Context, id OrganizationRoleIdRoot, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateOrganizationRoleWithBody request with any body
	UpdateOrganizationRoleWithBody(ctx context.Context, id OrganizationRoleIdRoot, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateOrganizationRole(ctx context.Context, id OrganizationRoleIdRoot, body UpdateOrganizationRoleJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListOrganizationRoleResourceScopes request
	ListOrganizationRoleResourceScopes(ctx context.Context, id OrganizationRoleIdRoot, params *ListOrganizationRoleResourceScopesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateOrganizationRoleResourceScopeWithBody request with any body
	CreateOrganizationRoleResourceScopeWithBody(ctx context.Context, id OrganizationRoleIdRoot, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateOrganizationRoleResourceScope(ctx context.Context, id OrganizationRoleIdRoot, body CreateOrganizationRoleResourceScopeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReplaceOrganizationRoleResourceScopesWithBody request with any body
	ReplaceOrganizationRoleResourceScopesWithBody(ctx context.Context, id OrganizationRoleIdRoot, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ReplaceOrganizationRoleResourceScopes(ctx context.Context, id OrganizationRoleIdRoot, body ReplaceOrganizationRoleResourceScopesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteOrganizationRoleResourceScope request
	DeleteOrganizationRoleResourceScope(ctx context.Context, id OrganizationRoleIdRoot, scopeId ScopeId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListOrganizationRoleScopes request
	ListOrganizationRoleScopes(ctx context.Context, id OrganizationRoleIdRoot, params *ListOrganizationRoleScopesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateOrganizationRoleScopeWithBody request with any body
	CreateOrganizationRoleScopeWithBody(ctx context.Context, id OrganizationRoleIdRoot, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateOrganizationRoleScope(ctx context.Context, id OrganizationRoleIdRoot, body CreateOrganizationRoleScopeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReplaceOrganizationRoleScopesWithBody request with any body
	ReplaceOrganizationRoleScopesWithBody(ctx context.Context, id OrganizationRoleIdRoot, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ReplaceOrganizationRoleScopes(ctx context.Context, id OrganizationRoleIdRoot, body ReplaceOrganizationRoleScopesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteOrganizationRoleScope request
	DeleteOrganizationRoleScope(ctx context.Context, id OrganizationRoleIdRoot, organizationScopeId OrganizationScopeId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListOrganizationScopes request
	ListOrganizationScopes(ctx context.Context, params *ListOrganizationScopesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateOrganizationScopeWithBody request with any body
	CreateOrganizationScopeWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateOrganizationScope(ctx context.Context, body CreateOrganizationScopeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteOrganizationScope request
	DeleteOrganizationScope(ctx context.Context, id OrganizationScopeIdRoot, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetOrganizationScope request
	GetOrganizationScope(ctx context.Context, id OrganizationScopeIdRoot, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateOrganizationScopeWithBody request with any body
	UpdateOrganizationScopeWithBody(ctx context.Context, id OrganizationScopeIdRoot, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateOrganizationScope(ctx context.Context, id OrganizationScopeIdRoot, body UpdateOrganizationScopeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListOrganizations request
	ListOrganizations(ctx context.Context, params *ListOrganizationsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateOrganizationWithBody request with any body
	CreateOrganizationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateOrganization(ctx context.Context, body CreateOrganizationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteOrganization request
	DeleteOrganization(ctx context.Context, id OrganizationIdRoot, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetOrganization request
	GetOrganization(ctx context.Context, id OrganizationIdRoot, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateOrganizationWithBody request with any body
	UpdateOrganizationWithBody(ctx context.Context, id OrganizationIdRoot, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateOrganization(ctx context.Context, id OrganizationIdRoot, body UpdateOrganizationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListOrganizationApplications request
	ListOrganizationApplications(ctx context.Context, id OrganizationIdRoot, params *ListOrganizationApplicationsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AddOrganizationApplicationsWithBody request with any body
	AddOrganizationApplicationsWithBody(ctx context.Context, id OrganizationIdRoot, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AddOrganizationApplications(ctx context.Context, id OrganizationIdRoot, body AddOrganizationApplicationsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReplaceOrganizationApplicationsWithBody request with any body
	ReplaceOrganizationApplicationsWithBody(ctx context.Context, id OrganizationIdRoot, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ReplaceOrganizationApplications(ctx context.Context, id OrganizationIdRoot, body ReplaceOrganizationApplicationsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AssignOrganizationRolesToApplicationsWithBody request with any body
	AssignOrganizationRolesToApplicationsWithBody(ctx context.Context, id OrganizationIdRoot, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AssignOrganizationRolesToApplications(ctx context.Context, id OrganizationIdRoot, body AssignOrganizationRolesToApplicationsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteOrganizationApplication request
	DeleteOrganizationApplication(ctx context.Context, id OrganizationIdRoot, applicationId ApplicationId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListOrganizationApplicationRoles request
	ListOrganizationApplicationRoles(ctx context.Context, id OrganizationIdRoot, applicationId ApplicationId, params *ListOrganizationApplicationRolesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AssignOrganizationRolesToApplicationWithBody request with any body
	AssignOrganizationRolesToApplicationWithBody(ctx context.Context, id OrganizationIdRoot, applicationId ApplicationId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AssignOrganizationRolesToApplication(ctx context.Context, id OrganizationIdRoot, applicationId ApplicationId, body AssignOrganizationRolesToApplicationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReplaceOrganizationApplicationRolesWithBody request with any body
	ReplaceOrganizationApplicationRolesWithBody(ctx context.Context, id OrganizationIdRoot, applicationId ApplicationId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ReplaceOrganizationApplicationRoles(ctx context.Context, id OrganizationIdRoot, applicationId ApplicationId, body ReplaceOrganizationApplicationRolesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteOrganizationApplicationRole request
	DeleteOrganizationApplicationRole(ctx context.Context, id OrganizationIdRoot, applicationId ApplicationId, organizationRoleId OrganizationRoleId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListOrganizationJitEmailDomains request
	ListOrganizationJitEmailDomains(ctx context.Context, id OrganizationIdRoot, params *ListOrganizationJitEmailDomainsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateOrganizationJitEmailDomainWithBody request with any body
	CreateOrganizationJitEmailDomainWithBody(ctx context.Context, id OrganizationIdRoot, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateOrganizationJitEmailDomain(ctx context.Context, id OrganizationIdRoot, body CreateOrganizationJitEmailDomainJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReplaceOrganizationJitEmailDomainsWithBody request with any body
	ReplaceOrganizationJitEmailDomainsWithBody(ctx context.Context, id OrganizationIdRoot, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ReplaceOrganizationJitEmailDomains(ctx context.Context, id OrganizationIdRoot, body ReplaceOrganizationJitEmailDomainsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteOrganizationJitEmailDomain request
	DeleteOrganizationJitEmailDomain(ctx context.Context, id OrganizationIdRoot, emailDomain string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListOrganizationJitRoles request
	ListOrganizationJitRoles(ctx context.Context, id OrganizationIdRoot, params *ListOrganizationJitRolesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateOrganizationJitRoleWithBody request with any body
	CreateOrganizationJitRoleWithBody(ctx context.Context, id OrganizationIdRoot, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateOrganizationJitRole(ctx context.Context, id OrganizationIdRoot, body CreateOrganizationJitRoleJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReplaceOrganizationJitRolesWithBody request with any body
	ReplaceOrganizationJitRolesWithBody(ctx context.Context, id OrganizationIdRoot, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ReplaceOrganizationJitRoles(ctx context.Context, id OrganizationIdRoot, body ReplaceOrganizationJitRolesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteOrganizationJitRole request
	DeleteOrganizationJitRole(ctx context.Context, id OrganizationIdRoot, organizationRoleId OrganizationRoleId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListOrganizationJitSsoConnectors request
	ListOrganizationJitSsoConnectors(ctx context.Context, id OrganizationIdRoot, params *ListOrganizationJitSsoConnectorsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateOrganizationJitSsoConnectorWithBody request with any body
	CreateOrganizationJitSsoConnectorWithBody(ctx context.Context, id OrganizationIdRoot, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateOrganizationJitSsoConnector(ctx context.Context, id OrganizationIdRoot, body CreateOrganizationJitSsoConnectorJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReplaceOrganizationJitSsoConnectorsWithBody request with any body
	ReplaceOrganizationJitSsoConnectorsWithBody(ctx context.Context, id OrganizationIdRoot, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ReplaceOrganizationJitSsoConnectors(ctx context.Context, id OrganizationIdRoot, body ReplaceOrganizationJitSsoConnectorsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteOrganizationJitSsoConnector request
	DeleteOrganizationJitSsoConnector(ctx context.Context, id OrganizationIdRoot, ssoConnectorId SsoConnectorId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListOrganizationUsers request
	ListOrganizationUsers(ctx context.Context, id OrganizationIdRoot, params *ListOrganizationUsersParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AddOrganizationUsersWithBody request with any body
	AddOrganizationUsersWithBody(ctx context.Context, id OrganizationIdRoot, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AddOrganizationUsers(ctx context.Context, id OrganizationIdRoot, body AddOrganizationUsersJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReplaceOrganizationUsersWithBody request with any body
	ReplaceOrganizationUsersWithBody(ctx context.Context, id OrganizationIdRoot, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ReplaceOrganizationUsers(ctx context.Context, id OrganizationIdRoot, body ReplaceOrganizationUsersJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AssignOrganizationRolesToUsersWithBody request with any body
	AssignOrganizationRolesToUsersWithBody(ctx context.Context, id OrganizationIdRoot, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AssignOrganizationRolesToUsers(ctx context.Context, id OrganizationIdRoot, body AssignOrganizationRolesToUsersJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteOrganizationUser request
	DeleteOrganizationUser(ctx context.Context, id OrganizationIdRoot, userId UserId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListOrganizationUserRoles request
	ListOrganizationUserRoles(ctx context.Context, id OrganizationIdRoot, userId UserId, params *ListOrganizationUserRolesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AssignOrganizationRolesToUserWithBody request with any body
	AssignOrganizationRolesToUserWithBody(ctx context.Context, id OrganizationIdRoot, userId UserId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AssignOrganizationRolesToUser(ctx context.Context, id OrganizationIdRoot, userId UserId, body AssignOrganizationRolesToUserJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReplaceOrganizationUserRolesWithBody request with any body
	ReplaceOrganizationUserRolesWithBody(ctx context.Context, id OrganizationIdRoot, userId UserId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ReplaceOrganizationUserRoles(ctx context.Context, id OrganizationIdRoot, userId UserId, body ReplaceOrganizationUserRolesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteOrganizationUserRole request
	DeleteOrganizationUserRole(ctx context.Context, id OrganizationIdRoot, userId UserId, organizationRoleId OrganizationRoleId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListOrganizationUserScopes request
	ListOrganizationUserScopes(ctx context.Context, id OrganizationIdRoot, userId UserId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListResources request
	ListResources(ctx context.Context, params *ListResourcesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateResourceWithBody request with any body
	CreateResourceWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateResource(ctx context.Context, body CreateResourceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteResource request
	DeleteResource(ctx context.Context, id ResourceIdRoot, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetResource request
	GetResource(ctx context.Context, id ResourceIdRoot, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateResourceWithBody request with any body
	UpdateResourceWithBody(ctx context.Context, id ResourceIdRoot, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateResource(ctx context.Context, id ResourceIdRoot, body UpdateResourceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateResourceIsDefaultWithBody request with any body
	UpdateResourceIsDefaultWithBody(ctx context.Context, id ResourceIdRoot, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateResourceIsDefault(ctx context.Context, id ResourceIdRoot, body UpdateResourceIsDefaultJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListResourceScopes request
	ListResourceScopes(ctx context.Context, resourceId ResourceId, params *ListResourceScopesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateResourceScopeWithBody request with any body
	CreateResourceScopeWithBody(ctx context.Context, resourceId ResourceId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateResourceScope(ctx context.Context, resourceId ResourceId, body CreateResourceScopeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteResourceScope request
	DeleteResourceScope(ctx context.Context, resourceId ResourceId, scopeId ScopeId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateResourceScopeWithBody request with any body
	UpdateResourceScopeWithBody(ctx context.Context, resourceId ResourceId, scopeId ScopeId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateResourceScope(ctx context.Context, resourceId ResourceId, scopeId ScopeId, body UpdateResourceScopeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListRoles request
	ListRoles(ctx context.Context, params *ListRolesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateRoleWithBody request with any body
	CreateRoleWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateRole(ctx context.Context, body CreateRoleJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteRole request
	DeleteRole(ctx context.Context, id RoleIdRoot, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRole request
	GetRole(ctx context.Context, id RoleIdRoot, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateRoleWithBody request with any body
	UpdateRoleWithBody(ctx context.Context, id RoleIdRoot, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateRole(ctx context.Context, id RoleIdRoot, body UpdateRoleJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListRoleApplications request
	ListRoleApplications(ctx context.Context, id RoleIdRoot, params *ListRoleApplicationsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateRoleApplicationWithBody request with any body
	CreateRoleApplicationWithBody(ctx context.Context, id RoleIdRoot, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateRoleApplication(ctx context.Context, id RoleIdRoot, body CreateRoleApplicationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteRoleApplication request
	DeleteRoleApplication(ctx context.Context, id RoleIdRoot, applicationId ApplicationId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListRoleScopes request
	ListRoleScopes(ctx context.Context, id RoleIdRoot, params *ListRoleScopesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateRoleScopeWithBody request with any body
	CreateRoleScopeWithBody(ctx context.Context, id RoleIdRoot, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateRoleScope(ctx context.Context, id RoleIdRoot, body CreateRoleScopeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteRoleScope request
	DeleteRoleScope(ctx context.Context, id RoleIdRoot, scopeId ScopeId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListRoleUsers request
	ListRoleUsers(ctx context.Context, id RoleIdRoot, params *ListRoleUsersParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateRoleUserWithBody request with any body
	CreateRoleUserWithBody(ctx context.Context, id RoleIdRoot, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateRoleUser(ctx context.Context, id RoleIdRoot, body CreateRoleUserJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteRoleUser request
	DeleteRoleUser(ctx context.Context, id RoleIdRoot, userId UserId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateSamlApplicationWithBody request with any body
	CreateSamlApplicationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateSamlApplication(ctx context.Context, body CreateSamlApplicationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteSamlApplication request
	DeleteSamlApplication(ctx context.Context, id SamlApplicationIdRoot, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSamlApplication request
	GetSamlApplication(ctx context.Context, id SamlApplicationIdRoot, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateSamlApplicationWithBody request with any body
	UpdateSamlApplicationWithBody(ctx context.Context, id SamlApplicationIdRoot, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateSamlApplication(ctx context.Context, id SamlApplicationIdRoot, body UpdateSamlApplicationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSamlApplicationCallback request
	GetSamlApplicationCallback(ctx context.Context, id SamlApplicationIdRoot, params *GetSamlApplicationCallbackParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListSamlApplicationMetadata request
	ListSamlApplicationMetadata(ctx context.Context, id SamlApplicationIdRoot, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListSamlApplicationSecrets request
	ListSamlApplicationSecrets(ctx context.Context, id SamlApplicationIdRoot, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateSamlApplicationSecretWithBody request with any body
	CreateSamlApplicationSecretWithBody(ctx context.Context, id SamlApplicationIdRoot, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateSamlApplicationSecret(ctx context.Context, id SamlApplicationIdRoot, body CreateSamlApplicationSecretJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteSamlApplicationSecret request
	DeleteSamlApplicationSecret(ctx context.Context, id SamlApplicationIdRoot, secretId SecretId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateSamlApplicationSecretWithBody request with any body
	UpdateSamlApplicationSecretWithBody(ctx context.Context, id SamlApplicationIdRoot, secretId SecretId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateSamlApplicationSecret(ctx context.Context, id SamlApplicationIdRoot, secretId SecretId, body UpdateSamlApplicationSecretJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSamlAuthn request
	GetSamlAuthn(ctx context.Context, id SamlIdRoot, params *GetSamlAuthnParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateSamlAuthnWithBody request with any body
	CreateSamlAuthnWithBody(ctx context.Context, id SamlIdRoot, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateSamlAuthn(ctx context.Context, id SamlIdRoot, body CreateSamlAuthnJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateSamlAuthnWithFormdataBody(ctx context.Context, id SamlIdRoot, body CreateSamlAuthnFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteSentinelActivitiesWithBody request with any body
	DeleteSentinelActivitiesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DeleteSentinelActivities(ctx context.Context, body DeleteSentinelActivitiesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSignInExp request
	GetSignInExp(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateSignInExpWithBody request with any body
	UpdateSignInExpWithBody(ctx context.Context, params *UpdateSignInExpParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateSignInExp(ctx context.Context, params *UpdateSignInExpParams, body UpdateSignInExpJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CheckPasswordWithDefaultSignInExperienceWithBody request with any body
	CheckPasswordWithDefaultSignInExperienceWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CheckPasswordWithDefaultSignInExperience(ctx context.Context, body CheckPasswordWithDefaultSignInExperienceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UploadCustomUiAssetsWithBody request with any body
	UploadCustomUiAssetsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListSsoConnectorProviders request
	ListSsoConnectorProviders(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListSsoConnectors request
	ListSsoConnectors(ctx context.Context, params *ListSsoConnectorsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateSsoConnectorWithBody request with any body
	CreateSsoConnectorWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateSsoConnector(ctx context.Context, body CreateSsoConnectorJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteSsoConnector request
	DeleteSsoConnector(ctx context.Context, id SsoConnectorIdRoot, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSsoConnector request
	GetSsoConnector(ctx context.Context, id SsoConnectorIdRoot, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateSsoConnectorWithBody request with any body
	UpdateSsoConnectorWithBody(ctx context.Context, id SsoConnectorIdRoot, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateSsoConnector(ctx context.Context, id SsoConnectorIdRoot, body UpdateSsoConnectorJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetStatus request
	GetStatus(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateSubjectTokenWithBody request with any body
	CreateSubjectTokenWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateSubjectToken(ctx context.Context, body CreateSubjectTokenJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSwaggerJson request
	GetSwaggerJson(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSystemApplicationConfig request
	GetSystemApplicationConfig(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateUserAssetWithBody request with any body
	CreateUserAssetWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUserAssetServiceStatus request
	GetUserAssetServiceStatus(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListUsers request
	ListUsers(ctx context.Context, params *ListUsersParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateUserWithBody request with any body
	CreateUserWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateUser(ctx context.Context, body CreateUserJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteUser request
	DeleteUser(ctx context.Context, userId UserId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUser request
	GetUser(ctx context.Context, userId UserId, params *GetUserParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateUserWithBody request with any body
	UpdateUserWithBody(ctx context.Context, userId UserId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateUser(ctx context.Context, userId UserId, body UpdateUserJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListUserCustomData request
	ListUserCustomData(ctx context.Context, userId UserId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateUserCustomDataWithBody request with any body
	UpdateUserCustomDataWithBody(ctx context.Context, userId UserId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateUserCustomData(ctx context.Context, userId UserId, body UpdateUserCustomDataJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUserHasPassword request
	GetUserHasPassword(ctx context.Context, userId UserId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateUserIdentityWithBody request with any body
	CreateUserIdentityWithBody(ctx context.Context, userId UserId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateUserIdentity(ctx context.Context, userId UserId, body CreateUserIdentityJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteUserIdentity request
	DeleteUserIdentity(ctx context.Context, userId UserId, target string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReplaceUserIdentityWithBody request with any body
	ReplaceUserIdentityWithBody(ctx context.Context, userId UserId, target string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ReplaceUserIdentity(ctx context.Context, userId UserId, target string, body ReplaceUserIdentityJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateUserIsSuspendedWithBody request with any body
	UpdateUserIsSuspendedWithBody(ctx context.Context, userId UserId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateUserIsSuspended(ctx context.Context, userId UserId, body UpdateUserIsSuspendedJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListUserMfaVerifications request
	ListUserMfaVerifications(ctx context.Context, userId UserId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateUserMfaVerificationWithBody request with any body
	CreateUserMfaVerificationWithBody(ctx context.Context, userId UserId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateUserMfaVerification(ctx context.Context, userId UserId, body CreateUserMfaVerificationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteUserMfaVerification request
	DeleteUserMfaVerification(ctx context.Context, userId UserId, verificationId VerificationId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListUserOrganizations request
	ListUserOrganizations(ctx context.Context, userId UserId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateUserPasswordWithBody request with any body
	UpdateUserPasswordWithBody(ctx context.Context, userId UserId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateUserPassword(ctx context.Context, userId UserId, body UpdateUserPasswordJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// VerifyUserPasswordWithBody request with any body
	VerifyUserPasswordWithBody(ctx context.Context, userId UserId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	VerifyUserPassword(ctx context.Context, userId UserId, body VerifyUserPasswordJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListUserPersonalAccessTokens request
	ListUserPersonalAccessTokens(ctx context.Context, userId UserId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateUserPersonalAccessTokenWithBody request with any body
	CreateUserPersonalAccessTokenWithBody(ctx context.Context, userId UserId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateUserPersonalAccessToken(ctx context.Context, userId UserId, body CreateUserPersonalAccessTokenJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteUserPersonalAccessToken request
	DeleteUserPersonalAccessToken(ctx context.Context, userId UserId, name string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateUserPersonalAccessTokenWithBody request with any body
	UpdateUserPersonalAccessTokenWithBody(ctx context.Context, userId UserId, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateUserPersonalAccessToken(ctx context.Context, userId UserId, name string, body UpdateUserPersonalAccessTokenJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateUserProfileWithBody request with any body
	UpdateUserProfileWithBody(ctx context.Context, userId UserId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateUserProfile(ctx context.Context, userId UserId, body UpdateUserProfileJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListUserRoles request
	ListUserRoles(ctx context.Context, userId UserId, params *ListUserRolesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AssignUserRolesWithBody request with any body
	AssignUserRolesWithBody(ctx context.Context, userId UserId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AssignUserRoles(ctx context.Context, userId UserId, body AssignUserRolesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReplaceUserRolesWithBody request with any body
	ReplaceUserRolesWithBody(ctx context.Context, userId UserId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ReplaceUserRoles(ctx context.Context, userId UserId, body ReplaceUserRolesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteUserRole request
	DeleteUserRole(ctx context.Context, userId UserId, roleId RoleId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateVerificationCodeWithBody request with any body
	CreateVerificationCodeWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateVerificationCode(ctx context.Context, body CreateVerificationCodeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// VerifyVerificationCodeWithBody request with any body
	VerifyVerificationCodeWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	VerifyVerificationCode(ctx context.Context, body VerifyVerificationCodeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateVerificationByPasswordWithBody request with any body
	CreateVerificationByPasswordWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateVerificationByPassword(ctx context.Context, body CreateVerificationByPasswordJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateVerificationBySocialWithBody request with any body
	CreateVerificationBySocialWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateVerificationBySocial(ctx context.Context, body CreateVerificationBySocialJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// VerifyVerificationBySocialWithBody request with any body
	VerifyVerificationBySocialWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	VerifyVerificationBySocial(ctx context.Context, body VerifyVerificationBySocialJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateVerificationByVerificationCodeWithBody request with any body
	CreateVerificationByVerificationCodeWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateVerificationByVerificationCode(ctx context.Context, body CreateVerificationByVerificationCodeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// VerifyVerificationByVerificationCodeWithBody request with any body
	VerifyVerificationByVerificationCodeWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	VerifyVerificationByVerificationCode(ctx context.Context, body VerifyVerificationByVerificationCodeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GenerateWebAuthnRegistrationOptions request
	GenerateWebAuthnRegistrationOptions(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// VerifyWebAuthnRegistrationWithBody request with any body
	VerifyWebAuthnRegistrationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	VerifyWebAuthnRegistration(ctx context.Context, body VerifyWebAuthnRegistrationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetWellKnownExperience(ctx context.Context, params *GetWellKnownExperienceParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetWellKnownExperienceRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetWellKnownExperienceOpenapiJson(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetWellKnownExperienceOpenapiJsonRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetWellKnownManagementOpenapiJson(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetWellKnownManagementOpenapiJsonRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSignInExperiencePhrases(ctx context.Context, params *GetSignInExperiencePhrasesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSignInExperiencePhrasesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSignInExperienceConfig(ctx context.Context, params *GetSignInExperienceConfigParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSignInExperienceConfigRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetWellKnownUserOpenapiJson(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetWellKnownUserOpenapiJsonRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAccountCenterSettings(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAccountCenterSettingsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateAccountCenterSettingsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateAccountCenterSettingsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateAccountCenterSettings(ctx context.Context, body UpdateAccountCenterSettingsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateAccountCenterSettingsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListApplications(ctx context.Context, params *ListApplicationsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListApplicationsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateApplicationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateApplicationRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateApplication(ctx context.Context, body CreateApplicationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateApplicationRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateApplicationCustomDataWithBody(ctx context.Context, applicationId ApplicationId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateApplicationCustomDataRequestWithBody(c.Server, applicationId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateApplicationCustomData(ctx context.Context, applicationId ApplicationId, body UpdateApplicationCustomDataJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateApplicationCustomDataRequest(c.Server, applicationId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListApplicationRoles(ctx context.Context, applicationId ApplicationId, params *ListApplicationRolesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListApplicationRolesRequest(c.Server, applicationId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AssignApplicationRolesWithBody(ctx context.Context, applicationId ApplicationId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAssignApplicationRolesRequestWithBody(c.Server, applicationId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AssignApplicationRoles(ctx context.Context, applicationId ApplicationId, body AssignApplicationRolesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAssignApplicationRolesRequest(c.Server, applicationId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReplaceApplicationRolesWithBody(ctx context.Context, applicationId ApplicationId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReplaceApplicationRolesRequestWithBody(c.Server, applicationId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReplaceApplicationRoles(ctx context.Context, applicationId ApplicationId, body ReplaceApplicationRolesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReplaceApplicationRolesRequest(c.Server, applicationId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteApplicationRole(ctx context.Context, applicationId ApplicationId, roleId RoleId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteApplicationRoleRequest(c.Server, applicationId, roleId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApplicationSignInExperience(ctx context.Context, applicationId ApplicationId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApplicationSignInExperienceRequest(c.Server, applicationId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReplaceApplicationSignInExperienceWithBody(ctx context.Context, applicationId ApplicationId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReplaceApplicationSignInExperienceRequestWithBody(c.Server, applicationId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReplaceApplicationSignInExperience(ctx context.Context, applicationId ApplicationId, body ReplaceApplicationSignInExperienceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReplaceApplicationSignInExperienceRequest(c.Server, applicationId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListApplicationUserConsentScopes(ctx context.Context, applicationId ApplicationId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListApplicationUserConsentScopesRequest(c.Server, applicationId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateApplicationUserConsentScopeWithBody(ctx context.Context, applicationId ApplicationId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateApplicationUserConsentScopeRequestWithBody(c.Server, applicationId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateApplicationUserConsentScope(ctx context.Context, applicationId ApplicationId, body CreateApplicationUserConsentScopeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateApplicationUserConsentScopeRequest(c.Server, applicationId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteApplicationUserConsentScope(ctx context.Context, applicationId ApplicationId, scopeType DeleteApplicationUserConsentScopeParamsScopeType, scopeId ScopeId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteApplicationUserConsentScopeRequest(c.Server, applicationId, scopeType, scopeId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteApplication(ctx context.Context, id ApplicationIdRoot, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteApplicationRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApplication(ctx context.Context, id ApplicationIdRoot, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApplicationRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateApplicationWithBody(ctx context.Context, id ApplicationIdRoot, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateApplicationRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateApplication(ctx context.Context, id ApplicationIdRoot, body UpdateApplicationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateApplicationRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteApplicationLegacySecret(ctx context.Context, id ApplicationIdRoot, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteApplicationLegacySecretRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListApplicationOrganizations(ctx context.Context, id ApplicationIdRoot, params *ListApplicationOrganizationsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListApplicationOrganizationsRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListApplicationProtectedAppMetadataCustomDomains(ctx context.Context, id ApplicationIdRoot, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListApplicationProtectedAppMetadataCustomDomainsRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateApplicationProtectedAppMetadataCustomDomainWithBody(ctx context.Context, id ApplicationIdRoot, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateApplicationProtectedAppMetadataCustomDomainRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateApplicationProtectedAppMetadataCustomDomain(ctx context.Context, id ApplicationIdRoot, body CreateApplicationProtectedAppMetadataCustomDomainJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateApplicationProtectedAppMetadataCustomDomainRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteApplicationProtectedAppMetadataCustomDomain(ctx context.Context, id ApplicationIdRoot, domain string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteApplicationProtectedAppMetadataCustomDomainRequest(c.Server, id, domain)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListApplicationSecrets(ctx context.Context, id ApplicationIdRoot, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListApplicationSecretsRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateApplicationSecretWithBody(ctx context.Context, id ApplicationIdRoot, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateApplicationSecretRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateApplicationSecret(ctx context.Context, id ApplicationIdRoot, body CreateApplicationSecretJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateApplicationSecretRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteApplicationSecret(ctx context.Context, id ApplicationIdRoot, name string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteApplicationSecretRequest(c.Server, id, name)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateApplicationSecretWithBody(ctx context.Context, id ApplicationIdRoot, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateApplicationSecretRequestWithBody(c.Server, id, name, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateApplicationSecret(ctx context.Context, id ApplicationIdRoot, name string, body UpdateApplicationSecretJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateApplicationSecretRequest(c.Server, id, name, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListApplicationUserConsentOrganizations(ctx context.Context, id ApplicationIdRoot, userId UserId, params *ListApplicationUserConsentOrganizationsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListApplicationUserConsentOrganizationsRequest(c.Server, id, userId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateApplicationUserConsentOrganizationWithBody(ctx context.Context, id ApplicationIdRoot, userId UserId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateApplicationUserConsentOrganizationRequestWithBody(c.Server, id, userId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateApplicationUserConsentOrganization(ctx context.Context, id ApplicationIdRoot, userId UserId, body CreateApplicationUserConsentOrganizationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateApplicationUserConsentOrganizationRequest(c.Server, id, userId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReplaceApplicationUserConsentOrganizationsWithBody(ctx context.Context, id ApplicationIdRoot, userId UserId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReplaceApplicationUserConsentOrganizationsRequestWithBody(c.Server, id, userId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReplaceApplicationUserConsentOrganizations(ctx context.Context, id ApplicationIdRoot, userId UserId, body ReplaceApplicationUserConsentOrganizationsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReplaceApplicationUserConsentOrganizationsRequest(c.Server, id, userId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteApplicationUserConsentOrganization(ctx context.Context, id ApplicationIdRoot, userId UserId, organizationId OrganizationId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteApplicationUserConsentOrganizationRequest(c.Server, id, userId, organizationId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetHasuraAuth(ctx context.Context, params *GetHasuraAuthParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetHasuraAuthRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AssertSamlWithBody(ctx context.Context, connectorId ConnectorId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAssertSamlRequestWithBody(c.Server, connectorId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AssertSaml(ctx context.Context, connectorId ConnectorId, body AssertSamlJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAssertSamlRequest(c.Server, connectorId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AssertSingleSignOnSamlWithBody(ctx context.Context, connectorId ConnectorId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAssertSingleSignOnSamlRequestWithBody(c.Server, connectorId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AssertSingleSignOnSaml(ctx context.Context, connectorId ConnectorId, body AssertSingleSignOnSamlJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAssertSingleSignOnSamlRequest(c.Server, connectorId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteCaptchaProvider(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteCaptchaProviderRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCaptchaProvider(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCaptchaProviderRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateCaptchaProviderWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateCaptchaProviderRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateCaptchaProvider(ctx context.Context, body UpdateCaptchaProviderJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateCaptchaProviderRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAdminConsoleConfig(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAdminConsoleConfigRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateAdminConsoleConfigWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateAdminConsoleConfigRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateAdminConsoleConfig(ctx context.Context, body UpdateAdminConsoleConfigJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateAdminConsoleConfigRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListJwtCustomizers(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListJwtCustomizersRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TestJwtCustomizerWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTestJwtCustomizerRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TestJwtCustomizer(ctx context.Context, body TestJwtCustomizerJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTestJwtCustomizerRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteJwtCustomizer(ctx context.Context, tokenTypePath DeleteJwtCustomizerParamsTokenTypePath, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteJwtCustomizerRequest(c.Server, tokenTypePath)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetJwtCustomizer(ctx context.Context, tokenTypePath GetJwtCustomizerParamsTokenTypePath, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetJwtCustomizerRequest(c.Server, tokenTypePath)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateJwtCustomizerWithBody(ctx context.Context, tokenTypePath UpdateJwtCustomizerParamsTokenTypePath, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateJwtCustomizerRequestWithBody(c.Server, tokenTypePath, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateJwtCustomizer(ctx context.Context, tokenTypePath UpdateJwtCustomizerParamsTokenTypePath, body UpdateJwtCustomizerJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateJwtCustomizerRequest(c.Server, tokenTypePath, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpsertJwtCustomizerWithBody(ctx context.Context, tokenTypePath UpsertJwtCustomizerParamsTokenTypePath, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpsertJwtCustomizerRequestWithBody(c.Server, tokenTypePath, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpsertJwtCustomizer(ctx context.Context, tokenTypePath UpsertJwtCustomizerParamsTokenTypePath, body UpsertJwtCustomizerJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpsertJwtCustomizerRequest(c.Server, tokenTypePath, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetOidcKeys(ctx context.Context, keyType GetOidcKeysParamsKeyType, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOidcKeysRequest(c.Server, keyType)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RotateOidcKeysWithBody(ctx context.Context, keyType RotateOidcKeysParamsKeyType, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRotateOidcKeysRequestWithBody(c.Server, keyType, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RotateOidcKeys(ctx context.Context, keyType RotateOidcKeysParamsKeyType, body RotateOidcKeysJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRotateOidcKeysRequest(c.Server, keyType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteOidcKey(ctx context.Context, keyType DeleteOidcKeyParamsKeyType, keyId KeyId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteOidcKeyRequest(c.Server, keyType, keyId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListConnectorFactories(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListConnectorFactoriesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetConnectorFactory(ctx context.Context, id ConnectorFactoryIdRoot, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetConnectorFactoryRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListConnectors(ctx context.Context, params *ListConnectorsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListConnectorsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateConnectorWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateConnectorRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateConnector(ctx context.Context, body CreateConnectorJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateConnectorRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateConnectorAuthorizationUriWithBody(ctx context.Context, connectorId ConnectorId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateConnectorAuthorizationUriRequestWithBody(c.Server, connectorId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateConnectorAuthorizationUri(ctx context.Context, connectorId ConnectorId, body CreateConnectorAuthorizationUriJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateConnectorAuthorizationUriRequest(c.Server, connectorId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateConnectorTestWithBody(ctx context.Context, factoryId FactoryId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateConnectorTestRequestWithBody(c.Server, factoryId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateConnectorTest(ctx context.Context, factoryId FactoryId, body CreateConnectorTestJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateConnectorTestRequest(c.Server, factoryId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteConnector(ctx context.Context, id ConnectorIdRoot, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteConnectorRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetConnector(ctx context.Context, id ConnectorIdRoot, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetConnectorRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateConnectorWithBody(ctx context.Context, id ConnectorIdRoot, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateConnectorRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateConnector(ctx context.Context, id ConnectorIdRoot, body UpdateConnectorJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateConnectorRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListCustomPhrases(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListCustomPhrasesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteCustomPhrase(ctx context.Context, languageTag DeleteCustomPhraseParamsLanguageTag, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteCustomPhraseRequest(c.Server, languageTag)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCustomPhrase(ctx context.Context, languageTag GetCustomPhraseParamsLanguageTag, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCustomPhraseRequest(c.Server, languageTag)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReplaceCustomPhraseWithBody(ctx context.Context, languageTag ReplaceCustomPhraseParamsLanguageTag, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReplaceCustomPhraseRequestWithBody(c.Server, languageTag, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReplaceCustomPhrase(ctx context.Context, languageTag ReplaceCustomPhraseParamsLanguageTag, body ReplaceCustomPhraseJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReplaceCustomPhraseRequest(c.Server, languageTag, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetActiveUserCounts(ctx context.Context, params *GetActiveUserCountsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetActiveUserCountsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetNewUserCounts(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetNewUserCountsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTotalUserCount(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTotalUserCountRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListDomains(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListDomainsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateDomainWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateDomainRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateDomain(ctx context.Context, body CreateDomainJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateDomainRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteDomain(ctx context.Context, id DomainIdRoot, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteDomainRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetDomain(ctx context.Context, id DomainIdRoot, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetDomainRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteEmailTemplates(ctx context.Context, params *DeleteEmailTemplatesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteEmailTemplatesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListEmailTemplates(ctx context.Context, params *ListEmailTemplatesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListEmailTemplatesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReplaceEmailTemplatesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReplaceEmailTemplatesRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReplaceEmailTemplates(ctx context.Context, body ReplaceEmailTemplatesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReplaceEmailTemplatesRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteEmailTemplate(ctx context.Context, id EmailTemplateIdRoot, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteEmailTemplateRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetEmailTemplate(ctx context.Context, id EmailTemplateIdRoot, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetEmailTemplateRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateEmailTemplateDetailsWithBody(ctx context.Context, id EmailTemplateIdRoot, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateEmailTemplateDetailsRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateEmailTemplateDetails(ctx context.Context, id EmailTemplateIdRoot, body UpdateEmailTemplateDetailsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateEmailTemplateDetailsRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InitInteractionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInitInteractionRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InitInteraction(ctx context.Context, body InitInteractionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInitInteractionRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) IdentifyUserWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewIdentifyUserRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) IdentifyUser(ctx context.Context, body IdentifyUserJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewIdentifyUserRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateInteractionEventWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateInteractionEventRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateInteractionEvent(ctx context.Context, body UpdateInteractionEventJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateInteractionEventRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddUserProfileWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddUserProfileRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddUserProfile(ctx context.Context, body AddUserProfileJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddUserProfileRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BindMfaVerificationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBindMfaVerificationRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BindMfaVerification(ctx context.Context, body BindMfaVerificationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBindMfaVerificationRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SkipMfaBindingFlow(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSkipMfaBindingFlowRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ResetUserPasswordWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewResetUserPasswordRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ResetUserPassword(ctx context.Context, body ResetUserPasswordJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewResetUserPasswordRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetEnabledSsoConnectors(ctx context.Context, params *GetEnabledSsoConnectorsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetEnabledSsoConnectorsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SubmitInteraction(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSubmitInteractionRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GenerateBackupCodes(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGenerateBackupCodesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) VerifyBackupCodeWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewVerifyBackupCodeRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) VerifyBackupCode(ctx context.Context, body VerifyBackupCodeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewVerifyBackupCodeRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateNewPasswordIdentityVerificationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateNewPasswordIdentityVerificationRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateNewPasswordIdentityVerification(ctx context.Context, body CreateNewPasswordIdentityVerificationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateNewPasswordIdentityVerificationRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) VerifyOneTimeTokenVerificationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewVerifyOneTimeTokenVerificationRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) VerifyOneTimeTokenVerification(ctx context.Context, body VerifyOneTimeTokenVerificationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewVerifyOneTimeTokenVerificationRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreatePasswordVerificationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreatePasswordVerificationRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreatePasswordVerification(ctx context.Context, body CreatePasswordVerificationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreatePasswordVerificationRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateSocialVerificationWithBody(ctx context.Context, connectorId ConnectorId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateSocialVerificationRequestWithBody(c.Server, connectorId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateSocialVerification(ctx context.Context, connectorId ConnectorId, body CreateSocialVerificationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateSocialVerificationRequest(c.Server, connectorId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) VerifySocialVerificationWithBody(ctx context.Context, connectorId ConnectorId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewVerifySocialVerificationRequestWithBody(c.Server, connectorId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) VerifySocialVerification(ctx context.Context, connectorId ConnectorId, body VerifySocialVerificationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewVerifySocialVerificationRequest(c.Server, connectorId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateEnterpriseSsoVerificationWithBody(ctx context.Context, connectorId ConnectorId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateEnterpriseSsoVerificationRequestWithBody(c.Server, connectorId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateEnterpriseSsoVerification(ctx context.Context, connectorId ConnectorId, body CreateEnterpriseSsoVerificationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateEnterpriseSsoVerificationRequest(c.Server, connectorId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) VerifyEnterpriseSsoVerificationWithBody(ctx context.Context, connectorId ConnectorId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewVerifyEnterpriseSsoVerificationRequestWithBody(c.Server, connectorId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) VerifyEnterpriseSsoVerification(ctx context.Context, connectorId ConnectorId, body VerifyEnterpriseSsoVerificationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewVerifyEnterpriseSsoVerificationRequest(c.Server, connectorId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateTotpSecret(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateTotpSecretRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) VerifyTotpVerificationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewVerifyTotpVerificationRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) VerifyTotpVerification(ctx context.Context, body VerifyTotpVerificationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewVerifyTotpVerificationRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateAndSendVerificationCodeWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateAndSendVerificationCodeRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateAndSendVerificationCode(ctx context.Context, body CreateAndSendVerificationCodeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateAndSendVerificationCodeRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) VerifyVerificationCodeVerificationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewVerifyVerificationCodeVerificationRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) VerifyVerificationCodeVerification(ctx context.Context, body VerifyVerificationCodeVerificationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewVerifyVerificationCodeVerificationRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateWebAuthnAuthenticationVerification(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateWebAuthnAuthenticationVerificationRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) VerifyWebAuthnAuthenticationVerificationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewVerifyWebAuthnAuthenticationVerificationRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) VerifyWebAuthnAuthenticationVerification(ctx context.Context, body VerifyWebAuthnAuthenticationVerificationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewVerifyWebAuthnAuthenticationVerificationRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateWebAuthnRegistrationVerification(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateWebAuthnRegistrationVerificationRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) VerifyWebAuthnRegistrationVerificationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewVerifyWebAuthnRegistrationVerificationRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) VerifyWebAuthnRegistrationVerification(ctx context.Context, body VerifyWebAuthnRegistrationVerificationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewVerifyWebAuthnRegistrationVerificationRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListHooks(ctx context.Context, params *ListHooksParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListHooksRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateHookWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateHookRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateHook(ctx context.Context, body CreateHookJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateHookRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteHook(ctx context.Context, id HookIdRoot, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteHookRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetHook(ctx context.Context, id HookIdRoot, params *GetHookParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetHookRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateHookWithBody(ctx context.Context, id HookIdRoot, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateHookRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateHook(ctx context.Context, id HookIdRoot, body UpdateHookJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateHookRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListHookRecentLogs(ctx context.Context, id HookIdRoot, params *ListHookRecentLogsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListHookRecentLogsRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateHookSigningKey(ctx context.Context, id HookIdRoot, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateHookSigningKeyRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateHookTestWithBody(ctx context.Context, id HookIdRoot, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateHookTestRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateHookTest(ctx context.Context, id HookIdRoot, body CreateHookTestJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateHookTestRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteApiInteraction(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteApiInteractionRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiInteractionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiInteractionRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiInteraction(ctx context.Context, body PutApiInteractionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiInteractionRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiInteractionBindMfaWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiInteractionBindMfaRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiInteractionBindMfa(ctx context.Context, body PostApiInteractionBindMfaJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiInteractionBindMfaRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiInteractionConsent(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiInteractionConsentRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiInteractionConsentWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiInteractionConsentRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiInteractionConsent(ctx context.Context, body PostApiInteractionConsentJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiInteractionConsentRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiInteractionEventWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiInteractionEventRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiInteractionEvent(ctx context.Context, body PutApiInteractionEventJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiInteractionEventRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchApiInteractionIdentifiersWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchApiInteractionIdentifiersRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchApiInteractionIdentifiers(ctx context.Context, body PatchApiInteractionIdentifiersJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchApiInteractionIdentifiersRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiInteractionMfaWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiInteractionMfaRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiInteractionMfa(ctx context.Context, body PutApiInteractionMfaJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiInteractionMfaRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiInteractionMfaSkippedWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiInteractionMfaSkippedRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiInteractionMfaSkipped(ctx context.Context, body PutApiInteractionMfaSkippedJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiInteractionMfaSkippedRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteApiInteractionProfile(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteApiInteractionProfileRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchApiInteractionProfileWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchApiInteractionProfileRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchApiInteractionProfile(ctx context.Context, body PatchApiInteractionProfileJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchApiInteractionProfileRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiInteractionProfileWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiInteractionProfileRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiInteractionProfile(ctx context.Context, body PutApiInteractionProfileJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiInteractionProfileRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiInteractionSingleSignOnConnectors(ctx context.Context, params *GetApiInteractionSingleSignOnConnectorsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiInteractionSingleSignOnConnectorsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiInteractionSingleSignOnConnectorIdAuthenticationWithBody(ctx context.Context, connectorId ConnectorId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiInteractionSingleSignOnConnectorIdAuthenticationRequestWithBody(c.Server, connectorId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiInteractionSingleSignOnConnectorIdAuthentication(ctx context.Context, connectorId ConnectorId, body PostApiInteractionSingleSignOnConnectorIdAuthenticationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiInteractionSingleSignOnConnectorIdAuthenticationRequest(c.Server, connectorId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiInteractionSingleSignOnConnectorIdAuthorizationUrlWithBody(ctx context.Context, connectorId ConnectorId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiInteractionSingleSignOnConnectorIdAuthorizationUrlRequestWithBody(c.Server, connectorId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiInteractionSingleSignOnConnectorIdAuthorizationUrl(ctx context.Context, connectorId ConnectorId, body PostApiInteractionSingleSignOnConnectorIdAuthorizationUrlJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiInteractionSingleSignOnConnectorIdAuthorizationUrlRequest(c.Server, connectorId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiInteractionSingleSignOnConnectorIdRegistration(ctx context.Context, connectorId ConnectorId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiInteractionSingleSignOnConnectorIdRegistrationRequest(c.Server, connectorId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiInteractionSubmit(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiInteractionSubmitRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiInteractionVerificationSocialAuthorizationUriWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiInteractionVerificationSocialAuthorizationUriRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiInteractionVerificationSocialAuthorizationUri(ctx context.Context, body PostApiInteractionVerificationSocialAuthorizationUriJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiInteractionVerificationSocialAuthorizationUriRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiInteractionVerificationTotp(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiInteractionVerificationTotpRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiInteractionVerificationVerificationCodeWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiInteractionVerificationVerificationCodeRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiInteractionVerificationVerificationCode(ctx context.Context, body PostApiInteractionVerificationVerificationCodeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiInteractionVerificationVerificationCodeRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiInteractionVerificationWebauthnAuthentication(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiInteractionVerificationWebauthnAuthenticationRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiInteractionVerificationWebauthnRegistration(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiInteractionVerificationWebauthnRegistrationRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListLogs(ctx context.Context, params *ListLogsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListLogsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetLog(ctx context.Context, id LogIdRoot, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetLogRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetProfile(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetProfileRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateProfileWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateProfileRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateProfile(ctx context.Context, body UpdateProfileJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateProfileRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddUserIdentitiesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddUserIdentitiesRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddUserIdentities(ctx context.Context, body AddUserIdentitiesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddUserIdentitiesRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteIdentity(ctx context.Context, target string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteIdentityRequest(c.Server, target)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetMfaVerifications(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetMfaVerificationsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddMfaVerificationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddMfaVerificationRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddMfaVerification(ctx context.Context, body AddMfaVerificationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddMfaVerificationRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteMfaVerification(ctx context.Context, verificationId VerificationId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteMfaVerificationRequest(c.Server, verificationId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateMfaVerificationNameWithBody(ctx context.Context, verificationId VerificationId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateMfaVerificationNameRequestWithBody(c.Server, verificationId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateMfaVerificationName(ctx context.Context, verificationId VerificationId, body UpdateMfaVerificationNameJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateMfaVerificationNameRequest(c.Server, verificationId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdatePasswordWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdatePasswordRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdatePassword(ctx context.Context, body UpdatePasswordJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdatePasswordRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeletePrimaryEmail(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeletePrimaryEmailRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdatePrimaryEmailWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdatePrimaryEmailRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdatePrimaryEmail(ctx context.Context, body UpdatePrimaryEmailJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdatePrimaryEmailRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeletePrimaryPhone(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeletePrimaryPhoneRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdatePrimaryPhoneWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdatePrimaryPhoneRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdatePrimaryPhone(ctx context.Context, body UpdatePrimaryPhoneJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdatePrimaryPhoneRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateOtherProfileWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateOtherProfileRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateOtherProfile(ctx context.Context, body UpdateOtherProfileJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateOtherProfileRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListOneTimeTokens(ctx context.Context, params *ListOneTimeTokensParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListOneTimeTokensRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddOneTimeTokensWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddOneTimeTokensRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddOneTimeTokens(ctx context.Context, body AddOneTimeTokensJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddOneTimeTokensRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) VerifyOneTimeTokenWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewVerifyOneTimeTokenRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) VerifyOneTimeToken(ctx context.Context, body VerifyOneTimeTokenJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewVerifyOneTimeTokenRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteOneTimeToken(ctx context.Context, id OneTimeTokenIdRoot, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteOneTimeTokenRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetOneTimeToken(ctx context.Context, id OneTimeTokenIdRoot, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOneTimeTokenRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReplaceOneTimeTokenStatusWithBody(ctx context.Context, id OneTimeTokenIdRoot, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReplaceOneTimeTokenStatusRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReplaceOneTimeTokenStatus(ctx context.Context, id OneTimeTokenIdRoot, body ReplaceOneTimeTokenStatusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReplaceOneTimeTokenStatusRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListOrganizationInvitations(ctx context.Context, params *ListOrganizationInvitationsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListOrganizationInvitationsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateOrganizationInvitationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateOrganizationInvitationRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateOrganizationInvitation(ctx context.Context, body CreateOrganizationInvitationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateOrganizationInvitationRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteOrganizationInvitation(ctx context.Context, id OrganizationInvitationIdRoot, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteOrganizationInvitationRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetOrganizationInvitation(ctx context.Context, id OrganizationInvitationIdRoot, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOrganizationInvitationRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateOrganizationInvitationMessageWithBody(ctx context.Context, id OrganizationInvitationIdRoot, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateOrganizationInvitationMessageRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateOrganizationInvitationMessage(ctx context.Context, id OrganizationInvitationIdRoot, body CreateOrganizationInvitationMessageJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateOrganizationInvitationMessageRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReplaceOrganizationInvitationStatusWithBody(ctx context.Context, id OrganizationInvitationIdRoot, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReplaceOrganizationInvitationStatusRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReplaceOrganizationInvitationStatus(ctx context.Context, id OrganizationInvitationIdRoot, body ReplaceOrganizationInvitationStatusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReplaceOrganizationInvitationStatusRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListOrganizationRoles(ctx context.Context, params *ListOrganizationRolesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListOrganizationRolesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateOrganizationRoleWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateOrganizationRoleRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateOrganizationRole(ctx context.Context, body CreateOrganizationRoleJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateOrganizationRoleRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteOrganizationRole(ctx context.Context, id OrganizationRoleIdRoot, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteOrganizationRoleRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetOrganizationRole(ctx context.Context, id OrganizationRoleIdRoot, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOrganizationRoleRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateOrganizationRoleWithBody(ctx context.Context, id OrganizationRoleIdRoot, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateOrganizationRoleRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateOrganizationRole(ctx context.Context, id OrganizationRoleIdRoot, body UpdateOrganizationRoleJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateOrganizationRoleRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListOrganizationRoleResourceScopes(ctx context.Context, id OrganizationRoleIdRoot, params *ListOrganizationRoleResourceScopesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListOrganizationRoleResourceScopesRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateOrganizationRoleResourceScopeWithBody(ctx context.Context, id OrganizationRoleIdRoot, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateOrganizationRoleResourceScopeRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateOrganizationRoleResourceScope(ctx context.Context, id OrganizationRoleIdRoot, body CreateOrganizationRoleResourceScopeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateOrganizationRoleResourceScopeRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReplaceOrganizationRoleResourceScopesWithBody(ctx context.Context, id OrganizationRoleIdRoot, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReplaceOrganizationRoleResourceScopesRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReplaceOrganizationRoleResourceScopes(ctx context.Context, id OrganizationRoleIdRoot, body ReplaceOrganizationRoleResourceScopesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReplaceOrganizationRoleResourceScopesRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteOrganizationRoleResourceScope(ctx context.Context, id OrganizationRoleIdRoot, scopeId ScopeId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteOrganizationRoleResourceScopeRequest(c.Server, id, scopeId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListOrganizationRoleScopes(ctx context.Context, id OrganizationRoleIdRoot, params *ListOrganizationRoleScopesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListOrganizationRoleScopesRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateOrganizationRoleScopeWithBody(ctx context.Context, id OrganizationRoleIdRoot, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateOrganizationRoleScopeRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateOrganizationRoleScope(ctx context.Context, id OrganizationRoleIdRoot, body CreateOrganizationRoleScopeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateOrganizationRoleScopeRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReplaceOrganizationRoleScopesWithBody(ctx context.Context, id OrganizationRoleIdRoot, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReplaceOrganizationRoleScopesRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReplaceOrganizationRoleScopes(ctx context.Context, id OrganizationRoleIdRoot, body ReplaceOrganizationRoleScopesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReplaceOrganizationRoleScopesRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteOrganizationRoleScope(ctx context.Context, id OrganizationRoleIdRoot, organizationScopeId OrganizationScopeId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteOrganizationRoleScopeRequest(c.Server, id, organizationScopeId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListOrganizationScopes(ctx context.Context, params *ListOrganizationScopesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListOrganizationScopesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateOrganizationScopeWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateOrganizationScopeRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateOrganizationScope(ctx context.Context, body CreateOrganizationScopeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateOrganizationScopeRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteOrganizationScope(ctx context.Context, id OrganizationScopeIdRoot, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteOrganizationScopeRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetOrganizationScope(ctx context.Context, id OrganizationScopeIdRoot, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOrganizationScopeRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateOrganizationScopeWithBody(ctx context.Context, id OrganizationScopeIdRoot, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateOrganizationScopeRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateOrganizationScope(ctx context.Context, id OrganizationScopeIdRoot, body UpdateOrganizationScopeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateOrganizationScopeRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListOrganizations(ctx context.Context, params *ListOrganizationsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListOrganizationsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateOrganizationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateOrganizationRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateOrganization(ctx context.Context, body CreateOrganizationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateOrganizationRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteOrganization(ctx context.Context, id OrganizationIdRoot, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteOrganizationRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetOrganization(ctx context.Context, id OrganizationIdRoot, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOrganizationRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateOrganizationWithBody(ctx context.Context, id OrganizationIdRoot, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateOrganizationRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateOrganization(ctx context.Context, id OrganizationIdRoot, body UpdateOrganizationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateOrganizationRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListOrganizationApplications(ctx context.Context, id OrganizationIdRoot, params *ListOrganizationApplicationsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListOrganizationApplicationsRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddOrganizationApplicationsWithBody(ctx context.Context, id OrganizationIdRoot, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddOrganizationApplicationsRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddOrganizationApplications(ctx context.Context, id OrganizationIdRoot, body AddOrganizationApplicationsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddOrganizationApplicationsRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReplaceOrganizationApplicationsWithBody(ctx context.Context, id OrganizationIdRoot, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReplaceOrganizationApplicationsRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReplaceOrganizationApplications(ctx context.Context, id OrganizationIdRoot, body ReplaceOrganizationApplicationsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReplaceOrganizationApplicationsRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AssignOrganizationRolesToApplicationsWithBody(ctx context.Context, id OrganizationIdRoot, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAssignOrganizationRolesToApplicationsRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AssignOrganizationRolesToApplications(ctx context.Context, id OrganizationIdRoot, body AssignOrganizationRolesToApplicationsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAssignOrganizationRolesToApplicationsRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteOrganizationApplication(ctx context.Context, id OrganizationIdRoot, applicationId ApplicationId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteOrganizationApplicationRequest(c.Server, id, applicationId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListOrganizationApplicationRoles(ctx context.Context, id OrganizationIdRoot, applicationId ApplicationId, params *ListOrganizationApplicationRolesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListOrganizationApplicationRolesRequest(c.Server, id, applicationId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AssignOrganizationRolesToApplicationWithBody(ctx context.Context, id OrganizationIdRoot, applicationId ApplicationId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAssignOrganizationRolesToApplicationRequestWithBody(c.Server, id, applicationId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AssignOrganizationRolesToApplication(ctx context.Context, id OrganizationIdRoot, applicationId ApplicationId, body AssignOrganizationRolesToApplicationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAssignOrganizationRolesToApplicationRequest(c.Server, id, applicationId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReplaceOrganizationApplicationRolesWithBody(ctx context.Context, id OrganizationIdRoot, applicationId ApplicationId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReplaceOrganizationApplicationRolesRequestWithBody(c.Server, id, applicationId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReplaceOrganizationApplicationRoles(ctx context.Context, id OrganizationIdRoot, applicationId ApplicationId, body ReplaceOrganizationApplicationRolesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReplaceOrganizationApplicationRolesRequest(c.Server, id, applicationId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteOrganizationApplicationRole(ctx context.Context, id OrganizationIdRoot, applicationId ApplicationId, organizationRoleId OrganizationRoleId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteOrganizationApplicationRoleRequest(c.Server, id, applicationId, organizationRoleId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListOrganizationJitEmailDomains(ctx context.Context, id OrganizationIdRoot, params *ListOrganizationJitEmailDomainsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListOrganizationJitEmailDomainsRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateOrganizationJitEmailDomainWithBody(ctx context.Context, id OrganizationIdRoot, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateOrganizationJitEmailDomainRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateOrganizationJitEmailDomain(ctx context.Context, id OrganizationIdRoot, body CreateOrganizationJitEmailDomainJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateOrganizationJitEmailDomainRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReplaceOrganizationJitEmailDomainsWithBody(ctx context.Context, id OrganizationIdRoot, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReplaceOrganizationJitEmailDomainsRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReplaceOrganizationJitEmailDomains(ctx context.Context, id OrganizationIdRoot, body ReplaceOrganizationJitEmailDomainsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReplaceOrganizationJitEmailDomainsRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteOrganizationJitEmailDomain(ctx context.Context, id OrganizationIdRoot, emailDomain string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteOrganizationJitEmailDomainRequest(c.Server, id, emailDomain)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListOrganizationJitRoles(ctx context.Context, id OrganizationIdRoot, params *ListOrganizationJitRolesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListOrganizationJitRolesRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateOrganizationJitRoleWithBody(ctx context.Context, id OrganizationIdRoot, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateOrganizationJitRoleRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateOrganizationJitRole(ctx context.Context, id OrganizationIdRoot, body CreateOrganizationJitRoleJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateOrganizationJitRoleRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReplaceOrganizationJitRolesWithBody(ctx context.Context, id OrganizationIdRoot, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReplaceOrganizationJitRolesRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReplaceOrganizationJitRoles(ctx context.Context, id OrganizationIdRoot, body ReplaceOrganizationJitRolesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReplaceOrganizationJitRolesRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteOrganizationJitRole(ctx context.Context, id OrganizationIdRoot, organizationRoleId OrganizationRoleId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteOrganizationJitRoleRequest(c.Server, id, organizationRoleId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListOrganizationJitSsoConnectors(ctx context.Context, id OrganizationIdRoot, params *ListOrganizationJitSsoConnectorsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListOrganizationJitSsoConnectorsRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateOrganizationJitSsoConnectorWithBody(ctx context.Context, id OrganizationIdRoot, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateOrganizationJitSsoConnectorRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateOrganizationJitSsoConnector(ctx context.Context, id OrganizationIdRoot, body CreateOrganizationJitSsoConnectorJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateOrganizationJitSsoConnectorRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReplaceOrganizationJitSsoConnectorsWithBody(ctx context.Context, id OrganizationIdRoot, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReplaceOrganizationJitSsoConnectorsRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReplaceOrganizationJitSsoConnectors(ctx context.Context, id OrganizationIdRoot, body ReplaceOrganizationJitSsoConnectorsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReplaceOrganizationJitSsoConnectorsRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteOrganizationJitSsoConnector(ctx context.Context, id OrganizationIdRoot, ssoConnectorId SsoConnectorId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteOrganizationJitSsoConnectorRequest(c.Server, id, ssoConnectorId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListOrganizationUsers(ctx context.Context, id OrganizationIdRoot, params *ListOrganizationUsersParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListOrganizationUsersRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddOrganizationUsersWithBody(ctx context.Context, id OrganizationIdRoot, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddOrganizationUsersRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddOrganizationUsers(ctx context.Context, id OrganizationIdRoot, body AddOrganizationUsersJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddOrganizationUsersRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReplaceOrganizationUsersWithBody(ctx context.Context, id OrganizationIdRoot, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReplaceOrganizationUsersRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReplaceOrganizationUsers(ctx context.Context, id OrganizationIdRoot, body ReplaceOrganizationUsersJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReplaceOrganizationUsersRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AssignOrganizationRolesToUsersWithBody(ctx context.Context, id OrganizationIdRoot, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAssignOrganizationRolesToUsersRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AssignOrganizationRolesToUsers(ctx context.Context, id OrganizationIdRoot, body AssignOrganizationRolesToUsersJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAssignOrganizationRolesToUsersRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteOrganizationUser(ctx context.Context, id OrganizationIdRoot, userId UserId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteOrganizationUserRequest(c.Server, id, userId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListOrganizationUserRoles(ctx context.Context, id OrganizationIdRoot, userId UserId, params *ListOrganizationUserRolesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListOrganizationUserRolesRequest(c.Server, id, userId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AssignOrganizationRolesToUserWithBody(ctx context.Context, id OrganizationIdRoot, userId UserId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAssignOrganizationRolesToUserRequestWithBody(c.Server, id, userId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AssignOrganizationRolesToUser(ctx context.Context, id OrganizationIdRoot, userId UserId, body AssignOrganizationRolesToUserJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAssignOrganizationRolesToUserRequest(c.Server, id, userId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReplaceOrganizationUserRolesWithBody(ctx context.Context, id OrganizationIdRoot, userId UserId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReplaceOrganizationUserRolesRequestWithBody(c.Server, id, userId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReplaceOrganizationUserRoles(ctx context.Context, id OrganizationIdRoot, userId UserId, body ReplaceOrganizationUserRolesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReplaceOrganizationUserRolesRequest(c.Server, id, userId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteOrganizationUserRole(ctx context.Context, id OrganizationIdRoot, userId UserId, organizationRoleId OrganizationRoleId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteOrganizationUserRoleRequest(c.Server, id, userId, organizationRoleId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListOrganizationUserScopes(ctx context.Context, id OrganizationIdRoot, userId UserId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListOrganizationUserScopesRequest(c.Server, id, userId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListResources(ctx context.Context, params *ListResourcesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListResourcesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateResourceWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateResourceRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateResource(ctx context.Context, body CreateResourceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateResourceRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteResource(ctx context.Context, id ResourceIdRoot, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteResourceRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetResource(ctx context.Context, id ResourceIdRoot, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetResourceRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateResourceWithBody(ctx context.Context, id ResourceIdRoot, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateResourceRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateResource(ctx context.Context, id ResourceIdRoot, body UpdateResourceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateResourceRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateResourceIsDefaultWithBody(ctx context.Context, id ResourceIdRoot, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateResourceIsDefaultRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateResourceIsDefault(ctx context.Context, id ResourceIdRoot, body UpdateResourceIsDefaultJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateResourceIsDefaultRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListResourceScopes(ctx context.Context, resourceId ResourceId, params *ListResourceScopesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListResourceScopesRequest(c.Server, resourceId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateResourceScopeWithBody(ctx context.Context, resourceId ResourceId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateResourceScopeRequestWithBody(c.Server, resourceId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateResourceScope(ctx context.Context, resourceId ResourceId, body CreateResourceScopeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateResourceScopeRequest(c.Server, resourceId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteResourceScope(ctx context.Context, resourceId ResourceId, scopeId ScopeId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteResourceScopeRequest(c.Server, resourceId, scopeId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateResourceScopeWithBody(ctx context.Context, resourceId ResourceId, scopeId ScopeId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateResourceScopeRequestWithBody(c.Server, resourceId, scopeId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateResourceScope(ctx context.Context, resourceId ResourceId, scopeId ScopeId, body UpdateResourceScopeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateResourceScopeRequest(c.Server, resourceId, scopeId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListRoles(ctx context.Context, params *ListRolesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListRolesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateRoleWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateRoleRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateRole(ctx context.Context, body CreateRoleJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateRoleRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteRole(ctx context.Context, id RoleIdRoot, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteRoleRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRole(ctx context.Context, id RoleIdRoot, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRoleRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateRoleWithBody(ctx context.Context, id RoleIdRoot, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateRoleRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateRole(ctx context.Context, id RoleIdRoot, body UpdateRoleJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateRoleRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListRoleApplications(ctx context.Context, id RoleIdRoot, params *ListRoleApplicationsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListRoleApplicationsRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateRoleApplicationWithBody(ctx context.Context, id RoleIdRoot, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateRoleApplicationRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateRoleApplication(ctx context.Context, id RoleIdRoot, body CreateRoleApplicationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateRoleApplicationRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteRoleApplication(ctx context.Context, id RoleIdRoot, applicationId ApplicationId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteRoleApplicationRequest(c.Server, id, applicationId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListRoleScopes(ctx context.Context, id RoleIdRoot, params *ListRoleScopesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListRoleScopesRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateRoleScopeWithBody(ctx context.Context, id RoleIdRoot, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateRoleScopeRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateRoleScope(ctx context.Context, id RoleIdRoot, body CreateRoleScopeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateRoleScopeRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteRoleScope(ctx context.Context, id RoleIdRoot, scopeId ScopeId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteRoleScopeRequest(c.Server, id, scopeId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListRoleUsers(ctx context.Context, id RoleIdRoot, params *ListRoleUsersParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListRoleUsersRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateRoleUserWithBody(ctx context.Context, id RoleIdRoot, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateRoleUserRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateRoleUser(ctx context.Context, id RoleIdRoot, body CreateRoleUserJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateRoleUserRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteRoleUser(ctx context.Context, id RoleIdRoot, userId UserId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteRoleUserRequest(c.Server, id, userId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateSamlApplicationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateSamlApplicationRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateSamlApplication(ctx context.Context, body CreateSamlApplicationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateSamlApplicationRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteSamlApplication(ctx context.Context, id SamlApplicationIdRoot, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteSamlApplicationRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSamlApplication(ctx context.Context, id SamlApplicationIdRoot, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSamlApplicationRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateSamlApplicationWithBody(ctx context.Context, id SamlApplicationIdRoot, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateSamlApplicationRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateSamlApplication(ctx context.Context, id SamlApplicationIdRoot, body UpdateSamlApplicationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateSamlApplicationRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSamlApplicationCallback(ctx context.Context, id SamlApplicationIdRoot, params *GetSamlApplicationCallbackParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSamlApplicationCallbackRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListSamlApplicationMetadata(ctx context.Context, id SamlApplicationIdRoot, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListSamlApplicationMetadataRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListSamlApplicationSecrets(ctx context.Context, id SamlApplicationIdRoot, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListSamlApplicationSecretsRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateSamlApplicationSecretWithBody(ctx context.Context, id SamlApplicationIdRoot, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateSamlApplicationSecretRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateSamlApplicationSecret(ctx context.Context, id SamlApplicationIdRoot, body CreateSamlApplicationSecretJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateSamlApplicationSecretRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteSamlApplicationSecret(ctx context.Context, id SamlApplicationIdRoot, secretId SecretId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteSamlApplicationSecretRequest(c.Server, id, secretId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateSamlApplicationSecretWithBody(ctx context.Context, id SamlApplicationIdRoot, secretId SecretId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateSamlApplicationSecretRequestWithBody(c.Server, id, secretId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateSamlApplicationSecret(ctx context.Context, id SamlApplicationIdRoot, secretId SecretId, body UpdateSamlApplicationSecretJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateSamlApplicationSecretRequest(c.Server, id, secretId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSamlAuthn(ctx context.Context, id SamlIdRoot, params *GetSamlAuthnParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSamlAuthnRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateSamlAuthnWithBody(ctx context.Context, id SamlIdRoot, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateSamlAuthnRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateSamlAuthn(ctx context.Context, id SamlIdRoot, body CreateSamlAuthnJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateSamlAuthnRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateSamlAuthnWithFormdataBody(ctx context.Context, id SamlIdRoot, body CreateSamlAuthnFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateSamlAuthnRequestWithFormdataBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteSentinelActivitiesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteSentinelActivitiesRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteSentinelActivities(ctx context.Context, body DeleteSentinelActivitiesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteSentinelActivitiesRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSignInExp(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSignInExpRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateSignInExpWithBody(ctx context.Context, params *UpdateSignInExpParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateSignInExpRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateSignInExp(ctx context.Context, params *UpdateSignInExpParams, body UpdateSignInExpJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateSignInExpRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CheckPasswordWithDefaultSignInExperienceWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCheckPasswordWithDefaultSignInExperienceRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CheckPasswordWithDefaultSignInExperience(ctx context.Context, body CheckPasswordWithDefaultSignInExperienceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCheckPasswordWithDefaultSignInExperienceRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UploadCustomUiAssetsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUploadCustomUiAssetsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListSsoConnectorProviders(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListSsoConnectorProvidersRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListSsoConnectors(ctx context.Context, params *ListSsoConnectorsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListSsoConnectorsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateSsoConnectorWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateSsoConnectorRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateSsoConnector(ctx context.Context, body CreateSsoConnectorJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateSsoConnectorRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteSsoConnector(ctx context.Context, id SsoConnectorIdRoot, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteSsoConnectorRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSsoConnector(ctx context.Context, id SsoConnectorIdRoot, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSsoConnectorRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateSsoConnectorWithBody(ctx context.Context, id SsoConnectorIdRoot, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateSsoConnectorRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateSsoConnector(ctx context.Context, id SsoConnectorIdRoot, body UpdateSsoConnectorJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateSsoConnectorRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetStatus(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetStatusRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateSubjectTokenWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateSubjectTokenRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateSubjectToken(ctx context.Context, body CreateSubjectTokenJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateSubjectTokenRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSwaggerJson(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSwaggerJsonRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSystemApplicationConfig(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSystemApplicationConfigRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateUserAssetWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateUserAssetRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUserAssetServiceStatus(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUserAssetServiceStatusRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListUsers(ctx context.Context, params *ListUsersParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListUsersRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateUserWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateUserRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateUser(ctx context.Context, body CreateUserJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateUserRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteUser(ctx context.Context, userId UserId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteUserRequest(c.Server, userId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUser(ctx context.Context, userId UserId, params *GetUserParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUserRequest(c.Server, userId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateUserWithBody(ctx context.Context, userId UserId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateUserRequestWithBody(c.Server, userId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateUser(ctx context.Context, userId UserId, body UpdateUserJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateUserRequest(c.Server, userId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListUserCustomData(ctx context.Context, userId UserId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListUserCustomDataRequest(c.Server, userId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateUserCustomDataWithBody(ctx context.Context, userId UserId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateUserCustomDataRequestWithBody(c.Server, userId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateUserCustomData(ctx context.Context, userId UserId, body UpdateUserCustomDataJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateUserCustomDataRequest(c.Server, userId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUserHasPassword(ctx context.Context, userId UserId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUserHasPasswordRequest(c.Server, userId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateUserIdentityWithBody(ctx context.Context, userId UserId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateUserIdentityRequestWithBody(c.Server, userId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateUserIdentity(ctx context.Context, userId UserId, body CreateUserIdentityJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateUserIdentityRequest(c.Server, userId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteUserIdentity(ctx context.Context, userId UserId, target string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteUserIdentityRequest(c.Server, userId, target)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReplaceUserIdentityWithBody(ctx context.Context, userId UserId, target string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReplaceUserIdentityRequestWithBody(c.Server, userId, target, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReplaceUserIdentity(ctx context.Context, userId UserId, target string, body ReplaceUserIdentityJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReplaceUserIdentityRequest(c.Server, userId, target, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateUserIsSuspendedWithBody(ctx context.Context, userId UserId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateUserIsSuspendedRequestWithBody(c.Server, userId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateUserIsSuspended(ctx context.Context, userId UserId, body UpdateUserIsSuspendedJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateUserIsSuspendedRequest(c.Server, userId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListUserMfaVerifications(ctx context.Context, userId UserId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListUserMfaVerificationsRequest(c.Server, userId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateUserMfaVerificationWithBody(ctx context.Context, userId UserId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateUserMfaVerificationRequestWithBody(c.Server, userId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateUserMfaVerification(ctx context.Context, userId UserId, body CreateUserMfaVerificationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateUserMfaVerificationRequest(c.Server, userId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteUserMfaVerification(ctx context.Context, userId UserId, verificationId VerificationId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteUserMfaVerificationRequest(c.Server, userId, verificationId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListUserOrganizations(ctx context.Context, userId UserId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListUserOrganizationsRequest(c.Server, userId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateUserPasswordWithBody(ctx context.Context, userId UserId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateUserPasswordRequestWithBody(c.Server, userId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateUserPassword(ctx context.Context, userId UserId, body UpdateUserPasswordJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateUserPasswordRequest(c.Server, userId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) VerifyUserPasswordWithBody(ctx context.Context, userId UserId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewVerifyUserPasswordRequestWithBody(c.Server, userId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) VerifyUserPassword(ctx context.Context, userId UserId, body VerifyUserPasswordJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewVerifyUserPasswordRequest(c.Server, userId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListUserPersonalAccessTokens(ctx context.Context, userId UserId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListUserPersonalAccessTokensRequest(c.Server, userId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateUserPersonalAccessTokenWithBody(ctx context.Context, userId UserId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateUserPersonalAccessTokenRequestWithBody(c.Server, userId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateUserPersonalAccessToken(ctx context.Context, userId UserId, body CreateUserPersonalAccessTokenJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateUserPersonalAccessTokenRequest(c.Server, userId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteUserPersonalAccessToken(ctx context.Context, userId UserId, name string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteUserPersonalAccessTokenRequest(c.Server, userId, name)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateUserPersonalAccessTokenWithBody(ctx context.Context, userId UserId, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateUserPersonalAccessTokenRequestWithBody(c.Server, userId, name, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateUserPersonalAccessToken(ctx context.Context, userId UserId, name string, body UpdateUserPersonalAccessTokenJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateUserPersonalAccessTokenRequest(c.Server, userId, name, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateUserProfileWithBody(ctx context.Context, userId UserId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateUserProfileRequestWithBody(c.Server, userId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateUserProfile(ctx context.Context, userId UserId, body UpdateUserProfileJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateUserProfileRequest(c.Server, userId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListUserRoles(ctx context.Context, userId UserId, params *ListUserRolesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListUserRolesRequest(c.Server, userId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AssignUserRolesWithBody(ctx context.Context, userId UserId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAssignUserRolesRequestWithBody(c.Server, userId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AssignUserRoles(ctx context.Context, userId UserId, body AssignUserRolesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAssignUserRolesRequest(c.Server, userId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReplaceUserRolesWithBody(ctx context.Context, userId UserId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReplaceUserRolesRequestWithBody(c.Server, userId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReplaceUserRoles(ctx context.Context, userId UserId, body ReplaceUserRolesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReplaceUserRolesRequest(c.Server, userId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteUserRole(ctx context.Context, userId UserId, roleId RoleId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteUserRoleRequest(c.Server, userId, roleId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateVerificationCodeWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateVerificationCodeRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateVerificationCode(ctx context.Context, body CreateVerificationCodeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateVerificationCodeRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) VerifyVerificationCodeWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewVerifyVerificationCodeRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) VerifyVerificationCode(ctx context.Context, body VerifyVerificationCodeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewVerifyVerificationCodeRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateVerificationByPasswordWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateVerificationByPasswordRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateVerificationByPassword(ctx context.Context, body CreateVerificationByPasswordJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateVerificationByPasswordRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateVerificationBySocialWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateVerificationBySocialRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateVerificationBySocial(ctx context.Context, body CreateVerificationBySocialJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateVerificationBySocialRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) VerifyVerificationBySocialWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewVerifyVerificationBySocialRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) VerifyVerificationBySocial(ctx context.Context, body VerifyVerificationBySocialJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewVerifyVerificationBySocialRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateVerificationByVerificationCodeWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateVerificationByVerificationCodeRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateVerificationByVerificationCode(ctx context.Context, body CreateVerificationByVerificationCodeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateVerificationByVerificationCodeRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) VerifyVerificationByVerificationCodeWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewVerifyVerificationByVerificationCodeRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) VerifyVerificationByVerificationCode(ctx context.Context, body VerifyVerificationByVerificationCodeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewVerifyVerificationByVerificationCodeRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GenerateWebAuthnRegistrationOptions(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGenerateWebAuthnRegistrationOptionsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) VerifyWebAuthnRegistrationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewVerifyWebAuthnRegistrationRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) VerifyWebAuthnRegistration(ctx context.Context, body VerifyWebAuthnRegistrationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewVerifyWebAuthnRegistrationRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetWellKnownExperienceRequest generates requests for GetWellKnownExperience
func NewGetWellKnownExperienceRequest(server string, params *GetWellKnownExperienceParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/.well-known/experience")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.OrganizationId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "organizationId", runtime.ParamLocationQuery, *params.OrganizationId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.AppId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "appId", runtime.ParamLocationQuery, *params.AppId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetWellKnownExperienceOpenapiJsonRequest generates requests for GetWellKnownExperienceOpenapiJson
func NewGetWellKnownExperienceOpenapiJsonRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/.well-known/experience.openapi.json")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetWellKnownManagementOpenapiJsonRequest generates requests for GetWellKnownManagementOpenapiJson
func NewGetWellKnownManagementOpenapiJsonRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/.well-known/management.openapi.json")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSignInExperiencePhrasesRequest generates requests for GetSignInExperiencePhrases
func NewGetSignInExperiencePhrasesRequest(server string, params *GetSignInExperiencePhrasesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/.well-known/phrases")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Lng != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "lng", runtime.ParamLocationQuery, *params.Lng); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSignInExperienceConfigRequest generates requests for GetSignInExperienceConfig
func NewGetSignInExperienceConfigRequest(server string, params *GetSignInExperienceConfigParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/.well-known/sign-in-exp")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.OrganizationId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "organizationId", runtime.ParamLocationQuery, *params.OrganizationId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.AppId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "appId", runtime.ParamLocationQuery, *params.AppId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetWellKnownUserOpenapiJsonRequest generates requests for GetWellKnownUserOpenapiJson
func NewGetWellKnownUserOpenapiJsonRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/.well-known/user.openapi.json")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAccountCenterSettingsRequest generates requests for GetAccountCenterSettings
func NewGetAccountCenterSettingsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/account-center")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateAccountCenterSettingsRequest calls the generic UpdateAccountCenterSettings builder with application/json body
func NewUpdateAccountCenterSettingsRequest(server string, body UpdateAccountCenterSettingsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateAccountCenterSettingsRequestWithBody(server, "application/json", bodyReader)
}

// NewUpdateAccountCenterSettingsRequestWithBody generates requests for UpdateAccountCenterSettings with any type of body
func NewUpdateAccountCenterSettingsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/account-center")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListApplicationsRequest generates requests for ListApplications
func NewListApplicationsRequest(server string, params *ListApplicationsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/applications")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Types != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "types", runtime.ParamLocationQuery, *params.Types); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ExcludeRoleId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "excludeRoleId", runtime.ParamLocationQuery, *params.ExcludeRoleId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ExcludeOrganizationId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "excludeOrganizationId", runtime.ParamLocationQuery, *params.ExcludeOrganizationId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IsThirdParty != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "isThirdParty", runtime.ParamLocationQuery, *params.IsThirdParty); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SearchParams != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "search_params", runtime.ParamLocationQuery, *params.SearchParams); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateApplicationRequest calls the generic CreateApplication builder with application/json body
func NewCreateApplicationRequest(server string, body CreateApplicationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateApplicationRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateApplicationRequestWithBody generates requests for CreateApplication with any type of body
func NewCreateApplicationRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/applications")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewUpdateApplicationCustomDataRequest calls the generic UpdateApplicationCustomData builder with application/json body
func NewUpdateApplicationCustomDataRequest(server string, applicationId ApplicationId, body UpdateApplicationCustomDataJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateApplicationCustomDataRequestWithBody(server, applicationId, "application/json", bodyReader)
}

// NewUpdateApplicationCustomDataRequestWithBody generates requests for UpdateApplicationCustomData with any type of body
func NewUpdateApplicationCustomDataRequestWithBody(server string, applicationId ApplicationId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "applicationId", runtime.ParamLocationPath, applicationId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/applications/%s/custom-data", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListApplicationRolesRequest generates requests for ListApplicationRoles
func NewListApplicationRolesRequest(server string, applicationId ApplicationId, params *ListApplicationRolesParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "applicationId", runtime.ParamLocationPath, applicationId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/applications/%s/roles", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SearchParams != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "search_params", runtime.ParamLocationQuery, *params.SearchParams); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAssignApplicationRolesRequest calls the generic AssignApplicationRoles builder with application/json body
func NewAssignApplicationRolesRequest(server string, applicationId ApplicationId, body AssignApplicationRolesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAssignApplicationRolesRequestWithBody(server, applicationId, "application/json", bodyReader)
}

// NewAssignApplicationRolesRequestWithBody generates requests for AssignApplicationRoles with any type of body
func NewAssignApplicationRolesRequestWithBody(server string, applicationId ApplicationId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "applicationId", runtime.ParamLocationPath, applicationId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/applications/%s/roles", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewReplaceApplicationRolesRequest calls the generic ReplaceApplicationRoles builder with application/json body
func NewReplaceApplicationRolesRequest(server string, applicationId ApplicationId, body ReplaceApplicationRolesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewReplaceApplicationRolesRequestWithBody(server, applicationId, "application/json", bodyReader)
}

// NewReplaceApplicationRolesRequestWithBody generates requests for ReplaceApplicationRoles with any type of body
func NewReplaceApplicationRolesRequestWithBody(server string, applicationId ApplicationId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "applicationId", runtime.ParamLocationPath, applicationId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/applications/%s/roles", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteApplicationRoleRequest generates requests for DeleteApplicationRole
func NewDeleteApplicationRoleRequest(server string, applicationId ApplicationId, roleId RoleId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "applicationId", runtime.ParamLocationPath, applicationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "roleId", runtime.ParamLocationPath, roleId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/applications/%s/roles/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApplicationSignInExperienceRequest generates requests for GetApplicationSignInExperience
func NewGetApplicationSignInExperienceRequest(server string, applicationId ApplicationId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "applicationId", runtime.ParamLocationPath, applicationId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/applications/%s/sign-in-experience", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewReplaceApplicationSignInExperienceRequest calls the generic ReplaceApplicationSignInExperience builder with application/json body
func NewReplaceApplicationSignInExperienceRequest(server string, applicationId ApplicationId, body ReplaceApplicationSignInExperienceJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewReplaceApplicationSignInExperienceRequestWithBody(server, applicationId, "application/json", bodyReader)
}

// NewReplaceApplicationSignInExperienceRequestWithBody generates requests for ReplaceApplicationSignInExperience with any type of body
func NewReplaceApplicationSignInExperienceRequestWithBody(server string, applicationId ApplicationId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "applicationId", runtime.ParamLocationPath, applicationId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/applications/%s/sign-in-experience", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListApplicationUserConsentScopesRequest generates requests for ListApplicationUserConsentScopes
func NewListApplicationUserConsentScopesRequest(server string, applicationId ApplicationId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "applicationId", runtime.ParamLocationPath, applicationId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/applications/%s/user-consent-scopes", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateApplicationUserConsentScopeRequest calls the generic CreateApplicationUserConsentScope builder with application/json body
func NewCreateApplicationUserConsentScopeRequest(server string, applicationId ApplicationId, body CreateApplicationUserConsentScopeJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateApplicationUserConsentScopeRequestWithBody(server, applicationId, "application/json", bodyReader)
}

// NewCreateApplicationUserConsentScopeRequestWithBody generates requests for CreateApplicationUserConsentScope with any type of body
func NewCreateApplicationUserConsentScopeRequestWithBody(server string, applicationId ApplicationId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "applicationId", runtime.ParamLocationPath, applicationId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/applications/%s/user-consent-scopes", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteApplicationUserConsentScopeRequest generates requests for DeleteApplicationUserConsentScope
func NewDeleteApplicationUserConsentScopeRequest(server string, applicationId ApplicationId, scopeType DeleteApplicationUserConsentScopeParamsScopeType, scopeId ScopeId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "applicationId", runtime.ParamLocationPath, applicationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "scopeType", runtime.ParamLocationPath, scopeType)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "scopeId", runtime.ParamLocationPath, scopeId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/applications/%s/user-consent-scopes/%s/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteApplicationRequest generates requests for DeleteApplication
func NewDeleteApplicationRequest(server string, id ApplicationIdRoot) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/applications/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApplicationRequest generates requests for GetApplication
func NewGetApplicationRequest(server string, id ApplicationIdRoot) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/applications/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateApplicationRequest calls the generic UpdateApplication builder with application/json body
func NewUpdateApplicationRequest(server string, id ApplicationIdRoot, body UpdateApplicationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateApplicationRequestWithBody(server, id, "application/json", bodyReader)
}

// NewUpdateApplicationRequestWithBody generates requests for UpdateApplication with any type of body
func NewUpdateApplicationRequestWithBody(server string, id ApplicationIdRoot, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/applications/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteApplicationLegacySecretRequest generates requests for DeleteApplicationLegacySecret
func NewDeleteApplicationLegacySecretRequest(server string, id ApplicationIdRoot) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/applications/%s/legacy-secret", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListApplicationOrganizationsRequest generates requests for ListApplicationOrganizations
func NewListApplicationOrganizationsRequest(server string, id ApplicationIdRoot, params *ListApplicationOrganizationsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/applications/%s/organizations", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListApplicationProtectedAppMetadataCustomDomainsRequest generates requests for ListApplicationProtectedAppMetadataCustomDomains
func NewListApplicationProtectedAppMetadataCustomDomainsRequest(server string, id ApplicationIdRoot) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/applications/%s/protected-app-metadata/custom-domains", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateApplicationProtectedAppMetadataCustomDomainRequest calls the generic CreateApplicationProtectedAppMetadataCustomDomain builder with application/json body
func NewCreateApplicationProtectedAppMetadataCustomDomainRequest(server string, id ApplicationIdRoot, body CreateApplicationProtectedAppMetadataCustomDomainJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateApplicationProtectedAppMetadataCustomDomainRequestWithBody(server, id, "application/json", bodyReader)
}

// NewCreateApplicationProtectedAppMetadataCustomDomainRequestWithBody generates requests for CreateApplicationProtectedAppMetadataCustomDomain with any type of body
func NewCreateApplicationProtectedAppMetadataCustomDomainRequestWithBody(server string, id ApplicationIdRoot, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/applications/%s/protected-app-metadata/custom-domains", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteApplicationProtectedAppMetadataCustomDomainRequest generates requests for DeleteApplicationProtectedAppMetadataCustomDomain
func NewDeleteApplicationProtectedAppMetadataCustomDomainRequest(server string, id ApplicationIdRoot, domain string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "domain", runtime.ParamLocationPath, domain)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/applications/%s/protected-app-metadata/custom-domains/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListApplicationSecretsRequest generates requests for ListApplicationSecrets
func NewListApplicationSecretsRequest(server string, id ApplicationIdRoot) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/applications/%s/secrets", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateApplicationSecretRequest calls the generic CreateApplicationSecret builder with application/json body
func NewCreateApplicationSecretRequest(server string, id ApplicationIdRoot, body CreateApplicationSecretJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateApplicationSecretRequestWithBody(server, id, "application/json", bodyReader)
}

// NewCreateApplicationSecretRequestWithBody generates requests for CreateApplicationSecret with any type of body
func NewCreateApplicationSecretRequestWithBody(server string, id ApplicationIdRoot, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/applications/%s/secrets", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteApplicationSecretRequest generates requests for DeleteApplicationSecret
func NewDeleteApplicationSecretRequest(server string, id ApplicationIdRoot, name string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/applications/%s/secrets/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateApplicationSecretRequest calls the generic UpdateApplicationSecret builder with application/json body
func NewUpdateApplicationSecretRequest(server string, id ApplicationIdRoot, name string, body UpdateApplicationSecretJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateApplicationSecretRequestWithBody(server, id, name, "application/json", bodyReader)
}

// NewUpdateApplicationSecretRequestWithBody generates requests for UpdateApplicationSecret with any type of body
func NewUpdateApplicationSecretRequestWithBody(server string, id ApplicationIdRoot, name string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/applications/%s/secrets/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListApplicationUserConsentOrganizationsRequest generates requests for ListApplicationUserConsentOrganizations
func NewListApplicationUserConsentOrganizationsRequest(server string, id ApplicationIdRoot, userId UserId, params *ListApplicationUserConsentOrganizationsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "userId", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/applications/%s/users/%s/consent-organizations", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateApplicationUserConsentOrganizationRequest calls the generic CreateApplicationUserConsentOrganization builder with application/json body
func NewCreateApplicationUserConsentOrganizationRequest(server string, id ApplicationIdRoot, userId UserId, body CreateApplicationUserConsentOrganizationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateApplicationUserConsentOrganizationRequestWithBody(server, id, userId, "application/json", bodyReader)
}

// NewCreateApplicationUserConsentOrganizationRequestWithBody generates requests for CreateApplicationUserConsentOrganization with any type of body
func NewCreateApplicationUserConsentOrganizationRequestWithBody(server string, id ApplicationIdRoot, userId UserId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "userId", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/applications/%s/users/%s/consent-organizations", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewReplaceApplicationUserConsentOrganizationsRequest calls the generic ReplaceApplicationUserConsentOrganizations builder with application/json body
func NewReplaceApplicationUserConsentOrganizationsRequest(server string, id ApplicationIdRoot, userId UserId, body ReplaceApplicationUserConsentOrganizationsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewReplaceApplicationUserConsentOrganizationsRequestWithBody(server, id, userId, "application/json", bodyReader)
}

// NewReplaceApplicationUserConsentOrganizationsRequestWithBody generates requests for ReplaceApplicationUserConsentOrganizations with any type of body
func NewReplaceApplicationUserConsentOrganizationsRequestWithBody(server string, id ApplicationIdRoot, userId UserId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "userId", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/applications/%s/users/%s/consent-organizations", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteApplicationUserConsentOrganizationRequest generates requests for DeleteApplicationUserConsentOrganization
func NewDeleteApplicationUserConsentOrganizationRequest(server string, id ApplicationIdRoot, userId UserId, organizationId OrganizationId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "userId", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/applications/%s/users/%s/consent-organizations/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetHasuraAuthRequest generates requests for GetHasuraAuth
func NewGetHasuraAuthRequest(server string, params *GetHasuraAuthParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/authn/hasura")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "resource", runtime.ParamLocationQuery, params.Resource); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.UnauthorizedRole != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "unauthorizedRole", runtime.ParamLocationQuery, *params.UnauthorizedRole); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAssertSamlRequest calls the generic AssertSaml builder with application/json body
func NewAssertSamlRequest(server string, connectorId ConnectorId, body AssertSamlJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAssertSamlRequestWithBody(server, connectorId, "application/json", bodyReader)
}

// NewAssertSamlRequestWithBody generates requests for AssertSaml with any type of body
func NewAssertSamlRequestWithBody(server string, connectorId ConnectorId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "connectorId", runtime.ParamLocationPath, connectorId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/authn/saml/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewAssertSingleSignOnSamlRequest calls the generic AssertSingleSignOnSaml builder with application/json body
func NewAssertSingleSignOnSamlRequest(server string, connectorId ConnectorId, body AssertSingleSignOnSamlJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAssertSingleSignOnSamlRequestWithBody(server, connectorId, "application/json", bodyReader)
}

// NewAssertSingleSignOnSamlRequestWithBody generates requests for AssertSingleSignOnSaml with any type of body
func NewAssertSingleSignOnSamlRequestWithBody(server string, connectorId ConnectorId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "connectorId", runtime.ParamLocationPath, connectorId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/authn/single-sign-on/saml/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteCaptchaProviderRequest generates requests for DeleteCaptchaProvider
func NewDeleteCaptchaProviderRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/captcha-provider")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetCaptchaProviderRequest generates requests for GetCaptchaProvider
func NewGetCaptchaProviderRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/captcha-provider")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateCaptchaProviderRequest calls the generic UpdateCaptchaProvider builder with application/json body
func NewUpdateCaptchaProviderRequest(server string, body UpdateCaptchaProviderJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateCaptchaProviderRequestWithBody(server, "application/json", bodyReader)
}

// NewUpdateCaptchaProviderRequestWithBody generates requests for UpdateCaptchaProvider with any type of body
func NewUpdateCaptchaProviderRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/captcha-provider")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetAdminConsoleConfigRequest generates requests for GetAdminConsoleConfig
func NewGetAdminConsoleConfigRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/configs/admin-console")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateAdminConsoleConfigRequest calls the generic UpdateAdminConsoleConfig builder with application/json body
func NewUpdateAdminConsoleConfigRequest(server string, body UpdateAdminConsoleConfigJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateAdminConsoleConfigRequestWithBody(server, "application/json", bodyReader)
}

// NewUpdateAdminConsoleConfigRequestWithBody generates requests for UpdateAdminConsoleConfig with any type of body
func NewUpdateAdminConsoleConfigRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/configs/admin-console")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListJwtCustomizersRequest generates requests for ListJwtCustomizers
func NewListJwtCustomizersRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/configs/jwt-customizer")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewTestJwtCustomizerRequest calls the generic TestJwtCustomizer builder with application/json body
func NewTestJwtCustomizerRequest(server string, body TestJwtCustomizerJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewTestJwtCustomizerRequestWithBody(server, "application/json", bodyReader)
}

// NewTestJwtCustomizerRequestWithBody generates requests for TestJwtCustomizer with any type of body
func NewTestJwtCustomizerRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/configs/jwt-customizer/test")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteJwtCustomizerRequest generates requests for DeleteJwtCustomizer
func NewDeleteJwtCustomizerRequest(server string, tokenTypePath DeleteJwtCustomizerParamsTokenTypePath) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "tokenTypePath", runtime.ParamLocationPath, tokenTypePath)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/configs/jwt-customizer/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetJwtCustomizerRequest generates requests for GetJwtCustomizer
func NewGetJwtCustomizerRequest(server string, tokenTypePath GetJwtCustomizerParamsTokenTypePath) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "tokenTypePath", runtime.ParamLocationPath, tokenTypePath)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/configs/jwt-customizer/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateJwtCustomizerRequest calls the generic UpdateJwtCustomizer builder with application/json body
func NewUpdateJwtCustomizerRequest(server string, tokenTypePath UpdateJwtCustomizerParamsTokenTypePath, body UpdateJwtCustomizerJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateJwtCustomizerRequestWithBody(server, tokenTypePath, "application/json", bodyReader)
}

// NewUpdateJwtCustomizerRequestWithBody generates requests for UpdateJwtCustomizer with any type of body
func NewUpdateJwtCustomizerRequestWithBody(server string, tokenTypePath UpdateJwtCustomizerParamsTokenTypePath, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "tokenTypePath", runtime.ParamLocationPath, tokenTypePath)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/configs/jwt-customizer/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewUpsertJwtCustomizerRequest calls the generic UpsertJwtCustomizer builder with application/json body
func NewUpsertJwtCustomizerRequest(server string, tokenTypePath UpsertJwtCustomizerParamsTokenTypePath, body UpsertJwtCustomizerJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpsertJwtCustomizerRequestWithBody(server, tokenTypePath, "application/json", bodyReader)
}

// NewUpsertJwtCustomizerRequestWithBody generates requests for UpsertJwtCustomizer with any type of body
func NewUpsertJwtCustomizerRequestWithBody(server string, tokenTypePath UpsertJwtCustomizerParamsTokenTypePath, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "tokenTypePath", runtime.ParamLocationPath, tokenTypePath)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/configs/jwt-customizer/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetOidcKeysRequest generates requests for GetOidcKeys
func NewGetOidcKeysRequest(server string, keyType GetOidcKeysParamsKeyType) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "keyType", runtime.ParamLocationPath, keyType)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/configs/oidc/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewRotateOidcKeysRequest calls the generic RotateOidcKeys builder with application/json body
func NewRotateOidcKeysRequest(server string, keyType RotateOidcKeysParamsKeyType, body RotateOidcKeysJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewRotateOidcKeysRequestWithBody(server, keyType, "application/json", bodyReader)
}

// NewRotateOidcKeysRequestWithBody generates requests for RotateOidcKeys with any type of body
func NewRotateOidcKeysRequestWithBody(server string, keyType RotateOidcKeysParamsKeyType, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "keyType", runtime.ParamLocationPath, keyType)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/configs/oidc/%s/rotate", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteOidcKeyRequest generates requests for DeleteOidcKey
func NewDeleteOidcKeyRequest(server string, keyType DeleteOidcKeyParamsKeyType, keyId KeyId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "keyType", runtime.ParamLocationPath, keyType)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "keyId", runtime.ParamLocationPath, keyId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/configs/oidc/%s/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListConnectorFactoriesRequest generates requests for ListConnectorFactories
func NewListConnectorFactoriesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/connector-factories")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetConnectorFactoryRequest generates requests for GetConnectorFactory
func NewGetConnectorFactoryRequest(server string, id ConnectorFactoryIdRoot) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/connector-factories/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListConnectorsRequest generates requests for ListConnectors
func NewListConnectorsRequest(server string, params *ListConnectorsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/connectors")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Target != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "target", runtime.ParamLocationQuery, *params.Target); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateConnectorRequest calls the generic CreateConnector builder with application/json body
func NewCreateConnectorRequest(server string, body CreateConnectorJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateConnectorRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateConnectorRequestWithBody generates requests for CreateConnector with any type of body
func NewCreateConnectorRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/connectors")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCreateConnectorAuthorizationUriRequest calls the generic CreateConnectorAuthorizationUri builder with application/json body
func NewCreateConnectorAuthorizationUriRequest(server string, connectorId ConnectorId, body CreateConnectorAuthorizationUriJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateConnectorAuthorizationUriRequestWithBody(server, connectorId, "application/json", bodyReader)
}

// NewCreateConnectorAuthorizationUriRequestWithBody generates requests for CreateConnectorAuthorizationUri with any type of body
func NewCreateConnectorAuthorizationUriRequestWithBody(server string, connectorId ConnectorId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "connectorId", runtime.ParamLocationPath, connectorId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/connectors/%s/authorization-uri", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCreateConnectorTestRequest calls the generic CreateConnectorTest builder with application/json body
func NewCreateConnectorTestRequest(server string, factoryId FactoryId, body CreateConnectorTestJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateConnectorTestRequestWithBody(server, factoryId, "application/json", bodyReader)
}

// NewCreateConnectorTestRequestWithBody generates requests for CreateConnectorTest with any type of body
func NewCreateConnectorTestRequestWithBody(server string, factoryId FactoryId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "factoryId", runtime.ParamLocationPath, factoryId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/connectors/%s/test", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteConnectorRequest generates requests for DeleteConnector
func NewDeleteConnectorRequest(server string, id ConnectorIdRoot) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/connectors/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetConnectorRequest generates requests for GetConnector
func NewGetConnectorRequest(server string, id ConnectorIdRoot) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/connectors/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateConnectorRequest calls the generic UpdateConnector builder with application/json body
func NewUpdateConnectorRequest(server string, id ConnectorIdRoot, body UpdateConnectorJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateConnectorRequestWithBody(server, id, "application/json", bodyReader)
}

// NewUpdateConnectorRequestWithBody generates requests for UpdateConnector with any type of body
func NewUpdateConnectorRequestWithBody(server string, id ConnectorIdRoot, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/connectors/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListCustomPhrasesRequest generates requests for ListCustomPhrases
func NewListCustomPhrasesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/custom-phrases")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteCustomPhraseRequest generates requests for DeleteCustomPhrase
func NewDeleteCustomPhraseRequest(server string, languageTag DeleteCustomPhraseParamsLanguageTag) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "languageTag", runtime.ParamLocationPath, languageTag)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/custom-phrases/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetCustomPhraseRequest generates requests for GetCustomPhrase
func NewGetCustomPhraseRequest(server string, languageTag GetCustomPhraseParamsLanguageTag) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "languageTag", runtime.ParamLocationPath, languageTag)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/custom-phrases/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewReplaceCustomPhraseRequest calls the generic ReplaceCustomPhrase builder with application/json body
func NewReplaceCustomPhraseRequest(server string, languageTag ReplaceCustomPhraseParamsLanguageTag, body ReplaceCustomPhraseJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewReplaceCustomPhraseRequestWithBody(server, languageTag, "application/json", bodyReader)
}

// NewReplaceCustomPhraseRequestWithBody generates requests for ReplaceCustomPhrase with any type of body
func NewReplaceCustomPhraseRequestWithBody(server string, languageTag ReplaceCustomPhraseParamsLanguageTag, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "languageTag", runtime.ParamLocationPath, languageTag)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/custom-phrases/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetActiveUserCountsRequest generates requests for GetActiveUserCounts
func NewGetActiveUserCountsRequest(server string, params *GetActiveUserCountsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/dashboard/users/active")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Date != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "date", runtime.ParamLocationQuery, *params.Date); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetNewUserCountsRequest generates requests for GetNewUserCounts
func NewGetNewUserCountsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/dashboard/users/new")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetTotalUserCountRequest generates requests for GetTotalUserCount
func NewGetTotalUserCountRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/dashboard/users/total")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListDomainsRequest generates requests for ListDomains
func NewListDomainsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/domains")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateDomainRequest calls the generic CreateDomain builder with application/json body
func NewCreateDomainRequest(server string, body CreateDomainJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateDomainRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateDomainRequestWithBody generates requests for CreateDomain with any type of body
func NewCreateDomainRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/domains")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteDomainRequest generates requests for DeleteDomain
func NewDeleteDomainRequest(server string, id DomainIdRoot) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/domains/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetDomainRequest generates requests for GetDomain
func NewGetDomainRequest(server string, id DomainIdRoot) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/domains/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteEmailTemplatesRequest generates requests for DeleteEmailTemplates
func NewDeleteEmailTemplatesRequest(server string, params *DeleteEmailTemplatesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/email-templates")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.LanguageTag != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "languageTag", runtime.ParamLocationQuery, *params.LanguageTag); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TemplateType != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "templateType", runtime.ParamLocationQuery, *params.TemplateType); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListEmailTemplatesRequest generates requests for ListEmailTemplates
func NewListEmailTemplatesRequest(server string, params *ListEmailTemplatesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/email-templates")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.LanguageTag != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "languageTag", runtime.ParamLocationQuery, *params.LanguageTag); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TemplateType != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "templateType", runtime.ParamLocationQuery, *params.TemplateType); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewReplaceEmailTemplatesRequest calls the generic ReplaceEmailTemplates builder with application/json body
func NewReplaceEmailTemplatesRequest(server string, body ReplaceEmailTemplatesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewReplaceEmailTemplatesRequestWithBody(server, "application/json", bodyReader)
}

// NewReplaceEmailTemplatesRequestWithBody generates requests for ReplaceEmailTemplates with any type of body
func NewReplaceEmailTemplatesRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/email-templates")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteEmailTemplateRequest generates requests for DeleteEmailTemplate
func NewDeleteEmailTemplateRequest(server string, id EmailTemplateIdRoot) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/email-templates/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetEmailTemplateRequest generates requests for GetEmailTemplate
func NewGetEmailTemplateRequest(server string, id EmailTemplateIdRoot) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/email-templates/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateEmailTemplateDetailsRequest calls the generic UpdateEmailTemplateDetails builder with application/json body
func NewUpdateEmailTemplateDetailsRequest(server string, id EmailTemplateIdRoot, body UpdateEmailTemplateDetailsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateEmailTemplateDetailsRequestWithBody(server, id, "application/json", bodyReader)
}

// NewUpdateEmailTemplateDetailsRequestWithBody generates requests for UpdateEmailTemplateDetails with any type of body
func NewUpdateEmailTemplateDetailsRequestWithBody(server string, id EmailTemplateIdRoot, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/email-templates/%s/details", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewInitInteractionRequest calls the generic InitInteraction builder with application/json body
func NewInitInteractionRequest(server string, body InitInteractionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewInitInteractionRequestWithBody(server, "application/json", bodyReader)
}

// NewInitInteractionRequestWithBody generates requests for InitInteraction with any type of body
func NewInitInteractionRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/experience")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewIdentifyUserRequest calls the generic IdentifyUser builder with application/json body
func NewIdentifyUserRequest(server string, body IdentifyUserJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewIdentifyUserRequestWithBody(server, "application/json", bodyReader)
}

// NewIdentifyUserRequestWithBody generates requests for IdentifyUser with any type of body
func NewIdentifyUserRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/experience/identification")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewUpdateInteractionEventRequest calls the generic UpdateInteractionEvent builder with application/json body
func NewUpdateInteractionEventRequest(server string, body UpdateInteractionEventJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateInteractionEventRequestWithBody(server, "application/json", bodyReader)
}

// NewUpdateInteractionEventRequestWithBody generates requests for UpdateInteractionEvent with any type of body
func NewUpdateInteractionEventRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/experience/interaction-event")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewAddUserProfileRequest calls the generic AddUserProfile builder with application/json body
func NewAddUserProfileRequest(server string, body AddUserProfileJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAddUserProfileRequestWithBody(server, "application/json", bodyReader)
}

// NewAddUserProfileRequestWithBody generates requests for AddUserProfile with any type of body
func NewAddUserProfileRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/experience/profile")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewBindMfaVerificationRequest calls the generic BindMfaVerification builder with application/json body
func NewBindMfaVerificationRequest(server string, body BindMfaVerificationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewBindMfaVerificationRequestWithBody(server, "application/json", bodyReader)
}

// NewBindMfaVerificationRequestWithBody generates requests for BindMfaVerification with any type of body
func NewBindMfaVerificationRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/experience/profile/mfa")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewSkipMfaBindingFlowRequest generates requests for SkipMfaBindingFlow
func NewSkipMfaBindingFlowRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/experience/profile/mfa/mfa-skipped")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewResetUserPasswordRequest calls the generic ResetUserPassword builder with application/json body
func NewResetUserPasswordRequest(server string, body ResetUserPasswordJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewResetUserPasswordRequestWithBody(server, "application/json", bodyReader)
}

// NewResetUserPasswordRequestWithBody generates requests for ResetUserPassword with any type of body
func NewResetUserPasswordRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/experience/profile/password")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetEnabledSsoConnectorsRequest generates requests for GetEnabledSsoConnectors
func NewGetEnabledSsoConnectorsRequest(server string, params *GetEnabledSsoConnectorsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/experience/sso-connectors")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "email", runtime.ParamLocationQuery, params.Email); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSubmitInteractionRequest generates requests for SubmitInteraction
func NewSubmitInteractionRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/experience/submit")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGenerateBackupCodesRequest generates requests for GenerateBackupCodes
func NewGenerateBackupCodesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/experience/verification/backup-code/generate")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewVerifyBackupCodeRequest calls the generic VerifyBackupCode builder with application/json body
func NewVerifyBackupCodeRequest(server string, body VerifyBackupCodeJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewVerifyBackupCodeRequestWithBody(server, "application/json", bodyReader)
}

// NewVerifyBackupCodeRequestWithBody generates requests for VerifyBackupCode with any type of body
func NewVerifyBackupCodeRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/experience/verification/backup-code/verify")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCreateNewPasswordIdentityVerificationRequest calls the generic CreateNewPasswordIdentityVerification builder with application/json body
func NewCreateNewPasswordIdentityVerificationRequest(server string, body CreateNewPasswordIdentityVerificationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateNewPasswordIdentityVerificationRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateNewPasswordIdentityVerificationRequestWithBody generates requests for CreateNewPasswordIdentityVerification with any type of body
func NewCreateNewPasswordIdentityVerificationRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/experience/verification/new-password-identity")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewVerifyOneTimeTokenVerificationRequest calls the generic VerifyOneTimeTokenVerification builder with application/json body
func NewVerifyOneTimeTokenVerificationRequest(server string, body VerifyOneTimeTokenVerificationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewVerifyOneTimeTokenVerificationRequestWithBody(server, "application/json", bodyReader)
}

// NewVerifyOneTimeTokenVerificationRequestWithBody generates requests for VerifyOneTimeTokenVerification with any type of body
func NewVerifyOneTimeTokenVerificationRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/experience/verification/one-time-token/verify")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCreatePasswordVerificationRequest calls the generic CreatePasswordVerification builder with application/json body
func NewCreatePasswordVerificationRequest(server string, body CreatePasswordVerificationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreatePasswordVerificationRequestWithBody(server, "application/json", bodyReader)
}

// NewCreatePasswordVerificationRequestWithBody generates requests for CreatePasswordVerification with any type of body
func NewCreatePasswordVerificationRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/experience/verification/password")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCreateSocialVerificationRequest calls the generic CreateSocialVerification builder with application/json body
func NewCreateSocialVerificationRequest(server string, connectorId ConnectorId, body CreateSocialVerificationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateSocialVerificationRequestWithBody(server, connectorId, "application/json", bodyReader)
}

// NewCreateSocialVerificationRequestWithBody generates requests for CreateSocialVerification with any type of body
func NewCreateSocialVerificationRequestWithBody(server string, connectorId ConnectorId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "connectorId", runtime.ParamLocationPath, connectorId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/experience/verification/social/%s/authorization-uri", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewVerifySocialVerificationRequest calls the generic VerifySocialVerification builder with application/json body
func NewVerifySocialVerificationRequest(server string, connectorId ConnectorId, body VerifySocialVerificationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewVerifySocialVerificationRequestWithBody(server, connectorId, "application/json", bodyReader)
}

// NewVerifySocialVerificationRequestWithBody generates requests for VerifySocialVerification with any type of body
func NewVerifySocialVerificationRequestWithBody(server string, connectorId ConnectorId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "connectorId", runtime.ParamLocationPath, connectorId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/experience/verification/social/%s/verify", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCreateEnterpriseSsoVerificationRequest calls the generic CreateEnterpriseSsoVerification builder with application/json body
func NewCreateEnterpriseSsoVerificationRequest(server string, connectorId ConnectorId, body CreateEnterpriseSsoVerificationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateEnterpriseSsoVerificationRequestWithBody(server, connectorId, "application/json", bodyReader)
}

// NewCreateEnterpriseSsoVerificationRequestWithBody generates requests for CreateEnterpriseSsoVerification with any type of body
func NewCreateEnterpriseSsoVerificationRequestWithBody(server string, connectorId ConnectorId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "connectorId", runtime.ParamLocationPath, connectorId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/experience/verification/sso/%s/authorization-uri", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewVerifyEnterpriseSsoVerificationRequest calls the generic VerifyEnterpriseSsoVerification builder with application/json body
func NewVerifyEnterpriseSsoVerificationRequest(server string, connectorId ConnectorId, body VerifyEnterpriseSsoVerificationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewVerifyEnterpriseSsoVerificationRequestWithBody(server, connectorId, "application/json", bodyReader)
}

// NewVerifyEnterpriseSsoVerificationRequestWithBody generates requests for VerifyEnterpriseSsoVerification with any type of body
func NewVerifyEnterpriseSsoVerificationRequestWithBody(server string, connectorId ConnectorId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "connectorId", runtime.ParamLocationPath, connectorId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/experience/verification/sso/%s/verify", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCreateTotpSecretRequest generates requests for CreateTotpSecret
func NewCreateTotpSecretRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/experience/verification/totp/secret")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewVerifyTotpVerificationRequest calls the generic VerifyTotpVerification builder with application/json body
func NewVerifyTotpVerificationRequest(server string, body VerifyTotpVerificationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewVerifyTotpVerificationRequestWithBody(server, "application/json", bodyReader)
}

// NewVerifyTotpVerificationRequestWithBody generates requests for VerifyTotpVerification with any type of body
func NewVerifyTotpVerificationRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/experience/verification/totp/verify")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCreateAndSendVerificationCodeRequest calls the generic CreateAndSendVerificationCode builder with application/json body
func NewCreateAndSendVerificationCodeRequest(server string, body CreateAndSendVerificationCodeJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateAndSendVerificationCodeRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateAndSendVerificationCodeRequestWithBody generates requests for CreateAndSendVerificationCode with any type of body
func NewCreateAndSendVerificationCodeRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/experience/verification/verification-code")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewVerifyVerificationCodeVerificationRequest calls the generic VerifyVerificationCodeVerification builder with application/json body
func NewVerifyVerificationCodeVerificationRequest(server string, body VerifyVerificationCodeVerificationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewVerifyVerificationCodeVerificationRequestWithBody(server, "application/json", bodyReader)
}

// NewVerifyVerificationCodeVerificationRequestWithBody generates requests for VerifyVerificationCodeVerification with any type of body
func NewVerifyVerificationCodeVerificationRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/experience/verification/verification-code/verify")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCreateWebAuthnAuthenticationVerificationRequest generates requests for CreateWebAuthnAuthenticationVerification
func NewCreateWebAuthnAuthenticationVerificationRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/experience/verification/web-authn/authentication")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewVerifyWebAuthnAuthenticationVerificationRequest calls the generic VerifyWebAuthnAuthenticationVerification builder with application/json body
func NewVerifyWebAuthnAuthenticationVerificationRequest(server string, body VerifyWebAuthnAuthenticationVerificationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewVerifyWebAuthnAuthenticationVerificationRequestWithBody(server, "application/json", bodyReader)
}

// NewVerifyWebAuthnAuthenticationVerificationRequestWithBody generates requests for VerifyWebAuthnAuthenticationVerification with any type of body
func NewVerifyWebAuthnAuthenticationVerificationRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/experience/verification/web-authn/authentication/verify")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCreateWebAuthnRegistrationVerificationRequest generates requests for CreateWebAuthnRegistrationVerification
func NewCreateWebAuthnRegistrationVerificationRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/experience/verification/web-authn/registration")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewVerifyWebAuthnRegistrationVerificationRequest calls the generic VerifyWebAuthnRegistrationVerification builder with application/json body
func NewVerifyWebAuthnRegistrationVerificationRequest(server string, body VerifyWebAuthnRegistrationVerificationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewVerifyWebAuthnRegistrationVerificationRequestWithBody(server, "application/json", bodyReader)
}

// NewVerifyWebAuthnRegistrationVerificationRequestWithBody generates requests for VerifyWebAuthnRegistrationVerification with any type of body
func NewVerifyWebAuthnRegistrationVerificationRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/experience/verification/web-authn/registration/verify")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListHooksRequest generates requests for ListHooks
func NewListHooksRequest(server string, params *ListHooksParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/hooks")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.IncludeExecutionStats != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "includeExecutionStats", runtime.ParamLocationQuery, *params.IncludeExecutionStats); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateHookRequest calls the generic CreateHook builder with application/json body
func NewCreateHookRequest(server string, body CreateHookJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateHookRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateHookRequestWithBody generates requests for CreateHook with any type of body
func NewCreateHookRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/hooks")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteHookRequest generates requests for DeleteHook
func NewDeleteHookRequest(server string, id HookIdRoot) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/hooks/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetHookRequest generates requests for GetHook
func NewGetHookRequest(server string, id HookIdRoot, params *GetHookParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/hooks/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.IncludeExecutionStats != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "includeExecutionStats", runtime.ParamLocationQuery, *params.IncludeExecutionStats); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateHookRequest calls the generic UpdateHook builder with application/json body
func NewUpdateHookRequest(server string, id HookIdRoot, body UpdateHookJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateHookRequestWithBody(server, id, "application/json", bodyReader)
}

// NewUpdateHookRequestWithBody generates requests for UpdateHook with any type of body
func NewUpdateHookRequestWithBody(server string, id HookIdRoot, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/hooks/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListHookRecentLogsRequest generates requests for ListHookRecentLogs
func NewListHookRecentLogsRequest(server string, id HookIdRoot, params *ListHookRecentLogsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/hooks/%s/recent-logs", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.LogKey != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "logKey", runtime.ParamLocationQuery, *params.LogKey); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateHookSigningKeyRequest generates requests for UpdateHookSigningKey
func NewUpdateHookSigningKeyRequest(server string, id HookIdRoot) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/hooks/%s/signing-key", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateHookTestRequest calls the generic CreateHookTest builder with application/json body
func NewCreateHookTestRequest(server string, id HookIdRoot, body CreateHookTestJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateHookTestRequestWithBody(server, id, "application/json", bodyReader)
}

// NewCreateHookTestRequestWithBody generates requests for CreateHookTest with any type of body
func NewCreateHookTestRequestWithBody(server string, id HookIdRoot, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/hooks/%s/test", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteApiInteractionRequest generates requests for DeleteApiInteraction
func NewDeleteApiInteractionRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/interaction")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutApiInteractionRequest calls the generic PutApiInteraction builder with application/json body
func NewPutApiInteractionRequest(server string, body PutApiInteractionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutApiInteractionRequestWithBody(server, "application/json", bodyReader)
}

// NewPutApiInteractionRequestWithBody generates requests for PutApiInteraction with any type of body
func NewPutApiInteractionRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/interaction")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostApiInteractionBindMfaRequest calls the generic PostApiInteractionBindMfa builder with application/json body
func NewPostApiInteractionBindMfaRequest(server string, body PostApiInteractionBindMfaJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiInteractionBindMfaRequestWithBody(server, "application/json", bodyReader)
}

// NewPostApiInteractionBindMfaRequestWithBody generates requests for PostApiInteractionBindMfa with any type of body
func NewPostApiInteractionBindMfaRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/interaction/bind-mfa")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetApiInteractionConsentRequest generates requests for GetApiInteractionConsent
func NewGetApiInteractionConsentRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/interaction/consent")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostApiInteractionConsentRequest calls the generic PostApiInteractionConsent builder with application/json body
func NewPostApiInteractionConsentRequest(server string, body PostApiInteractionConsentJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiInteractionConsentRequestWithBody(server, "application/json", bodyReader)
}

// NewPostApiInteractionConsentRequestWithBody generates requests for PostApiInteractionConsent with any type of body
func NewPostApiInteractionConsentRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/interaction/consent")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPutApiInteractionEventRequest calls the generic PutApiInteractionEvent builder with application/json body
func NewPutApiInteractionEventRequest(server string, body PutApiInteractionEventJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutApiInteractionEventRequestWithBody(server, "application/json", bodyReader)
}

// NewPutApiInteractionEventRequestWithBody generates requests for PutApiInteractionEvent with any type of body
func NewPutApiInteractionEventRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/interaction/event")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPatchApiInteractionIdentifiersRequest calls the generic PatchApiInteractionIdentifiers builder with application/json body
func NewPatchApiInteractionIdentifiersRequest(server string, body PatchApiInteractionIdentifiersJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchApiInteractionIdentifiersRequestWithBody(server, "application/json", bodyReader)
}

// NewPatchApiInteractionIdentifiersRequestWithBody generates requests for PatchApiInteractionIdentifiers with any type of body
func NewPatchApiInteractionIdentifiersRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/interaction/identifiers")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPutApiInteractionMfaRequest calls the generic PutApiInteractionMfa builder with application/json body
func NewPutApiInteractionMfaRequest(server string, body PutApiInteractionMfaJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutApiInteractionMfaRequestWithBody(server, "application/json", bodyReader)
}

// NewPutApiInteractionMfaRequestWithBody generates requests for PutApiInteractionMfa with any type of body
func NewPutApiInteractionMfaRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/interaction/mfa")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPutApiInteractionMfaSkippedRequest calls the generic PutApiInteractionMfaSkipped builder with application/json body
func NewPutApiInteractionMfaSkippedRequest(server string, body PutApiInteractionMfaSkippedJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutApiInteractionMfaSkippedRequestWithBody(server, "application/json", bodyReader)
}

// NewPutApiInteractionMfaSkippedRequestWithBody generates requests for PutApiInteractionMfaSkipped with any type of body
func NewPutApiInteractionMfaSkippedRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/interaction/mfa-skipped")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteApiInteractionProfileRequest generates requests for DeleteApiInteractionProfile
func NewDeleteApiInteractionProfileRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/interaction/profile")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchApiInteractionProfileRequest calls the generic PatchApiInteractionProfile builder with application/json body
func NewPatchApiInteractionProfileRequest(server string, body PatchApiInteractionProfileJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchApiInteractionProfileRequestWithBody(server, "application/json", bodyReader)
}

// NewPatchApiInteractionProfileRequestWithBody generates requests for PatchApiInteractionProfile with any type of body
func NewPatchApiInteractionProfileRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/interaction/profile")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPutApiInteractionProfileRequest calls the generic PutApiInteractionProfile builder with application/json body
func NewPutApiInteractionProfileRequest(server string, body PutApiInteractionProfileJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutApiInteractionProfileRequestWithBody(server, "application/json", bodyReader)
}

// NewPutApiInteractionProfileRequestWithBody generates requests for PutApiInteractionProfile with any type of body
func NewPutApiInteractionProfileRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/interaction/profile")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetApiInteractionSingleSignOnConnectorsRequest generates requests for GetApiInteractionSingleSignOnConnectors
func NewGetApiInteractionSingleSignOnConnectorsRequest(server string, params *GetApiInteractionSingleSignOnConnectorsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/interaction/single-sign-on/connectors")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "email", runtime.ParamLocationQuery, params.Email); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostApiInteractionSingleSignOnConnectorIdAuthenticationRequest calls the generic PostApiInteractionSingleSignOnConnectorIdAuthentication builder with application/json body
func NewPostApiInteractionSingleSignOnConnectorIdAuthenticationRequest(server string, connectorId ConnectorId, body PostApiInteractionSingleSignOnConnectorIdAuthenticationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiInteractionSingleSignOnConnectorIdAuthenticationRequestWithBody(server, connectorId, "application/json", bodyReader)
}

// NewPostApiInteractionSingleSignOnConnectorIdAuthenticationRequestWithBody generates requests for PostApiInteractionSingleSignOnConnectorIdAuthentication with any type of body
func NewPostApiInteractionSingleSignOnConnectorIdAuthenticationRequestWithBody(server string, connectorId ConnectorId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "connectorId", runtime.ParamLocationPath, connectorId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/interaction/single-sign-on/%s/authentication", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostApiInteractionSingleSignOnConnectorIdAuthorizationUrlRequest calls the generic PostApiInteractionSingleSignOnConnectorIdAuthorizationUrl builder with application/json body
func NewPostApiInteractionSingleSignOnConnectorIdAuthorizationUrlRequest(server string, connectorId ConnectorId, body PostApiInteractionSingleSignOnConnectorIdAuthorizationUrlJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiInteractionSingleSignOnConnectorIdAuthorizationUrlRequestWithBody(server, connectorId, "application/json", bodyReader)
}

// NewPostApiInteractionSingleSignOnConnectorIdAuthorizationUrlRequestWithBody generates requests for PostApiInteractionSingleSignOnConnectorIdAuthorizationUrl with any type of body
func NewPostApiInteractionSingleSignOnConnectorIdAuthorizationUrlRequestWithBody(server string, connectorId ConnectorId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "connectorId", runtime.ParamLocationPath, connectorId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/interaction/single-sign-on/%s/authorization-url", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostApiInteractionSingleSignOnConnectorIdRegistrationRequest generates requests for PostApiInteractionSingleSignOnConnectorIdRegistration
func NewPostApiInteractionSingleSignOnConnectorIdRegistrationRequest(server string, connectorId ConnectorId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "connectorId", runtime.ParamLocationPath, connectorId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/interaction/single-sign-on/%s/registration", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostApiInteractionSubmitRequest generates requests for PostApiInteractionSubmit
func NewPostApiInteractionSubmitRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/interaction/submit")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostApiInteractionVerificationSocialAuthorizationUriRequest calls the generic PostApiInteractionVerificationSocialAuthorizationUri builder with application/json body
func NewPostApiInteractionVerificationSocialAuthorizationUriRequest(server string, body PostApiInteractionVerificationSocialAuthorizationUriJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiInteractionVerificationSocialAuthorizationUriRequestWithBody(server, "application/json", bodyReader)
}

// NewPostApiInteractionVerificationSocialAuthorizationUriRequestWithBody generates requests for PostApiInteractionVerificationSocialAuthorizationUri with any type of body
func NewPostApiInteractionVerificationSocialAuthorizationUriRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/interaction/verification/social-authorization-uri")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostApiInteractionVerificationTotpRequest generates requests for PostApiInteractionVerificationTotp
func NewPostApiInteractionVerificationTotpRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/interaction/verification/totp")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostApiInteractionVerificationVerificationCodeRequest calls the generic PostApiInteractionVerificationVerificationCode builder with application/json body
func NewPostApiInteractionVerificationVerificationCodeRequest(server string, body PostApiInteractionVerificationVerificationCodeJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiInteractionVerificationVerificationCodeRequestWithBody(server, "application/json", bodyReader)
}

// NewPostApiInteractionVerificationVerificationCodeRequestWithBody generates requests for PostApiInteractionVerificationVerificationCode with any type of body
func NewPostApiInteractionVerificationVerificationCodeRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/interaction/verification/verification-code")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostApiInteractionVerificationWebauthnAuthenticationRequest generates requests for PostApiInteractionVerificationWebauthnAuthentication
func NewPostApiInteractionVerificationWebauthnAuthenticationRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/interaction/verification/webauthn-authentication")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostApiInteractionVerificationWebauthnRegistrationRequest generates requests for PostApiInteractionVerificationWebauthnRegistration
func NewPostApiInteractionVerificationWebauthnRegistrationRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/interaction/verification/webauthn-registration")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListLogsRequest generates requests for ListLogs
func NewListLogsRequest(server string, params *ListLogsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/logs")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.UserId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "userId", runtime.ParamLocationQuery, *params.UserId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ApplicationId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "applicationId", runtime.ParamLocationQuery, *params.ApplicationId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.LogKey != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "logKey", runtime.ParamLocationQuery, *params.LogKey); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetLogRequest generates requests for GetLog
func NewGetLogRequest(server string, id LogIdRoot) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/logs/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetProfileRequest generates requests for GetProfile
func NewGetProfileRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/my-account")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateProfileRequest calls the generic UpdateProfile builder with application/json body
func NewUpdateProfileRequest(server string, body UpdateProfileJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateProfileRequestWithBody(server, "application/json", bodyReader)
}

// NewUpdateProfileRequestWithBody generates requests for UpdateProfile with any type of body
func NewUpdateProfileRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/my-account")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewAddUserIdentitiesRequest calls the generic AddUserIdentities builder with application/json body
func NewAddUserIdentitiesRequest(server string, body AddUserIdentitiesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAddUserIdentitiesRequestWithBody(server, "application/json", bodyReader)
}

// NewAddUserIdentitiesRequestWithBody generates requests for AddUserIdentities with any type of body
func NewAddUserIdentitiesRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/my-account/identities")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteIdentityRequest generates requests for DeleteIdentity
func NewDeleteIdentityRequest(server string, target string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "target", runtime.ParamLocationPath, target)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/my-account/identities/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetMfaVerificationsRequest generates requests for GetMfaVerifications
func NewGetMfaVerificationsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/my-account/mfa-verifications")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAddMfaVerificationRequest calls the generic AddMfaVerification builder with application/json body
func NewAddMfaVerificationRequest(server string, body AddMfaVerificationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAddMfaVerificationRequestWithBody(server, "application/json", bodyReader)
}

// NewAddMfaVerificationRequestWithBody generates requests for AddMfaVerification with any type of body
func NewAddMfaVerificationRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/my-account/mfa-verifications")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteMfaVerificationRequest generates requests for DeleteMfaVerification
func NewDeleteMfaVerificationRequest(server string, verificationId VerificationId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "verificationId", runtime.ParamLocationPath, verificationId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/my-account/mfa-verifications/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateMfaVerificationNameRequest calls the generic UpdateMfaVerificationName builder with application/json body
func NewUpdateMfaVerificationNameRequest(server string, verificationId VerificationId, body UpdateMfaVerificationNameJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateMfaVerificationNameRequestWithBody(server, verificationId, "application/json", bodyReader)
}

// NewUpdateMfaVerificationNameRequestWithBody generates requests for UpdateMfaVerificationName with any type of body
func NewUpdateMfaVerificationNameRequestWithBody(server string, verificationId VerificationId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "verificationId", runtime.ParamLocationPath, verificationId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/my-account/mfa-verifications/%s/name", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewUpdatePasswordRequest calls the generic UpdatePassword builder with application/json body
func NewUpdatePasswordRequest(server string, body UpdatePasswordJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdatePasswordRequestWithBody(server, "application/json", bodyReader)
}

// NewUpdatePasswordRequestWithBody generates requests for UpdatePassword with any type of body
func NewUpdatePasswordRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/my-account/password")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeletePrimaryEmailRequest generates requests for DeletePrimaryEmail
func NewDeletePrimaryEmailRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/my-account/primary-email")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdatePrimaryEmailRequest calls the generic UpdatePrimaryEmail builder with application/json body
func NewUpdatePrimaryEmailRequest(server string, body UpdatePrimaryEmailJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdatePrimaryEmailRequestWithBody(server, "application/json", bodyReader)
}

// NewUpdatePrimaryEmailRequestWithBody generates requests for UpdatePrimaryEmail with any type of body
func NewUpdatePrimaryEmailRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/my-account/primary-email")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeletePrimaryPhoneRequest generates requests for DeletePrimaryPhone
func NewDeletePrimaryPhoneRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/my-account/primary-phone")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdatePrimaryPhoneRequest calls the generic UpdatePrimaryPhone builder with application/json body
func NewUpdatePrimaryPhoneRequest(server string, body UpdatePrimaryPhoneJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdatePrimaryPhoneRequestWithBody(server, "application/json", bodyReader)
}

// NewUpdatePrimaryPhoneRequestWithBody generates requests for UpdatePrimaryPhone with any type of body
func NewUpdatePrimaryPhoneRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/my-account/primary-phone")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewUpdateOtherProfileRequest calls the generic UpdateOtherProfile builder with application/json body
func NewUpdateOtherProfileRequest(server string, body UpdateOtherProfileJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateOtherProfileRequestWithBody(server, "application/json", bodyReader)
}

// NewUpdateOtherProfileRequestWithBody generates requests for UpdateOtherProfile with any type of body
func NewUpdateOtherProfileRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/my-account/profile")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListOneTimeTokensRequest generates requests for ListOneTimeTokens
func NewListOneTimeTokensRequest(server string, params *ListOneTimeTokensParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/one-time-tokens")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Email != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "email", runtime.ParamLocationQuery, *params.Email); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Status != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "status", runtime.ParamLocationQuery, *params.Status); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAddOneTimeTokensRequest calls the generic AddOneTimeTokens builder with application/json body
func NewAddOneTimeTokensRequest(server string, body AddOneTimeTokensJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAddOneTimeTokensRequestWithBody(server, "application/json", bodyReader)
}

// NewAddOneTimeTokensRequestWithBody generates requests for AddOneTimeTokens with any type of body
func NewAddOneTimeTokensRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/one-time-tokens")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewVerifyOneTimeTokenRequest calls the generic VerifyOneTimeToken builder with application/json body
func NewVerifyOneTimeTokenRequest(server string, body VerifyOneTimeTokenJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewVerifyOneTimeTokenRequestWithBody(server, "application/json", bodyReader)
}

// NewVerifyOneTimeTokenRequestWithBody generates requests for VerifyOneTimeToken with any type of body
func NewVerifyOneTimeTokenRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/one-time-tokens/verify")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteOneTimeTokenRequest generates requests for DeleteOneTimeToken
func NewDeleteOneTimeTokenRequest(server string, id OneTimeTokenIdRoot) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/one-time-tokens/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetOneTimeTokenRequest generates requests for GetOneTimeToken
func NewGetOneTimeTokenRequest(server string, id OneTimeTokenIdRoot) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/one-time-tokens/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewReplaceOneTimeTokenStatusRequest calls the generic ReplaceOneTimeTokenStatus builder with application/json body
func NewReplaceOneTimeTokenStatusRequest(server string, id OneTimeTokenIdRoot, body ReplaceOneTimeTokenStatusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewReplaceOneTimeTokenStatusRequestWithBody(server, id, "application/json", bodyReader)
}

// NewReplaceOneTimeTokenStatusRequestWithBody generates requests for ReplaceOneTimeTokenStatus with any type of body
func NewReplaceOneTimeTokenStatusRequestWithBody(server string, id OneTimeTokenIdRoot, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/one-time-tokens/%s/status", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListOrganizationInvitationsRequest generates requests for ListOrganizationInvitations
func NewListOrganizationInvitationsRequest(server string, params *ListOrganizationInvitationsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/organization-invitations")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.OrganizationId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "organizationId", runtime.ParamLocationQuery, *params.OrganizationId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.InviterId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "inviterId", runtime.ParamLocationQuery, *params.InviterId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Invitee != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "invitee", runtime.ParamLocationQuery, *params.Invitee); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateOrganizationInvitationRequest calls the generic CreateOrganizationInvitation builder with application/json body
func NewCreateOrganizationInvitationRequest(server string, body CreateOrganizationInvitationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateOrganizationInvitationRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateOrganizationInvitationRequestWithBody generates requests for CreateOrganizationInvitation with any type of body
func NewCreateOrganizationInvitationRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/organization-invitations")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteOrganizationInvitationRequest generates requests for DeleteOrganizationInvitation
func NewDeleteOrganizationInvitationRequest(server string, id OrganizationInvitationIdRoot) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/organization-invitations/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetOrganizationInvitationRequest generates requests for GetOrganizationInvitation
func NewGetOrganizationInvitationRequest(server string, id OrganizationInvitationIdRoot) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/organization-invitations/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateOrganizationInvitationMessageRequest calls the generic CreateOrganizationInvitationMessage builder with application/json body
func NewCreateOrganizationInvitationMessageRequest(server string, id OrganizationInvitationIdRoot, body CreateOrganizationInvitationMessageJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateOrganizationInvitationMessageRequestWithBody(server, id, "application/json", bodyReader)
}

// NewCreateOrganizationInvitationMessageRequestWithBody generates requests for CreateOrganizationInvitationMessage with any type of body
func NewCreateOrganizationInvitationMessageRequestWithBody(server string, id OrganizationInvitationIdRoot, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/organization-invitations/%s/message", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewReplaceOrganizationInvitationStatusRequest calls the generic ReplaceOrganizationInvitationStatus builder with application/json body
func NewReplaceOrganizationInvitationStatusRequest(server string, id OrganizationInvitationIdRoot, body ReplaceOrganizationInvitationStatusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewReplaceOrganizationInvitationStatusRequestWithBody(server, id, "application/json", bodyReader)
}

// NewReplaceOrganizationInvitationStatusRequestWithBody generates requests for ReplaceOrganizationInvitationStatus with any type of body
func NewReplaceOrganizationInvitationStatusRequestWithBody(server string, id OrganizationInvitationIdRoot, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/organization-invitations/%s/status", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListOrganizationRolesRequest generates requests for ListOrganizationRoles
func NewListOrganizationRolesRequest(server string, params *ListOrganizationRolesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/organization-roles")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Q != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "q", runtime.ParamLocationQuery, *params.Q); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateOrganizationRoleRequest calls the generic CreateOrganizationRole builder with application/json body
func NewCreateOrganizationRoleRequest(server string, body CreateOrganizationRoleJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateOrganizationRoleRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateOrganizationRoleRequestWithBody generates requests for CreateOrganizationRole with any type of body
func NewCreateOrganizationRoleRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/organization-roles")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteOrganizationRoleRequest generates requests for DeleteOrganizationRole
func NewDeleteOrganizationRoleRequest(server string, id OrganizationRoleIdRoot) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/organization-roles/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetOrganizationRoleRequest generates requests for GetOrganizationRole
func NewGetOrganizationRoleRequest(server string, id OrganizationRoleIdRoot) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/organization-roles/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateOrganizationRoleRequest calls the generic UpdateOrganizationRole builder with application/json body
func NewUpdateOrganizationRoleRequest(server string, id OrganizationRoleIdRoot, body UpdateOrganizationRoleJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateOrganizationRoleRequestWithBody(server, id, "application/json", bodyReader)
}

// NewUpdateOrganizationRoleRequestWithBody generates requests for UpdateOrganizationRole with any type of body
func NewUpdateOrganizationRoleRequestWithBody(server string, id OrganizationRoleIdRoot, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/organization-roles/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListOrganizationRoleResourceScopesRequest generates requests for ListOrganizationRoleResourceScopes
func NewListOrganizationRoleResourceScopesRequest(server string, id OrganizationRoleIdRoot, params *ListOrganizationRoleResourceScopesParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/organization-roles/%s/resource-scopes", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateOrganizationRoleResourceScopeRequest calls the generic CreateOrganizationRoleResourceScope builder with application/json body
func NewCreateOrganizationRoleResourceScopeRequest(server string, id OrganizationRoleIdRoot, body CreateOrganizationRoleResourceScopeJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateOrganizationRoleResourceScopeRequestWithBody(server, id, "application/json", bodyReader)
}

// NewCreateOrganizationRoleResourceScopeRequestWithBody generates requests for CreateOrganizationRoleResourceScope with any type of body
func NewCreateOrganizationRoleResourceScopeRequestWithBody(server string, id OrganizationRoleIdRoot, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/organization-roles/%s/resource-scopes", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewReplaceOrganizationRoleResourceScopesRequest calls the generic ReplaceOrganizationRoleResourceScopes builder with application/json body
func NewReplaceOrganizationRoleResourceScopesRequest(server string, id OrganizationRoleIdRoot, body ReplaceOrganizationRoleResourceScopesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewReplaceOrganizationRoleResourceScopesRequestWithBody(server, id, "application/json", bodyReader)
}

// NewReplaceOrganizationRoleResourceScopesRequestWithBody generates requests for ReplaceOrganizationRoleResourceScopes with any type of body
func NewReplaceOrganizationRoleResourceScopesRequestWithBody(server string, id OrganizationRoleIdRoot, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/organization-roles/%s/resource-scopes", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteOrganizationRoleResourceScopeRequest generates requests for DeleteOrganizationRoleResourceScope
func NewDeleteOrganizationRoleResourceScopeRequest(server string, id OrganizationRoleIdRoot, scopeId ScopeId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "scopeId", runtime.ParamLocationPath, scopeId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/organization-roles/%s/resource-scopes/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListOrganizationRoleScopesRequest generates requests for ListOrganizationRoleScopes
func NewListOrganizationRoleScopesRequest(server string, id OrganizationRoleIdRoot, params *ListOrganizationRoleScopesParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/organization-roles/%s/scopes", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateOrganizationRoleScopeRequest calls the generic CreateOrganizationRoleScope builder with application/json body
func NewCreateOrganizationRoleScopeRequest(server string, id OrganizationRoleIdRoot, body CreateOrganizationRoleScopeJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateOrganizationRoleScopeRequestWithBody(server, id, "application/json", bodyReader)
}

// NewCreateOrganizationRoleScopeRequestWithBody generates requests for CreateOrganizationRoleScope with any type of body
func NewCreateOrganizationRoleScopeRequestWithBody(server string, id OrganizationRoleIdRoot, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/organization-roles/%s/scopes", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewReplaceOrganizationRoleScopesRequest calls the generic ReplaceOrganizationRoleScopes builder with application/json body
func NewReplaceOrganizationRoleScopesRequest(server string, id OrganizationRoleIdRoot, body ReplaceOrganizationRoleScopesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewReplaceOrganizationRoleScopesRequestWithBody(server, id, "application/json", bodyReader)
}

// NewReplaceOrganizationRoleScopesRequestWithBody generates requests for ReplaceOrganizationRoleScopes with any type of body
func NewReplaceOrganizationRoleScopesRequestWithBody(server string, id OrganizationRoleIdRoot, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/organization-roles/%s/scopes", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteOrganizationRoleScopeRequest generates requests for DeleteOrganizationRoleScope
func NewDeleteOrganizationRoleScopeRequest(server string, id OrganizationRoleIdRoot, organizationScopeId OrganizationScopeId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "organizationScopeId", runtime.ParamLocationPath, organizationScopeId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/organization-roles/%s/scopes/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListOrganizationScopesRequest generates requests for ListOrganizationScopes
func NewListOrganizationScopesRequest(server string, params *ListOrganizationScopesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/organization-scopes")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Q != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "q", runtime.ParamLocationQuery, *params.Q); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateOrganizationScopeRequest calls the generic CreateOrganizationScope builder with application/json body
func NewCreateOrganizationScopeRequest(server string, body CreateOrganizationScopeJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateOrganizationScopeRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateOrganizationScopeRequestWithBody generates requests for CreateOrganizationScope with any type of body
func NewCreateOrganizationScopeRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/organization-scopes")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteOrganizationScopeRequest generates requests for DeleteOrganizationScope
func NewDeleteOrganizationScopeRequest(server string, id OrganizationScopeIdRoot) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/organization-scopes/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetOrganizationScopeRequest generates requests for GetOrganizationScope
func NewGetOrganizationScopeRequest(server string, id OrganizationScopeIdRoot) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/organization-scopes/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateOrganizationScopeRequest calls the generic UpdateOrganizationScope builder with application/json body
func NewUpdateOrganizationScopeRequest(server string, id OrganizationScopeIdRoot, body UpdateOrganizationScopeJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateOrganizationScopeRequestWithBody(server, id, "application/json", bodyReader)
}

// NewUpdateOrganizationScopeRequestWithBody generates requests for UpdateOrganizationScope with any type of body
func NewUpdateOrganizationScopeRequestWithBody(server string, id OrganizationScopeIdRoot, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/organization-scopes/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListOrganizationsRequest generates requests for ListOrganizations
func NewListOrganizationsRequest(server string, params *ListOrganizationsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/organizations")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Q != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "q", runtime.ParamLocationQuery, *params.Q); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ShowFeatured != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "showFeatured", runtime.ParamLocationQuery, *params.ShowFeatured); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateOrganizationRequest calls the generic CreateOrganization builder with application/json body
func NewCreateOrganizationRequest(server string, body CreateOrganizationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateOrganizationRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateOrganizationRequestWithBody generates requests for CreateOrganization with any type of body
func NewCreateOrganizationRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/organizations")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteOrganizationRequest generates requests for DeleteOrganization
func NewDeleteOrganizationRequest(server string, id OrganizationIdRoot) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/organizations/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetOrganizationRequest generates requests for GetOrganization
func NewGetOrganizationRequest(server string, id OrganizationIdRoot) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/organizations/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateOrganizationRequest calls the generic UpdateOrganization builder with application/json body
func NewUpdateOrganizationRequest(server string, id OrganizationIdRoot, body UpdateOrganizationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateOrganizationRequestWithBody(server, id, "application/json", bodyReader)
}

// NewUpdateOrganizationRequestWithBody generates requests for UpdateOrganization with any type of body
func NewUpdateOrganizationRequestWithBody(server string, id OrganizationIdRoot, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/organizations/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListOrganizationApplicationsRequest generates requests for ListOrganizationApplications
func NewListOrganizationApplicationsRequest(server string, id OrganizationIdRoot, params *ListOrganizationApplicationsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/organizations/%s/applications", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Q != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "q", runtime.ParamLocationQuery, *params.Q); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAddOrganizationApplicationsRequest calls the generic AddOrganizationApplications builder with application/json body
func NewAddOrganizationApplicationsRequest(server string, id OrganizationIdRoot, body AddOrganizationApplicationsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAddOrganizationApplicationsRequestWithBody(server, id, "application/json", bodyReader)
}

// NewAddOrganizationApplicationsRequestWithBody generates requests for AddOrganizationApplications with any type of body
func NewAddOrganizationApplicationsRequestWithBody(server string, id OrganizationIdRoot, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/organizations/%s/applications", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewReplaceOrganizationApplicationsRequest calls the generic ReplaceOrganizationApplications builder with application/json body
func NewReplaceOrganizationApplicationsRequest(server string, id OrganizationIdRoot, body ReplaceOrganizationApplicationsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewReplaceOrganizationApplicationsRequestWithBody(server, id, "application/json", bodyReader)
}

// NewReplaceOrganizationApplicationsRequestWithBody generates requests for ReplaceOrganizationApplications with any type of body
func NewReplaceOrganizationApplicationsRequestWithBody(server string, id OrganizationIdRoot, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/organizations/%s/applications", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewAssignOrganizationRolesToApplicationsRequest calls the generic AssignOrganizationRolesToApplications builder with application/json body
func NewAssignOrganizationRolesToApplicationsRequest(server string, id OrganizationIdRoot, body AssignOrganizationRolesToApplicationsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAssignOrganizationRolesToApplicationsRequestWithBody(server, id, "application/json", bodyReader)
}

// NewAssignOrganizationRolesToApplicationsRequestWithBody generates requests for AssignOrganizationRolesToApplications with any type of body
func NewAssignOrganizationRolesToApplicationsRequestWithBody(server string, id OrganizationIdRoot, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/organizations/%s/applications/roles", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteOrganizationApplicationRequest generates requests for DeleteOrganizationApplication
func NewDeleteOrganizationApplicationRequest(server string, id OrganizationIdRoot, applicationId ApplicationId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "applicationId", runtime.ParamLocationPath, applicationId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/organizations/%s/applications/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListOrganizationApplicationRolesRequest generates requests for ListOrganizationApplicationRoles
func NewListOrganizationApplicationRolesRequest(server string, id OrganizationIdRoot, applicationId ApplicationId, params *ListOrganizationApplicationRolesParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "applicationId", runtime.ParamLocationPath, applicationId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/organizations/%s/applications/%s/roles", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAssignOrganizationRolesToApplicationRequest calls the generic AssignOrganizationRolesToApplication builder with application/json body
func NewAssignOrganizationRolesToApplicationRequest(server string, id OrganizationIdRoot, applicationId ApplicationId, body AssignOrganizationRolesToApplicationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAssignOrganizationRolesToApplicationRequestWithBody(server, id, applicationId, "application/json", bodyReader)
}

// NewAssignOrganizationRolesToApplicationRequestWithBody generates requests for AssignOrganizationRolesToApplication with any type of body
func NewAssignOrganizationRolesToApplicationRequestWithBody(server string, id OrganizationIdRoot, applicationId ApplicationId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "applicationId", runtime.ParamLocationPath, applicationId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/organizations/%s/applications/%s/roles", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewReplaceOrganizationApplicationRolesRequest calls the generic ReplaceOrganizationApplicationRoles builder with application/json body
func NewReplaceOrganizationApplicationRolesRequest(server string, id OrganizationIdRoot, applicationId ApplicationId, body ReplaceOrganizationApplicationRolesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewReplaceOrganizationApplicationRolesRequestWithBody(server, id, applicationId, "application/json", bodyReader)
}

// NewReplaceOrganizationApplicationRolesRequestWithBody generates requests for ReplaceOrganizationApplicationRoles with any type of body
func NewReplaceOrganizationApplicationRolesRequestWithBody(server string, id OrganizationIdRoot, applicationId ApplicationId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "applicationId", runtime.ParamLocationPath, applicationId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/organizations/%s/applications/%s/roles", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteOrganizationApplicationRoleRequest generates requests for DeleteOrganizationApplicationRole
func NewDeleteOrganizationApplicationRoleRequest(server string, id OrganizationIdRoot, applicationId ApplicationId, organizationRoleId OrganizationRoleId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "applicationId", runtime.ParamLocationPath, applicationId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "organizationRoleId", runtime.ParamLocationPath, organizationRoleId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/organizations/%s/applications/%s/roles/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListOrganizationJitEmailDomainsRequest generates requests for ListOrganizationJitEmailDomains
func NewListOrganizationJitEmailDomainsRequest(server string, id OrganizationIdRoot, params *ListOrganizationJitEmailDomainsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/organizations/%s/jit/email-domains", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateOrganizationJitEmailDomainRequest calls the generic CreateOrganizationJitEmailDomain builder with application/json body
func NewCreateOrganizationJitEmailDomainRequest(server string, id OrganizationIdRoot, body CreateOrganizationJitEmailDomainJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateOrganizationJitEmailDomainRequestWithBody(server, id, "application/json", bodyReader)
}

// NewCreateOrganizationJitEmailDomainRequestWithBody generates requests for CreateOrganizationJitEmailDomain with any type of body
func NewCreateOrganizationJitEmailDomainRequestWithBody(server string, id OrganizationIdRoot, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/organizations/%s/jit/email-domains", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewReplaceOrganizationJitEmailDomainsRequest calls the generic ReplaceOrganizationJitEmailDomains builder with application/json body
func NewReplaceOrganizationJitEmailDomainsRequest(server string, id OrganizationIdRoot, body ReplaceOrganizationJitEmailDomainsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewReplaceOrganizationJitEmailDomainsRequestWithBody(server, id, "application/json", bodyReader)
}

// NewReplaceOrganizationJitEmailDomainsRequestWithBody generates requests for ReplaceOrganizationJitEmailDomains with any type of body
func NewReplaceOrganizationJitEmailDomainsRequestWithBody(server string, id OrganizationIdRoot, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/organizations/%s/jit/email-domains", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteOrganizationJitEmailDomainRequest generates requests for DeleteOrganizationJitEmailDomain
func NewDeleteOrganizationJitEmailDomainRequest(server string, id OrganizationIdRoot, emailDomain string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "emailDomain", runtime.ParamLocationPath, emailDomain)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/organizations/%s/jit/email-domains/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListOrganizationJitRolesRequest generates requests for ListOrganizationJitRoles
func NewListOrganizationJitRolesRequest(server string, id OrganizationIdRoot, params *ListOrganizationJitRolesParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/organizations/%s/jit/roles", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateOrganizationJitRoleRequest calls the generic CreateOrganizationJitRole builder with application/json body
func NewCreateOrganizationJitRoleRequest(server string, id OrganizationIdRoot, body CreateOrganizationJitRoleJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateOrganizationJitRoleRequestWithBody(server, id, "application/json", bodyReader)
}

// NewCreateOrganizationJitRoleRequestWithBody generates requests for CreateOrganizationJitRole with any type of body
func NewCreateOrganizationJitRoleRequestWithBody(server string, id OrganizationIdRoot, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/organizations/%s/jit/roles", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewReplaceOrganizationJitRolesRequest calls the generic ReplaceOrganizationJitRoles builder with application/json body
func NewReplaceOrganizationJitRolesRequest(server string, id OrganizationIdRoot, body ReplaceOrganizationJitRolesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewReplaceOrganizationJitRolesRequestWithBody(server, id, "application/json", bodyReader)
}

// NewReplaceOrganizationJitRolesRequestWithBody generates requests for ReplaceOrganizationJitRoles with any type of body
func NewReplaceOrganizationJitRolesRequestWithBody(server string, id OrganizationIdRoot, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/organizations/%s/jit/roles", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteOrganizationJitRoleRequest generates requests for DeleteOrganizationJitRole
func NewDeleteOrganizationJitRoleRequest(server string, id OrganizationIdRoot, organizationRoleId OrganizationRoleId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "organizationRoleId", runtime.ParamLocationPath, organizationRoleId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/organizations/%s/jit/roles/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListOrganizationJitSsoConnectorsRequest generates requests for ListOrganizationJitSsoConnectors
func NewListOrganizationJitSsoConnectorsRequest(server string, id OrganizationIdRoot, params *ListOrganizationJitSsoConnectorsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/organizations/%s/jit/sso-connectors", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateOrganizationJitSsoConnectorRequest calls the generic CreateOrganizationJitSsoConnector builder with application/json body
func NewCreateOrganizationJitSsoConnectorRequest(server string, id OrganizationIdRoot, body CreateOrganizationJitSsoConnectorJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateOrganizationJitSsoConnectorRequestWithBody(server, id, "application/json", bodyReader)
}

// NewCreateOrganizationJitSsoConnectorRequestWithBody generates requests for CreateOrganizationJitSsoConnector with any type of body
func NewCreateOrganizationJitSsoConnectorRequestWithBody(server string, id OrganizationIdRoot, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/organizations/%s/jit/sso-connectors", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewReplaceOrganizationJitSsoConnectorsRequest calls the generic ReplaceOrganizationJitSsoConnectors builder with application/json body
func NewReplaceOrganizationJitSsoConnectorsRequest(server string, id OrganizationIdRoot, body ReplaceOrganizationJitSsoConnectorsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewReplaceOrganizationJitSsoConnectorsRequestWithBody(server, id, "application/json", bodyReader)
}

// NewReplaceOrganizationJitSsoConnectorsRequestWithBody generates requests for ReplaceOrganizationJitSsoConnectors with any type of body
func NewReplaceOrganizationJitSsoConnectorsRequestWithBody(server string, id OrganizationIdRoot, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/organizations/%s/jit/sso-connectors", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteOrganizationJitSsoConnectorRequest generates requests for DeleteOrganizationJitSsoConnector
func NewDeleteOrganizationJitSsoConnectorRequest(server string, id OrganizationIdRoot, ssoConnectorId SsoConnectorId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "ssoConnectorId", runtime.ParamLocationPath, ssoConnectorId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/organizations/%s/jit/sso-connectors/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListOrganizationUsersRequest generates requests for ListOrganizationUsers
func NewListOrganizationUsersRequest(server string, id OrganizationIdRoot, params *ListOrganizationUsersParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/organizations/%s/users", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Q != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "q", runtime.ParamLocationQuery, *params.Q); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAddOrganizationUsersRequest calls the generic AddOrganizationUsers builder with application/json body
func NewAddOrganizationUsersRequest(server string, id OrganizationIdRoot, body AddOrganizationUsersJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAddOrganizationUsersRequestWithBody(server, id, "application/json", bodyReader)
}

// NewAddOrganizationUsersRequestWithBody generates requests for AddOrganizationUsers with any type of body
func NewAddOrganizationUsersRequestWithBody(server string, id OrganizationIdRoot, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/organizations/%s/users", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewReplaceOrganizationUsersRequest calls the generic ReplaceOrganizationUsers builder with application/json body
func NewReplaceOrganizationUsersRequest(server string, id OrganizationIdRoot, body ReplaceOrganizationUsersJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewReplaceOrganizationUsersRequestWithBody(server, id, "application/json", bodyReader)
}

// NewReplaceOrganizationUsersRequestWithBody generates requests for ReplaceOrganizationUsers with any type of body
func NewReplaceOrganizationUsersRequestWithBody(server string, id OrganizationIdRoot, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/organizations/%s/users", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewAssignOrganizationRolesToUsersRequest calls the generic AssignOrganizationRolesToUsers builder with application/json body
func NewAssignOrganizationRolesToUsersRequest(server string, id OrganizationIdRoot, body AssignOrganizationRolesToUsersJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAssignOrganizationRolesToUsersRequestWithBody(server, id, "application/json", bodyReader)
}

// NewAssignOrganizationRolesToUsersRequestWithBody generates requests for AssignOrganizationRolesToUsers with any type of body
func NewAssignOrganizationRolesToUsersRequestWithBody(server string, id OrganizationIdRoot, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/organizations/%s/users/roles", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteOrganizationUserRequest generates requests for DeleteOrganizationUser
func NewDeleteOrganizationUserRequest(server string, id OrganizationIdRoot, userId UserId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "userId", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/organizations/%s/users/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListOrganizationUserRolesRequest generates requests for ListOrganizationUserRoles
func NewListOrganizationUserRolesRequest(server string, id OrganizationIdRoot, userId UserId, params *ListOrganizationUserRolesParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "userId", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/organizations/%s/users/%s/roles", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAssignOrganizationRolesToUserRequest calls the generic AssignOrganizationRolesToUser builder with application/json body
func NewAssignOrganizationRolesToUserRequest(server string, id OrganizationIdRoot, userId UserId, body AssignOrganizationRolesToUserJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAssignOrganizationRolesToUserRequestWithBody(server, id, userId, "application/json", bodyReader)
}

// NewAssignOrganizationRolesToUserRequestWithBody generates requests for AssignOrganizationRolesToUser with any type of body
func NewAssignOrganizationRolesToUserRequestWithBody(server string, id OrganizationIdRoot, userId UserId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "userId", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/organizations/%s/users/%s/roles", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewReplaceOrganizationUserRolesRequest calls the generic ReplaceOrganizationUserRoles builder with application/json body
func NewReplaceOrganizationUserRolesRequest(server string, id OrganizationIdRoot, userId UserId, body ReplaceOrganizationUserRolesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewReplaceOrganizationUserRolesRequestWithBody(server, id, userId, "application/json", bodyReader)
}

// NewReplaceOrganizationUserRolesRequestWithBody generates requests for ReplaceOrganizationUserRoles with any type of body
func NewReplaceOrganizationUserRolesRequestWithBody(server string, id OrganizationIdRoot, userId UserId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "userId", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/organizations/%s/users/%s/roles", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteOrganizationUserRoleRequest generates requests for DeleteOrganizationUserRole
func NewDeleteOrganizationUserRoleRequest(server string, id OrganizationIdRoot, userId UserId, organizationRoleId OrganizationRoleId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "userId", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "organizationRoleId", runtime.ParamLocationPath, organizationRoleId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/organizations/%s/users/%s/roles/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListOrganizationUserScopesRequest generates requests for ListOrganizationUserScopes
func NewListOrganizationUserScopesRequest(server string, id OrganizationIdRoot, userId UserId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "userId", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/organizations/%s/users/%s/scopes", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListResourcesRequest generates requests for ListResources
func NewListResourcesRequest(server string, params *ListResourcesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/resources")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.IncludeScopes != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "includeScopes", runtime.ParamLocationQuery, *params.IncludeScopes); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateResourceRequest calls the generic CreateResource builder with application/json body
func NewCreateResourceRequest(server string, body CreateResourceJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateResourceRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateResourceRequestWithBody generates requests for CreateResource with any type of body
func NewCreateResourceRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/resources")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteResourceRequest generates requests for DeleteResource
func NewDeleteResourceRequest(server string, id ResourceIdRoot) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/resources/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetResourceRequest generates requests for GetResource
func NewGetResourceRequest(server string, id ResourceIdRoot) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/resources/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateResourceRequest calls the generic UpdateResource builder with application/json body
func NewUpdateResourceRequest(server string, id ResourceIdRoot, body UpdateResourceJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateResourceRequestWithBody(server, id, "application/json", bodyReader)
}

// NewUpdateResourceRequestWithBody generates requests for UpdateResource with any type of body
func NewUpdateResourceRequestWithBody(server string, id ResourceIdRoot, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/resources/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewUpdateResourceIsDefaultRequest calls the generic UpdateResourceIsDefault builder with application/json body
func NewUpdateResourceIsDefaultRequest(server string, id ResourceIdRoot, body UpdateResourceIsDefaultJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateResourceIsDefaultRequestWithBody(server, id, "application/json", bodyReader)
}

// NewUpdateResourceIsDefaultRequestWithBody generates requests for UpdateResourceIsDefault with any type of body
func NewUpdateResourceIsDefaultRequestWithBody(server string, id ResourceIdRoot, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/resources/%s/is-default", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListResourceScopesRequest generates requests for ListResourceScopes
func NewListResourceScopesRequest(server string, resourceId ResourceId, params *ListResourceScopesParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "resourceId", runtime.ParamLocationPath, resourceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/resources/%s/scopes", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SearchParams != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "search_params", runtime.ParamLocationQuery, *params.SearchParams); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateResourceScopeRequest calls the generic CreateResourceScope builder with application/json body
func NewCreateResourceScopeRequest(server string, resourceId ResourceId, body CreateResourceScopeJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateResourceScopeRequestWithBody(server, resourceId, "application/json", bodyReader)
}

// NewCreateResourceScopeRequestWithBody generates requests for CreateResourceScope with any type of body
func NewCreateResourceScopeRequestWithBody(server string, resourceId ResourceId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "resourceId", runtime.ParamLocationPath, resourceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/resources/%s/scopes", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteResourceScopeRequest generates requests for DeleteResourceScope
func NewDeleteResourceScopeRequest(server string, resourceId ResourceId, scopeId ScopeId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "resourceId", runtime.ParamLocationPath, resourceId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "scopeId", runtime.ParamLocationPath, scopeId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/resources/%s/scopes/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateResourceScopeRequest calls the generic UpdateResourceScope builder with application/json body
func NewUpdateResourceScopeRequest(server string, resourceId ResourceId, scopeId ScopeId, body UpdateResourceScopeJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateResourceScopeRequestWithBody(server, resourceId, scopeId, "application/json", bodyReader)
}

// NewUpdateResourceScopeRequestWithBody generates requests for UpdateResourceScope with any type of body
func NewUpdateResourceScopeRequestWithBody(server string, resourceId ResourceId, scopeId ScopeId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "resourceId", runtime.ParamLocationPath, resourceId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "scopeId", runtime.ParamLocationPath, scopeId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/resources/%s/scopes/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListRolesRequest generates requests for ListRoles
func NewListRolesRequest(server string, params *ListRolesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/roles")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ExcludeUserId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "excludeUserId", runtime.ParamLocationQuery, *params.ExcludeUserId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ExcludeApplicationId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "excludeApplicationId", runtime.ParamLocationQuery, *params.ExcludeApplicationId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Type != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "type", runtime.ParamLocationQuery, *params.Type); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SearchParams != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "search_params", runtime.ParamLocationQuery, *params.SearchParams); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateRoleRequest calls the generic CreateRole builder with application/json body
func NewCreateRoleRequest(server string, body CreateRoleJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateRoleRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateRoleRequestWithBody generates requests for CreateRole with any type of body
func NewCreateRoleRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/roles")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteRoleRequest generates requests for DeleteRole
func NewDeleteRoleRequest(server string, id RoleIdRoot) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/roles/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetRoleRequest generates requests for GetRole
func NewGetRoleRequest(server string, id RoleIdRoot) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/roles/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateRoleRequest calls the generic UpdateRole builder with application/json body
func NewUpdateRoleRequest(server string, id RoleIdRoot, body UpdateRoleJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateRoleRequestWithBody(server, id, "application/json", bodyReader)
}

// NewUpdateRoleRequestWithBody generates requests for UpdateRole with any type of body
func NewUpdateRoleRequestWithBody(server string, id RoleIdRoot, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/roles/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListRoleApplicationsRequest generates requests for ListRoleApplications
func NewListRoleApplicationsRequest(server string, id RoleIdRoot, params *ListRoleApplicationsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/roles/%s/applications", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SearchParams != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "search_params", runtime.ParamLocationQuery, *params.SearchParams); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateRoleApplicationRequest calls the generic CreateRoleApplication builder with application/json body
func NewCreateRoleApplicationRequest(server string, id RoleIdRoot, body CreateRoleApplicationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateRoleApplicationRequestWithBody(server, id, "application/json", bodyReader)
}

// NewCreateRoleApplicationRequestWithBody generates requests for CreateRoleApplication with any type of body
func NewCreateRoleApplicationRequestWithBody(server string, id RoleIdRoot, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/roles/%s/applications", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteRoleApplicationRequest generates requests for DeleteRoleApplication
func NewDeleteRoleApplicationRequest(server string, id RoleIdRoot, applicationId ApplicationId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "applicationId", runtime.ParamLocationPath, applicationId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/roles/%s/applications/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListRoleScopesRequest generates requests for ListRoleScopes
func NewListRoleScopesRequest(server string, id RoleIdRoot, params *ListRoleScopesParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/roles/%s/scopes", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SearchParams != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "search_params", runtime.ParamLocationQuery, *params.SearchParams); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateRoleScopeRequest calls the generic CreateRoleScope builder with application/json body
func NewCreateRoleScopeRequest(server string, id RoleIdRoot, body CreateRoleScopeJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateRoleScopeRequestWithBody(server, id, "application/json", bodyReader)
}

// NewCreateRoleScopeRequestWithBody generates requests for CreateRoleScope with any type of body
func NewCreateRoleScopeRequestWithBody(server string, id RoleIdRoot, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/roles/%s/scopes", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteRoleScopeRequest generates requests for DeleteRoleScope
func NewDeleteRoleScopeRequest(server string, id RoleIdRoot, scopeId ScopeId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "scopeId", runtime.ParamLocationPath, scopeId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/roles/%s/scopes/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListRoleUsersRequest generates requests for ListRoleUsers
func NewListRoleUsersRequest(server string, id RoleIdRoot, params *ListRoleUsersParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/roles/%s/users", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SearchParams != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "search_params", runtime.ParamLocationQuery, *params.SearchParams); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateRoleUserRequest calls the generic CreateRoleUser builder with application/json body
func NewCreateRoleUserRequest(server string, id RoleIdRoot, body CreateRoleUserJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateRoleUserRequestWithBody(server, id, "application/json", bodyReader)
}

// NewCreateRoleUserRequestWithBody generates requests for CreateRoleUser with any type of body
func NewCreateRoleUserRequestWithBody(server string, id RoleIdRoot, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/roles/%s/users", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteRoleUserRequest generates requests for DeleteRoleUser
func NewDeleteRoleUserRequest(server string, id RoleIdRoot, userId UserId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "userId", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/roles/%s/users/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateSamlApplicationRequest calls the generic CreateSamlApplication builder with application/json body
func NewCreateSamlApplicationRequest(server string, body CreateSamlApplicationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateSamlApplicationRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateSamlApplicationRequestWithBody generates requests for CreateSamlApplication with any type of body
func NewCreateSamlApplicationRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/saml-applications")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteSamlApplicationRequest generates requests for DeleteSamlApplication
func NewDeleteSamlApplicationRequest(server string, id SamlApplicationIdRoot) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/saml-applications/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSamlApplicationRequest generates requests for GetSamlApplication
func NewGetSamlApplicationRequest(server string, id SamlApplicationIdRoot) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/saml-applications/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateSamlApplicationRequest calls the generic UpdateSamlApplication builder with application/json body
func NewUpdateSamlApplicationRequest(server string, id SamlApplicationIdRoot, body UpdateSamlApplicationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateSamlApplicationRequestWithBody(server, id, "application/json", bodyReader)
}

// NewUpdateSamlApplicationRequestWithBody generates requests for UpdateSamlApplication with any type of body
func NewUpdateSamlApplicationRequestWithBody(server string, id SamlApplicationIdRoot, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/saml-applications/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetSamlApplicationCallbackRequest generates requests for GetSamlApplicationCallback
func NewGetSamlApplicationCallbackRequest(server string, id SamlApplicationIdRoot, params *GetSamlApplicationCallbackParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/saml-applications/%s/callback", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Code != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "code", runtime.ParamLocationQuery, *params.Code); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.State != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "state", runtime.ParamLocationQuery, *params.State); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.RedirectUri != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "redirectUri", runtime.ParamLocationQuery, *params.RedirectUri); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Error != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "error", runtime.ParamLocationQuery, *params.Error); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ErrorDescription != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "error_description", runtime.ParamLocationQuery, *params.ErrorDescription); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListSamlApplicationMetadataRequest generates requests for ListSamlApplicationMetadata
func NewListSamlApplicationMetadataRequest(server string, id SamlApplicationIdRoot) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/saml-applications/%s/metadata", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListSamlApplicationSecretsRequest generates requests for ListSamlApplicationSecrets
func NewListSamlApplicationSecretsRequest(server string, id SamlApplicationIdRoot) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/saml-applications/%s/secrets", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateSamlApplicationSecretRequest calls the generic CreateSamlApplicationSecret builder with application/json body
func NewCreateSamlApplicationSecretRequest(server string, id SamlApplicationIdRoot, body CreateSamlApplicationSecretJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateSamlApplicationSecretRequestWithBody(server, id, "application/json", bodyReader)
}

// NewCreateSamlApplicationSecretRequestWithBody generates requests for CreateSamlApplicationSecret with any type of body
func NewCreateSamlApplicationSecretRequestWithBody(server string, id SamlApplicationIdRoot, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/saml-applications/%s/secrets", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteSamlApplicationSecretRequest generates requests for DeleteSamlApplicationSecret
func NewDeleteSamlApplicationSecretRequest(server string, id SamlApplicationIdRoot, secretId SecretId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "secretId", runtime.ParamLocationPath, secretId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/saml-applications/%s/secrets/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateSamlApplicationSecretRequest calls the generic UpdateSamlApplicationSecret builder with application/json body
func NewUpdateSamlApplicationSecretRequest(server string, id SamlApplicationIdRoot, secretId SecretId, body UpdateSamlApplicationSecretJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateSamlApplicationSecretRequestWithBody(server, id, secretId, "application/json", bodyReader)
}

// NewUpdateSamlApplicationSecretRequestWithBody generates requests for UpdateSamlApplicationSecret with any type of body
func NewUpdateSamlApplicationSecretRequestWithBody(server string, id SamlApplicationIdRoot, secretId SecretId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "secretId", runtime.ParamLocationPath, secretId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/saml-applications/%s/secrets/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetSamlAuthnRequest generates requests for GetSamlAuthn
func NewGetSamlAuthnRequest(server string, id SamlIdRoot, params *GetSamlAuthnParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/saml/%s/authn", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "SAMLRequest", runtime.ParamLocationQuery, params.SAMLRequest); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Signature != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Signature", runtime.ParamLocationQuery, *params.Signature); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SigAlg != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "SigAlg", runtime.ParamLocationQuery, *params.SigAlg); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.RelayState != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "RelayState", runtime.ParamLocationQuery, *params.RelayState); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateSamlAuthnRequest calls the generic CreateSamlAuthn builder with application/json body
func NewCreateSamlAuthnRequest(server string, id SamlIdRoot, body CreateSamlAuthnJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateSamlAuthnRequestWithBody(server, id, "application/json", bodyReader)
}

// NewCreateSamlAuthnRequestWithFormdataBody calls the generic CreateSamlAuthn builder with application/x-www-form-urlencoded body
func NewCreateSamlAuthnRequestWithFormdataBody(server string, id SamlIdRoot, body CreateSamlAuthnFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewCreateSamlAuthnRequestWithBody(server, id, "application/x-www-form-urlencoded", bodyReader)
}

// NewCreateSamlAuthnRequestWithBody generates requests for CreateSamlAuthn with any type of body
func NewCreateSamlAuthnRequestWithBody(server string, id SamlIdRoot, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/saml/%s/authn", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteSentinelActivitiesRequest calls the generic DeleteSentinelActivities builder with application/json body
func NewDeleteSentinelActivitiesRequest(server string, body DeleteSentinelActivitiesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDeleteSentinelActivitiesRequestWithBody(server, "application/json", bodyReader)
}

// NewDeleteSentinelActivitiesRequestWithBody generates requests for DeleteSentinelActivities with any type of body
func NewDeleteSentinelActivitiesRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/sentinel-activities/delete")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetSignInExpRequest generates requests for GetSignInExp
func NewGetSignInExpRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/sign-in-exp")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateSignInExpRequest calls the generic UpdateSignInExp builder with application/json body
func NewUpdateSignInExpRequest(server string, params *UpdateSignInExpParams, body UpdateSignInExpJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateSignInExpRequestWithBody(server, params, "application/json", bodyReader)
}

// NewUpdateSignInExpRequestWithBody generates requests for UpdateSignInExp with any type of body
func NewUpdateSignInExpRequestWithBody(server string, params *UpdateSignInExpParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/sign-in-exp")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.RemoveUnusedDemoSocialConnector != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "removeUnusedDemoSocialConnector", runtime.ParamLocationQuery, *params.RemoveUnusedDemoSocialConnector); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCheckPasswordWithDefaultSignInExperienceRequest calls the generic CheckPasswordWithDefaultSignInExperience builder with application/json body
func NewCheckPasswordWithDefaultSignInExperienceRequest(server string, body CheckPasswordWithDefaultSignInExperienceJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCheckPasswordWithDefaultSignInExperienceRequestWithBody(server, "application/json", bodyReader)
}

// NewCheckPasswordWithDefaultSignInExperienceRequestWithBody generates requests for CheckPasswordWithDefaultSignInExperience with any type of body
func NewCheckPasswordWithDefaultSignInExperienceRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/sign-in-exp/default/check-password")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewUploadCustomUiAssetsRequestWithBody generates requests for UploadCustomUiAssets with any type of body
func NewUploadCustomUiAssetsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/sign-in-exp/default/custom-ui-assets")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListSsoConnectorProvidersRequest generates requests for ListSsoConnectorProviders
func NewListSsoConnectorProvidersRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/sso-connector-providers")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListSsoConnectorsRequest generates requests for ListSsoConnectors
func NewListSsoConnectorsRequest(server string, params *ListSsoConnectorsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/sso-connectors")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateSsoConnectorRequest calls the generic CreateSsoConnector builder with application/json body
func NewCreateSsoConnectorRequest(server string, body CreateSsoConnectorJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateSsoConnectorRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateSsoConnectorRequestWithBody generates requests for CreateSsoConnector with any type of body
func NewCreateSsoConnectorRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/sso-connectors")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteSsoConnectorRequest generates requests for DeleteSsoConnector
func NewDeleteSsoConnectorRequest(server string, id SsoConnectorIdRoot) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/sso-connectors/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSsoConnectorRequest generates requests for GetSsoConnector
func NewGetSsoConnectorRequest(server string, id SsoConnectorIdRoot) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/sso-connectors/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateSsoConnectorRequest calls the generic UpdateSsoConnector builder with application/json body
func NewUpdateSsoConnectorRequest(server string, id SsoConnectorIdRoot, body UpdateSsoConnectorJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateSsoConnectorRequestWithBody(server, id, "application/json", bodyReader)
}

// NewUpdateSsoConnectorRequestWithBody generates requests for UpdateSsoConnector with any type of body
func NewUpdateSsoConnectorRequestWithBody(server string, id SsoConnectorIdRoot, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/sso-connectors/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetStatusRequest generates requests for GetStatus
func NewGetStatusRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/status")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateSubjectTokenRequest calls the generic CreateSubjectToken builder with application/json body
func NewCreateSubjectTokenRequest(server string, body CreateSubjectTokenJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateSubjectTokenRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateSubjectTokenRequestWithBody generates requests for CreateSubjectToken with any type of body
func NewCreateSubjectTokenRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/subject-tokens")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetSwaggerJsonRequest generates requests for GetSwaggerJson
func NewGetSwaggerJsonRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/swagger.json")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSystemApplicationConfigRequest generates requests for GetSystemApplicationConfig
func NewGetSystemApplicationConfigRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/systems/application")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateUserAssetRequestWithBody generates requests for CreateUserAsset with any type of body
func NewCreateUserAssetRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/user-assets")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetUserAssetServiceStatusRequest generates requests for GetUserAssetServiceStatus
func NewGetUserAssetServiceStatusRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/user-assets/service-status")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListUsersRequest generates requests for ListUsers
func NewListUsersRequest(server string, params *ListUsersParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/users")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SearchParams != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "search_params", runtime.ParamLocationQuery, *params.SearchParams); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateUserRequest calls the generic CreateUser builder with application/json body
func NewCreateUserRequest(server string, body CreateUserJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateUserRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateUserRequestWithBody generates requests for CreateUser with any type of body
func NewCreateUserRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/users")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteUserRequest generates requests for DeleteUser
func NewDeleteUserRequest(server string, userId UserId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "userId", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/users/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetUserRequest generates requests for GetUser
func NewGetUserRequest(server string, userId UserId, params *GetUserParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "userId", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/users/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.IncludeSsoIdentities != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "includeSsoIdentities", runtime.ParamLocationQuery, *params.IncludeSsoIdentities); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateUserRequest calls the generic UpdateUser builder with application/json body
func NewUpdateUserRequest(server string, userId UserId, body UpdateUserJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateUserRequestWithBody(server, userId, "application/json", bodyReader)
}

// NewUpdateUserRequestWithBody generates requests for UpdateUser with any type of body
func NewUpdateUserRequestWithBody(server string, userId UserId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "userId", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/users/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListUserCustomDataRequest generates requests for ListUserCustomData
func NewListUserCustomDataRequest(server string, userId UserId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "userId", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/users/%s/custom-data", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateUserCustomDataRequest calls the generic UpdateUserCustomData builder with application/json body
func NewUpdateUserCustomDataRequest(server string, userId UserId, body UpdateUserCustomDataJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateUserCustomDataRequestWithBody(server, userId, "application/json", bodyReader)
}

// NewUpdateUserCustomDataRequestWithBody generates requests for UpdateUserCustomData with any type of body
func NewUpdateUserCustomDataRequestWithBody(server string, userId UserId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "userId", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/users/%s/custom-data", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetUserHasPasswordRequest generates requests for GetUserHasPassword
func NewGetUserHasPasswordRequest(server string, userId UserId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "userId", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/users/%s/has-password", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateUserIdentityRequest calls the generic CreateUserIdentity builder with application/json body
func NewCreateUserIdentityRequest(server string, userId UserId, body CreateUserIdentityJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateUserIdentityRequestWithBody(server, userId, "application/json", bodyReader)
}

// NewCreateUserIdentityRequestWithBody generates requests for CreateUserIdentity with any type of body
func NewCreateUserIdentityRequestWithBody(server string, userId UserId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "userId", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/users/%s/identities", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteUserIdentityRequest generates requests for DeleteUserIdentity
func NewDeleteUserIdentityRequest(server string, userId UserId, target string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "userId", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "target", runtime.ParamLocationPath, target)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/users/%s/identities/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewReplaceUserIdentityRequest calls the generic ReplaceUserIdentity builder with application/json body
func NewReplaceUserIdentityRequest(server string, userId UserId, target string, body ReplaceUserIdentityJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewReplaceUserIdentityRequestWithBody(server, userId, target, "application/json", bodyReader)
}

// NewReplaceUserIdentityRequestWithBody generates requests for ReplaceUserIdentity with any type of body
func NewReplaceUserIdentityRequestWithBody(server string, userId UserId, target string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "userId", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "target", runtime.ParamLocationPath, target)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/users/%s/identities/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewUpdateUserIsSuspendedRequest calls the generic UpdateUserIsSuspended builder with application/json body
func NewUpdateUserIsSuspendedRequest(server string, userId UserId, body UpdateUserIsSuspendedJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateUserIsSuspendedRequestWithBody(server, userId, "application/json", bodyReader)
}

// NewUpdateUserIsSuspendedRequestWithBody generates requests for UpdateUserIsSuspended with any type of body
func NewUpdateUserIsSuspendedRequestWithBody(server string, userId UserId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "userId", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/users/%s/is-suspended", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListUserMfaVerificationsRequest generates requests for ListUserMfaVerifications
func NewListUserMfaVerificationsRequest(server string, userId UserId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "userId", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/users/%s/mfa-verifications", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateUserMfaVerificationRequest calls the generic CreateUserMfaVerification builder with application/json body
func NewCreateUserMfaVerificationRequest(server string, userId UserId, body CreateUserMfaVerificationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateUserMfaVerificationRequestWithBody(server, userId, "application/json", bodyReader)
}

// NewCreateUserMfaVerificationRequestWithBody generates requests for CreateUserMfaVerification with any type of body
func NewCreateUserMfaVerificationRequestWithBody(server string, userId UserId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "userId", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/users/%s/mfa-verifications", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteUserMfaVerificationRequest generates requests for DeleteUserMfaVerification
func NewDeleteUserMfaVerificationRequest(server string, userId UserId, verificationId VerificationId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "userId", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "verificationId", runtime.ParamLocationPath, verificationId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/users/%s/mfa-verifications/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListUserOrganizationsRequest generates requests for ListUserOrganizations
func NewListUserOrganizationsRequest(server string, userId UserId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "userId", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/users/%s/organizations", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateUserPasswordRequest calls the generic UpdateUserPassword builder with application/json body
func NewUpdateUserPasswordRequest(server string, userId UserId, body UpdateUserPasswordJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateUserPasswordRequestWithBody(server, userId, "application/json", bodyReader)
}

// NewUpdateUserPasswordRequestWithBody generates requests for UpdateUserPassword with any type of body
func NewUpdateUserPasswordRequestWithBody(server string, userId UserId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "userId", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/users/%s/password", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewVerifyUserPasswordRequest calls the generic VerifyUserPassword builder with application/json body
func NewVerifyUserPasswordRequest(server string, userId UserId, body VerifyUserPasswordJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewVerifyUserPasswordRequestWithBody(server, userId, "application/json", bodyReader)
}

// NewVerifyUserPasswordRequestWithBody generates requests for VerifyUserPassword with any type of body
func NewVerifyUserPasswordRequestWithBody(server string, userId UserId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "userId", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/users/%s/password/verify", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListUserPersonalAccessTokensRequest generates requests for ListUserPersonalAccessTokens
func NewListUserPersonalAccessTokensRequest(server string, userId UserId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "userId", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/users/%s/personal-access-tokens", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateUserPersonalAccessTokenRequest calls the generic CreateUserPersonalAccessToken builder with application/json body
func NewCreateUserPersonalAccessTokenRequest(server string, userId UserId, body CreateUserPersonalAccessTokenJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateUserPersonalAccessTokenRequestWithBody(server, userId, "application/json", bodyReader)
}

// NewCreateUserPersonalAccessTokenRequestWithBody generates requests for CreateUserPersonalAccessToken with any type of body
func NewCreateUserPersonalAccessTokenRequestWithBody(server string, userId UserId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "userId", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/users/%s/personal-access-tokens", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteUserPersonalAccessTokenRequest generates requests for DeleteUserPersonalAccessToken
func NewDeleteUserPersonalAccessTokenRequest(server string, userId UserId, name string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "userId", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/users/%s/personal-access-tokens/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateUserPersonalAccessTokenRequest calls the generic UpdateUserPersonalAccessToken builder with application/json body
func NewUpdateUserPersonalAccessTokenRequest(server string, userId UserId, name string, body UpdateUserPersonalAccessTokenJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateUserPersonalAccessTokenRequestWithBody(server, userId, name, "application/json", bodyReader)
}

// NewUpdateUserPersonalAccessTokenRequestWithBody generates requests for UpdateUserPersonalAccessToken with any type of body
func NewUpdateUserPersonalAccessTokenRequestWithBody(server string, userId UserId, name string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "userId", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/users/%s/personal-access-tokens/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewUpdateUserProfileRequest calls the generic UpdateUserProfile builder with application/json body
func NewUpdateUserProfileRequest(server string, userId UserId, body UpdateUserProfileJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateUserProfileRequestWithBody(server, userId, "application/json", bodyReader)
}

// NewUpdateUserProfileRequestWithBody generates requests for UpdateUserProfile with any type of body
func NewUpdateUserProfileRequestWithBody(server string, userId UserId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "userId", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/users/%s/profile", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListUserRolesRequest generates requests for ListUserRoles
func NewListUserRolesRequest(server string, userId UserId, params *ListUserRolesParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "userId", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/users/%s/roles", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SearchParams != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "search_params", runtime.ParamLocationQuery, *params.SearchParams); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAssignUserRolesRequest calls the generic AssignUserRoles builder with application/json body
func NewAssignUserRolesRequest(server string, userId UserId, body AssignUserRolesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAssignUserRolesRequestWithBody(server, userId, "application/json", bodyReader)
}

// NewAssignUserRolesRequestWithBody generates requests for AssignUserRoles with any type of body
func NewAssignUserRolesRequestWithBody(server string, userId UserId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "userId", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/users/%s/roles", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewReplaceUserRolesRequest calls the generic ReplaceUserRoles builder with application/json body
func NewReplaceUserRolesRequest(server string, userId UserId, body ReplaceUserRolesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewReplaceUserRolesRequestWithBody(server, userId, "application/json", bodyReader)
}

// NewReplaceUserRolesRequestWithBody generates requests for ReplaceUserRoles with any type of body
func NewReplaceUserRolesRequestWithBody(server string, userId UserId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "userId", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/users/%s/roles", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteUserRoleRequest generates requests for DeleteUserRole
func NewDeleteUserRoleRequest(server string, userId UserId, roleId RoleId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "userId", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "roleId", runtime.ParamLocationPath, roleId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/users/%s/roles/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateVerificationCodeRequest calls the generic CreateVerificationCode builder with application/json body
func NewCreateVerificationCodeRequest(server string, body CreateVerificationCodeJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateVerificationCodeRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateVerificationCodeRequestWithBody generates requests for CreateVerificationCode with any type of body
func NewCreateVerificationCodeRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/verification-codes")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewVerifyVerificationCodeRequest calls the generic VerifyVerificationCode builder with application/json body
func NewVerifyVerificationCodeRequest(server string, body VerifyVerificationCodeJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewVerifyVerificationCodeRequestWithBody(server, "application/json", bodyReader)
}

// NewVerifyVerificationCodeRequestWithBody generates requests for VerifyVerificationCode with any type of body
func NewVerifyVerificationCodeRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/verification-codes/verify")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCreateVerificationByPasswordRequest calls the generic CreateVerificationByPassword builder with application/json body
func NewCreateVerificationByPasswordRequest(server string, body CreateVerificationByPasswordJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateVerificationByPasswordRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateVerificationByPasswordRequestWithBody generates requests for CreateVerificationByPassword with any type of body
func NewCreateVerificationByPasswordRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/verifications/password")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCreateVerificationBySocialRequest calls the generic CreateVerificationBySocial builder with application/json body
func NewCreateVerificationBySocialRequest(server string, body CreateVerificationBySocialJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateVerificationBySocialRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateVerificationBySocialRequestWithBody generates requests for CreateVerificationBySocial with any type of body
func NewCreateVerificationBySocialRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/verifications/social")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewVerifyVerificationBySocialRequest calls the generic VerifyVerificationBySocial builder with application/json body
func NewVerifyVerificationBySocialRequest(server string, body VerifyVerificationBySocialJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewVerifyVerificationBySocialRequestWithBody(server, "application/json", bodyReader)
}

// NewVerifyVerificationBySocialRequestWithBody generates requests for VerifyVerificationBySocial with any type of body
func NewVerifyVerificationBySocialRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/verifications/social/verify")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCreateVerificationByVerificationCodeRequest calls the generic CreateVerificationByVerificationCode builder with application/json body
func NewCreateVerificationByVerificationCodeRequest(server string, body CreateVerificationByVerificationCodeJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateVerificationByVerificationCodeRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateVerificationByVerificationCodeRequestWithBody generates requests for CreateVerificationByVerificationCode with any type of body
func NewCreateVerificationByVerificationCodeRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/verifications/verification-code")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewVerifyVerificationByVerificationCodeRequest calls the generic VerifyVerificationByVerificationCode builder with application/json body
func NewVerifyVerificationByVerificationCodeRequest(server string, body VerifyVerificationByVerificationCodeJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewVerifyVerificationByVerificationCodeRequestWithBody(server, "application/json", bodyReader)
}

// NewVerifyVerificationByVerificationCodeRequestWithBody generates requests for VerifyVerificationByVerificationCode with any type of body
func NewVerifyVerificationByVerificationCodeRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/verifications/verification-code/verify")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGenerateWebAuthnRegistrationOptionsRequest generates requests for GenerateWebAuthnRegistrationOptions
func NewGenerateWebAuthnRegistrationOptionsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/verifications/web-authn/registration")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewVerifyWebAuthnRegistrationRequest calls the generic VerifyWebAuthnRegistration builder with application/json body
func NewVerifyWebAuthnRegistrationRequest(server string, body VerifyWebAuthnRegistrationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewVerifyWebAuthnRegistrationRequestWithBody(server, "application/json", bodyReader)
}

// NewVerifyWebAuthnRegistrationRequestWithBody generates requests for VerifyWebAuthnRegistration with any type of body
func NewVerifyWebAuthnRegistrationRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/verifications/web-authn/registration/verify")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetWellKnownExperienceWithResponse request
	GetWellKnownExperienceWithResponse(ctx context.Context, params *GetWellKnownExperienceParams, reqEditors ...RequestEditorFn) (*GetWellKnownExperienceResponse, error)

	// GetWellKnownExperienceOpenapiJsonWithResponse request
	GetWellKnownExperienceOpenapiJsonWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetWellKnownExperienceOpenapiJsonResponse, error)

	// GetWellKnownManagementOpenapiJsonWithResponse request
	GetWellKnownManagementOpenapiJsonWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetWellKnownManagementOpenapiJsonResponse, error)

	// GetSignInExperiencePhrasesWithResponse request
	GetSignInExperiencePhrasesWithResponse(ctx context.Context, params *GetSignInExperiencePhrasesParams, reqEditors ...RequestEditorFn) (*GetSignInExperiencePhrasesResponse, error)

	// GetSignInExperienceConfigWithResponse request
	GetSignInExperienceConfigWithResponse(ctx context.Context, params *GetSignInExperienceConfigParams, reqEditors ...RequestEditorFn) (*GetSignInExperienceConfigResponse, error)

	// GetWellKnownUserOpenapiJsonWithResponse request
	GetWellKnownUserOpenapiJsonWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetWellKnownUserOpenapiJsonResponse, error)

	// GetAccountCenterSettingsWithResponse request
	GetAccountCenterSettingsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAccountCenterSettingsResponse, error)

	// UpdateAccountCenterSettingsWithBodyWithResponse request with any body
	UpdateAccountCenterSettingsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateAccountCenterSettingsResponse, error)

	UpdateAccountCenterSettingsWithResponse(ctx context.Context, body UpdateAccountCenterSettingsJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateAccountCenterSettingsResponse, error)

	// ListApplicationsWithResponse request
	ListApplicationsWithResponse(ctx context.Context, params *ListApplicationsParams, reqEditors ...RequestEditorFn) (*ListApplicationsResponse, error)

	// CreateApplicationWithBodyWithResponse request with any body
	CreateApplicationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateApplicationResponse, error)

	CreateApplicationWithResponse(ctx context.Context, body CreateApplicationJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateApplicationResponse, error)

	// UpdateApplicationCustomDataWithBodyWithResponse request with any body
	UpdateApplicationCustomDataWithBodyWithResponse(ctx context.Context, applicationId ApplicationId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateApplicationCustomDataResponse, error)

	UpdateApplicationCustomDataWithResponse(ctx context.Context, applicationId ApplicationId, body UpdateApplicationCustomDataJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateApplicationCustomDataResponse, error)

	// ListApplicationRolesWithResponse request
	ListApplicationRolesWithResponse(ctx context.Context, applicationId ApplicationId, params *ListApplicationRolesParams, reqEditors ...RequestEditorFn) (*ListApplicationRolesResponse, error)

	// AssignApplicationRolesWithBodyWithResponse request with any body
	AssignApplicationRolesWithBodyWithResponse(ctx context.Context, applicationId ApplicationId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AssignApplicationRolesResponse, error)

	AssignApplicationRolesWithResponse(ctx context.Context, applicationId ApplicationId, body AssignApplicationRolesJSONRequestBody, reqEditors ...RequestEditorFn) (*AssignApplicationRolesResponse, error)

	// ReplaceApplicationRolesWithBodyWithResponse request with any body
	ReplaceApplicationRolesWithBodyWithResponse(ctx context.Context, applicationId ApplicationId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReplaceApplicationRolesResponse, error)

	ReplaceApplicationRolesWithResponse(ctx context.Context, applicationId ApplicationId, body ReplaceApplicationRolesJSONRequestBody, reqEditors ...RequestEditorFn) (*ReplaceApplicationRolesResponse, error)

	// DeleteApplicationRoleWithResponse request
	DeleteApplicationRoleWithResponse(ctx context.Context, applicationId ApplicationId, roleId RoleId, reqEditors ...RequestEditorFn) (*DeleteApplicationRoleResponse, error)

	// GetApplicationSignInExperienceWithResponse request
	GetApplicationSignInExperienceWithResponse(ctx context.Context, applicationId ApplicationId, reqEditors ...RequestEditorFn) (*GetApplicationSignInExperienceResponse, error)

	// ReplaceApplicationSignInExperienceWithBodyWithResponse request with any body
	ReplaceApplicationSignInExperienceWithBodyWithResponse(ctx context.Context, applicationId ApplicationId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReplaceApplicationSignInExperienceResponse, error)

	ReplaceApplicationSignInExperienceWithResponse(ctx context.Context, applicationId ApplicationId, body ReplaceApplicationSignInExperienceJSONRequestBody, reqEditors ...RequestEditorFn) (*ReplaceApplicationSignInExperienceResponse, error)

	// ListApplicationUserConsentScopesWithResponse request
	ListApplicationUserConsentScopesWithResponse(ctx context.Context, applicationId ApplicationId, reqEditors ...RequestEditorFn) (*ListApplicationUserConsentScopesResponse, error)

	// CreateApplicationUserConsentScopeWithBodyWithResponse request with any body
	CreateApplicationUserConsentScopeWithBodyWithResponse(ctx context.Context, applicationId ApplicationId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateApplicationUserConsentScopeResponse, error)

	CreateApplicationUserConsentScopeWithResponse(ctx context.Context, applicationId ApplicationId, body CreateApplicationUserConsentScopeJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateApplicationUserConsentScopeResponse, error)

	// DeleteApplicationUserConsentScopeWithResponse request
	DeleteApplicationUserConsentScopeWithResponse(ctx context.Context, applicationId ApplicationId, scopeType DeleteApplicationUserConsentScopeParamsScopeType, scopeId ScopeId, reqEditors ...RequestEditorFn) (*DeleteApplicationUserConsentScopeResponse, error)

	// DeleteApplicationWithResponse request
	DeleteApplicationWithResponse(ctx context.Context, id ApplicationIdRoot, reqEditors ...RequestEditorFn) (*DeleteApplicationResponse, error)

	// GetApplicationWithResponse request
	GetApplicationWithResponse(ctx context.Context, id ApplicationIdRoot, reqEditors ...RequestEditorFn) (*GetApplicationResponse, error)

	// UpdateApplicationWithBodyWithResponse request with any body
	UpdateApplicationWithBodyWithResponse(ctx context.Context, id ApplicationIdRoot, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateApplicationResponse, error)

	UpdateApplicationWithResponse(ctx context.Context, id ApplicationIdRoot, body UpdateApplicationJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateApplicationResponse, error)

	// DeleteApplicationLegacySecretWithResponse request
	DeleteApplicationLegacySecretWithResponse(ctx context.Context, id ApplicationIdRoot, reqEditors ...RequestEditorFn) (*DeleteApplicationLegacySecretResponse, error)

	// ListApplicationOrganizationsWithResponse request
	ListApplicationOrganizationsWithResponse(ctx context.Context, id ApplicationIdRoot, params *ListApplicationOrganizationsParams, reqEditors ...RequestEditorFn) (*ListApplicationOrganizationsResponse, error)

	// ListApplicationProtectedAppMetadataCustomDomainsWithResponse request
	ListApplicationProtectedAppMetadataCustomDomainsWithResponse(ctx context.Context, id ApplicationIdRoot, reqEditors ...RequestEditorFn) (*ListApplicationProtectedAppMetadataCustomDomainsResponse, error)

	// CreateApplicationProtectedAppMetadataCustomDomainWithBodyWithResponse request with any body
	CreateApplicationProtectedAppMetadataCustomDomainWithBodyWithResponse(ctx context.Context, id ApplicationIdRoot, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateApplicationProtectedAppMetadataCustomDomainResponse, error)

	CreateApplicationProtectedAppMetadataCustomDomainWithResponse(ctx context.Context, id ApplicationIdRoot, body CreateApplicationProtectedAppMetadataCustomDomainJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateApplicationProtectedAppMetadataCustomDomainResponse, error)

	// DeleteApplicationProtectedAppMetadataCustomDomainWithResponse request
	DeleteApplicationProtectedAppMetadataCustomDomainWithResponse(ctx context.Context, id ApplicationIdRoot, domain string, reqEditors ...RequestEditorFn) (*DeleteApplicationProtectedAppMetadataCustomDomainResponse, error)

	// ListApplicationSecretsWithResponse request
	ListApplicationSecretsWithResponse(ctx context.Context, id ApplicationIdRoot, reqEditors ...RequestEditorFn) (*ListApplicationSecretsResponse, error)

	// CreateApplicationSecretWithBodyWithResponse request with any body
	CreateApplicationSecretWithBodyWithResponse(ctx context.Context, id ApplicationIdRoot, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateApplicationSecretResponse, error)

	CreateApplicationSecretWithResponse(ctx context.Context, id ApplicationIdRoot, body CreateApplicationSecretJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateApplicationSecretResponse, error)

	// DeleteApplicationSecretWithResponse request
	DeleteApplicationSecretWithResponse(ctx context.Context, id ApplicationIdRoot, name string, reqEditors ...RequestEditorFn) (*DeleteApplicationSecretResponse, error)

	// UpdateApplicationSecretWithBodyWithResponse request with any body
	UpdateApplicationSecretWithBodyWithResponse(ctx context.Context, id ApplicationIdRoot, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateApplicationSecretResponse, error)

	UpdateApplicationSecretWithResponse(ctx context.Context, id ApplicationIdRoot, name string, body UpdateApplicationSecretJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateApplicationSecretResponse, error)

	// ListApplicationUserConsentOrganizationsWithResponse request
	ListApplicationUserConsentOrganizationsWithResponse(ctx context.Context, id ApplicationIdRoot, userId UserId, params *ListApplicationUserConsentOrganizationsParams, reqEditors ...RequestEditorFn) (*ListApplicationUserConsentOrganizationsResponse, error)

	// CreateApplicationUserConsentOrganizationWithBodyWithResponse request with any body
	CreateApplicationUserConsentOrganizationWithBodyWithResponse(ctx context.Context, id ApplicationIdRoot, userId UserId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateApplicationUserConsentOrganizationResponse, error)

	CreateApplicationUserConsentOrganizationWithResponse(ctx context.Context, id ApplicationIdRoot, userId UserId, body CreateApplicationUserConsentOrganizationJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateApplicationUserConsentOrganizationResponse, error)

	// ReplaceApplicationUserConsentOrganizationsWithBodyWithResponse request with any body
	ReplaceApplicationUserConsentOrganizationsWithBodyWithResponse(ctx context.Context, id ApplicationIdRoot, userId UserId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReplaceApplicationUserConsentOrganizationsResponse, error)

	ReplaceApplicationUserConsentOrganizationsWithResponse(ctx context.Context, id ApplicationIdRoot, userId UserId, body ReplaceApplicationUserConsentOrganizationsJSONRequestBody, reqEditors ...RequestEditorFn) (*ReplaceApplicationUserConsentOrganizationsResponse, error)

	// DeleteApplicationUserConsentOrganizationWithResponse request
	DeleteApplicationUserConsentOrganizationWithResponse(ctx context.Context, id ApplicationIdRoot, userId UserId, organizationId OrganizationId, reqEditors ...RequestEditorFn) (*DeleteApplicationUserConsentOrganizationResponse, error)

	// GetHasuraAuthWithResponse request
	GetHasuraAuthWithResponse(ctx context.Context, params *GetHasuraAuthParams, reqEditors ...RequestEditorFn) (*GetHasuraAuthResponse, error)

	// AssertSamlWithBodyWithResponse request with any body
	AssertSamlWithBodyWithResponse(ctx context.Context, connectorId ConnectorId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AssertSamlResponse, error)

	AssertSamlWithResponse(ctx context.Context, connectorId ConnectorId, body AssertSamlJSONRequestBody, reqEditors ...RequestEditorFn) (*AssertSamlResponse, error)

	// AssertSingleSignOnSamlWithBodyWithResponse request with any body
	AssertSingleSignOnSamlWithBodyWithResponse(ctx context.Context, connectorId ConnectorId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AssertSingleSignOnSamlResponse, error)

	AssertSingleSignOnSamlWithResponse(ctx context.Context, connectorId ConnectorId, body AssertSingleSignOnSamlJSONRequestBody, reqEditors ...RequestEditorFn) (*AssertSingleSignOnSamlResponse, error)

	// DeleteCaptchaProviderWithResponse request
	DeleteCaptchaProviderWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*DeleteCaptchaProviderResponse, error)

	// GetCaptchaProviderWithResponse request
	GetCaptchaProviderWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetCaptchaProviderResponse, error)

	// UpdateCaptchaProviderWithBodyWithResponse request with any body
	UpdateCaptchaProviderWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateCaptchaProviderResponse, error)

	UpdateCaptchaProviderWithResponse(ctx context.Context, body UpdateCaptchaProviderJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateCaptchaProviderResponse, error)

	// GetAdminConsoleConfigWithResponse request
	GetAdminConsoleConfigWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAdminConsoleConfigResponse, error)

	// UpdateAdminConsoleConfigWithBodyWithResponse request with any body
	UpdateAdminConsoleConfigWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateAdminConsoleConfigResponse, error)

	UpdateAdminConsoleConfigWithResponse(ctx context.Context, body UpdateAdminConsoleConfigJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateAdminConsoleConfigResponse, error)

	// ListJwtCustomizersWithResponse request
	ListJwtCustomizersWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ListJwtCustomizersResponse, error)

	// TestJwtCustomizerWithBodyWithResponse request with any body
	TestJwtCustomizerWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TestJwtCustomizerResponse, error)

	TestJwtCustomizerWithResponse(ctx context.Context, body TestJwtCustomizerJSONRequestBody, reqEditors ...RequestEditorFn) (*TestJwtCustomizerResponse, error)

	// DeleteJwtCustomizerWithResponse request
	DeleteJwtCustomizerWithResponse(ctx context.Context, tokenTypePath DeleteJwtCustomizerParamsTokenTypePath, reqEditors ...RequestEditorFn) (*DeleteJwtCustomizerResponse, error)

	// GetJwtCustomizerWithResponse request
	GetJwtCustomizerWithResponse(ctx context.Context, tokenTypePath GetJwtCustomizerParamsTokenTypePath, reqEditors ...RequestEditorFn) (*GetJwtCustomizerResponse, error)

	// UpdateJwtCustomizerWithBodyWithResponse request with any body
	UpdateJwtCustomizerWithBodyWithResponse(ctx context.Context, tokenTypePath UpdateJwtCustomizerParamsTokenTypePath, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateJwtCustomizerResponse, error)

	UpdateJwtCustomizerWithResponse(ctx context.Context, tokenTypePath UpdateJwtCustomizerParamsTokenTypePath, body UpdateJwtCustomizerJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateJwtCustomizerResponse, error)

	// UpsertJwtCustomizerWithBodyWithResponse request with any body
	UpsertJwtCustomizerWithBodyWithResponse(ctx context.Context, tokenTypePath UpsertJwtCustomizerParamsTokenTypePath, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpsertJwtCustomizerResponse, error)

	UpsertJwtCustomizerWithResponse(ctx context.Context, tokenTypePath UpsertJwtCustomizerParamsTokenTypePath, body UpsertJwtCustomizerJSONRequestBody, reqEditors ...RequestEditorFn) (*UpsertJwtCustomizerResponse, error)

	// GetOidcKeysWithResponse request
	GetOidcKeysWithResponse(ctx context.Context, keyType GetOidcKeysParamsKeyType, reqEditors ...RequestEditorFn) (*GetOidcKeysResponse, error)

	// RotateOidcKeysWithBodyWithResponse request with any body
	RotateOidcKeysWithBodyWithResponse(ctx context.Context, keyType RotateOidcKeysParamsKeyType, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RotateOidcKeysResponse, error)

	RotateOidcKeysWithResponse(ctx context.Context, keyType RotateOidcKeysParamsKeyType, body RotateOidcKeysJSONRequestBody, reqEditors ...RequestEditorFn) (*RotateOidcKeysResponse, error)

	// DeleteOidcKeyWithResponse request
	DeleteOidcKeyWithResponse(ctx context.Context, keyType DeleteOidcKeyParamsKeyType, keyId KeyId, reqEditors ...RequestEditorFn) (*DeleteOidcKeyResponse, error)

	// ListConnectorFactoriesWithResponse request
	ListConnectorFactoriesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ListConnectorFactoriesResponse, error)

	// GetConnectorFactoryWithResponse request
	GetConnectorFactoryWithResponse(ctx context.Context, id ConnectorFactoryIdRoot, reqEditors ...RequestEditorFn) (*GetConnectorFactoryResponse, error)

	// ListConnectorsWithResponse request
	ListConnectorsWithResponse(ctx context.Context, params *ListConnectorsParams, reqEditors ...RequestEditorFn) (*ListConnectorsResponse, error)

	// CreateConnectorWithBodyWithResponse request with any body
	CreateConnectorWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateConnectorResponse, error)

	CreateConnectorWithResponse(ctx context.Context, body CreateConnectorJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateConnectorResponse, error)

	// CreateConnectorAuthorizationUriWithBodyWithResponse request with any body
	CreateConnectorAuthorizationUriWithBodyWithResponse(ctx context.Context, connectorId ConnectorId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateConnectorAuthorizationUriResponse, error)

	CreateConnectorAuthorizationUriWithResponse(ctx context.Context, connectorId ConnectorId, body CreateConnectorAuthorizationUriJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateConnectorAuthorizationUriResponse, error)

	// CreateConnectorTestWithBodyWithResponse request with any body
	CreateConnectorTestWithBodyWithResponse(ctx context.Context, factoryId FactoryId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateConnectorTestResponse, error)

	CreateConnectorTestWithResponse(ctx context.Context, factoryId FactoryId, body CreateConnectorTestJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateConnectorTestResponse, error)

	// DeleteConnectorWithResponse request
	DeleteConnectorWithResponse(ctx context.Context, id ConnectorIdRoot, reqEditors ...RequestEditorFn) (*DeleteConnectorResponse, error)

	// GetConnectorWithResponse request
	GetConnectorWithResponse(ctx context.Context, id ConnectorIdRoot, reqEditors ...RequestEditorFn) (*GetConnectorResponse, error)

	// UpdateConnectorWithBodyWithResponse request with any body
	UpdateConnectorWithBodyWithResponse(ctx context.Context, id ConnectorIdRoot, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateConnectorResponse, error)

	UpdateConnectorWithResponse(ctx context.Context, id ConnectorIdRoot, body UpdateConnectorJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateConnectorResponse, error)

	// ListCustomPhrasesWithResponse request
	ListCustomPhrasesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ListCustomPhrasesResponse, error)

	// DeleteCustomPhraseWithResponse request
	DeleteCustomPhraseWithResponse(ctx context.Context, languageTag DeleteCustomPhraseParamsLanguageTag, reqEditors ...RequestEditorFn) (*DeleteCustomPhraseResponse, error)

	// GetCustomPhraseWithResponse request
	GetCustomPhraseWithResponse(ctx context.Context, languageTag GetCustomPhraseParamsLanguageTag, reqEditors ...RequestEditorFn) (*GetCustomPhraseResponse, error)

	// ReplaceCustomPhraseWithBodyWithResponse request with any body
	ReplaceCustomPhraseWithBodyWithResponse(ctx context.Context, languageTag ReplaceCustomPhraseParamsLanguageTag, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReplaceCustomPhraseResponse, error)

	ReplaceCustomPhraseWithResponse(ctx context.Context, languageTag ReplaceCustomPhraseParamsLanguageTag, body ReplaceCustomPhraseJSONRequestBody, reqEditors ...RequestEditorFn) (*ReplaceCustomPhraseResponse, error)

	// GetActiveUserCountsWithResponse request
	GetActiveUserCountsWithResponse(ctx context.Context, params *GetActiveUserCountsParams, reqEditors ...RequestEditorFn) (*GetActiveUserCountsResponse, error)

	// GetNewUserCountsWithResponse request
	GetNewUserCountsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetNewUserCountsResponse, error)

	// GetTotalUserCountWithResponse request
	GetTotalUserCountWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetTotalUserCountResponse, error)

	// ListDomainsWithResponse request
	ListDomainsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ListDomainsResponse, error)

	// CreateDomainWithBodyWithResponse request with any body
	CreateDomainWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateDomainResponse, error)

	CreateDomainWithResponse(ctx context.Context, body CreateDomainJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateDomainResponse, error)

	// DeleteDomainWithResponse request
	DeleteDomainWithResponse(ctx context.Context, id DomainIdRoot, reqEditors ...RequestEditorFn) (*DeleteDomainResponse, error)

	// GetDomainWithResponse request
	GetDomainWithResponse(ctx context.Context, id DomainIdRoot, reqEditors ...RequestEditorFn) (*GetDomainResponse, error)

	// DeleteEmailTemplatesWithResponse request
	DeleteEmailTemplatesWithResponse(ctx context.Context, params *DeleteEmailTemplatesParams, reqEditors ...RequestEditorFn) (*DeleteEmailTemplatesResponse, error)

	// ListEmailTemplatesWithResponse request
	ListEmailTemplatesWithResponse(ctx context.Context, params *ListEmailTemplatesParams, reqEditors ...RequestEditorFn) (*ListEmailTemplatesResponse, error)

	// ReplaceEmailTemplatesWithBodyWithResponse request with any body
	ReplaceEmailTemplatesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReplaceEmailTemplatesResponse, error)

	ReplaceEmailTemplatesWithResponse(ctx context.Context, body ReplaceEmailTemplatesJSONRequestBody, reqEditors ...RequestEditorFn) (*ReplaceEmailTemplatesResponse, error)

	// DeleteEmailTemplateWithResponse request
	DeleteEmailTemplateWithResponse(ctx context.Context, id EmailTemplateIdRoot, reqEditors ...RequestEditorFn) (*DeleteEmailTemplateResponse, error)

	// GetEmailTemplateWithResponse request
	GetEmailTemplateWithResponse(ctx context.Context, id EmailTemplateIdRoot, reqEditors ...RequestEditorFn) (*GetEmailTemplateResponse, error)

	// UpdateEmailTemplateDetailsWithBodyWithResponse request with any body
	UpdateEmailTemplateDetailsWithBodyWithResponse(ctx context.Context, id EmailTemplateIdRoot, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateEmailTemplateDetailsResponse, error)

	UpdateEmailTemplateDetailsWithResponse(ctx context.Context, id EmailTemplateIdRoot, body UpdateEmailTemplateDetailsJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateEmailTemplateDetailsResponse, error)

	// InitInteractionWithBodyWithResponse request with any body
	InitInteractionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InitInteractionResponse, error)

	InitInteractionWithResponse(ctx context.Context, body InitInteractionJSONRequestBody, reqEditors ...RequestEditorFn) (*InitInteractionResponse, error)

	// IdentifyUserWithBodyWithResponse request with any body
	IdentifyUserWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*IdentifyUserResponse, error)

	IdentifyUserWithResponse(ctx context.Context, body IdentifyUserJSONRequestBody, reqEditors ...RequestEditorFn) (*IdentifyUserResponse, error)

	// UpdateInteractionEventWithBodyWithResponse request with any body
	UpdateInteractionEventWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateInteractionEventResponse, error)

	UpdateInteractionEventWithResponse(ctx context.Context, body UpdateInteractionEventJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateInteractionEventResponse, error)

	// AddUserProfileWithBodyWithResponse request with any body
	AddUserProfileWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddUserProfileResponse, error)

	AddUserProfileWithResponse(ctx context.Context, body AddUserProfileJSONRequestBody, reqEditors ...RequestEditorFn) (*AddUserProfileResponse, error)

	// BindMfaVerificationWithBodyWithResponse request with any body
	BindMfaVerificationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BindMfaVerificationResponse, error)

	BindMfaVerificationWithResponse(ctx context.Context, body BindMfaVerificationJSONRequestBody, reqEditors ...RequestEditorFn) (*BindMfaVerificationResponse, error)

	// SkipMfaBindingFlowWithResponse request
	SkipMfaBindingFlowWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*SkipMfaBindingFlowResponse, error)

	// ResetUserPasswordWithBodyWithResponse request with any body
	ResetUserPasswordWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ResetUserPasswordResponse, error)

	ResetUserPasswordWithResponse(ctx context.Context, body ResetUserPasswordJSONRequestBody, reqEditors ...RequestEditorFn) (*ResetUserPasswordResponse, error)

	// GetEnabledSsoConnectorsWithResponse request
	GetEnabledSsoConnectorsWithResponse(ctx context.Context, params *GetEnabledSsoConnectorsParams, reqEditors ...RequestEditorFn) (*GetEnabledSsoConnectorsResponse, error)

	// SubmitInteractionWithResponse request
	SubmitInteractionWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*SubmitInteractionResponse, error)

	// GenerateBackupCodesWithResponse request
	GenerateBackupCodesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GenerateBackupCodesResponse, error)

	// VerifyBackupCodeWithBodyWithResponse request with any body
	VerifyBackupCodeWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*VerifyBackupCodeResponse, error)

	VerifyBackupCodeWithResponse(ctx context.Context, body VerifyBackupCodeJSONRequestBody, reqEditors ...RequestEditorFn) (*VerifyBackupCodeResponse, error)

	// CreateNewPasswordIdentityVerificationWithBodyWithResponse request with any body
	CreateNewPasswordIdentityVerificationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateNewPasswordIdentityVerificationResponse, error)

	CreateNewPasswordIdentityVerificationWithResponse(ctx context.Context, body CreateNewPasswordIdentityVerificationJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateNewPasswordIdentityVerificationResponse, error)

	// VerifyOneTimeTokenVerificationWithBodyWithResponse request with any body
	VerifyOneTimeTokenVerificationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*VerifyOneTimeTokenVerificationResponse, error)

	VerifyOneTimeTokenVerificationWithResponse(ctx context.Context, body VerifyOneTimeTokenVerificationJSONRequestBody, reqEditors ...RequestEditorFn) (*VerifyOneTimeTokenVerificationResponse, error)

	// CreatePasswordVerificationWithBodyWithResponse request with any body
	CreatePasswordVerificationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreatePasswordVerificationResponse, error)

	CreatePasswordVerificationWithResponse(ctx context.Context, body CreatePasswordVerificationJSONRequestBody, reqEditors ...RequestEditorFn) (*CreatePasswordVerificationResponse, error)

	// CreateSocialVerificationWithBodyWithResponse request with any body
	CreateSocialVerificationWithBodyWithResponse(ctx context.Context, connectorId ConnectorId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateSocialVerificationResponse, error)

	CreateSocialVerificationWithResponse(ctx context.Context, connectorId ConnectorId, body CreateSocialVerificationJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateSocialVerificationResponse, error)

	// VerifySocialVerificationWithBodyWithResponse request with any body
	VerifySocialVerificationWithBodyWithResponse(ctx context.Context, connectorId ConnectorId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*VerifySocialVerificationResponse, error)

	VerifySocialVerificationWithResponse(ctx context.Context, connectorId ConnectorId, body VerifySocialVerificationJSONRequestBody, reqEditors ...RequestEditorFn) (*VerifySocialVerificationResponse, error)

	// CreateEnterpriseSsoVerificationWithBodyWithResponse request with any body
	CreateEnterpriseSsoVerificationWithBodyWithResponse(ctx context.Context, connectorId ConnectorId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateEnterpriseSsoVerificationResponse, error)

	CreateEnterpriseSsoVerificationWithResponse(ctx context.Context, connectorId ConnectorId, body CreateEnterpriseSsoVerificationJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateEnterpriseSsoVerificationResponse, error)

	// VerifyEnterpriseSsoVerificationWithBodyWithResponse request with any body
	VerifyEnterpriseSsoVerificationWithBodyWithResponse(ctx context.Context, connectorId ConnectorId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*VerifyEnterpriseSsoVerificationResponse, error)

	VerifyEnterpriseSsoVerificationWithResponse(ctx context.Context, connectorId ConnectorId, body VerifyEnterpriseSsoVerificationJSONRequestBody, reqEditors ...RequestEditorFn) (*VerifyEnterpriseSsoVerificationResponse, error)

	// CreateTotpSecretWithResponse request
	CreateTotpSecretWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*CreateTotpSecretResponse, error)

	// VerifyTotpVerificationWithBodyWithResponse request with any body
	VerifyTotpVerificationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*VerifyTotpVerificationResponse, error)

	VerifyTotpVerificationWithResponse(ctx context.Context, body VerifyTotpVerificationJSONRequestBody, reqEditors ...RequestEditorFn) (*VerifyTotpVerificationResponse, error)

	// CreateAndSendVerificationCodeWithBodyWithResponse request with any body
	CreateAndSendVerificationCodeWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateAndSendVerificationCodeResponse, error)

	CreateAndSendVerificationCodeWithResponse(ctx context.Context, body CreateAndSendVerificationCodeJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateAndSendVerificationCodeResponse, error)

	// VerifyVerificationCodeVerificationWithBodyWithResponse request with any body
	VerifyVerificationCodeVerificationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*VerifyVerificationCodeVerificationResponse, error)

	VerifyVerificationCodeVerificationWithResponse(ctx context.Context, body VerifyVerificationCodeVerificationJSONRequestBody, reqEditors ...RequestEditorFn) (*VerifyVerificationCodeVerificationResponse, error)

	// CreateWebAuthnAuthenticationVerificationWithResponse request
	CreateWebAuthnAuthenticationVerificationWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*CreateWebAuthnAuthenticationVerificationResponse, error)

	// VerifyWebAuthnAuthenticationVerificationWithBodyWithResponse request with any body
	VerifyWebAuthnAuthenticationVerificationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*VerifyWebAuthnAuthenticationVerificationResponse, error)

	VerifyWebAuthnAuthenticationVerificationWithResponse(ctx context.Context, body VerifyWebAuthnAuthenticationVerificationJSONRequestBody, reqEditors ...RequestEditorFn) (*VerifyWebAuthnAuthenticationVerificationResponse, error)

	// CreateWebAuthnRegistrationVerificationWithResponse request
	CreateWebAuthnRegistrationVerificationWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*CreateWebAuthnRegistrationVerificationResponse, error)

	// VerifyWebAuthnRegistrationVerificationWithBodyWithResponse request with any body
	VerifyWebAuthnRegistrationVerificationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*VerifyWebAuthnRegistrationVerificationResponse, error)

	VerifyWebAuthnRegistrationVerificationWithResponse(ctx context.Context, body VerifyWebAuthnRegistrationVerificationJSONRequestBody, reqEditors ...RequestEditorFn) (*VerifyWebAuthnRegistrationVerificationResponse, error)

	// ListHooksWithResponse request
	ListHooksWithResponse(ctx context.Context, params *ListHooksParams, reqEditors ...RequestEditorFn) (*ListHooksResponse, error)

	// CreateHookWithBodyWithResponse request with any body
	CreateHookWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateHookResponse, error)

	CreateHookWithResponse(ctx context.Context, body CreateHookJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateHookResponse, error)

	// DeleteHookWithResponse request
	DeleteHookWithResponse(ctx context.Context, id HookIdRoot, reqEditors ...RequestEditorFn) (*DeleteHookResponse, error)

	// GetHookWithResponse request
	GetHookWithResponse(ctx context.Context, id HookIdRoot, params *GetHookParams, reqEditors ...RequestEditorFn) (*GetHookResponse, error)

	// UpdateHookWithBodyWithResponse request with any body
	UpdateHookWithBodyWithResponse(ctx context.Context, id HookIdRoot, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateHookResponse, error)

	UpdateHookWithResponse(ctx context.Context, id HookIdRoot, body UpdateHookJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateHookResponse, error)

	// ListHookRecentLogsWithResponse request
	ListHookRecentLogsWithResponse(ctx context.Context, id HookIdRoot, params *ListHookRecentLogsParams, reqEditors ...RequestEditorFn) (*ListHookRecentLogsResponse, error)

	// UpdateHookSigningKeyWithResponse request
	UpdateHookSigningKeyWithResponse(ctx context.Context, id HookIdRoot, reqEditors ...RequestEditorFn) (*UpdateHookSigningKeyResponse, error)

	// CreateHookTestWithBodyWithResponse request with any body
	CreateHookTestWithBodyWithResponse(ctx context.Context, id HookIdRoot, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateHookTestResponse, error)

	CreateHookTestWithResponse(ctx context.Context, id HookIdRoot, body CreateHookTestJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateHookTestResponse, error)

	// DeleteApiInteractionWithResponse request
	DeleteApiInteractionWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*DeleteApiInteractionResponse, error)

	// PutApiInteractionWithBodyWithResponse request with any body
	PutApiInteractionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiInteractionResponse, error)

	PutApiInteractionWithResponse(ctx context.Context, body PutApiInteractionJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiInteractionResponse, error)

	// PostApiInteractionBindMfaWithBodyWithResponse request with any body
	PostApiInteractionBindMfaWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiInteractionBindMfaResponse, error)

	PostApiInteractionBindMfaWithResponse(ctx context.Context, body PostApiInteractionBindMfaJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiInteractionBindMfaResponse, error)

	// GetApiInteractionConsentWithResponse request
	GetApiInteractionConsentWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiInteractionConsentResponse, error)

	// PostApiInteractionConsentWithBodyWithResponse request with any body
	PostApiInteractionConsentWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiInteractionConsentResponse, error)

	PostApiInteractionConsentWithResponse(ctx context.Context, body PostApiInteractionConsentJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiInteractionConsentResponse, error)

	// PutApiInteractionEventWithBodyWithResponse request with any body
	PutApiInteractionEventWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiInteractionEventResponse, error)

	PutApiInteractionEventWithResponse(ctx context.Context, body PutApiInteractionEventJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiInteractionEventResponse, error)

	// PatchApiInteractionIdentifiersWithBodyWithResponse request with any body
	PatchApiInteractionIdentifiersWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchApiInteractionIdentifiersResponse, error)

	PatchApiInteractionIdentifiersWithResponse(ctx context.Context, body PatchApiInteractionIdentifiersJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchApiInteractionIdentifiersResponse, error)

	// PutApiInteractionMfaWithBodyWithResponse request with any body
	PutApiInteractionMfaWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiInteractionMfaResponse, error)

	PutApiInteractionMfaWithResponse(ctx context.Context, body PutApiInteractionMfaJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiInteractionMfaResponse, error)

	// PutApiInteractionMfaSkippedWithBodyWithResponse request with any body
	PutApiInteractionMfaSkippedWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiInteractionMfaSkippedResponse, error)

	PutApiInteractionMfaSkippedWithResponse(ctx context.Context, body PutApiInteractionMfaSkippedJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiInteractionMfaSkippedResponse, error)

	// DeleteApiInteractionProfileWithResponse request
	DeleteApiInteractionProfileWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*DeleteApiInteractionProfileResponse, error)

	// PatchApiInteractionProfileWithBodyWithResponse request with any body
	PatchApiInteractionProfileWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchApiInteractionProfileResponse, error)

	PatchApiInteractionProfileWithResponse(ctx context.Context, body PatchApiInteractionProfileJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchApiInteractionProfileResponse, error)

	// PutApiInteractionProfileWithBodyWithResponse request with any body
	PutApiInteractionProfileWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiInteractionProfileResponse, error)

	PutApiInteractionProfileWithResponse(ctx context.Context, body PutApiInteractionProfileJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiInteractionProfileResponse, error)

	// GetApiInteractionSingleSignOnConnectorsWithResponse request
	GetApiInteractionSingleSignOnConnectorsWithResponse(ctx context.Context, params *GetApiInteractionSingleSignOnConnectorsParams, reqEditors ...RequestEditorFn) (*GetApiInteractionSingleSignOnConnectorsResponse, error)

	// PostApiInteractionSingleSignOnConnectorIdAuthenticationWithBodyWithResponse request with any body
	PostApiInteractionSingleSignOnConnectorIdAuthenticationWithBodyWithResponse(ctx context.Context, connectorId ConnectorId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiInteractionSingleSignOnConnectorIdAuthenticationResponse, error)

	PostApiInteractionSingleSignOnConnectorIdAuthenticationWithResponse(ctx context.Context, connectorId ConnectorId, body PostApiInteractionSingleSignOnConnectorIdAuthenticationJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiInteractionSingleSignOnConnectorIdAuthenticationResponse, error)

	// PostApiInteractionSingleSignOnConnectorIdAuthorizationUrlWithBodyWithResponse request with any body
	PostApiInteractionSingleSignOnConnectorIdAuthorizationUrlWithBodyWithResponse(ctx context.Context, connectorId ConnectorId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiInteractionSingleSignOnConnectorIdAuthorizationUrlResponse, error)

	PostApiInteractionSingleSignOnConnectorIdAuthorizationUrlWithResponse(ctx context.Context, connectorId ConnectorId, body PostApiInteractionSingleSignOnConnectorIdAuthorizationUrlJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiInteractionSingleSignOnConnectorIdAuthorizationUrlResponse, error)

	// PostApiInteractionSingleSignOnConnectorIdRegistrationWithResponse request
	PostApiInteractionSingleSignOnConnectorIdRegistrationWithResponse(ctx context.Context, connectorId ConnectorId, reqEditors ...RequestEditorFn) (*PostApiInteractionSingleSignOnConnectorIdRegistrationResponse, error)

	// PostApiInteractionSubmitWithResponse request
	PostApiInteractionSubmitWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PostApiInteractionSubmitResponse, error)

	// PostApiInteractionVerificationSocialAuthorizationUriWithBodyWithResponse request with any body
	PostApiInteractionVerificationSocialAuthorizationUriWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiInteractionVerificationSocialAuthorizationUriResponse, error)

	PostApiInteractionVerificationSocialAuthorizationUriWithResponse(ctx context.Context, body PostApiInteractionVerificationSocialAuthorizationUriJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiInteractionVerificationSocialAuthorizationUriResponse, error)

	// PostApiInteractionVerificationTotpWithResponse request
	PostApiInteractionVerificationTotpWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PostApiInteractionVerificationTotpResponse, error)

	// PostApiInteractionVerificationVerificationCodeWithBodyWithResponse request with any body
	PostApiInteractionVerificationVerificationCodeWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiInteractionVerificationVerificationCodeResponse, error)

	PostApiInteractionVerificationVerificationCodeWithResponse(ctx context.Context, body PostApiInteractionVerificationVerificationCodeJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiInteractionVerificationVerificationCodeResponse, error)

	// PostApiInteractionVerificationWebauthnAuthenticationWithResponse request
	PostApiInteractionVerificationWebauthnAuthenticationWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PostApiInteractionVerificationWebauthnAuthenticationResponse, error)

	// PostApiInteractionVerificationWebauthnRegistrationWithResponse request
	PostApiInteractionVerificationWebauthnRegistrationWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PostApiInteractionVerificationWebauthnRegistrationResponse, error)

	// ListLogsWithResponse request
	ListLogsWithResponse(ctx context.Context, params *ListLogsParams, reqEditors ...RequestEditorFn) (*ListLogsResponse, error)

	// GetLogWithResponse request
	GetLogWithResponse(ctx context.Context, id LogIdRoot, reqEditors ...RequestEditorFn) (*GetLogResponse, error)

	// GetProfileWithResponse request
	GetProfileWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetProfileResponse, error)

	// UpdateProfileWithBodyWithResponse request with any body
	UpdateProfileWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateProfileResponse, error)

	UpdateProfileWithResponse(ctx context.Context, body UpdateProfileJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateProfileResponse, error)

	// AddUserIdentitiesWithBodyWithResponse request with any body
	AddUserIdentitiesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddUserIdentitiesResponse, error)

	AddUserIdentitiesWithResponse(ctx context.Context, body AddUserIdentitiesJSONRequestBody, reqEditors ...RequestEditorFn) (*AddUserIdentitiesResponse, error)

	// DeleteIdentityWithResponse request
	DeleteIdentityWithResponse(ctx context.Context, target string, reqEditors ...RequestEditorFn) (*DeleteIdentityResponse, error)

	// GetMfaVerificationsWithResponse request
	GetMfaVerificationsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetMfaVerificationsResponse, error)

	// AddMfaVerificationWithBodyWithResponse request with any body
	AddMfaVerificationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddMfaVerificationResponse, error)

	AddMfaVerificationWithResponse(ctx context.Context, body AddMfaVerificationJSONRequestBody, reqEditors ...RequestEditorFn) (*AddMfaVerificationResponse, error)

	// DeleteMfaVerificationWithResponse request
	DeleteMfaVerificationWithResponse(ctx context.Context, verificationId VerificationId, reqEditors ...RequestEditorFn) (*DeleteMfaVerificationResponse, error)

	// UpdateMfaVerificationNameWithBodyWithResponse request with any body
	UpdateMfaVerificationNameWithBodyWithResponse(ctx context.Context, verificationId VerificationId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateMfaVerificationNameResponse, error)

	UpdateMfaVerificationNameWithResponse(ctx context.Context, verificationId VerificationId, body UpdateMfaVerificationNameJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateMfaVerificationNameResponse, error)

	// UpdatePasswordWithBodyWithResponse request with any body
	UpdatePasswordWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdatePasswordResponse, error)

	UpdatePasswordWithResponse(ctx context.Context, body UpdatePasswordJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdatePasswordResponse, error)

	// DeletePrimaryEmailWithResponse request
	DeletePrimaryEmailWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*DeletePrimaryEmailResponse, error)

	// UpdatePrimaryEmailWithBodyWithResponse request with any body
	UpdatePrimaryEmailWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdatePrimaryEmailResponse, error)

	UpdatePrimaryEmailWithResponse(ctx context.Context, body UpdatePrimaryEmailJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdatePrimaryEmailResponse, error)

	// DeletePrimaryPhoneWithResponse request
	DeletePrimaryPhoneWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*DeletePrimaryPhoneResponse, error)

	// UpdatePrimaryPhoneWithBodyWithResponse request with any body
	UpdatePrimaryPhoneWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdatePrimaryPhoneResponse, error)

	UpdatePrimaryPhoneWithResponse(ctx context.Context, body UpdatePrimaryPhoneJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdatePrimaryPhoneResponse, error)

	// UpdateOtherProfileWithBodyWithResponse request with any body
	UpdateOtherProfileWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateOtherProfileResponse, error)

	UpdateOtherProfileWithResponse(ctx context.Context, body UpdateOtherProfileJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateOtherProfileResponse, error)

	// ListOneTimeTokensWithResponse request
	ListOneTimeTokensWithResponse(ctx context.Context, params *ListOneTimeTokensParams, reqEditors ...RequestEditorFn) (*ListOneTimeTokensResponse, error)

	// AddOneTimeTokensWithBodyWithResponse request with any body
	AddOneTimeTokensWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddOneTimeTokensResponse, error)

	AddOneTimeTokensWithResponse(ctx context.Context, body AddOneTimeTokensJSONRequestBody, reqEditors ...RequestEditorFn) (*AddOneTimeTokensResponse, error)

	// VerifyOneTimeTokenWithBodyWithResponse request with any body
	VerifyOneTimeTokenWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*VerifyOneTimeTokenResponse, error)

	VerifyOneTimeTokenWithResponse(ctx context.Context, body VerifyOneTimeTokenJSONRequestBody, reqEditors ...RequestEditorFn) (*VerifyOneTimeTokenResponse, error)

	// DeleteOneTimeTokenWithResponse request
	DeleteOneTimeTokenWithResponse(ctx context.Context, id OneTimeTokenIdRoot, reqEditors ...RequestEditorFn) (*DeleteOneTimeTokenResponse, error)

	// GetOneTimeTokenWithResponse request
	GetOneTimeTokenWithResponse(ctx context.Context, id OneTimeTokenIdRoot, reqEditors ...RequestEditorFn) (*GetOneTimeTokenResponse, error)

	// ReplaceOneTimeTokenStatusWithBodyWithResponse request with any body
	ReplaceOneTimeTokenStatusWithBodyWithResponse(ctx context.Context, id OneTimeTokenIdRoot, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReplaceOneTimeTokenStatusResponse, error)

	ReplaceOneTimeTokenStatusWithResponse(ctx context.Context, id OneTimeTokenIdRoot, body ReplaceOneTimeTokenStatusJSONRequestBody, reqEditors ...RequestEditorFn) (*ReplaceOneTimeTokenStatusResponse, error)

	// ListOrganizationInvitationsWithResponse request
	ListOrganizationInvitationsWithResponse(ctx context.Context, params *ListOrganizationInvitationsParams, reqEditors ...RequestEditorFn) (*ListOrganizationInvitationsResponse, error)

	// CreateOrganizationInvitationWithBodyWithResponse request with any body
	CreateOrganizationInvitationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateOrganizationInvitationResponse, error)

	CreateOrganizationInvitationWithResponse(ctx context.Context, body CreateOrganizationInvitationJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateOrganizationInvitationResponse, error)

	// DeleteOrganizationInvitationWithResponse request
	DeleteOrganizationInvitationWithResponse(ctx context.Context, id OrganizationInvitationIdRoot, reqEditors ...RequestEditorFn) (*DeleteOrganizationInvitationResponse, error)

	// GetOrganizationInvitationWithResponse request
	GetOrganizationInvitationWithResponse(ctx context.Context, id OrganizationInvitationIdRoot, reqEditors ...RequestEditorFn) (*GetOrganizationInvitationResponse, error)

	// CreateOrganizationInvitationMessageWithBodyWithResponse request with any body
	CreateOrganizationInvitationMessageWithBodyWithResponse(ctx context.Context, id OrganizationInvitationIdRoot, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateOrganizationInvitationMessageResponse, error)

	CreateOrganizationInvitationMessageWithResponse(ctx context.Context, id OrganizationInvitationIdRoot, body CreateOrganizationInvitationMessageJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateOrganizationInvitationMessageResponse, error)

	// ReplaceOrganizationInvitationStatusWithBodyWithResponse request with any body
	ReplaceOrganizationInvitationStatusWithBodyWithResponse(ctx context.Context, id OrganizationInvitationIdRoot, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReplaceOrganizationInvitationStatusResponse, error)

	ReplaceOrganizationInvitationStatusWithResponse(ctx context.Context, id OrganizationInvitationIdRoot, body ReplaceOrganizationInvitationStatusJSONRequestBody, reqEditors ...RequestEditorFn) (*ReplaceOrganizationInvitationStatusResponse, error)

	// ListOrganizationRolesWithResponse request
	ListOrganizationRolesWithResponse(ctx context.Context, params *ListOrganizationRolesParams, reqEditors ...RequestEditorFn) (*ListOrganizationRolesResponse, error)

	// CreateOrganizationRoleWithBodyWithResponse request with any body
	CreateOrganizationRoleWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateOrganizationRoleResponse, error)

	CreateOrganizationRoleWithResponse(ctx context.Context, body CreateOrganizationRoleJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateOrganizationRoleResponse, error)

	// DeleteOrganizationRoleWithResponse request
	DeleteOrganizationRoleWithResponse(ctx context.Context, id OrganizationRoleIdRoot, reqEditors ...RequestEditorFn) (*DeleteOrganizationRoleResponse, error)

	// GetOrganizationRoleWithResponse request
	GetOrganizationRoleWithResponse(ctx context.Context, id OrganizationRoleIdRoot, reqEditors ...RequestEditorFn) (*GetOrganizationRoleResponse, error)

	// UpdateOrganizationRoleWithBodyWithResponse request with any body
	UpdateOrganizationRoleWithBodyWithResponse(ctx context.Context, id OrganizationRoleIdRoot, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateOrganizationRoleResponse, error)

	UpdateOrganizationRoleWithResponse(ctx context.Context, id OrganizationRoleIdRoot, body UpdateOrganizationRoleJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateOrganizationRoleResponse, error)

	// ListOrganizationRoleResourceScopesWithResponse request
	ListOrganizationRoleResourceScopesWithResponse(ctx context.Context, id OrganizationRoleIdRoot, params *ListOrganizationRoleResourceScopesParams, reqEditors ...RequestEditorFn) (*ListOrganizationRoleResourceScopesResponse, error)

	// CreateOrganizationRoleResourceScopeWithBodyWithResponse request with any body
	CreateOrganizationRoleResourceScopeWithBodyWithResponse(ctx context.Context, id OrganizationRoleIdRoot, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateOrganizationRoleResourceScopeResponse, error)

	CreateOrganizationRoleResourceScopeWithResponse(ctx context.Context, id OrganizationRoleIdRoot, body CreateOrganizationRoleResourceScopeJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateOrganizationRoleResourceScopeResponse, error)

	// ReplaceOrganizationRoleResourceScopesWithBodyWithResponse request with any body
	ReplaceOrganizationRoleResourceScopesWithBodyWithResponse(ctx context.Context, id OrganizationRoleIdRoot, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReplaceOrganizationRoleResourceScopesResponse, error)

	ReplaceOrganizationRoleResourceScopesWithResponse(ctx context.Context, id OrganizationRoleIdRoot, body ReplaceOrganizationRoleResourceScopesJSONRequestBody, reqEditors ...RequestEditorFn) (*ReplaceOrganizationRoleResourceScopesResponse, error)

	// DeleteOrganizationRoleResourceScopeWithResponse request
	DeleteOrganizationRoleResourceScopeWithResponse(ctx context.Context, id OrganizationRoleIdRoot, scopeId ScopeId, reqEditors ...RequestEditorFn) (*DeleteOrganizationRoleResourceScopeResponse, error)

	// ListOrganizationRoleScopesWithResponse request
	ListOrganizationRoleScopesWithResponse(ctx context.Context, id OrganizationRoleIdRoot, params *ListOrganizationRoleScopesParams, reqEditors ...RequestEditorFn) (*ListOrganizationRoleScopesResponse, error)

	// CreateOrganizationRoleScopeWithBodyWithResponse request with any body
	CreateOrganizationRoleScopeWithBodyWithResponse(ctx context.Context, id OrganizationRoleIdRoot, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateOrganizationRoleScopeResponse, error)

	CreateOrganizationRoleScopeWithResponse(ctx context.Context, id OrganizationRoleIdRoot, body CreateOrganizationRoleScopeJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateOrganizationRoleScopeResponse, error)

	// ReplaceOrganizationRoleScopesWithBodyWithResponse request with any body
	ReplaceOrganizationRoleScopesWithBodyWithResponse(ctx context.Context, id OrganizationRoleIdRoot, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReplaceOrganizationRoleScopesResponse, error)

	ReplaceOrganizationRoleScopesWithResponse(ctx context.Context, id OrganizationRoleIdRoot, body ReplaceOrganizationRoleScopesJSONRequestBody, reqEditors ...RequestEditorFn) (*ReplaceOrganizationRoleScopesResponse, error)

	// DeleteOrganizationRoleScopeWithResponse request
	DeleteOrganizationRoleScopeWithResponse(ctx context.Context, id OrganizationRoleIdRoot, organizationScopeId OrganizationScopeId, reqEditors ...RequestEditorFn) (*DeleteOrganizationRoleScopeResponse, error)

	// ListOrganizationScopesWithResponse request
	ListOrganizationScopesWithResponse(ctx context.Context, params *ListOrganizationScopesParams, reqEditors ...RequestEditorFn) (*ListOrganizationScopesResponse, error)

	// CreateOrganizationScopeWithBodyWithResponse request with any body
	CreateOrganizationScopeWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateOrganizationScopeResponse, error)

	CreateOrganizationScopeWithResponse(ctx context.Context, body CreateOrganizationScopeJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateOrganizationScopeResponse, error)

	// DeleteOrganizationScopeWithResponse request
	DeleteOrganizationScopeWithResponse(ctx context.Context, id OrganizationScopeIdRoot, reqEditors ...RequestEditorFn) (*DeleteOrganizationScopeResponse, error)

	// GetOrganizationScopeWithResponse request
	GetOrganizationScopeWithResponse(ctx context.Context, id OrganizationScopeIdRoot, reqEditors ...RequestEditorFn) (*GetOrganizationScopeResponse, error)

	// UpdateOrganizationScopeWithBodyWithResponse request with any body
	UpdateOrganizationScopeWithBodyWithResponse(ctx context.Context, id OrganizationScopeIdRoot, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateOrganizationScopeResponse, error)

	UpdateOrganizationScopeWithResponse(ctx context.Context, id OrganizationScopeIdRoot, body UpdateOrganizationScopeJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateOrganizationScopeResponse, error)

	// ListOrganizationsWithResponse request
	ListOrganizationsWithResponse(ctx context.Context, params *ListOrganizationsParams, reqEditors ...RequestEditorFn) (*ListOrganizationsResponse, error)

	// CreateOrganizationWithBodyWithResponse request with any body
	CreateOrganizationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateOrganizationResponse, error)

	CreateOrganizationWithResponse(ctx context.Context, body CreateOrganizationJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateOrganizationResponse, error)

	// DeleteOrganizationWithResponse request
	DeleteOrganizationWithResponse(ctx context.Context, id OrganizationIdRoot, reqEditors ...RequestEditorFn) (*DeleteOrganizationResponse, error)

	// GetOrganizationWithResponse request
	GetOrganizationWithResponse(ctx context.Context, id OrganizationIdRoot, reqEditors ...RequestEditorFn) (*GetOrganizationResponse, error)

	// UpdateOrganizationWithBodyWithResponse request with any body
	UpdateOrganizationWithBodyWithResponse(ctx context.Context, id OrganizationIdRoot, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateOrganizationResponse, error)

	UpdateOrganizationWithResponse(ctx context.Context, id OrganizationIdRoot, body UpdateOrganizationJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateOrganizationResponse, error)

	// ListOrganizationApplicationsWithResponse request
	ListOrganizationApplicationsWithResponse(ctx context.Context, id OrganizationIdRoot, params *ListOrganizationApplicationsParams, reqEditors ...RequestEditorFn) (*ListOrganizationApplicationsResponse, error)

	// AddOrganizationApplicationsWithBodyWithResponse request with any body
	AddOrganizationApplicationsWithBodyWithResponse(ctx context.Context, id OrganizationIdRoot, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddOrganizationApplicationsResponse, error)

	AddOrganizationApplicationsWithResponse(ctx context.Context, id OrganizationIdRoot, body AddOrganizationApplicationsJSONRequestBody, reqEditors ...RequestEditorFn) (*AddOrganizationApplicationsResponse, error)

	// ReplaceOrganizationApplicationsWithBodyWithResponse request with any body
	ReplaceOrganizationApplicationsWithBodyWithResponse(ctx context.Context, id OrganizationIdRoot, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReplaceOrganizationApplicationsResponse, error)

	ReplaceOrganizationApplicationsWithResponse(ctx context.Context, id OrganizationIdRoot, body ReplaceOrganizationApplicationsJSONRequestBody, reqEditors ...RequestEditorFn) (*ReplaceOrganizationApplicationsResponse, error)

	// AssignOrganizationRolesToApplicationsWithBodyWithResponse request with any body
	AssignOrganizationRolesToApplicationsWithBodyWithResponse(ctx context.Context, id OrganizationIdRoot, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AssignOrganizationRolesToApplicationsResponse, error)

	AssignOrganizationRolesToApplicationsWithResponse(ctx context.Context, id OrganizationIdRoot, body AssignOrganizationRolesToApplicationsJSONRequestBody, reqEditors ...RequestEditorFn) (*AssignOrganizationRolesToApplicationsResponse, error)

	// DeleteOrganizationApplicationWithResponse request
	DeleteOrganizationApplicationWithResponse(ctx context.Context, id OrganizationIdRoot, applicationId ApplicationId, reqEditors ...RequestEditorFn) (*DeleteOrganizationApplicationResponse, error)

	// ListOrganizationApplicationRolesWithResponse request
	ListOrganizationApplicationRolesWithResponse(ctx context.Context, id OrganizationIdRoot, applicationId ApplicationId, params *ListOrganizationApplicationRolesParams, reqEditors ...RequestEditorFn) (*ListOrganizationApplicationRolesResponse, error)

	// AssignOrganizationRolesToApplicationWithBodyWithResponse request with any body
	AssignOrganizationRolesToApplicationWithBodyWithResponse(ctx context.Context, id OrganizationIdRoot, applicationId ApplicationId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AssignOrganizationRolesToApplicationResponse, error)

	AssignOrganizationRolesToApplicationWithResponse(ctx context.Context, id OrganizationIdRoot, applicationId ApplicationId, body AssignOrganizationRolesToApplicationJSONRequestBody, reqEditors ...RequestEditorFn) (*AssignOrganizationRolesToApplicationResponse, error)

	// ReplaceOrganizationApplicationRolesWithBodyWithResponse request with any body
	ReplaceOrganizationApplicationRolesWithBodyWithResponse(ctx context.Context, id OrganizationIdRoot, applicationId ApplicationId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReplaceOrganizationApplicationRolesResponse, error)

	ReplaceOrganizationApplicationRolesWithResponse(ctx context.Context, id OrganizationIdRoot, applicationId ApplicationId, body ReplaceOrganizationApplicationRolesJSONRequestBody, reqEditors ...RequestEditorFn) (*ReplaceOrganizationApplicationRolesResponse, error)

	// DeleteOrganizationApplicationRoleWithResponse request
	DeleteOrganizationApplicationRoleWithResponse(ctx context.Context, id OrganizationIdRoot, applicationId ApplicationId, organizationRoleId OrganizationRoleId, reqEditors ...RequestEditorFn) (*DeleteOrganizationApplicationRoleResponse, error)

	// ListOrganizationJitEmailDomainsWithResponse request
	ListOrganizationJitEmailDomainsWithResponse(ctx context.Context, id OrganizationIdRoot, params *ListOrganizationJitEmailDomainsParams, reqEditors ...RequestEditorFn) (*ListOrganizationJitEmailDomainsResponse, error)

	// CreateOrganizationJitEmailDomainWithBodyWithResponse request with any body
	CreateOrganizationJitEmailDomainWithBodyWithResponse(ctx context.Context, id OrganizationIdRoot, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateOrganizationJitEmailDomainResponse, error)

	CreateOrganizationJitEmailDomainWithResponse(ctx context.Context, id OrganizationIdRoot, body CreateOrganizationJitEmailDomainJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateOrganizationJitEmailDomainResponse, error)

	// ReplaceOrganizationJitEmailDomainsWithBodyWithResponse request with any body
	ReplaceOrganizationJitEmailDomainsWithBodyWithResponse(ctx context.Context, id OrganizationIdRoot, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReplaceOrganizationJitEmailDomainsResponse, error)

	ReplaceOrganizationJitEmailDomainsWithResponse(ctx context.Context, id OrganizationIdRoot, body ReplaceOrganizationJitEmailDomainsJSONRequestBody, reqEditors ...RequestEditorFn) (*ReplaceOrganizationJitEmailDomainsResponse, error)

	// DeleteOrganizationJitEmailDomainWithResponse request
	DeleteOrganizationJitEmailDomainWithResponse(ctx context.Context, id OrganizationIdRoot, emailDomain string, reqEditors ...RequestEditorFn) (*DeleteOrganizationJitEmailDomainResponse, error)

	// ListOrganizationJitRolesWithResponse request
	ListOrganizationJitRolesWithResponse(ctx context.Context, id OrganizationIdRoot, params *ListOrganizationJitRolesParams, reqEditors ...RequestEditorFn) (*ListOrganizationJitRolesResponse, error)

	// CreateOrganizationJitRoleWithBodyWithResponse request with any body
	CreateOrganizationJitRoleWithBodyWithResponse(ctx context.Context, id OrganizationIdRoot, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateOrganizationJitRoleResponse, error)

	CreateOrganizationJitRoleWithResponse(ctx context.Context, id OrganizationIdRoot, body CreateOrganizationJitRoleJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateOrganizationJitRoleResponse, error)

	// ReplaceOrganizationJitRolesWithBodyWithResponse request with any body
	ReplaceOrganizationJitRolesWithBodyWithResponse(ctx context.Context, id OrganizationIdRoot, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReplaceOrganizationJitRolesResponse, error)

	ReplaceOrganizationJitRolesWithResponse(ctx context.Context, id OrganizationIdRoot, body ReplaceOrganizationJitRolesJSONRequestBody, reqEditors ...RequestEditorFn) (*ReplaceOrganizationJitRolesResponse, error)

	// DeleteOrganizationJitRoleWithResponse request
	DeleteOrganizationJitRoleWithResponse(ctx context.Context, id OrganizationIdRoot, organizationRoleId OrganizationRoleId, reqEditors ...RequestEditorFn) (*DeleteOrganizationJitRoleResponse, error)

	// ListOrganizationJitSsoConnectorsWithResponse request
	ListOrganizationJitSsoConnectorsWithResponse(ctx context.Context, id OrganizationIdRoot, params *ListOrganizationJitSsoConnectorsParams, reqEditors ...RequestEditorFn) (*ListOrganizationJitSsoConnectorsResponse, error)

	// CreateOrganizationJitSsoConnectorWithBodyWithResponse request with any body
	CreateOrganizationJitSsoConnectorWithBodyWithResponse(ctx context.Context, id OrganizationIdRoot, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateOrganizationJitSsoConnectorResponse, error)

	CreateOrganizationJitSsoConnectorWithResponse(ctx context.Context, id OrganizationIdRoot, body CreateOrganizationJitSsoConnectorJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateOrganizationJitSsoConnectorResponse, error)

	// ReplaceOrganizationJitSsoConnectorsWithBodyWithResponse request with any body
	ReplaceOrganizationJitSsoConnectorsWithBodyWithResponse(ctx context.Context, id OrganizationIdRoot, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReplaceOrganizationJitSsoConnectorsResponse, error)

	ReplaceOrganizationJitSsoConnectorsWithResponse(ctx context.Context, id OrganizationIdRoot, body ReplaceOrganizationJitSsoConnectorsJSONRequestBody, reqEditors ...RequestEditorFn) (*ReplaceOrganizationJitSsoConnectorsResponse, error)

	// DeleteOrganizationJitSsoConnectorWithResponse request
	DeleteOrganizationJitSsoConnectorWithResponse(ctx context.Context, id OrganizationIdRoot, ssoConnectorId SsoConnectorId, reqEditors ...RequestEditorFn) (*DeleteOrganizationJitSsoConnectorResponse, error)

	// ListOrganizationUsersWithResponse request
	ListOrganizationUsersWithResponse(ctx context.Context, id OrganizationIdRoot, params *ListOrganizationUsersParams, reqEditors ...RequestEditorFn) (*ListOrganizationUsersResponse, error)

	// AddOrganizationUsersWithBodyWithResponse request with any body
	AddOrganizationUsersWithBodyWithResponse(ctx context.Context, id OrganizationIdRoot, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddOrganizationUsersResponse, error)

	AddOrganizationUsersWithResponse(ctx context.Context, id OrganizationIdRoot, body AddOrganizationUsersJSONRequestBody, reqEditors ...RequestEditorFn) (*AddOrganizationUsersResponse, error)

	// ReplaceOrganizationUsersWithBodyWithResponse request with any body
	ReplaceOrganizationUsersWithBodyWithResponse(ctx context.Context, id OrganizationIdRoot, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReplaceOrganizationUsersResponse, error)

	ReplaceOrganizationUsersWithResponse(ctx context.Context, id OrganizationIdRoot, body ReplaceOrganizationUsersJSONRequestBody, reqEditors ...RequestEditorFn) (*ReplaceOrganizationUsersResponse, error)

	// AssignOrganizationRolesToUsersWithBodyWithResponse request with any body
	AssignOrganizationRolesToUsersWithBodyWithResponse(ctx context.Context, id OrganizationIdRoot, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AssignOrganizationRolesToUsersResponse, error)

	AssignOrganizationRolesToUsersWithResponse(ctx context.Context, id OrganizationIdRoot, body AssignOrganizationRolesToUsersJSONRequestBody, reqEditors ...RequestEditorFn) (*AssignOrganizationRolesToUsersResponse, error)

	// DeleteOrganizationUserWithResponse request
	DeleteOrganizationUserWithResponse(ctx context.Context, id OrganizationIdRoot, userId UserId, reqEditors ...RequestEditorFn) (*DeleteOrganizationUserResponse, error)

	// ListOrganizationUserRolesWithResponse request
	ListOrganizationUserRolesWithResponse(ctx context.Context, id OrganizationIdRoot, userId UserId, params *ListOrganizationUserRolesParams, reqEditors ...RequestEditorFn) (*ListOrganizationUserRolesResponse, error)

	// AssignOrganizationRolesToUserWithBodyWithResponse request with any body
	AssignOrganizationRolesToUserWithBodyWithResponse(ctx context.Context, id OrganizationIdRoot, userId UserId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AssignOrganizationRolesToUserResponse, error)

	AssignOrganizationRolesToUserWithResponse(ctx context.Context, id OrganizationIdRoot, userId UserId, body AssignOrganizationRolesToUserJSONRequestBody, reqEditors ...RequestEditorFn) (*AssignOrganizationRolesToUserResponse, error)

	// ReplaceOrganizationUserRolesWithBodyWithResponse request with any body
	ReplaceOrganizationUserRolesWithBodyWithResponse(ctx context.Context, id OrganizationIdRoot, userId UserId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReplaceOrganizationUserRolesResponse, error)

	ReplaceOrganizationUserRolesWithResponse(ctx context.Context, id OrganizationIdRoot, userId UserId, body ReplaceOrganizationUserRolesJSONRequestBody, reqEditors ...RequestEditorFn) (*ReplaceOrganizationUserRolesResponse, error)

	// DeleteOrganizationUserRoleWithResponse request
	DeleteOrganizationUserRoleWithResponse(ctx context.Context, id OrganizationIdRoot, userId UserId, organizationRoleId OrganizationRoleId, reqEditors ...RequestEditorFn) (*DeleteOrganizationUserRoleResponse, error)

	// ListOrganizationUserScopesWithResponse request
	ListOrganizationUserScopesWithResponse(ctx context.Context, id OrganizationIdRoot, userId UserId, reqEditors ...RequestEditorFn) (*ListOrganizationUserScopesResponse, error)

	// ListResourcesWithResponse request
	ListResourcesWithResponse(ctx context.Context, params *ListResourcesParams, reqEditors ...RequestEditorFn) (*ListResourcesResponse, error)

	// CreateResourceWithBodyWithResponse request with any body
	CreateResourceWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateResourceResponse, error)

	CreateResourceWithResponse(ctx context.Context, body CreateResourceJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateResourceResponse, error)

	// DeleteResourceWithResponse request
	DeleteResourceWithResponse(ctx context.Context, id ResourceIdRoot, reqEditors ...RequestEditorFn) (*DeleteResourceResponse, error)

	// GetResourceWithResponse request
	GetResourceWithResponse(ctx context.Context, id ResourceIdRoot, reqEditors ...RequestEditorFn) (*GetResourceResponse, error)

	// UpdateResourceWithBodyWithResponse request with any body
	UpdateResourceWithBodyWithResponse(ctx context.Context, id ResourceIdRoot, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateResourceResponse, error)

	UpdateResourceWithResponse(ctx context.Context, id ResourceIdRoot, body UpdateResourceJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateResourceResponse, error)

	// UpdateResourceIsDefaultWithBodyWithResponse request with any body
	UpdateResourceIsDefaultWithBodyWithResponse(ctx context.Context, id ResourceIdRoot, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateResourceIsDefaultResponse, error)

	UpdateResourceIsDefaultWithResponse(ctx context.Context, id ResourceIdRoot, body UpdateResourceIsDefaultJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateResourceIsDefaultResponse, error)

	// ListResourceScopesWithResponse request
	ListResourceScopesWithResponse(ctx context.Context, resourceId ResourceId, params *ListResourceScopesParams, reqEditors ...RequestEditorFn) (*ListResourceScopesResponse, error)

	// CreateResourceScopeWithBodyWithResponse request with any body
	CreateResourceScopeWithBodyWithResponse(ctx context.Context, resourceId ResourceId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateResourceScopeResponse, error)

	CreateResourceScopeWithResponse(ctx context.Context, resourceId ResourceId, body CreateResourceScopeJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateResourceScopeResponse, error)

	// DeleteResourceScopeWithResponse request
	DeleteResourceScopeWithResponse(ctx context.Context, resourceId ResourceId, scopeId ScopeId, reqEditors ...RequestEditorFn) (*DeleteResourceScopeResponse, error)

	// UpdateResourceScopeWithBodyWithResponse request with any body
	UpdateResourceScopeWithBodyWithResponse(ctx context.Context, resourceId ResourceId, scopeId ScopeId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateResourceScopeResponse, error)

	UpdateResourceScopeWithResponse(ctx context.Context, resourceId ResourceId, scopeId ScopeId, body UpdateResourceScopeJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateResourceScopeResponse, error)

	// ListRolesWithResponse request
	ListRolesWithResponse(ctx context.Context, params *ListRolesParams, reqEditors ...RequestEditorFn) (*ListRolesResponse, error)

	// CreateRoleWithBodyWithResponse request with any body
	CreateRoleWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateRoleResponse, error)

	CreateRoleWithResponse(ctx context.Context, body CreateRoleJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateRoleResponse, error)

	// DeleteRoleWithResponse request
	DeleteRoleWithResponse(ctx context.Context, id RoleIdRoot, reqEditors ...RequestEditorFn) (*DeleteRoleResponse, error)

	// GetRoleWithResponse request
	GetRoleWithResponse(ctx context.Context, id RoleIdRoot, reqEditors ...RequestEditorFn) (*GetRoleResponse, error)

	// UpdateRoleWithBodyWithResponse request with any body
	UpdateRoleWithBodyWithResponse(ctx context.Context, id RoleIdRoot, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateRoleResponse, error)

	UpdateRoleWithResponse(ctx context.Context, id RoleIdRoot, body UpdateRoleJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateRoleResponse, error)

	// ListRoleApplicationsWithResponse request
	ListRoleApplicationsWithResponse(ctx context.Context, id RoleIdRoot, params *ListRoleApplicationsParams, reqEditors ...RequestEditorFn) (*ListRoleApplicationsResponse, error)

	// CreateRoleApplicationWithBodyWithResponse request with any body
	CreateRoleApplicationWithBodyWithResponse(ctx context.Context, id RoleIdRoot, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateRoleApplicationResponse, error)

	CreateRoleApplicationWithResponse(ctx context.Context, id RoleIdRoot, body CreateRoleApplicationJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateRoleApplicationResponse, error)

	// DeleteRoleApplicationWithResponse request
	DeleteRoleApplicationWithResponse(ctx context.Context, id RoleIdRoot, applicationId ApplicationId, reqEditors ...RequestEditorFn) (*DeleteRoleApplicationResponse, error)

	// ListRoleScopesWithResponse request
	ListRoleScopesWithResponse(ctx context.Context, id RoleIdRoot, params *ListRoleScopesParams, reqEditors ...RequestEditorFn) (*ListRoleScopesResponse, error)

	// CreateRoleScopeWithBodyWithResponse request with any body
	CreateRoleScopeWithBodyWithResponse(ctx context.Context, id RoleIdRoot, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateRoleScopeResponse, error)

	CreateRoleScopeWithResponse(ctx context.Context, id RoleIdRoot, body CreateRoleScopeJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateRoleScopeResponse, error)

	// DeleteRoleScopeWithResponse request
	DeleteRoleScopeWithResponse(ctx context.Context, id RoleIdRoot, scopeId ScopeId, reqEditors ...RequestEditorFn) (*DeleteRoleScopeResponse, error)

	// ListRoleUsersWithResponse request
	ListRoleUsersWithResponse(ctx context.Context, id RoleIdRoot, params *ListRoleUsersParams, reqEditors ...RequestEditorFn) (*ListRoleUsersResponse, error)

	// CreateRoleUserWithBodyWithResponse request with any body
	CreateRoleUserWithBodyWithResponse(ctx context.Context, id RoleIdRoot, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateRoleUserResponse, error)

	CreateRoleUserWithResponse(ctx context.Context, id RoleIdRoot, body CreateRoleUserJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateRoleUserResponse, error)

	// DeleteRoleUserWithResponse request
	DeleteRoleUserWithResponse(ctx context.Context, id RoleIdRoot, userId UserId, reqEditors ...RequestEditorFn) (*DeleteRoleUserResponse, error)

	// CreateSamlApplicationWithBodyWithResponse request with any body
	CreateSamlApplicationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateSamlApplicationResponse, error)

	CreateSamlApplicationWithResponse(ctx context.Context, body CreateSamlApplicationJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateSamlApplicationResponse, error)

	// DeleteSamlApplicationWithResponse request
	DeleteSamlApplicationWithResponse(ctx context.Context, id SamlApplicationIdRoot, reqEditors ...RequestEditorFn) (*DeleteSamlApplicationResponse, error)

	// GetSamlApplicationWithResponse request
	GetSamlApplicationWithResponse(ctx context.Context, id SamlApplicationIdRoot, reqEditors ...RequestEditorFn) (*GetSamlApplicationResponse, error)

	// UpdateSamlApplicationWithBodyWithResponse request with any body
	UpdateSamlApplicationWithBodyWithResponse(ctx context.Context, id SamlApplicationIdRoot, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateSamlApplicationResponse, error)

	UpdateSamlApplicationWithResponse(ctx context.Context, id SamlApplicationIdRoot, body UpdateSamlApplicationJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateSamlApplicationResponse, error)

	// GetSamlApplicationCallbackWithResponse request
	GetSamlApplicationCallbackWithResponse(ctx context.Context, id SamlApplicationIdRoot, params *GetSamlApplicationCallbackParams, reqEditors ...RequestEditorFn) (*GetSamlApplicationCallbackResponse, error)

	// ListSamlApplicationMetadataWithResponse request
	ListSamlApplicationMetadataWithResponse(ctx context.Context, id SamlApplicationIdRoot, reqEditors ...RequestEditorFn) (*ListSamlApplicationMetadataResponse, error)

	// ListSamlApplicationSecretsWithResponse request
	ListSamlApplicationSecretsWithResponse(ctx context.Context, id SamlApplicationIdRoot, reqEditors ...RequestEditorFn) (*ListSamlApplicationSecretsResponse, error)

	// CreateSamlApplicationSecretWithBodyWithResponse request with any body
	CreateSamlApplicationSecretWithBodyWithResponse(ctx context.Context, id SamlApplicationIdRoot, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateSamlApplicationSecretResponse, error)

	CreateSamlApplicationSecretWithResponse(ctx context.Context, id SamlApplicationIdRoot, body CreateSamlApplicationSecretJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateSamlApplicationSecretResponse, error)

	// DeleteSamlApplicationSecretWithResponse request
	DeleteSamlApplicationSecretWithResponse(ctx context.Context, id SamlApplicationIdRoot, secretId SecretId, reqEditors ...RequestEditorFn) (*DeleteSamlApplicationSecretResponse, error)

	// UpdateSamlApplicationSecretWithBodyWithResponse request with any body
	UpdateSamlApplicationSecretWithBodyWithResponse(ctx context.Context, id SamlApplicationIdRoot, secretId SecretId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateSamlApplicationSecretResponse, error)

	UpdateSamlApplicationSecretWithResponse(ctx context.Context, id SamlApplicationIdRoot, secretId SecretId, body UpdateSamlApplicationSecretJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateSamlApplicationSecretResponse, error)

	// GetSamlAuthnWithResponse request
	GetSamlAuthnWithResponse(ctx context.Context, id SamlIdRoot, params *GetSamlAuthnParams, reqEditors ...RequestEditorFn) (*GetSamlAuthnResponse, error)

	// CreateSamlAuthnWithBodyWithResponse request with any body
	CreateSamlAuthnWithBodyWithResponse(ctx context.Context, id SamlIdRoot, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateSamlAuthnResponse, error)

	CreateSamlAuthnWithResponse(ctx context.Context, id SamlIdRoot, body CreateSamlAuthnJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateSamlAuthnResponse, error)

	CreateSamlAuthnWithFormdataBodyWithResponse(ctx context.Context, id SamlIdRoot, body CreateSamlAuthnFormdataRequestBody, reqEditors ...RequestEditorFn) (*CreateSamlAuthnResponse, error)

	// DeleteSentinelActivitiesWithBodyWithResponse request with any body
	DeleteSentinelActivitiesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteSentinelActivitiesResponse, error)

	DeleteSentinelActivitiesWithResponse(ctx context.Context, body DeleteSentinelActivitiesJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteSentinelActivitiesResponse, error)

	// GetSignInExpWithResponse request
	GetSignInExpWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetSignInExpResponse, error)

	// UpdateSignInExpWithBodyWithResponse request with any body
	UpdateSignInExpWithBodyWithResponse(ctx context.Context, params *UpdateSignInExpParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateSignInExpResponse, error)

	UpdateSignInExpWithResponse(ctx context.Context, params *UpdateSignInExpParams, body UpdateSignInExpJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateSignInExpResponse, error)

	// CheckPasswordWithDefaultSignInExperienceWithBodyWithResponse request with any body
	CheckPasswordWithDefaultSignInExperienceWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CheckPasswordWithDefaultSignInExperienceResponse, error)

	CheckPasswordWithDefaultSignInExperienceWithResponse(ctx context.Context, body CheckPasswordWithDefaultSignInExperienceJSONRequestBody, reqEditors ...RequestEditorFn) (*CheckPasswordWithDefaultSignInExperienceResponse, error)

	// UploadCustomUiAssetsWithBodyWithResponse request with any body
	UploadCustomUiAssetsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UploadCustomUiAssetsResponse, error)

	// ListSsoConnectorProvidersWithResponse request
	ListSsoConnectorProvidersWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ListSsoConnectorProvidersResponse, error)

	// ListSsoConnectorsWithResponse request
	ListSsoConnectorsWithResponse(ctx context.Context, params *ListSsoConnectorsParams, reqEditors ...RequestEditorFn) (*ListSsoConnectorsResponse, error)

	// CreateSsoConnectorWithBodyWithResponse request with any body
	CreateSsoConnectorWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateSsoConnectorResponse, error)

	CreateSsoConnectorWithResponse(ctx context.Context, body CreateSsoConnectorJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateSsoConnectorResponse, error)

	// DeleteSsoConnectorWithResponse request
	DeleteSsoConnectorWithResponse(ctx context.Context, id SsoConnectorIdRoot, reqEditors ...RequestEditorFn) (*DeleteSsoConnectorResponse, error)

	// GetSsoConnectorWithResponse request
	GetSsoConnectorWithResponse(ctx context.Context, id SsoConnectorIdRoot, reqEditors ...RequestEditorFn) (*GetSsoConnectorResponse, error)

	// UpdateSsoConnectorWithBodyWithResponse request with any body
	UpdateSsoConnectorWithBodyWithResponse(ctx context.Context, id SsoConnectorIdRoot, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateSsoConnectorResponse, error)

	UpdateSsoConnectorWithResponse(ctx context.Context, id SsoConnectorIdRoot, body UpdateSsoConnectorJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateSsoConnectorResponse, error)

	// GetStatusWithResponse request
	GetStatusWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetStatusResponse, error)

	// CreateSubjectTokenWithBodyWithResponse request with any body
	CreateSubjectTokenWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateSubjectTokenResponse, error)

	CreateSubjectTokenWithResponse(ctx context.Context, body CreateSubjectTokenJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateSubjectTokenResponse, error)

	// GetSwaggerJsonWithResponse request
	GetSwaggerJsonWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetSwaggerJsonResponse, error)

	// GetSystemApplicationConfigWithResponse request
	GetSystemApplicationConfigWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetSystemApplicationConfigResponse, error)

	// CreateUserAssetWithBodyWithResponse request with any body
	CreateUserAssetWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateUserAssetResponse, error)

	// GetUserAssetServiceStatusWithResponse request
	GetUserAssetServiceStatusWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetUserAssetServiceStatusResponse, error)

	// ListUsersWithResponse request
	ListUsersWithResponse(ctx context.Context, params *ListUsersParams, reqEditors ...RequestEditorFn) (*ListUsersResponse, error)

	// CreateUserWithBodyWithResponse request with any body
	CreateUserWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateUserResponse, error)

	CreateUserWithResponse(ctx context.Context, body CreateUserJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateUserResponse, error)

	// DeleteUserWithResponse request
	DeleteUserWithResponse(ctx context.Context, userId UserId, reqEditors ...RequestEditorFn) (*DeleteUserResponse, error)

	// GetUserWithResponse request
	GetUserWithResponse(ctx context.Context, userId UserId, params *GetUserParams, reqEditors ...RequestEditorFn) (*GetUserResponse, error)

	// UpdateUserWithBodyWithResponse request with any body
	UpdateUserWithBodyWithResponse(ctx context.Context, userId UserId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateUserResponse, error)

	UpdateUserWithResponse(ctx context.Context, userId UserId, body UpdateUserJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateUserResponse, error)

	// ListUserCustomDataWithResponse request
	ListUserCustomDataWithResponse(ctx context.Context, userId UserId, reqEditors ...RequestEditorFn) (*ListUserCustomDataResponse, error)

	// UpdateUserCustomDataWithBodyWithResponse request with any body
	UpdateUserCustomDataWithBodyWithResponse(ctx context.Context, userId UserId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateUserCustomDataResponse, error)

	UpdateUserCustomDataWithResponse(ctx context.Context, userId UserId, body UpdateUserCustomDataJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateUserCustomDataResponse, error)

	// GetUserHasPasswordWithResponse request
	GetUserHasPasswordWithResponse(ctx context.Context, userId UserId, reqEditors ...RequestEditorFn) (*GetUserHasPasswordResponse, error)

	// CreateUserIdentityWithBodyWithResponse request with any body
	CreateUserIdentityWithBodyWithResponse(ctx context.Context, userId UserId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateUserIdentityResponse, error)

	CreateUserIdentityWithResponse(ctx context.Context, userId UserId, body CreateUserIdentityJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateUserIdentityResponse, error)

	// DeleteUserIdentityWithResponse request
	DeleteUserIdentityWithResponse(ctx context.Context, userId UserId, target string, reqEditors ...RequestEditorFn) (*DeleteUserIdentityResponse, error)

	// ReplaceUserIdentityWithBodyWithResponse request with any body
	ReplaceUserIdentityWithBodyWithResponse(ctx context.Context, userId UserId, target string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReplaceUserIdentityResponse, error)

	ReplaceUserIdentityWithResponse(ctx context.Context, userId UserId, target string, body ReplaceUserIdentityJSONRequestBody, reqEditors ...RequestEditorFn) (*ReplaceUserIdentityResponse, error)

	// UpdateUserIsSuspendedWithBodyWithResponse request with any body
	UpdateUserIsSuspendedWithBodyWithResponse(ctx context.Context, userId UserId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateUserIsSuspendedResponse, error)

	UpdateUserIsSuspendedWithResponse(ctx context.Context, userId UserId, body UpdateUserIsSuspendedJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateUserIsSuspendedResponse, error)

	// ListUserMfaVerificationsWithResponse request
	ListUserMfaVerificationsWithResponse(ctx context.Context, userId UserId, reqEditors ...RequestEditorFn) (*ListUserMfaVerificationsResponse, error)

	// CreateUserMfaVerificationWithBodyWithResponse request with any body
	CreateUserMfaVerificationWithBodyWithResponse(ctx context.Context, userId UserId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateUserMfaVerificationResponse, error)

	CreateUserMfaVerificationWithResponse(ctx context.Context, userId UserId, body CreateUserMfaVerificationJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateUserMfaVerificationResponse, error)

	// DeleteUserMfaVerificationWithResponse request
	DeleteUserMfaVerificationWithResponse(ctx context.Context, userId UserId, verificationId VerificationId, reqEditors ...RequestEditorFn) (*DeleteUserMfaVerificationResponse, error)

	// ListUserOrganizationsWithResponse request
	ListUserOrganizationsWithResponse(ctx context.Context, userId UserId, reqEditors ...RequestEditorFn) (*ListUserOrganizationsResponse, error)

	// UpdateUserPasswordWithBodyWithResponse request with any body
	UpdateUserPasswordWithBodyWithResponse(ctx context.Context, userId UserId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateUserPasswordResponse, error)

	UpdateUserPasswordWithResponse(ctx context.Context, userId UserId, body UpdateUserPasswordJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateUserPasswordResponse, error)

	// VerifyUserPasswordWithBodyWithResponse request with any body
	VerifyUserPasswordWithBodyWithResponse(ctx context.Context, userId UserId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*VerifyUserPasswordResponse, error)

	VerifyUserPasswordWithResponse(ctx context.Context, userId UserId, body VerifyUserPasswordJSONRequestBody, reqEditors ...RequestEditorFn) (*VerifyUserPasswordResponse, error)

	// ListUserPersonalAccessTokensWithResponse request
	ListUserPersonalAccessTokensWithResponse(ctx context.Context, userId UserId, reqEditors ...RequestEditorFn) (*ListUserPersonalAccessTokensResponse, error)

	// CreateUserPersonalAccessTokenWithBodyWithResponse request with any body
	CreateUserPersonalAccessTokenWithBodyWithResponse(ctx context.Context, userId UserId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateUserPersonalAccessTokenResponse, error)

	CreateUserPersonalAccessTokenWithResponse(ctx context.Context, userId UserId, body CreateUserPersonalAccessTokenJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateUserPersonalAccessTokenResponse, error)

	// DeleteUserPersonalAccessTokenWithResponse request
	DeleteUserPersonalAccessTokenWithResponse(ctx context.Context, userId UserId, name string, reqEditors ...RequestEditorFn) (*DeleteUserPersonalAccessTokenResponse, error)

	// UpdateUserPersonalAccessTokenWithBodyWithResponse request with any body
	UpdateUserPersonalAccessTokenWithBodyWithResponse(ctx context.Context, userId UserId, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateUserPersonalAccessTokenResponse, error)

	UpdateUserPersonalAccessTokenWithResponse(ctx context.Context, userId UserId, name string, body UpdateUserPersonalAccessTokenJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateUserPersonalAccessTokenResponse, error)

	// UpdateUserProfileWithBodyWithResponse request with any body
	UpdateUserProfileWithBodyWithResponse(ctx context.Context, userId UserId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateUserProfileResponse, error)

	UpdateUserProfileWithResponse(ctx context.Context, userId UserId, body UpdateUserProfileJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateUserProfileResponse, error)

	// ListUserRolesWithResponse request
	ListUserRolesWithResponse(ctx context.Context, userId UserId, params *ListUserRolesParams, reqEditors ...RequestEditorFn) (*ListUserRolesResponse, error)

	// AssignUserRolesWithBodyWithResponse request with any body
	AssignUserRolesWithBodyWithResponse(ctx context.Context, userId UserId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AssignUserRolesResponse, error)

	AssignUserRolesWithResponse(ctx context.Context, userId UserId, body AssignUserRolesJSONRequestBody, reqEditors ...RequestEditorFn) (*AssignUserRolesResponse, error)

	// ReplaceUserRolesWithBodyWithResponse request with any body
	ReplaceUserRolesWithBodyWithResponse(ctx context.Context, userId UserId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReplaceUserRolesResponse, error)

	ReplaceUserRolesWithResponse(ctx context.Context, userId UserId, body ReplaceUserRolesJSONRequestBody, reqEditors ...RequestEditorFn) (*ReplaceUserRolesResponse, error)

	// DeleteUserRoleWithResponse request
	DeleteUserRoleWithResponse(ctx context.Context, userId UserId, roleId RoleId, reqEditors ...RequestEditorFn) (*DeleteUserRoleResponse, error)

	// CreateVerificationCodeWithBodyWithResponse request with any body
	CreateVerificationCodeWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateVerificationCodeResponse, error)

	CreateVerificationCodeWithResponse(ctx context.Context, body CreateVerificationCodeJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateVerificationCodeResponse, error)

	// VerifyVerificationCodeWithBodyWithResponse request with any body
	VerifyVerificationCodeWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*VerifyVerificationCodeResponse, error)

	VerifyVerificationCodeWithResponse(ctx context.Context, body VerifyVerificationCodeJSONRequestBody, reqEditors ...RequestEditorFn) (*VerifyVerificationCodeResponse, error)

	// CreateVerificationByPasswordWithBodyWithResponse request with any body
	CreateVerificationByPasswordWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateVerificationByPasswordResponse, error)

	CreateVerificationByPasswordWithResponse(ctx context.Context, body CreateVerificationByPasswordJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateVerificationByPasswordResponse, error)

	// CreateVerificationBySocialWithBodyWithResponse request with any body
	CreateVerificationBySocialWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateVerificationBySocialResponse, error)

	CreateVerificationBySocialWithResponse(ctx context.Context, body CreateVerificationBySocialJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateVerificationBySocialResponse, error)

	// VerifyVerificationBySocialWithBodyWithResponse request with any body
	VerifyVerificationBySocialWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*VerifyVerificationBySocialResponse, error)

	VerifyVerificationBySocialWithResponse(ctx context.Context, body VerifyVerificationBySocialJSONRequestBody, reqEditors ...RequestEditorFn) (*VerifyVerificationBySocialResponse, error)

	// CreateVerificationByVerificationCodeWithBodyWithResponse request with any body
	CreateVerificationByVerificationCodeWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateVerificationByVerificationCodeResponse, error)

	CreateVerificationByVerificationCodeWithResponse(ctx context.Context, body CreateVerificationByVerificationCodeJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateVerificationByVerificationCodeResponse, error)

	// VerifyVerificationByVerificationCodeWithBodyWithResponse request with any body
	VerifyVerificationByVerificationCodeWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*VerifyVerificationByVerificationCodeResponse, error)

	VerifyVerificationByVerificationCodeWithResponse(ctx context.Context, body VerifyVerificationByVerificationCodeJSONRequestBody, reqEditors ...RequestEditorFn) (*VerifyVerificationByVerificationCodeResponse, error)

	// GenerateWebAuthnRegistrationOptionsWithResponse request
	GenerateWebAuthnRegistrationOptionsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GenerateWebAuthnRegistrationOptionsResponse, error)

	// VerifyWebAuthnRegistrationWithBodyWithResponse request with any body
	VerifyWebAuthnRegistrationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*VerifyWebAuthnRegistrationResponse, error)

	VerifyWebAuthnRegistrationWithResponse(ctx context.Context, body VerifyWebAuthnRegistrationJSONRequestBody, reqEditors ...RequestEditorFn) (*VerifyWebAuthnRegistrationResponse, error)
}

type GetWellKnownExperienceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		AgreeToTermsPolicy GetWellKnownExperience200AgreeToTermsPolicy `json:"agreeToTermsPolicy"`
		Branding           struct {
			DarkFavicon *string `json:"darkFavicon,omitempty"`
			DarkLogoUrl *string `json:"darkLogoUrl,omitempty"`
			Favicon     *string `json:"favicon,omitempty"`
			LogoUrl     *string `json:"logoUrl,omitempty"`
		} `json:"branding"`
		CaptchaConfig *struct {
			SiteKey string                                     `json:"siteKey"`
			Type    GetWellKnownExperience200CaptchaConfigType `json:"type"`
		} `json:"captchaConfig,omitempty"`
		CaptchaPolicy struct {
			Enabled *bool `json:"enabled,omitempty"`
		} `json:"captchaPolicy"`
		Color struct {
			DarkPrimaryColor  string `json:"darkPrimaryColor"`
			IsDarkModeEnabled bool   `json:"isDarkModeEnabled"`
			PrimaryColor      string `json:"primaryColor"`
		} `json:"color"`
		CustomContent  map[string]string `json:"customContent"`
		CustomCss      *string           `json:"customCss"`
		CustomUiAssets *struct {
			CreatedAt float32 `json:"createdAt"`
			Id        string  `json:"id"`
		} `json:"customUiAssets"`
		EmailBlocklistPolicy struct {
			BlockDisposableAddresses *bool     `json:"blockDisposableAddresses,omitempty"`
			BlockSubaddressing       *bool     `json:"blockSubaddressing,omitempty"`
			CustomBlocklist          *[]string `json:"customBlocklist,omitempty"`
		} `json:"emailBlocklistPolicy"`
		ForgotPassword struct {
			Email bool `json:"email"`
			Phone bool `json:"phone"`
		} `json:"forgotPassword"`
		GoogleOneTap *struct {
			AutoSelect        *bool  `json:"autoSelect,omitempty"`
			ClientId          string `json:"clientId"`
			CloseOnTapOutside *bool  `json:"closeOnTapOutside,omitempty"`
			ConnectorId       string `json:"connectorId"`
			IsEnabled         *bool  `json:"isEnabled,omitempty"`
			ItpSupport        *bool  `json:"itpSupport,omitempty"`
		} `json:"googleOneTap,omitempty"`
		Id                  string `json:"id"`
		IsDevelopmentTenant bool   `json:"isDevelopmentTenant"`
		LanguageInfo        struct {
			AutoDetect       bool                                                  `json:"autoDetect"`
			FallbackLanguage GetWellKnownExperience200LanguageInfoFallbackLanguage `json:"fallbackLanguage"`
		} `json:"languageInfo"`
		Mfa struct {
			Factors                       []GetWellKnownExperience200MfaFactors                      `json:"factors"`
			OrganizationRequiredMfaPolicy *GetWellKnownExperience200MfaOrganizationRequiredMfaPolicy `json:"organizationRequiredMfaPolicy,omitempty"`
			Policy                        GetWellKnownExperience200MfaPolicy                         `json:"policy"`
		} `json:"mfa"`
		PasswordPolicy struct {
			CharacterTypes *struct {
				Min float32 `json:"min"`
			} `json:"characterTypes,omitempty"`
			Length *struct {
				Max float32 `json:"max"`
				Min float32 `json:"min"`
			} `json:"length,omitempty"`
			Rejects *struct {
				Pwned                 bool     `json:"pwned"`
				RepetitionAndSequence bool     `json:"repetitionAndSequence"`
				UserInfo              bool     `json:"userInfo"`
				Words                 []string `json:"words"`
			} `json:"rejects,omitempty"`
		} `json:"passwordPolicy"`
		PrivacyPolicyUrl *string `json:"privacyPolicyUrl"`
		SentinelPolicy   struct {
			LockoutDuration *float32 `json:"lockoutDuration,omitempty"`
			MaxAttempts     *float32 `json:"maxAttempts,omitempty"`
		} `json:"sentinelPolicy"`
		SignIn struct {
			Methods []struct {
				Identifier        GetWellKnownExperience200SignInMethodsIdentifier `json:"identifier"`
				IsPasswordPrimary bool                                             `json:"isPasswordPrimary"`
				Password          bool                                             `json:"password"`
				VerificationCode  bool                                             `json:"verificationCode"`
			} `json:"methods"`
		} `json:"signIn"`
		SignInMode GetWellKnownExperience200SignInMode `json:"signInMode"`
		SignUp     struct {
			Identifiers          []GetWellKnownExperience200SignUpIdentifiers `json:"identifiers"`
			Password             bool                                         `json:"password"`
			SecondaryIdentifiers *[]struct {
				Identifier GetWellKnownExperience_200_SignUp_SecondaryIdentifiers_Identifier `json:"identifier"`
				Verify     *bool                                                             `json:"verify,omitempty"`
			} `json:"secondaryIdentifiers,omitempty"`
			Verify bool `json:"verify"`
		} `json:"signUp"`
		SingleSignOnEnabled bool `json:"singleSignOnEnabled"`
		SocialConnectors    []struct {
			FromEmail  *string `json:"fromEmail,omitempty"`
			Id         string  `json:"id"`
			IsStandard *bool   `json:"isStandard,omitempty"`
			Logo       string  `json:"logo"`
			LogoDark   *string `json:"logoDark"`

			// Name Validator function
			Name     map[string]interface{}                             `json:"name"`
			Platform *GetWellKnownExperience200SocialConnectorsPlatform `json:"platform"`
			Target   string                                             `json:"target"`
		} `json:"socialConnectors"`
		SocialSignIn struct {
			AutomaticAccountLinking *bool `json:"automaticAccountLinking,omitempty"`
		} `json:"socialSignIn"`
		SocialSignInConnectorTargets []string `json:"socialSignInConnectorTargets"`
		SsoConnectors                []struct {
			ConnectorName string  `json:"connectorName"`
			DarkLogo      *string `json:"darkLogo,omitempty"`
			Id            string  `json:"id"`
			Logo          string  `json:"logo"`
		} `json:"ssoConnectors"`
		SupportEmail              *string `json:"supportEmail"`
		SupportWebsiteUrl         *string `json:"supportWebsiteUrl"`
		TenantId                  string  `json:"tenantId"`
		TermsOfUseUrl             *string `json:"termsOfUseUrl"`
		UnknownSessionRedirectUrl *string `json:"unknownSessionRedirectUrl"`
	}
}
type GetWellKnownExperience200AgreeToTermsPolicy string
type GetWellKnownExperience200CaptchaConfigType string
type GetWellKnownExperience200LanguageInfoFallbackLanguage string
type GetWellKnownExperience200MfaFactors string
type GetWellKnownExperience200MfaOrganizationRequiredMfaPolicy string
type GetWellKnownExperience200MfaPolicy string
type GetWellKnownExperience200SignInMethodsIdentifier string
type GetWellKnownExperience200SignInMode string
type GetWellKnownExperience200SignUpIdentifiers string
type GetWellKnownExperience200SignUpSecondaryIdentifiersIdentifier0 string
type GetWellKnownExperience200SignUpSecondaryIdentifiersIdentifier1 string
type GetWellKnownExperience_200_SignUp_SecondaryIdentifiers_Identifier struct {
	union json.RawMessage
}
type GetWellKnownExperience200SocialConnectorsPlatform string

// Status returns HTTPResponse.Status
func (r GetWellKnownExperienceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetWellKnownExperienceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetWellKnownExperienceOpenapiJsonResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetWellKnownExperienceOpenapiJsonResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetWellKnownExperienceOpenapiJsonResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetWellKnownManagementOpenapiJsonResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetWellKnownManagementOpenapiJsonResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetWellKnownManagementOpenapiJsonResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSignInExperiencePhrasesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]GetSignInExperiencePhrases_200_AdditionalProperties
}
type GetSignInExperiencePhrases2000 = string
type GetSignInExperiencePhrases2001 map[string]interface{}
type GetSignInExperiencePhrases_200_AdditionalProperties struct {
	union json.RawMessage
}

// Status returns HTTPResponse.Status
func (r GetSignInExperiencePhrasesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSignInExperiencePhrasesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSignInExperienceConfigResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		AgreeToTermsPolicy GetSignInExperienceConfig200AgreeToTermsPolicy `json:"agreeToTermsPolicy"`
		Branding           struct {
			DarkFavicon *string `json:"darkFavicon,omitempty"`
			DarkLogoUrl *string `json:"darkLogoUrl,omitempty"`
			Favicon     *string `json:"favicon,omitempty"`
			LogoUrl     *string `json:"logoUrl,omitempty"`
		} `json:"branding"`
		CaptchaConfig *struct {
			SiteKey string                                        `json:"siteKey"`
			Type    GetSignInExperienceConfig200CaptchaConfigType `json:"type"`
		} `json:"captchaConfig,omitempty"`
		CaptchaPolicy struct {
			Enabled *bool `json:"enabled,omitempty"`
		} `json:"captchaPolicy"`
		Color struct {
			DarkPrimaryColor  string `json:"darkPrimaryColor"`
			IsDarkModeEnabled bool   `json:"isDarkModeEnabled"`
			PrimaryColor      string `json:"primaryColor"`
		} `json:"color"`
		CustomContent  map[string]string `json:"customContent"`
		CustomCss      *string           `json:"customCss"`
		CustomUiAssets *struct {
			CreatedAt float32 `json:"createdAt"`
			Id        string  `json:"id"`
		} `json:"customUiAssets"`
		EmailBlocklistPolicy struct {
			BlockDisposableAddresses *bool     `json:"blockDisposableAddresses,omitempty"`
			BlockSubaddressing       *bool     `json:"blockSubaddressing,omitempty"`
			CustomBlocklist          *[]string `json:"customBlocklist,omitempty"`
		} `json:"emailBlocklistPolicy"`
		ForgotPassword struct {
			Email bool `json:"email"`
			Phone bool `json:"phone"`
		} `json:"forgotPassword"`
		GoogleOneTap *struct {
			AutoSelect        *bool  `json:"autoSelect,omitempty"`
			ClientId          string `json:"clientId"`
			CloseOnTapOutside *bool  `json:"closeOnTapOutside,omitempty"`
			ConnectorId       string `json:"connectorId"`
			IsEnabled         *bool  `json:"isEnabled,omitempty"`
			ItpSupport        *bool  `json:"itpSupport,omitempty"`
		} `json:"googleOneTap,omitempty"`
		Id                  string `json:"id"`
		IsDevelopmentTenant bool   `json:"isDevelopmentTenant"`
		LanguageInfo        struct {
			AutoDetect       bool                                                     `json:"autoDetect"`
			FallbackLanguage GetSignInExperienceConfig200LanguageInfoFallbackLanguage `json:"fallbackLanguage"`
		} `json:"languageInfo"`
		Mfa struct {
			Factors                       []GetSignInExperienceConfig200MfaFactors                      `json:"factors"`
			OrganizationRequiredMfaPolicy *GetSignInExperienceConfig200MfaOrganizationRequiredMfaPolicy `json:"organizationRequiredMfaPolicy,omitempty"`
			Policy                        GetSignInExperienceConfig200MfaPolicy                         `json:"policy"`
		} `json:"mfa"`
		PasswordPolicy struct {
			CharacterTypes *struct {
				Min float32 `json:"min"`
			} `json:"characterTypes,omitempty"`
			Length *struct {
				Max float32 `json:"max"`
				Min float32 `json:"min"`
			} `json:"length,omitempty"`
			Rejects *struct {
				Pwned                 bool     `json:"pwned"`
				RepetitionAndSequence bool     `json:"repetitionAndSequence"`
				UserInfo              bool     `json:"userInfo"`
				Words                 []string `json:"words"`
			} `json:"rejects,omitempty"`
		} `json:"passwordPolicy"`
		PrivacyPolicyUrl *string `json:"privacyPolicyUrl"`
		SentinelPolicy   struct {
			LockoutDuration *float32 `json:"lockoutDuration,omitempty"`
			MaxAttempts     *float32 `json:"maxAttempts,omitempty"`
		} `json:"sentinelPolicy"`
		SignIn struct {
			Methods []struct {
				Identifier        GetSignInExperienceConfig200SignInMethodsIdentifier `json:"identifier"`
				IsPasswordPrimary bool                                                `json:"isPasswordPrimary"`
				Password          bool                                                `json:"password"`
				VerificationCode  bool                                                `json:"verificationCode"`
			} `json:"methods"`
		} `json:"signIn"`
		SignInMode GetSignInExperienceConfig200SignInMode `json:"signInMode"`
		SignUp     struct {
			Identifiers          []GetSignInExperienceConfig200SignUpIdentifiers `json:"identifiers"`
			Password             bool                                            `json:"password"`
			SecondaryIdentifiers *[]struct {
				Identifier GetSignInExperienceConfig_200_SignUp_SecondaryIdentifiers_Identifier `json:"identifier"`
				Verify     *bool                                                                `json:"verify,omitempty"`
			} `json:"secondaryIdentifiers,omitempty"`
			Verify bool `json:"verify"`
		} `json:"signUp"`
		SingleSignOnEnabled bool `json:"singleSignOnEnabled"`
		SocialConnectors    []struct {
			FromEmail  *string `json:"fromEmail,omitempty"`
			Id         string  `json:"id"`
			IsStandard *bool   `json:"isStandard,omitempty"`
			Logo       string  `json:"logo"`
			LogoDark   *string `json:"logoDark"`

			// Name Validator function
			Name     map[string]interface{}                                `json:"name"`
			Platform *GetSignInExperienceConfig200SocialConnectorsPlatform `json:"platform"`
			Target   string                                                `json:"target"`
		} `json:"socialConnectors"`
		SocialSignIn struct {
			AutomaticAccountLinking *bool `json:"automaticAccountLinking,omitempty"`
		} `json:"socialSignIn"`
		SocialSignInConnectorTargets []string `json:"socialSignInConnectorTargets"`
		SsoConnectors                []struct {
			ConnectorName string  `json:"connectorName"`
			DarkLogo      *string `json:"darkLogo,omitempty"`
			Id            string  `json:"id"`
			Logo          string  `json:"logo"`
		} `json:"ssoConnectors"`
		SupportEmail              *string `json:"supportEmail"`
		SupportWebsiteUrl         *string `json:"supportWebsiteUrl"`
		TenantId                  string  `json:"tenantId"`
		TermsOfUseUrl             *string `json:"termsOfUseUrl"`
		UnknownSessionRedirectUrl *string `json:"unknownSessionRedirectUrl"`
	}
}
type GetSignInExperienceConfig200AgreeToTermsPolicy string
type GetSignInExperienceConfig200CaptchaConfigType string
type GetSignInExperienceConfig200LanguageInfoFallbackLanguage string
type GetSignInExperienceConfig200MfaFactors string
type GetSignInExperienceConfig200MfaOrganizationRequiredMfaPolicy string
type GetSignInExperienceConfig200MfaPolicy string
type GetSignInExperienceConfig200SignInMethodsIdentifier string
type GetSignInExperienceConfig200SignInMode string
type GetSignInExperienceConfig200SignUpIdentifiers string
type GetSignInExperienceConfig200SignUpSecondaryIdentifiersIdentifier0 string
type GetSignInExperienceConfig200SignUpSecondaryIdentifiersIdentifier1 string
type GetSignInExperienceConfig_200_SignUp_SecondaryIdentifiers_Identifier struct {
	union json.RawMessage
}
type GetSignInExperienceConfig200SocialConnectorsPlatform string

// Status returns HTTPResponse.Status
func (r GetSignInExperienceConfigResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSignInExperienceConfigResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetWellKnownUserOpenapiJsonResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetWellKnownUserOpenapiJsonResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetWellKnownUserOpenapiJsonResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAccountCenterSettingsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Enabled bool `json:"enabled"`
		Fields  struct {
			Avatar     *GetAccountCenterSettings200FieldsAvatar     `json:"avatar,omitempty"`
			CustomData *GetAccountCenterSettings200FieldsCustomData `json:"customData,omitempty"`
			Email      *GetAccountCenterSettings200FieldsEmail      `json:"email,omitempty"`
			Mfa        *GetAccountCenterSettings200FieldsMfa        `json:"mfa,omitempty"`
			Name       *GetAccountCenterSettings200FieldsName       `json:"name,omitempty"`
			Password   *GetAccountCenterSettings200FieldsPassword   `json:"password,omitempty"`
			Phone      *GetAccountCenterSettings200FieldsPhone      `json:"phone,omitempty"`
			Profile    *GetAccountCenterSettings200FieldsProfile    `json:"profile,omitempty"`
			Social     *GetAccountCenterSettings200FieldsSocial     `json:"social,omitempty"`
			Username   *GetAccountCenterSettings200FieldsUsername   `json:"username,omitempty"`
		} `json:"fields"`
		Id                     string   `json:"id"`
		TenantId               string   `json:"tenantId"`
		WebauthnRelatedOrigins []string `json:"webauthnRelatedOrigins"`
	}
}
type GetAccountCenterSettings200FieldsAvatar string
type GetAccountCenterSettings200FieldsCustomData string
type GetAccountCenterSettings200FieldsEmail string
type GetAccountCenterSettings200FieldsMfa string
type GetAccountCenterSettings200FieldsName string
type GetAccountCenterSettings200FieldsPassword string
type GetAccountCenterSettings200FieldsPhone string
type GetAccountCenterSettings200FieldsProfile string
type GetAccountCenterSettings200FieldsSocial string
type GetAccountCenterSettings200FieldsUsername string

// Status returns HTTPResponse.Status
func (r GetAccountCenterSettingsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAccountCenterSettingsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateAccountCenterSettingsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Enabled bool `json:"enabled"`
		Fields  struct {
			Avatar     *UpdateAccountCenterSettings200FieldsAvatar     `json:"avatar,omitempty"`
			CustomData *UpdateAccountCenterSettings200FieldsCustomData `json:"customData,omitempty"`
			Email      *UpdateAccountCenterSettings200FieldsEmail      `json:"email,omitempty"`
			Mfa        *UpdateAccountCenterSettings200FieldsMfa        `json:"mfa,omitempty"`
			Name       *UpdateAccountCenterSettings200FieldsName       `json:"name,omitempty"`
			Password   *UpdateAccountCenterSettings200FieldsPassword   `json:"password,omitempty"`
			Phone      *UpdateAccountCenterSettings200FieldsPhone      `json:"phone,omitempty"`
			Profile    *UpdateAccountCenterSettings200FieldsProfile    `json:"profile,omitempty"`
			Social     *UpdateAccountCenterSettings200FieldsSocial     `json:"social,omitempty"`
			Username   *UpdateAccountCenterSettings200FieldsUsername   `json:"username,omitempty"`
		} `json:"fields"`
		Id                     string   `json:"id"`
		TenantId               string   `json:"tenantId"`
		WebauthnRelatedOrigins []string `json:"webauthnRelatedOrigins"`
	}
}
type UpdateAccountCenterSettings200FieldsAvatar string
type UpdateAccountCenterSettings200FieldsCustomData string
type UpdateAccountCenterSettings200FieldsEmail string
type UpdateAccountCenterSettings200FieldsMfa string
type UpdateAccountCenterSettings200FieldsName string
type UpdateAccountCenterSettings200FieldsPassword string
type UpdateAccountCenterSettings200FieldsPhone string
type UpdateAccountCenterSettings200FieldsProfile string
type UpdateAccountCenterSettings200FieldsSocial string
type UpdateAccountCenterSettings200FieldsUsername string

// Status returns HTTPResponse.Status
func (r UpdateAccountCenterSettingsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateAccountCenterSettingsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListApplicationsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]struct {
		CreatedAt            float32 `json:"createdAt"`
		CustomClientMetadata struct {
			AlwaysIssueRefreshToken *bool     `json:"alwaysIssueRefreshToken,omitempty"`
			CorsAllowedOrigins      *[]string `json:"corsAllowedOrigins,omitempty"`
			IdTokenTtl              *float32  `json:"idTokenTtl,omitempty"`
			RefreshTokenTtl         *float32  `json:"refreshTokenTtl,omitempty"`
			RefreshTokenTtlInDays   *float32  `json:"refreshTokenTtlInDays,omitempty"`
			RotateRefreshToken      *bool     `json:"rotateRefreshToken,omitempty"`
			TenantId                *string   `json:"tenantId,omitempty"`
		} `json:"customClientMetadata"`

		// CustomData arbitrary
		CustomData         map[string]interface{} `json:"customData"`
		Description        *string                `json:"description"`
		Id                 string                 `json:"id"`
		IsThirdParty       bool                   `json:"isThirdParty"`
		Name               string                 `json:"name"`
		OidcClientMetadata struct {
			BackchannelLogoutSessionRequired *bool                                                       `json:"backchannelLogoutSessionRequired,omitempty"`
			BackchannelLogoutUri             *string                                                     `json:"backchannelLogoutUri,omitempty"`
			LogoUri                          *string                                                     `json:"logoUri,omitempty"`
			PostLogoutRedirectUris           []string                                                    `json:"postLogoutRedirectUris"`
			RedirectUris                     []ListApplications_200_OidcClientMetadata_RedirectUris_Item `json:"redirectUris"`
		} `json:"oidcClientMetadata"`
		ProtectedAppMetadata *struct {
			CustomDomains *[]struct {
				CloudflareData *struct {
					Id  string `json:"id"`
					Ssl struct {
						Status           string `json:"status"`
						ValidationErrors *[]struct {
							Message string `json:"message"`
						} `json:"validation_errors,omitempty"`
					} `json:"ssl"`
					Status             string    `json:"status"`
					VerificationErrors *[]string `json:"verification_errors,omitempty"`
				} `json:"cloudflareData"`
				DnsRecords []struct {
					Name  string `json:"name"`
					Type  string `json:"type"`
					Value string `json:"value"`
				} `json:"dnsRecords"`
				Domain       string                                                     `json:"domain"`
				ErrorMessage *string                                                    `json:"errorMessage"`
				Status       ListApplications200ProtectedAppMetadataCustomDomainsStatus `json:"status"`
			} `json:"customDomains,omitempty"`
			Host      string `json:"host"`
			Origin    string `json:"origin"`
			PageRules []struct {
				Path string `json:"path"`
			} `json:"pageRules"`
			SessionDuration float32 `json:"sessionDuration"`
		} `json:"protectedAppMetadata"`

		// Secret The internal client secret. Note it is only used for internal validation, and the actual secrets should be retrieved from `/api/applications/{id}/secrets` endpoints.
		// Deprecated:
		Secret   ApplicationLegacySecret `json:"secret"`
		TenantId string                  `json:"tenantId"`
		Type     ListApplications200Type `json:"type"`
	}
}
type ListApplications200OidcClientMetadataRedirectUris0 = map[string]interface{}
type ListApplications200OidcClientMetadataRedirectUris1 = map[string]interface{}
type ListApplications_200_OidcClientMetadata_RedirectUris_Item struct {
	union json.RawMessage
}
type ListApplications200ProtectedAppMetadataCustomDomainsStatus string
type ListApplications200Type string

// Status returns HTTPResponse.Status
func (r ListApplicationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListApplicationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateApplicationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		CreatedAt            float32 `json:"createdAt"`
		CustomClientMetadata struct {
			AlwaysIssueRefreshToken *bool     `json:"alwaysIssueRefreshToken,omitempty"`
			CorsAllowedOrigins      *[]string `json:"corsAllowedOrigins,omitempty"`
			IdTokenTtl              *float32  `json:"idTokenTtl,omitempty"`
			RefreshTokenTtl         *float32  `json:"refreshTokenTtl,omitempty"`
			RefreshTokenTtlInDays   *float32  `json:"refreshTokenTtlInDays,omitempty"`
			RotateRefreshToken      *bool     `json:"rotateRefreshToken,omitempty"`
			TenantId                *string   `json:"tenantId,omitempty"`
		} `json:"customClientMetadata"`

		// CustomData arbitrary
		CustomData         map[string]interface{} `json:"customData"`
		Description        *string                `json:"description"`
		Id                 string                 `json:"id"`
		IsThirdParty       bool                   `json:"isThirdParty"`
		Name               string                 `json:"name"`
		OidcClientMetadata struct {
			BackchannelLogoutSessionRequired *bool                                                        `json:"backchannelLogoutSessionRequired,omitempty"`
			BackchannelLogoutUri             *string                                                      `json:"backchannelLogoutUri,omitempty"`
			LogoUri                          *string                                                      `json:"logoUri,omitempty"`
			PostLogoutRedirectUris           []string                                                     `json:"postLogoutRedirectUris"`
			RedirectUris                     []CreateApplication_200_OidcClientMetadata_RedirectUris_Item `json:"redirectUris"`
		} `json:"oidcClientMetadata"`
		ProtectedAppMetadata *struct {
			CustomDomains *[]struct {
				CloudflareData *struct {
					Id  string `json:"id"`
					Ssl struct {
						Status           string `json:"status"`
						ValidationErrors *[]struct {
							Message string `json:"message"`
						} `json:"validation_errors,omitempty"`
					} `json:"ssl"`
					Status             string    `json:"status"`
					VerificationErrors *[]string `json:"verification_errors,omitempty"`
				} `json:"cloudflareData"`
				DnsRecords []struct {
					Name  string `json:"name"`
					Type  string `json:"type"`
					Value string `json:"value"`
				} `json:"dnsRecords"`
				Domain       string                                                      `json:"domain"`
				ErrorMessage *string                                                     `json:"errorMessage"`
				Status       CreateApplication200ProtectedAppMetadataCustomDomainsStatus `json:"status"`
			} `json:"customDomains,omitempty"`
			Host      string `json:"host"`
			Origin    string `json:"origin"`
			PageRules []struct {
				Path string `json:"path"`
			} `json:"pageRules"`
			SessionDuration float32 `json:"sessionDuration"`
		} `json:"protectedAppMetadata"`

		// Secret The internal client secret. Note it is only used for internal validation, and the actual secrets should be retrieved from `/api/applications/{id}/secrets` endpoints.
		// Deprecated:
		Secret   ApplicationLegacySecret  `json:"secret"`
		TenantId string                   `json:"tenantId"`
		Type     CreateApplication200Type `json:"type"`
	}
}
type CreateApplication200OidcClientMetadataRedirectUris0 = map[string]interface{}
type CreateApplication200OidcClientMetadataRedirectUris1 = map[string]interface{}
type CreateApplication_200_OidcClientMetadata_RedirectUris_Item struct {
	union json.RawMessage
}
type CreateApplication200ProtectedAppMetadataCustomDomainsStatus string
type CreateApplication200Type string

// Status returns HTTPResponse.Status
func (r CreateApplicationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateApplicationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateApplicationCustomDataResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r UpdateApplicationCustomDataResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateApplicationCustomDataResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListApplicationRolesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]struct {
		Description string                      `json:"description"`
		Id          string                      `json:"id"`
		IsDefault   bool                        `json:"isDefault"`
		Name        string                      `json:"name"`
		TenantId    string                      `json:"tenantId"`
		Type        ListApplicationRoles200Type `json:"type"`
	}
}
type ListApplicationRoles200Type string

// Status returns HTTPResponse.Status
func (r ListApplicationRolesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListApplicationRolesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AssignApplicationRolesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r AssignApplicationRolesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AssignApplicationRolesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReplaceApplicationRolesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ReplaceApplicationRolesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReplaceApplicationRolesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteApplicationRoleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteApplicationRoleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteApplicationRoleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApplicationSignInExperienceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		ApplicationId string `json:"applicationId"`
		Branding      struct {
			DarkFavicon *string `json:"darkFavicon,omitempty"`
			DarkLogoUrl *string `json:"darkLogoUrl,omitempty"`
			Favicon     *string `json:"favicon,omitempty"`
			LogoUrl     *string `json:"logoUrl,omitempty"`
		} `json:"branding"`
		Color struct {
			DarkPrimaryColor  *string `json:"darkPrimaryColor,omitempty"`
			IsDarkModeEnabled *bool   `json:"isDarkModeEnabled,omitempty"`
			PrimaryColor      *string `json:"primaryColor,omitempty"`
		} `json:"color"`
		DisplayName      *string `json:"displayName"`
		PrivacyPolicyUrl *string `json:"privacyPolicyUrl"`
		TenantId         string  `json:"tenantId"`
		TermsOfUseUrl    *string `json:"termsOfUseUrl"`
	}
}

// Status returns HTTPResponse.Status
func (r GetApplicationSignInExperienceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApplicationSignInExperienceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReplaceApplicationSignInExperienceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		ApplicationId string `json:"applicationId"`
		Branding      struct {
			DarkFavicon *string `json:"darkFavicon,omitempty"`
			DarkLogoUrl *string `json:"darkLogoUrl,omitempty"`
			Favicon     *string `json:"favicon,omitempty"`
			LogoUrl     *string `json:"logoUrl,omitempty"`
		} `json:"branding"`
		Color struct {
			DarkPrimaryColor  *string `json:"darkPrimaryColor,omitempty"`
			IsDarkModeEnabled *bool   `json:"isDarkModeEnabled,omitempty"`
			PrimaryColor      *string `json:"primaryColor,omitempty"`
		} `json:"color"`
		DisplayName      *string `json:"displayName"`
		PrivacyPolicyUrl *string `json:"privacyPolicyUrl"`
		TenantId         string  `json:"tenantId"`
		TermsOfUseUrl    *string `json:"termsOfUseUrl"`
	}
	JSON201 *struct {
		ApplicationId string `json:"applicationId"`
		Branding      struct {
			DarkFavicon *string `json:"darkFavicon,omitempty"`
			DarkLogoUrl *string `json:"darkLogoUrl,omitempty"`
			Favicon     *string `json:"favicon,omitempty"`
			LogoUrl     *string `json:"logoUrl,omitempty"`
		} `json:"branding"`
		Color struct {
			DarkPrimaryColor  *string `json:"darkPrimaryColor,omitempty"`
			IsDarkModeEnabled *bool   `json:"isDarkModeEnabled,omitempty"`
			PrimaryColor      *string `json:"primaryColor,omitempty"`
		} `json:"color"`
		DisplayName      *string `json:"displayName"`
		PrivacyPolicyUrl *string `json:"privacyPolicyUrl"`
		TenantId         string  `json:"tenantId"`
		TermsOfUseUrl    *string `json:"termsOfUseUrl"`
	}
}

// Status returns HTTPResponse.Status
func (r ReplaceApplicationSignInExperienceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReplaceApplicationSignInExperienceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListApplicationUserConsentScopesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// OrganizationResourceScopes A list of organization resource scope details grouped by resource id assigned to the application.
		OrganizationResourceScopes []struct {
			Resource struct {
				Id        string `json:"id"`
				Indicator string `json:"indicator"`
				Name      string `json:"name"`
			} `json:"resource"`
			Scopes []struct {
				Description *string `json:"description"`
				Id          string  `json:"id"`
				Name        string  `json:"name"`
			} `json:"scopes"`
		} `json:"organizationResourceScopes"`

		// OrganizationScopes A list of organization scope details assigned to the application.
		OrganizationScopes []struct {
			Description *string `json:"description"`
			Id          string  `json:"id"`
			Name        string  `json:"name"`
		} `json:"organizationScopes"`

		// ResourceScopes A list of resource scope details grouped by resource id assigned to the application.
		ResourceScopes []struct {
			Resource struct {
				Id        string `json:"id"`
				Indicator string `json:"indicator"`
				Name      string `json:"name"`
			} `json:"resource"`
			Scopes []struct {
				Description *string `json:"description"`
				Id          string  `json:"id"`
				Name        string  `json:"name"`
			} `json:"scopes"`
		} `json:"resourceScopes"`

		// UserScopes A list of user scope enum value assigned to the application.
		UserScopes []ListApplicationUserConsentScopes200UserScopes `json:"userScopes"`
	}
}
type ListApplicationUserConsentScopes200UserScopes string

// Status returns HTTPResponse.Status
func (r ListApplicationUserConsentScopesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListApplicationUserConsentScopesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateApplicationUserConsentScopeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CreateApplicationUserConsentScopeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateApplicationUserConsentScopeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteApplicationUserConsentScopeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteApplicationUserConsentScopeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteApplicationUserConsentScopeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteApplicationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteApplicationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteApplicationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApplicationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		CreatedAt            float32 `json:"createdAt"`
		CustomClientMetadata struct {
			AlwaysIssueRefreshToken *bool     `json:"alwaysIssueRefreshToken,omitempty"`
			CorsAllowedOrigins      *[]string `json:"corsAllowedOrigins,omitempty"`
			IdTokenTtl              *float32  `json:"idTokenTtl,omitempty"`
			RefreshTokenTtl         *float32  `json:"refreshTokenTtl,omitempty"`
			RefreshTokenTtlInDays   *float32  `json:"refreshTokenTtlInDays,omitempty"`
			RotateRefreshToken      *bool     `json:"rotateRefreshToken,omitempty"`
			TenantId                *string   `json:"tenantId,omitempty"`
		} `json:"customClientMetadata"`

		// CustomData arbitrary
		CustomData         map[string]interface{} `json:"customData"`
		Description        *string                `json:"description"`
		Id                 string                 `json:"id"`
		IsAdmin            bool                   `json:"isAdmin"`
		IsThirdParty       bool                   `json:"isThirdParty"`
		Name               string                 `json:"name"`
		OidcClientMetadata struct {
			BackchannelLogoutSessionRequired *bool                                                     `json:"backchannelLogoutSessionRequired,omitempty"`
			BackchannelLogoutUri             *string                                                   `json:"backchannelLogoutUri,omitempty"`
			LogoUri                          *string                                                   `json:"logoUri,omitempty"`
			PostLogoutRedirectUris           []string                                                  `json:"postLogoutRedirectUris"`
			RedirectUris                     []GetApplication_200_OidcClientMetadata_RedirectUris_Item `json:"redirectUris"`
		} `json:"oidcClientMetadata"`
		ProtectedAppMetadata *struct {
			CustomDomains *[]struct {
				CloudflareData *struct {
					Id  string `json:"id"`
					Ssl struct {
						Status           string `json:"status"`
						ValidationErrors *[]struct {
							Message string `json:"message"`
						} `json:"validation_errors,omitempty"`
					} `json:"ssl"`
					Status             string    `json:"status"`
					VerificationErrors *[]string `json:"verification_errors,omitempty"`
				} `json:"cloudflareData"`
				DnsRecords []struct {
					Name  string `json:"name"`
					Type  string `json:"type"`
					Value string `json:"value"`
				} `json:"dnsRecords"`
				Domain       string                                                   `json:"domain"`
				ErrorMessage *string                                                  `json:"errorMessage"`
				Status       GetApplication200ProtectedAppMetadataCustomDomainsStatus `json:"status"`
			} `json:"customDomains,omitempty"`
			Host      string `json:"host"`
			Origin    string `json:"origin"`
			PageRules []struct {
				Path string `json:"path"`
			} `json:"pageRules"`
			SessionDuration float32 `json:"sessionDuration"`
		} `json:"protectedAppMetadata"`

		// Secret The internal client secret. Note it is only used for internal validation, and the actual secrets should be retrieved from `/api/applications/{id}/secrets` endpoints.
		// Deprecated:
		Secret   ApplicationLegacySecret `json:"secret"`
		TenantId string                  `json:"tenantId"`
		Type     GetApplication200Type   `json:"type"`
	}
}
type GetApplication200OidcClientMetadataRedirectUris0 = map[string]interface{}
type GetApplication200OidcClientMetadataRedirectUris1 = map[string]interface{}
type GetApplication_200_OidcClientMetadata_RedirectUris_Item struct {
	union json.RawMessage
}
type GetApplication200ProtectedAppMetadataCustomDomainsStatus string
type GetApplication200Type string

// Status returns HTTPResponse.Status
func (r GetApplicationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApplicationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateApplicationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		CreatedAt            float32 `json:"createdAt"`
		CustomClientMetadata struct {
			AlwaysIssueRefreshToken *bool     `json:"alwaysIssueRefreshToken,omitempty"`
			CorsAllowedOrigins      *[]string `json:"corsAllowedOrigins,omitempty"`
			IdTokenTtl              *float32  `json:"idTokenTtl,omitempty"`
			RefreshTokenTtl         *float32  `json:"refreshTokenTtl,omitempty"`
			RefreshTokenTtlInDays   *float32  `json:"refreshTokenTtlInDays,omitempty"`
			RotateRefreshToken      *bool     `json:"rotateRefreshToken,omitempty"`
			TenantId                *string   `json:"tenantId,omitempty"`
		} `json:"customClientMetadata"`

		// CustomData arbitrary
		CustomData         map[string]interface{} `json:"customData"`
		Description        *string                `json:"description"`
		Id                 string                 `json:"id"`
		IsThirdParty       bool                   `json:"isThirdParty"`
		Name               string                 `json:"name"`
		OidcClientMetadata struct {
			BackchannelLogoutSessionRequired *bool                                                        `json:"backchannelLogoutSessionRequired,omitempty"`
			BackchannelLogoutUri             *string                                                      `json:"backchannelLogoutUri,omitempty"`
			LogoUri                          *string                                                      `json:"logoUri,omitempty"`
			PostLogoutRedirectUris           []string                                                     `json:"postLogoutRedirectUris"`
			RedirectUris                     []UpdateApplication_200_OidcClientMetadata_RedirectUris_Item `json:"redirectUris"`
		} `json:"oidcClientMetadata"`
		ProtectedAppMetadata *struct {
			CustomDomains *[]struct {
				CloudflareData *struct {
					Id  string `json:"id"`
					Ssl struct {
						Status           string `json:"status"`
						ValidationErrors *[]struct {
							Message string `json:"message"`
						} `json:"validation_errors,omitempty"`
					} `json:"ssl"`
					Status             string    `json:"status"`
					VerificationErrors *[]string `json:"verification_errors,omitempty"`
				} `json:"cloudflareData"`
				DnsRecords []struct {
					Name  string `json:"name"`
					Type  string `json:"type"`
					Value string `json:"value"`
				} `json:"dnsRecords"`
				Domain       string                                                      `json:"domain"`
				ErrorMessage *string                                                     `json:"errorMessage"`
				Status       UpdateApplication200ProtectedAppMetadataCustomDomainsStatus `json:"status"`
			} `json:"customDomains,omitempty"`
			Host      string `json:"host"`
			Origin    string `json:"origin"`
			PageRules []struct {
				Path string `json:"path"`
			} `json:"pageRules"`
			SessionDuration float32 `json:"sessionDuration"`
		} `json:"protectedAppMetadata"`

		// Secret The internal client secret. Note it is only used for internal validation, and the actual secrets should be retrieved from `/api/applications/{id}/secrets` endpoints.
		// Deprecated:
		Secret   ApplicationLegacySecret  `json:"secret"`
		TenantId string                   `json:"tenantId"`
		Type     UpdateApplication200Type `json:"type"`
	}
}
type UpdateApplication200OidcClientMetadataRedirectUris0 = map[string]interface{}
type UpdateApplication200OidcClientMetadataRedirectUris1 = map[string]interface{}
type UpdateApplication_200_OidcClientMetadata_RedirectUris_Item struct {
	union json.RawMessage
}
type UpdateApplication200ProtectedAppMetadataCustomDomainsStatus string
type UpdateApplication200Type string

// Status returns HTTPResponse.Status
func (r UpdateApplicationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateApplicationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteApplicationLegacySecretResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		CreatedAt            float32 `json:"createdAt"`
		CustomClientMetadata struct {
			AlwaysIssueRefreshToken *bool     `json:"alwaysIssueRefreshToken,omitempty"`
			CorsAllowedOrigins      *[]string `json:"corsAllowedOrigins,omitempty"`
			IdTokenTtl              *float32  `json:"idTokenTtl,omitempty"`
			RefreshTokenTtl         *float32  `json:"refreshTokenTtl,omitempty"`
			RefreshTokenTtlInDays   *float32  `json:"refreshTokenTtlInDays,omitempty"`
			RotateRefreshToken      *bool     `json:"rotateRefreshToken,omitempty"`
			TenantId                *string   `json:"tenantId,omitempty"`
		} `json:"customClientMetadata"`

		// CustomData arbitrary
		CustomData         map[string]interface{} `json:"customData"`
		Description        *string                `json:"description"`
		Id                 string                 `json:"id"`
		IsThirdParty       bool                   `json:"isThirdParty"`
		Name               string                 `json:"name"`
		OidcClientMetadata struct {
			BackchannelLogoutSessionRequired *bool                                                                    `json:"backchannelLogoutSessionRequired,omitempty"`
			BackchannelLogoutUri             *string                                                                  `json:"backchannelLogoutUri,omitempty"`
			LogoUri                          *string                                                                  `json:"logoUri,omitempty"`
			PostLogoutRedirectUris           []string                                                                 `json:"postLogoutRedirectUris"`
			RedirectUris                     []DeleteApplicationLegacySecret_200_OidcClientMetadata_RedirectUris_Item `json:"redirectUris"`
		} `json:"oidcClientMetadata"`
		ProtectedAppMetadata *struct {
			CustomDomains *[]struct {
				CloudflareData *struct {
					Id  string `json:"id"`
					Ssl struct {
						Status           string `json:"status"`
						ValidationErrors *[]struct {
							Message string `json:"message"`
						} `json:"validation_errors,omitempty"`
					} `json:"ssl"`
					Status             string    `json:"status"`
					VerificationErrors *[]string `json:"verification_errors,omitempty"`
				} `json:"cloudflareData"`
				DnsRecords []struct {
					Name  string `json:"name"`
					Type  string `json:"type"`
					Value string `json:"value"`
				} `json:"dnsRecords"`
				Domain       string                                                                  `json:"domain"`
				ErrorMessage *string                                                                 `json:"errorMessage"`
				Status       DeleteApplicationLegacySecret200ProtectedAppMetadataCustomDomainsStatus `json:"status"`
			} `json:"customDomains,omitempty"`
			Host      string `json:"host"`
			Origin    string `json:"origin"`
			PageRules []struct {
				Path string `json:"path"`
			} `json:"pageRules"`
			SessionDuration float32 `json:"sessionDuration"`
		} `json:"protectedAppMetadata"`
		Secret   string                               `json:"secret"`
		TenantId string                               `json:"tenantId"`
		Type     DeleteApplicationLegacySecret200Type `json:"type"`
	}
}
type DeleteApplicationLegacySecret200OidcClientMetadataRedirectUris0 = map[string]interface{}
type DeleteApplicationLegacySecret200OidcClientMetadataRedirectUris1 = map[string]interface{}
type DeleteApplicationLegacySecret_200_OidcClientMetadata_RedirectUris_Item struct {
	union json.RawMessage
}
type DeleteApplicationLegacySecret200ProtectedAppMetadataCustomDomainsStatus string
type DeleteApplicationLegacySecret200Type string

// Status returns HTTPResponse.Status
func (r DeleteApplicationLegacySecretResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteApplicationLegacySecretResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListApplicationOrganizationsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]struct {
		Branding struct {
			DarkFavicon *string `json:"darkFavicon,omitempty"`
			DarkLogoUrl *string `json:"darkLogoUrl,omitempty"`
			Favicon     *string `json:"favicon,omitempty"`
			LogoUrl     *string `json:"logoUrl,omitempty"`
		} `json:"branding"`
		CreatedAt float32 `json:"createdAt"`

		// CustomData arbitrary
		CustomData        map[string]interface{} `json:"customData"`
		Description       *string                `json:"description"`
		Id                string                 `json:"id"`
		IsMfaRequired     bool                   `json:"isMfaRequired"`
		Name              string                 `json:"name"`
		OrganizationRoles []struct {
			Id   string `json:"id"`
			Name string `json:"name"`
		} `json:"organizationRoles"`
		TenantId string `json:"tenantId"`
	}
}

// Status returns HTTPResponse.Status
func (r ListApplicationOrganizationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListApplicationOrganizationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListApplicationProtectedAppMetadataCustomDomainsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]struct {
		CloudflareData *struct {
			Id  string `json:"id"`
			Ssl struct {
				Status           string `json:"status"`
				ValidationErrors *[]struct {
					Message string `json:"message"`
				} `json:"validation_errors,omitempty"`
			} `json:"ssl"`
			Status             string    `json:"status"`
			VerificationErrors *[]string `json:"verification_errors,omitempty"`
		} `json:"cloudflareData"`
		DnsRecords []struct {
			Name  string `json:"name"`
			Type  string `json:"type"`
			Value string `json:"value"`
		} `json:"dnsRecords"`
		Domain       string                                                    `json:"domain"`
		ErrorMessage *string                                                   `json:"errorMessage"`
		Status       ListApplicationProtectedAppMetadataCustomDomains200Status `json:"status"`
	}
}
type ListApplicationProtectedAppMetadataCustomDomains200Status string

// Status returns HTTPResponse.Status
func (r ListApplicationProtectedAppMetadataCustomDomainsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListApplicationProtectedAppMetadataCustomDomainsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateApplicationProtectedAppMetadataCustomDomainResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CreateApplicationProtectedAppMetadataCustomDomainResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateApplicationProtectedAppMetadataCustomDomainResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteApplicationProtectedAppMetadataCustomDomainResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteApplicationProtectedAppMetadataCustomDomainResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteApplicationProtectedAppMetadataCustomDomainResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListApplicationSecretsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]struct {
		ApplicationId string   `json:"applicationId"`
		CreatedAt     float32  `json:"createdAt"`
		ExpiresAt     *float32 `json:"expiresAt"`
		Name          string   `json:"name"`
		TenantId      string   `json:"tenantId"`
		Value         string   `json:"value"`
	}
}

// Status returns HTTPResponse.Status
func (r ListApplicationSecretsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListApplicationSecretsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateApplicationSecretResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *struct {
		ApplicationId string   `json:"applicationId"`
		CreatedAt     float32  `json:"createdAt"`
		ExpiresAt     *float32 `json:"expiresAt"`
		Name          string   `json:"name"`
		TenantId      string   `json:"tenantId"`
		Value         string   `json:"value"`
	}
}

// Status returns HTTPResponse.Status
func (r CreateApplicationSecretResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateApplicationSecretResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteApplicationSecretResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteApplicationSecretResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteApplicationSecretResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateApplicationSecretResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		ApplicationId string   `json:"applicationId"`
		CreatedAt     float32  `json:"createdAt"`
		ExpiresAt     *float32 `json:"expiresAt"`
		Name          string   `json:"name"`
		TenantId      string   `json:"tenantId"`
		Value         string   `json:"value"`
	}
}

// Status returns HTTPResponse.Status
func (r UpdateApplicationSecretResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateApplicationSecretResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListApplicationUserConsentOrganizationsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Organizations A list of organization entities granted by the user for the application.
		Organizations []struct {
			Branding struct {
				DarkFavicon *string `json:"darkFavicon,omitempty"`
				DarkLogoUrl *string `json:"darkLogoUrl,omitempty"`
				Favicon     *string `json:"favicon,omitempty"`
				LogoUrl     *string `json:"logoUrl,omitempty"`
			} `json:"branding"`
			CreatedAt float32 `json:"createdAt"`

			// CustomData arbitrary
			CustomData    map[string]interface{} `json:"customData"`
			Description   *string                `json:"description"`
			Id            string                 `json:"id"`
			IsMfaRequired bool                   `json:"isMfaRequired"`
			Name          string                 `json:"name"`
			TenantId      string                 `json:"tenantId"`
		} `json:"organizations"`
	}
}

// Status returns HTTPResponse.Status
func (r ListApplicationUserConsentOrganizationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListApplicationUserConsentOrganizationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateApplicationUserConsentOrganizationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CreateApplicationUserConsentOrganizationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateApplicationUserConsentOrganizationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReplaceApplicationUserConsentOrganizationsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ReplaceApplicationUserConsentOrganizationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReplaceApplicationUserConsentOrganizationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteApplicationUserConsentOrganizationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteApplicationUserConsentOrganizationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteApplicationUserConsentOrganizationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetHasuraAuthResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		XHasuraRole   *string `json:"X-Hasura-Role,omitempty"`
		XHasuraUserId *string `json:"X-Hasura-User-Id,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetHasuraAuthResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetHasuraAuthResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AssertSamlResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r AssertSamlResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AssertSamlResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AssertSingleSignOnSamlResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r AssertSingleSignOnSamlResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AssertSingleSignOnSamlResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteCaptchaProviderResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteCaptchaProviderResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteCaptchaProviderResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCaptchaProviderResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Config    GetCaptchaProvider_200_Config `json:"config"`
		CreatedAt float32                       `json:"createdAt"`
		Id        string                        `json:"id"`
		TenantId  string                        `json:"tenantId"`
		UpdatedAt float32                       `json:"updatedAt"`
	}
}
type GetCaptchaProvider200Config0 struct {
	SecretKey string `json:"secretKey"`
	SiteKey   string `json:"siteKey"`
	Type      string `json:"type"`
}
type GetCaptchaProvider200Config1 struct {
	ProjectId string `json:"projectId"`
	SecretKey string `json:"secretKey"`
	SiteKey   string `json:"siteKey"`
	Type      string `json:"type"`
}
type GetCaptchaProvider_200_Config struct {
	union json.RawMessage
}

// Status returns HTTPResponse.Status
func (r GetCaptchaProviderResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCaptchaProviderResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateCaptchaProviderResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Config    UpdateCaptchaProvider_200_Config `json:"config"`
		CreatedAt float32                          `json:"createdAt"`
		Id        string                           `json:"id"`
		TenantId  string                           `json:"tenantId"`
		UpdatedAt float32                          `json:"updatedAt"`
	}
}
type UpdateCaptchaProvider200Config0 struct {
	SecretKey string `json:"secretKey"`
	SiteKey   string `json:"siteKey"`
	Type      string `json:"type"`
}
type UpdateCaptchaProvider200Config1 struct {
	ProjectId string `json:"projectId"`
	SecretKey string `json:"secretKey"`
	SiteKey   string `json:"siteKey"`
	Type      string `json:"type"`
}
type UpdateCaptchaProvider_200_Config struct {
	union json.RawMessage
}

// Status returns HTTPResponse.Status
func (r UpdateCaptchaProviderResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateCaptchaProviderResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAdminConsoleConfigResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		CheckedChargeNotification *struct {
			ApiResource         *bool `json:"apiResource,omitempty"`
			MachineToMachineApp *bool `json:"machineToMachineApp,omitempty"`
			TenantMember        *bool `json:"tenantMember,omitempty"`
			Token               *bool `json:"token,omitempty"`
		} `json:"checkedChargeNotification,omitempty"`
		DevelopmentTenantMigrationNotification *struct {
			IsPaidTenant bool     `json:"isPaidTenant"`
			ReadAt       *float32 `json:"readAt,omitempty"`
			Tag          string   `json:"tag"`
		} `json:"developmentTenantMigrationNotification,omitempty"`
		OrganizationCreated        bool `json:"organizationCreated"`
		SignInExperienceCustomized bool `json:"signInExperienceCustomized"`
	}
}

// Status returns HTTPResponse.Status
func (r GetAdminConsoleConfigResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAdminConsoleConfigResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateAdminConsoleConfigResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		CheckedChargeNotification *struct {
			ApiResource         *bool `json:"apiResource,omitempty"`
			MachineToMachineApp *bool `json:"machineToMachineApp,omitempty"`
			TenantMember        *bool `json:"tenantMember,omitempty"`
			Token               *bool `json:"token,omitempty"`
		} `json:"checkedChargeNotification,omitempty"`
		DevelopmentTenantMigrationNotification *struct {
			IsPaidTenant bool     `json:"isPaidTenant"`
			ReadAt       *float32 `json:"readAt,omitempty"`
			Tag          string   `json:"tag"`
		} `json:"developmentTenantMigrationNotification,omitempty"`
		OrganizationCreated        bool `json:"organizationCreated"`
		SignInExperienceCustomized bool `json:"signInExperienceCustomized"`
	}
}

// Status returns HTTPResponse.Status
func (r UpdateAdminConsoleConfigResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateAdminConsoleConfigResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListJwtCustomizersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]ListJwtCustomizers_200_Item
}
type ListJwtCustomizers2000 struct {
	Key   string `json:"key"`
	Value struct {
		ContextSample *struct {
			Grant *struct {
				// SubjectTokenContext arbitrary
				SubjectTokenContext *map[string]interface{} `json:"subjectTokenContext,omitempty"`
				Type                *string                 `json:"type,omitempty"`
			} `json:"grant,omitempty"`
			Interaction *struct {
				InteractionEvent    *ListJwtCustomizers2000ValueContextSampleInteractionInteractionEvent                 `json:"interactionEvent,omitempty"`
				UserId              *string                                                                              `json:"userId,omitempty"`
				VerificationRecords *[]ListJwtCustomizers_200_0_Value_ContextSample_Interaction_VerificationRecords_Item `json:"verificationRecords,omitempty"`
			} `json:"interaction,omitempty"`
			User struct {
				ApplicationId *string  `json:"applicationId"`
				Avatar        *string  `json:"avatar"`
				CreatedAt     *float32 `json:"createdAt,omitempty"`

				// CustomData arbitrary
				CustomData  *map[string]interface{} `json:"customData,omitempty"`
				HasPassword *bool                   `json:"hasPassword,omitempty"`
				Id          *string                 `json:"id,omitempty"`
				Identities  *map[string]struct {
					// Details arbitrary
					Details *map[string]interface{} `json:"details,omitempty"`
					UserId  string                  `json:"userId"`
				} `json:"identities,omitempty"`
				IsSuspended            *bool                                                                 `json:"isSuspended,omitempty"`
				LastSignInAt           *float32                                                              `json:"lastSignInAt"`
				MfaVerificationFactors *[]ListJwtCustomizers2000ValueContextSampleUserMfaVerificationFactors `json:"mfaVerificationFactors,omitempty"`
				Name                   *string                                                               `json:"name"`
				OrganizationRoles      *[]struct {
					OrganizationId string `json:"organizationId"`
					RoleId         string `json:"roleId"`
					RoleName       string `json:"roleName"`
				} `json:"organizationRoles,omitempty"`
				Organizations *[]struct {
					Description *string `json:"description"`
					Id          string  `json:"id"`
					Name        string  `json:"name"`
				} `json:"organizations,omitempty"`
				PrimaryEmail *string `json:"primaryEmail"`
				PrimaryPhone *string `json:"primaryPhone"`
				Profile      *struct {
					Address *struct {
						Country       *string `json:"country,omitempty"`
						Formatted     *string `json:"formatted,omitempty"`
						Locality      *string `json:"locality,omitempty"`
						PostalCode    *string `json:"postalCode,omitempty"`
						Region        *string `json:"region,omitempty"`
						StreetAddress *string `json:"streetAddress,omitempty"`
					} `json:"address,omitempty"`
					Birthdate         *string `json:"birthdate,omitempty"`
					FamilyName        *string `json:"familyName,omitempty"`
					Gender            *string `json:"gender,omitempty"`
					GivenName         *string `json:"givenName,omitempty"`
					Locale            *string `json:"locale,omitempty"`
					MiddleName        *string `json:"middleName,omitempty"`
					Nickname          *string `json:"nickname,omitempty"`
					PreferredUsername *string `json:"preferredUsername,omitempty"`
					Profile           *string `json:"profile,omitempty"`
					Website           *string `json:"website,omitempty"`
					Zoneinfo          *string `json:"zoneinfo,omitempty"`
				} `json:"profile,omitempty"`
				Roles *[]struct {
					Description string `json:"description"`
					Id          string `json:"id"`
					Name        string `json:"name"`
					Scopes      []struct {
						Description *string `json:"description"`
						Id          string  `json:"id"`
						Name        string  `json:"name"`
						Resource    struct {
							AccessTokenTtl float32 `json:"accessTokenTtl"`
							Id             string  `json:"id"`
							Indicator      string  `json:"indicator"`
							IsDefault      bool    `json:"isDefault"`
							Name           string  `json:"name"`
							TenantId       string  `json:"tenantId"`
						} `json:"resource"`
						ResourceId string `json:"resourceId"`
					} `json:"scopes"`
				} `json:"roles,omitempty"`
				SsoIdentities *[]struct {
					// Detail arbitrary
					Detail     map[string]interface{} `json:"detail"`
					IdentityId string                 `json:"identityId"`
					Issuer     string                 `json:"issuer"`
				} `json:"ssoIdentities,omitempty"`
				UpdatedAt *float32 `json:"updatedAt,omitempty"`
				Username  *string  `json:"username"`
			} `json:"user"`
		} `json:"contextSample,omitempty"`
		EnvironmentVariables *map[string]string `json:"environmentVariables,omitempty"`
		Script               string             `json:"script"`
		TokenSample          *struct {
			AccountId          *string                                         `json:"accountId,omitempty"`
			Aud                *ListJwtCustomizers_200_0_Value_TokenSample_Aud `json:"aud,omitempty"`
			ClientId           *string                                         `json:"clientId,omitempty"`
			ExpiresWithSession *bool                                           `json:"expiresWithSession,omitempty"`
			GrantId            *string                                         `json:"grantId,omitempty"`
			Gty                *string                                         `json:"gty,omitempty"`
			Jti                *string                                         `json:"jti,omitempty"`
			Kind               *string                                         `json:"kind,omitempty"`
			Scope              *string                                         `json:"scope,omitempty"`
			SessionUid         *string                                         `json:"sessionUid,omitempty"`
			Sid                *string                                         `json:"sid,omitempty"`
		} `json:"tokenSample,omitempty"`
	} `json:"value"`
}
type ListJwtCustomizers2000ValueContextSampleInteractionInteractionEvent string
type ListJwtCustomizers2000ValueContextSampleInteractionVerificationRecords0 struct {
	Id         string `json:"id"`
	Identifier struct {
		Type  ListJwtCustomizers_200_0_Value_ContextSample_Interaction_VerificationRecords_0_Identifier_Type `json:"type"`
		Value string                                                                                         `json:"value"`
	} `json:"identifier"`
	Type     string `json:"type"`
	Verified bool   `json:"verified"`
}
type ListJwtCustomizers2000ValueContextSampleInteractionVerificationRecords0IdentifierType0 string
type ListJwtCustomizers2000ValueContextSampleInteractionVerificationRecords0IdentifierType1 string
type ListJwtCustomizers_200_0_Value_ContextSample_Interaction_VerificationRecords_0_Identifier_Type struct {
	union json.RawMessage
}
type ListJwtCustomizers2000ValueContextSampleInteractionVerificationRecords1 struct {
	Id         string `json:"id"`
	Identifier struct {
		Type  string `json:"type"`
		Value string `json:"value"`
	} `json:"identifier"`
	TemplateType ListJwtCustomizers2000ValueContextSampleInteractionVerificationRecords1TemplateType `json:"templateType"`
	Type         string                                                                              `json:"type"`
	Verified     bool                                                                                `json:"verified"`
}
type ListJwtCustomizers2000ValueContextSampleInteractionVerificationRecords1TemplateType string
type ListJwtCustomizers2000ValueContextSampleInteractionVerificationRecords2 struct {
	Id         string `json:"id"`
	Identifier struct {
		Type  string `json:"type"`
		Value string `json:"value"`
	} `json:"identifier"`
	TemplateType ListJwtCustomizers2000ValueContextSampleInteractionVerificationRecords2TemplateType `json:"templateType"`
	Type         string                                                                              `json:"type"`
	Verified     bool                                                                                `json:"verified"`
}
type ListJwtCustomizers2000ValueContextSampleInteractionVerificationRecords2TemplateType string
type ListJwtCustomizers2000ValueContextSampleInteractionVerificationRecords3 struct {
	ConnectorId    string `json:"connectorId"`
	Id             string `json:"id"`
	SocialUserInfo *struct {
		Avatar  *string                                                                                                `json:"avatar,omitempty"`
		Email   *string                                                                                                `json:"email,omitempty"`
		Id      string                                                                                                 `json:"id"`
		Name    *string                                                                                                `json:"name,omitempty"`
		Phone   *string                                                                                                `json:"phone,omitempty"`
		RawData *ListJwtCustomizers_200_0_Value_ContextSample_Interaction_VerificationRecords_3_SocialUserInfo_RawData `json:"rawData"`
	} `json:"socialUserInfo,omitempty"`
	Type string `json:"type"`
}
type ListJwtCustomizers2000ValueContextSampleInteractionVerificationRecords3SocialUserInfoRawData0 = map[string]interface{}
type ListJwtCustomizers2000ValueContextSampleInteractionVerificationRecords3SocialUserInfoRawData1 = []ListJwtCustomizers_200_0_Value_ContextSample_Interaction_VerificationRecords_3_SocialUserInfo_RawData_1_Item
type ListJwtCustomizers2000ValueContextSampleInteractionVerificationRecords3SocialUserInfoRawData10 = string
type ListJwtCustomizers2000ValueContextSampleInteractionVerificationRecords3SocialUserInfoRawData11 = float32
type ListJwtCustomizers2000ValueContextSampleInteractionVerificationRecords3SocialUserInfoRawData12 = bool
type ListJwtCustomizers2000ValueContextSampleInteractionVerificationRecords3SocialUserInfoRawData13 = interface{}
type ListJwtCustomizers2000ValueContextSampleInteractionVerificationRecords3SocialUserInfoRawData14 = map[string]interface{}
type ListJwtCustomizers_200_0_Value_ContextSample_Interaction_VerificationRecords_3_SocialUserInfo_RawData_1_Item struct {
	union json.RawMessage
}
type ListJwtCustomizers2000ValueContextSampleInteractionVerificationRecords3SocialUserInfoRawData2 = string
type ListJwtCustomizers2000ValueContextSampleInteractionVerificationRecords3SocialUserInfoRawData3 = float32
type ListJwtCustomizers2000ValueContextSampleInteractionVerificationRecords3SocialUserInfoRawData4 = bool
type ListJwtCustomizers_200_0_Value_ContextSample_Interaction_VerificationRecords_3_SocialUserInfo_RawData struct {
	union json.RawMessage
}
type ListJwtCustomizers2000ValueContextSampleInteractionVerificationRecords4 struct {
	ConnectorId           string `json:"connectorId"`
	EnterpriseSsoUserInfo *struct {
		Avatar  *string                                                                                                       `json:"avatar,omitempty"`
		Email   *string                                                                                                       `json:"email,omitempty"`
		Id      string                                                                                                        `json:"id"`
		Name    *string                                                                                                       `json:"name,omitempty"`
		Phone   *string                                                                                                       `json:"phone,omitempty"`
		RawData *ListJwtCustomizers_200_0_Value_ContextSample_Interaction_VerificationRecords_4_EnterpriseSsoUserInfo_RawData `json:"rawData"`
	} `json:"enterpriseSsoUserInfo,omitempty"`
	Id     string  `json:"id"`
	Issuer *string `json:"issuer,omitempty"`
	Type   string  `json:"type"`
}
type ListJwtCustomizers2000ValueContextSampleInteractionVerificationRecords4EnterpriseSsoUserInfoRawData0 = map[string]interface{}
type ListJwtCustomizers2000ValueContextSampleInteractionVerificationRecords4EnterpriseSsoUserInfoRawData1 = []ListJwtCustomizers_200_0_Value_ContextSample_Interaction_VerificationRecords_4_EnterpriseSsoUserInfo_RawData_1_Item
type ListJwtCustomizers2000ValueContextSampleInteractionVerificationRecords4EnterpriseSsoUserInfoRawData10 = string
type ListJwtCustomizers2000ValueContextSampleInteractionVerificationRecords4EnterpriseSsoUserInfoRawData11 = float32
type ListJwtCustomizers2000ValueContextSampleInteractionVerificationRecords4EnterpriseSsoUserInfoRawData12 = bool
type ListJwtCustomizers2000ValueContextSampleInteractionVerificationRecords4EnterpriseSsoUserInfoRawData13 = interface{}
type ListJwtCustomizers2000ValueContextSampleInteractionVerificationRecords4EnterpriseSsoUserInfoRawData14 = map[string]interface{}
type ListJwtCustomizers_200_0_Value_ContextSample_Interaction_VerificationRecords_4_EnterpriseSsoUserInfo_RawData_1_Item struct {
	union json.RawMessage
}
type ListJwtCustomizers2000ValueContextSampleInteractionVerificationRecords4EnterpriseSsoUserInfoRawData2 = string
type ListJwtCustomizers2000ValueContextSampleInteractionVerificationRecords4EnterpriseSsoUserInfoRawData3 = float32
type ListJwtCustomizers2000ValueContextSampleInteractionVerificationRecords4EnterpriseSsoUserInfoRawData4 = bool
type ListJwtCustomizers_200_0_Value_ContextSample_Interaction_VerificationRecords_4_EnterpriseSsoUserInfo_RawData struct {
	union json.RawMessage
}
type ListJwtCustomizers2000ValueContextSampleInteractionVerificationRecords5 struct {
	Id       string `json:"id"`
	Type     string `json:"type"`
	UserId   string `json:"userId"`
	Verified bool   `json:"verified"`
}
type ListJwtCustomizers2000ValueContextSampleInteractionVerificationRecords6 struct {
	Code   *string `json:"code,omitempty"`
	Id     string  `json:"id"`
	Type   string  `json:"type"`
	UserId string  `json:"userId"`
}
type ListJwtCustomizers2000ValueContextSampleInteractionVerificationRecords7 struct {
	Id       string `json:"id"`
	Type     string `json:"type"`
	UserId   string `json:"userId"`
	Verified bool   `json:"verified"`
}
type ListJwtCustomizers2000ValueContextSampleInteractionVerificationRecords8 struct {
	Id         string `json:"id"`
	Identifier struct {
		Type  string `json:"type"`
		Value string `json:"value"`
	} `json:"identifier"`
	OneTimeTokenContext *struct {
		JitOrganizationIds *[]string `json:"jitOrganizationIds,omitempty"`
	} `json:"oneTimeTokenContext,omitempty"`
	Type     string `json:"type"`
	Verified bool   `json:"verified"`
}
type ListJwtCustomizers2000ValueContextSampleInteractionVerificationRecords9 struct {
	Id         string `json:"id"`
	Identifier struct {
		Type  ListJwtCustomizers2000ValueContextSampleInteractionVerificationRecords9IdentifierType `json:"type"`
		Value string                                                                                `json:"value"`
	} `json:"identifier"`
	Type string `json:"type"`
}
type ListJwtCustomizers2000ValueContextSampleInteractionVerificationRecords9IdentifierType string
type ListJwtCustomizers_200_0_Value_ContextSample_Interaction_VerificationRecords_Item struct {
	union json.RawMessage
}
type ListJwtCustomizers2000ValueContextSampleUserMfaVerificationFactors string
type ListJwtCustomizers2000ValueTokenSampleAud0 = string
type ListJwtCustomizers2000ValueTokenSampleAud1 = []string
type ListJwtCustomizers_200_0_Value_TokenSample_Aud struct {
	union json.RawMessage
}
type ListJwtCustomizers2001 struct {
	Key   string `json:"key"`
	Value struct {
		// ContextSample arbitrary
		ContextSample        *map[string]interface{} `json:"contextSample,omitempty"`
		EnvironmentVariables *map[string]string      `json:"environmentVariables,omitempty"`
		Script               string                  `json:"script"`
		TokenSample          *struct {
			Aud      *ListJwtCustomizers_200_1_Value_TokenSample_Aud `json:"aud,omitempty"`
			ClientId *string                                         `json:"clientId,omitempty"`
			Jti      *string                                         `json:"jti,omitempty"`
			Kind     *string                                         `json:"kind,omitempty"`
			Scope    *string                                         `json:"scope,omitempty"`
		} `json:"tokenSample,omitempty"`
	} `json:"value"`
}
type ListJwtCustomizers2001ValueTokenSampleAud0 = string
type ListJwtCustomizers2001ValueTokenSampleAud1 = []string
type ListJwtCustomizers_200_1_Value_TokenSample_Aud struct {
	union json.RawMessage
}
type ListJwtCustomizers_200_Item struct {
	union json.RawMessage
}

// Status returns HTTPResponse.Status
func (r ListJwtCustomizersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListJwtCustomizersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TestJwtCustomizerResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r TestJwtCustomizerResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TestJwtCustomizerResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteJwtCustomizerResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteJwtCustomizerResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteJwtCustomizerResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetJwtCustomizerResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		union json.RawMessage
	}
}
type GetJwtCustomizer2000 struct {
	ContextSample *struct {
		Grant *struct {
			// SubjectTokenContext arbitrary
			SubjectTokenContext *map[string]interface{} `json:"subjectTokenContext,omitempty"`
			Type                *string                 `json:"type,omitempty"`
		} `json:"grant,omitempty"`
		Interaction *struct {
			InteractionEvent    *GetJwtCustomizer2000ContextSampleInteractionInteractionEvent                `json:"interactionEvent,omitempty"`
			UserId              *string                                                                      `json:"userId,omitempty"`
			VerificationRecords *[]GetJwtCustomizer_200_0_ContextSample_Interaction_VerificationRecords_Item `json:"verificationRecords,omitempty"`
		} `json:"interaction,omitempty"`
		User struct {
			ApplicationId *string  `json:"applicationId"`
			Avatar        *string  `json:"avatar"`
			CreatedAt     *float32 `json:"createdAt,omitempty"`

			// CustomData arbitrary
			CustomData  *map[string]interface{} `json:"customData,omitempty"`
			HasPassword *bool                   `json:"hasPassword,omitempty"`
			Id          *string                 `json:"id,omitempty"`
			Identities  *map[string]struct {
				// Details arbitrary
				Details *map[string]interface{} `json:"details,omitempty"`
				UserId  string                  `json:"userId"`
			} `json:"identities,omitempty"`
			IsSuspended            *bool                                                          `json:"isSuspended,omitempty"`
			LastSignInAt           *float32                                                       `json:"lastSignInAt"`
			MfaVerificationFactors *[]GetJwtCustomizer2000ContextSampleUserMfaVerificationFactors `json:"mfaVerificationFactors,omitempty"`
			Name                   *string                                                        `json:"name"`
			OrganizationRoles      *[]struct {
				OrganizationId string `json:"organizationId"`
				RoleId         string `json:"roleId"`
				RoleName       string `json:"roleName"`
			} `json:"organizationRoles,omitempty"`
			Organizations *[]struct {
				Description *string `json:"description"`
				Id          string  `json:"id"`
				Name        string  `json:"name"`
			} `json:"organizations,omitempty"`
			PrimaryEmail *string `json:"primaryEmail"`
			PrimaryPhone *string `json:"primaryPhone"`
			Profile      *struct {
				Address *struct {
					Country       *string `json:"country,omitempty"`
					Formatted     *string `json:"formatted,omitempty"`
					Locality      *string `json:"locality,omitempty"`
					PostalCode    *string `json:"postalCode,omitempty"`
					Region        *string `json:"region,omitempty"`
					StreetAddress *string `json:"streetAddress,omitempty"`
				} `json:"address,omitempty"`
				Birthdate         *string `json:"birthdate,omitempty"`
				FamilyName        *string `json:"familyName,omitempty"`
				Gender            *string `json:"gender,omitempty"`
				GivenName         *string `json:"givenName,omitempty"`
				Locale            *string `json:"locale,omitempty"`
				MiddleName        *string `json:"middleName,omitempty"`
				Nickname          *string `json:"nickname,omitempty"`
				PreferredUsername *string `json:"preferredUsername,omitempty"`
				Profile           *string `json:"profile,omitempty"`
				Website           *string `json:"website,omitempty"`
				Zoneinfo          *string `json:"zoneinfo,omitempty"`
			} `json:"profile,omitempty"`
			Roles *[]struct {
				Description string `json:"description"`
				Id          string `json:"id"`
				Name        string `json:"name"`
				Scopes      []struct {
					Description *string `json:"description"`
					Id          string  `json:"id"`
					Name        string  `json:"name"`
					Resource    struct {
						AccessTokenTtl float32 `json:"accessTokenTtl"`
						Id             string  `json:"id"`
						Indicator      string  `json:"indicator"`
						IsDefault      bool    `json:"isDefault"`
						Name           string  `json:"name"`
						TenantId       string  `json:"tenantId"`
					} `json:"resource"`
					ResourceId string `json:"resourceId"`
				} `json:"scopes"`
			} `json:"roles,omitempty"`
			SsoIdentities *[]struct {
				// Detail arbitrary
				Detail     map[string]interface{} `json:"detail"`
				IdentityId string                 `json:"identityId"`
				Issuer     string                 `json:"issuer"`
			} `json:"ssoIdentities,omitempty"`
			UpdatedAt *float32 `json:"updatedAt,omitempty"`
			Username  *string  `json:"username"`
		} `json:"user"`
	} `json:"contextSample,omitempty"`
	EnvironmentVariables *map[string]string `json:"environmentVariables,omitempty"`
	Script               string             `json:"script"`
	TokenSample          *struct {
		AccountId          *string                                 `json:"accountId,omitempty"`
		Aud                *GetJwtCustomizer_200_0_TokenSample_Aud `json:"aud,omitempty"`
		ClientId           *string                                 `json:"clientId,omitempty"`
		ExpiresWithSession *bool                                   `json:"expiresWithSession,omitempty"`
		GrantId            *string                                 `json:"grantId,omitempty"`
		Gty                *string                                 `json:"gty,omitempty"`
		Jti                *string                                 `json:"jti,omitempty"`
		Kind               *string                                 `json:"kind,omitempty"`
		Scope              *string                                 `json:"scope,omitempty"`
		SessionUid         *string                                 `json:"sessionUid,omitempty"`
		Sid                *string                                 `json:"sid,omitempty"`
	} `json:"tokenSample,omitempty"`
}
type GetJwtCustomizer2000ContextSampleInteractionInteractionEvent string
type GetJwtCustomizer2000ContextSampleInteractionVerificationRecords0 struct {
	Id         string `json:"id"`
	Identifier struct {
		Type  GetJwtCustomizer_200_0_ContextSample_Interaction_VerificationRecords_0_Identifier_Type `json:"type"`
		Value string                                                                                 `json:"value"`
	} `json:"identifier"`
	Type     string `json:"type"`
	Verified bool   `json:"verified"`
}
type GetJwtCustomizer2000ContextSampleInteractionVerificationRecords0IdentifierType0 string
type GetJwtCustomizer2000ContextSampleInteractionVerificationRecords0IdentifierType1 string
type GetJwtCustomizer_200_0_ContextSample_Interaction_VerificationRecords_0_Identifier_Type struct {
	union json.RawMessage
}
type GetJwtCustomizer2000ContextSampleInteractionVerificationRecords1 struct {
	Id         string `json:"id"`
	Identifier struct {
		Type  string `json:"type"`
		Value string `json:"value"`
	} `json:"identifier"`
	TemplateType GetJwtCustomizer2000ContextSampleInteractionVerificationRecords1TemplateType `json:"templateType"`
	Type         string                                                                       `json:"type"`
	Verified     bool                                                                         `json:"verified"`
}
type GetJwtCustomizer2000ContextSampleInteractionVerificationRecords1TemplateType string
type GetJwtCustomizer2000ContextSampleInteractionVerificationRecords2 struct {
	Id         string `json:"id"`
	Identifier struct {
		Type  string `json:"type"`
		Value string `json:"value"`
	} `json:"identifier"`
	TemplateType GetJwtCustomizer2000ContextSampleInteractionVerificationRecords2TemplateType `json:"templateType"`
	Type         string                                                                       `json:"type"`
	Verified     bool                                                                         `json:"verified"`
}
type GetJwtCustomizer2000ContextSampleInteractionVerificationRecords2TemplateType string
type GetJwtCustomizer2000ContextSampleInteractionVerificationRecords3 struct {
	ConnectorId    string `json:"connectorId"`
	Id             string `json:"id"`
	SocialUserInfo *struct {
		Avatar  *string                                                                                        `json:"avatar,omitempty"`
		Email   *string                                                                                        `json:"email,omitempty"`
		Id      string                                                                                         `json:"id"`
		Name    *string                                                                                        `json:"name,omitempty"`
		Phone   *string                                                                                        `json:"phone,omitempty"`
		RawData *GetJwtCustomizer_200_0_ContextSample_Interaction_VerificationRecords_3_SocialUserInfo_RawData `json:"rawData"`
	} `json:"socialUserInfo,omitempty"`
	Type string `json:"type"`
}
type GetJwtCustomizer2000ContextSampleInteractionVerificationRecords3SocialUserInfoRawData0 = map[string]interface{}
type GetJwtCustomizer2000ContextSampleInteractionVerificationRecords3SocialUserInfoRawData1 = []GetJwtCustomizer_200_0_ContextSample_Interaction_VerificationRecords_3_SocialUserInfo_RawData_1_Item
type GetJwtCustomizer2000ContextSampleInteractionVerificationRecords3SocialUserInfoRawData10 = string
type GetJwtCustomizer2000ContextSampleInteractionVerificationRecords3SocialUserInfoRawData11 = float32
type GetJwtCustomizer2000ContextSampleInteractionVerificationRecords3SocialUserInfoRawData12 = bool
type GetJwtCustomizer2000ContextSampleInteractionVerificationRecords3SocialUserInfoRawData13 = interface{}
type GetJwtCustomizer2000ContextSampleInteractionVerificationRecords3SocialUserInfoRawData14 = map[string]interface{}
type GetJwtCustomizer_200_0_ContextSample_Interaction_VerificationRecords_3_SocialUserInfo_RawData_1_Item struct {
	union json.RawMessage
}
type GetJwtCustomizer2000ContextSampleInteractionVerificationRecords3SocialUserInfoRawData2 = string
type GetJwtCustomizer2000ContextSampleInteractionVerificationRecords3SocialUserInfoRawData3 = float32
type GetJwtCustomizer2000ContextSampleInteractionVerificationRecords3SocialUserInfoRawData4 = bool
type GetJwtCustomizer_200_0_ContextSample_Interaction_VerificationRecords_3_SocialUserInfo_RawData struct {
	union json.RawMessage
}
type GetJwtCustomizer2000ContextSampleInteractionVerificationRecords4 struct {
	ConnectorId           string `json:"connectorId"`
	EnterpriseSsoUserInfo *struct {
		Avatar  *string                                                                                               `json:"avatar,omitempty"`
		Email   *string                                                                                               `json:"email,omitempty"`
		Id      string                                                                                                `json:"id"`
		Name    *string                                                                                               `json:"name,omitempty"`
		Phone   *string                                                                                               `json:"phone,omitempty"`
		RawData *GetJwtCustomizer_200_0_ContextSample_Interaction_VerificationRecords_4_EnterpriseSsoUserInfo_RawData `json:"rawData"`
	} `json:"enterpriseSsoUserInfo,omitempty"`
	Id     string  `json:"id"`
	Issuer *string `json:"issuer,omitempty"`
	Type   string  `json:"type"`
}
type GetJwtCustomizer2000ContextSampleInteractionVerificationRecords4EnterpriseSsoUserInfoRawData0 = map[string]interface{}
type GetJwtCustomizer2000ContextSampleInteractionVerificationRecords4EnterpriseSsoUserInfoRawData1 = []GetJwtCustomizer_200_0_ContextSample_Interaction_VerificationRecords_4_EnterpriseSsoUserInfo_RawData_1_Item
type GetJwtCustomizer2000ContextSampleInteractionVerificationRecords4EnterpriseSsoUserInfoRawData10 = string
type GetJwtCustomizer2000ContextSampleInteractionVerificationRecords4EnterpriseSsoUserInfoRawData11 = float32
type GetJwtCustomizer2000ContextSampleInteractionVerificationRecords4EnterpriseSsoUserInfoRawData12 = bool
type GetJwtCustomizer2000ContextSampleInteractionVerificationRecords4EnterpriseSsoUserInfoRawData13 = interface{}
type GetJwtCustomizer2000ContextSampleInteractionVerificationRecords4EnterpriseSsoUserInfoRawData14 = map[string]interface{}
type GetJwtCustomizer_200_0_ContextSample_Interaction_VerificationRecords_4_EnterpriseSsoUserInfo_RawData_1_Item struct {
	union json.RawMessage
}
type GetJwtCustomizer2000ContextSampleInteractionVerificationRecords4EnterpriseSsoUserInfoRawData2 = string
type GetJwtCustomizer2000ContextSampleInteractionVerificationRecords4EnterpriseSsoUserInfoRawData3 = float32
type GetJwtCustomizer2000ContextSampleInteractionVerificationRecords4EnterpriseSsoUserInfoRawData4 = bool
type GetJwtCustomizer_200_0_ContextSample_Interaction_VerificationRecords_4_EnterpriseSsoUserInfo_RawData struct {
	union json.RawMessage
}
type GetJwtCustomizer2000ContextSampleInteractionVerificationRecords5 struct {
	Id       string `json:"id"`
	Type     string `json:"type"`
	UserId   string `json:"userId"`
	Verified bool   `json:"verified"`
}
type GetJwtCustomizer2000ContextSampleInteractionVerificationRecords6 struct {
	Code   *string `json:"code,omitempty"`
	Id     string  `json:"id"`
	Type   string  `json:"type"`
	UserId string  `json:"userId"`
}
type GetJwtCustomizer2000ContextSampleInteractionVerificationRecords7 struct {
	Id       string `json:"id"`
	Type     string `json:"type"`
	UserId   string `json:"userId"`
	Verified bool   `json:"verified"`
}
type GetJwtCustomizer2000ContextSampleInteractionVerificationRecords8 struct {
	Id         string `json:"id"`
	Identifier struct {
		Type  string `json:"type"`
		Value string `json:"value"`
	} `json:"identifier"`
	OneTimeTokenContext *struct {
		JitOrganizationIds *[]string `json:"jitOrganizationIds,omitempty"`
	} `json:"oneTimeTokenContext,omitempty"`
	Type     string `json:"type"`
	Verified bool   `json:"verified"`
}
type GetJwtCustomizer2000ContextSampleInteractionVerificationRecords9 struct {
	Id         string `json:"id"`
	Identifier struct {
		Type  GetJwtCustomizer2000ContextSampleInteractionVerificationRecords9IdentifierType `json:"type"`
		Value string                                                                         `json:"value"`
	} `json:"identifier"`
	Type string `json:"type"`
}
type GetJwtCustomizer2000ContextSampleInteractionVerificationRecords9IdentifierType string
type GetJwtCustomizer_200_0_ContextSample_Interaction_VerificationRecords_Item struct {
	union json.RawMessage
}
type GetJwtCustomizer2000ContextSampleUserMfaVerificationFactors string
type GetJwtCustomizer2000TokenSampleAud0 = string
type GetJwtCustomizer2000TokenSampleAud1 = []string
type GetJwtCustomizer_200_0_TokenSample_Aud struct {
	union json.RawMessage
}
type GetJwtCustomizer2001 struct {
	// ContextSample arbitrary
	ContextSample        *map[string]interface{} `json:"contextSample,omitempty"`
	EnvironmentVariables *map[string]string      `json:"environmentVariables,omitempty"`
	Script               string                  `json:"script"`
	TokenSample          *struct {
		Aud      *GetJwtCustomizer_200_1_TokenSample_Aud `json:"aud,omitempty"`
		ClientId *string                                 `json:"clientId,omitempty"`
		Jti      *string                                 `json:"jti,omitempty"`
		Kind     *string                                 `json:"kind,omitempty"`
		Scope    *string                                 `json:"scope,omitempty"`
	} `json:"tokenSample,omitempty"`
}
type GetJwtCustomizer2001TokenSampleAud0 = string
type GetJwtCustomizer2001TokenSampleAud1 = []string
type GetJwtCustomizer_200_1_TokenSample_Aud struct {
	union json.RawMessage
}

// Status returns HTTPResponse.Status
func (r GetJwtCustomizerResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetJwtCustomizerResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateJwtCustomizerResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		union json.RawMessage
	}
}
type UpdateJwtCustomizer2000 struct {
	ContextSample *struct {
		Grant *struct {
			// SubjectTokenContext arbitrary
			SubjectTokenContext *map[string]interface{} `json:"subjectTokenContext,omitempty"`
			Type                *string                 `json:"type,omitempty"`
		} `json:"grant,omitempty"`
		Interaction *struct {
			InteractionEvent    *UpdateJwtCustomizer2000ContextSampleInteractionInteractionEvent                `json:"interactionEvent,omitempty"`
			UserId              *string                                                                         `json:"userId,omitempty"`
			VerificationRecords *[]UpdateJwtCustomizer_200_0_ContextSample_Interaction_VerificationRecords_Item `json:"verificationRecords,omitempty"`
		} `json:"interaction,omitempty"`
		User struct {
			ApplicationId *string  `json:"applicationId"`
			Avatar        *string  `json:"avatar"`
			CreatedAt     *float32 `json:"createdAt,omitempty"`

			// CustomData arbitrary
			CustomData  *map[string]interface{} `json:"customData,omitempty"`
			HasPassword *bool                   `json:"hasPassword,omitempty"`
			Id          *string                 `json:"id,omitempty"`
			Identities  *map[string]struct {
				// Details arbitrary
				Details *map[string]interface{} `json:"details,omitempty"`
				UserId  string                  `json:"userId"`
			} `json:"identities,omitempty"`
			IsSuspended            *bool                                                             `json:"isSuspended,omitempty"`
			LastSignInAt           *float32                                                          `json:"lastSignInAt"`
			MfaVerificationFactors *[]UpdateJwtCustomizer2000ContextSampleUserMfaVerificationFactors `json:"mfaVerificationFactors,omitempty"`
			Name                   *string                                                           `json:"name"`
			OrganizationRoles      *[]struct {
				OrganizationId string `json:"organizationId"`
				RoleId         string `json:"roleId"`
				RoleName       string `json:"roleName"`
			} `json:"organizationRoles,omitempty"`
			Organizations *[]struct {
				Description *string `json:"description"`
				Id          string  `json:"id"`
				Name        string  `json:"name"`
			} `json:"organizations,omitempty"`
			PrimaryEmail *string `json:"primaryEmail"`
			PrimaryPhone *string `json:"primaryPhone"`
			Profile      *struct {
				Address *struct {
					Country       *string `json:"country,omitempty"`
					Formatted     *string `json:"formatted,omitempty"`
					Locality      *string `json:"locality,omitempty"`
					PostalCode    *string `json:"postalCode,omitempty"`
					Region        *string `json:"region,omitempty"`
					StreetAddress *string `json:"streetAddress,omitempty"`
				} `json:"address,omitempty"`
				Birthdate         *string `json:"birthdate,omitempty"`
				FamilyName        *string `json:"familyName,omitempty"`
				Gender            *string `json:"gender,omitempty"`
				GivenName         *string `json:"givenName,omitempty"`
				Locale            *string `json:"locale,omitempty"`
				MiddleName        *string `json:"middleName,omitempty"`
				Nickname          *string `json:"nickname,omitempty"`
				PreferredUsername *string `json:"preferredUsername,omitempty"`
				Profile           *string `json:"profile,omitempty"`
				Website           *string `json:"website,omitempty"`
				Zoneinfo          *string `json:"zoneinfo,omitempty"`
			} `json:"profile,omitempty"`
			Roles *[]struct {
				Description string `json:"description"`
				Id          string `json:"id"`
				Name        string `json:"name"`
				Scopes      []struct {
					Description *string `json:"description"`
					Id          string  `json:"id"`
					Name        string  `json:"name"`
					Resource    struct {
						AccessTokenTtl float32 `json:"accessTokenTtl"`
						Id             string  `json:"id"`
						Indicator      string  `json:"indicator"`
						IsDefault      bool    `json:"isDefault"`
						Name           string  `json:"name"`
						TenantId       string  `json:"tenantId"`
					} `json:"resource"`
					ResourceId string `json:"resourceId"`
				} `json:"scopes"`
			} `json:"roles,omitempty"`
			SsoIdentities *[]struct {
				// Detail arbitrary
				Detail     map[string]interface{} `json:"detail"`
				IdentityId string                 `json:"identityId"`
				Issuer     string                 `json:"issuer"`
			} `json:"ssoIdentities,omitempty"`
			UpdatedAt *float32 `json:"updatedAt,omitempty"`
			Username  *string  `json:"username"`
		} `json:"user"`
	} `json:"contextSample,omitempty"`
	EnvironmentVariables *map[string]string `json:"environmentVariables,omitempty"`
	Script               string             `json:"script"`
	TokenSample          *struct {
		AccountId          *string                                    `json:"accountId,omitempty"`
		Aud                *UpdateJwtCustomizer_200_0_TokenSample_Aud `json:"aud,omitempty"`
		ClientId           *string                                    `json:"clientId,omitempty"`
		ExpiresWithSession *bool                                      `json:"expiresWithSession,omitempty"`
		GrantId            *string                                    `json:"grantId,omitempty"`
		Gty                *string                                    `json:"gty,omitempty"`
		Jti                *string                                    `json:"jti,omitempty"`
		Kind               *string                                    `json:"kind,omitempty"`
		Scope              *string                                    `json:"scope,omitempty"`
		SessionUid         *string                                    `json:"sessionUid,omitempty"`
		Sid                *string                                    `json:"sid,omitempty"`
	} `json:"tokenSample,omitempty"`
}
type UpdateJwtCustomizer2000ContextSampleInteractionInteractionEvent string
type UpdateJwtCustomizer2000ContextSampleInteractionVerificationRecords0 struct {
	Id         string `json:"id"`
	Identifier struct {
		Type  UpdateJwtCustomizer_200_0_ContextSample_Interaction_VerificationRecords_0_Identifier_Type `json:"type"`
		Value string                                                                                    `json:"value"`
	} `json:"identifier"`
	Type     string `json:"type"`
	Verified bool   `json:"verified"`
}
type UpdateJwtCustomizer2000ContextSampleInteractionVerificationRecords0IdentifierType0 string
type UpdateJwtCustomizer2000ContextSampleInteractionVerificationRecords0IdentifierType1 string
type UpdateJwtCustomizer_200_0_ContextSample_Interaction_VerificationRecords_0_Identifier_Type struct {
	union json.RawMessage
}
type UpdateJwtCustomizer2000ContextSampleInteractionVerificationRecords1 struct {
	Id         string `json:"id"`
	Identifier struct {
		Type  string `json:"type"`
		Value string `json:"value"`
	} `json:"identifier"`
	TemplateType UpdateJwtCustomizer2000ContextSampleInteractionVerificationRecords1TemplateType `json:"templateType"`
	Type         string                                                                          `json:"type"`
	Verified     bool                                                                            `json:"verified"`
}
type UpdateJwtCustomizer2000ContextSampleInteractionVerificationRecords1TemplateType string
type UpdateJwtCustomizer2000ContextSampleInteractionVerificationRecords2 struct {
	Id         string `json:"id"`
	Identifier struct {
		Type  string `json:"type"`
		Value string `json:"value"`
	} `json:"identifier"`
	TemplateType UpdateJwtCustomizer2000ContextSampleInteractionVerificationRecords2TemplateType `json:"templateType"`
	Type         string                                                                          `json:"type"`
	Verified     bool                                                                            `json:"verified"`
}
type UpdateJwtCustomizer2000ContextSampleInteractionVerificationRecords2TemplateType string
type UpdateJwtCustomizer2000ContextSampleInteractionVerificationRecords3 struct {
	ConnectorId    string `json:"connectorId"`
	Id             string `json:"id"`
	SocialUserInfo *struct {
		Avatar  *string                                                                                           `json:"avatar,omitempty"`
		Email   *string                                                                                           `json:"email,omitempty"`
		Id      string                                                                                            `json:"id"`
		Name    *string                                                                                           `json:"name,omitempty"`
		Phone   *string                                                                                           `json:"phone,omitempty"`
		RawData *UpdateJwtCustomizer_200_0_ContextSample_Interaction_VerificationRecords_3_SocialUserInfo_RawData `json:"rawData"`
	} `json:"socialUserInfo,omitempty"`
	Type string `json:"type"`
}
type UpdateJwtCustomizer2000ContextSampleInteractionVerificationRecords3SocialUserInfoRawData0 = map[string]interface{}
type UpdateJwtCustomizer2000ContextSampleInteractionVerificationRecords3SocialUserInfoRawData1 = []UpdateJwtCustomizer_200_0_ContextSample_Interaction_VerificationRecords_3_SocialUserInfo_RawData_1_Item
type UpdateJwtCustomizer2000ContextSampleInteractionVerificationRecords3SocialUserInfoRawData10 = string
type UpdateJwtCustomizer2000ContextSampleInteractionVerificationRecords3SocialUserInfoRawData11 = float32
type UpdateJwtCustomizer2000ContextSampleInteractionVerificationRecords3SocialUserInfoRawData12 = bool
type UpdateJwtCustomizer2000ContextSampleInteractionVerificationRecords3SocialUserInfoRawData13 = interface{}
type UpdateJwtCustomizer2000ContextSampleInteractionVerificationRecords3SocialUserInfoRawData14 = map[string]interface{}
type UpdateJwtCustomizer_200_0_ContextSample_Interaction_VerificationRecords_3_SocialUserInfo_RawData_1_Item struct {
	union json.RawMessage
}
type UpdateJwtCustomizer2000ContextSampleInteractionVerificationRecords3SocialUserInfoRawData2 = string
type UpdateJwtCustomizer2000ContextSampleInteractionVerificationRecords3SocialUserInfoRawData3 = float32
type UpdateJwtCustomizer2000ContextSampleInteractionVerificationRecords3SocialUserInfoRawData4 = bool
type UpdateJwtCustomizer_200_0_ContextSample_Interaction_VerificationRecords_3_SocialUserInfo_RawData struct {
	union json.RawMessage
}
type UpdateJwtCustomizer2000ContextSampleInteractionVerificationRecords4 struct {
	ConnectorId           string `json:"connectorId"`
	EnterpriseSsoUserInfo *struct {
		Avatar  *string                                                                                                  `json:"avatar,omitempty"`
		Email   *string                                                                                                  `json:"email,omitempty"`
		Id      string                                                                                                   `json:"id"`
		Name    *string                                                                                                  `json:"name,omitempty"`
		Phone   *string                                                                                                  `json:"phone,omitempty"`
		RawData *UpdateJwtCustomizer_200_0_ContextSample_Interaction_VerificationRecords_4_EnterpriseSsoUserInfo_RawData `json:"rawData"`
	} `json:"enterpriseSsoUserInfo,omitempty"`
	Id     string  `json:"id"`
	Issuer *string `json:"issuer,omitempty"`
	Type   string  `json:"type"`
}
type UpdateJwtCustomizer2000ContextSampleInteractionVerificationRecords4EnterpriseSsoUserInfoRawData0 = map[string]interface{}
type UpdateJwtCustomizer2000ContextSampleInteractionVerificationRecords4EnterpriseSsoUserInfoRawData1 = []UpdateJwtCustomizer_200_0_ContextSample_Interaction_VerificationRecords_4_EnterpriseSsoUserInfo_RawData_1_Item
type UpdateJwtCustomizer2000ContextSampleInteractionVerificationRecords4EnterpriseSsoUserInfoRawData10 = string
type UpdateJwtCustomizer2000ContextSampleInteractionVerificationRecords4EnterpriseSsoUserInfoRawData11 = float32
type UpdateJwtCustomizer2000ContextSampleInteractionVerificationRecords4EnterpriseSsoUserInfoRawData12 = bool
type UpdateJwtCustomizer2000ContextSampleInteractionVerificationRecords4EnterpriseSsoUserInfoRawData13 = interface{}
type UpdateJwtCustomizer2000ContextSampleInteractionVerificationRecords4EnterpriseSsoUserInfoRawData14 = map[string]interface{}
type UpdateJwtCustomizer_200_0_ContextSample_Interaction_VerificationRecords_4_EnterpriseSsoUserInfo_RawData_1_Item struct {
	union json.RawMessage
}
type UpdateJwtCustomizer2000ContextSampleInteractionVerificationRecords4EnterpriseSsoUserInfoRawData2 = string
type UpdateJwtCustomizer2000ContextSampleInteractionVerificationRecords4EnterpriseSsoUserInfoRawData3 = float32
type UpdateJwtCustomizer2000ContextSampleInteractionVerificationRecords4EnterpriseSsoUserInfoRawData4 = bool
type UpdateJwtCustomizer_200_0_ContextSample_Interaction_VerificationRecords_4_EnterpriseSsoUserInfo_RawData struct {
	union json.RawMessage
}
type UpdateJwtCustomizer2000ContextSampleInteractionVerificationRecords5 struct {
	Id       string `json:"id"`
	Type     string `json:"type"`
	UserId   string `json:"userId"`
	Verified bool   `json:"verified"`
}
type UpdateJwtCustomizer2000ContextSampleInteractionVerificationRecords6 struct {
	Code   *string `json:"code,omitempty"`
	Id     string  `json:"id"`
	Type   string  `json:"type"`
	UserId string  `json:"userId"`
}
type UpdateJwtCustomizer2000ContextSampleInteractionVerificationRecords7 struct {
	Id       string `json:"id"`
	Type     string `json:"type"`
	UserId   string `json:"userId"`
	Verified bool   `json:"verified"`
}
type UpdateJwtCustomizer2000ContextSampleInteractionVerificationRecords8 struct {
	Id         string `json:"id"`
	Identifier struct {
		Type  string `json:"type"`
		Value string `json:"value"`
	} `json:"identifier"`
	OneTimeTokenContext *struct {
		JitOrganizationIds *[]string `json:"jitOrganizationIds,omitempty"`
	} `json:"oneTimeTokenContext,omitempty"`
	Type     string `json:"type"`
	Verified bool   `json:"verified"`
}
type UpdateJwtCustomizer2000ContextSampleInteractionVerificationRecords9 struct {
	Id         string `json:"id"`
	Identifier struct {
		Type  UpdateJwtCustomizer2000ContextSampleInteractionVerificationRecords9IdentifierType `json:"type"`
		Value string                                                                            `json:"value"`
	} `json:"identifier"`
	Type string `json:"type"`
}
type UpdateJwtCustomizer2000ContextSampleInteractionVerificationRecords9IdentifierType string
type UpdateJwtCustomizer_200_0_ContextSample_Interaction_VerificationRecords_Item struct {
	union json.RawMessage
}
type UpdateJwtCustomizer2000ContextSampleUserMfaVerificationFactors string
type UpdateJwtCustomizer2000TokenSampleAud0 = string
type UpdateJwtCustomizer2000TokenSampleAud1 = []string
type UpdateJwtCustomizer_200_0_TokenSample_Aud struct {
	union json.RawMessage
}
type UpdateJwtCustomizer2001 struct {
	// ContextSample arbitrary
	ContextSample        *map[string]interface{} `json:"contextSample,omitempty"`
	EnvironmentVariables *map[string]string      `json:"environmentVariables,omitempty"`
	Script               string                  `json:"script"`
	TokenSample          *struct {
		Aud      *UpdateJwtCustomizer_200_1_TokenSample_Aud `json:"aud,omitempty"`
		ClientId *string                                    `json:"clientId,omitempty"`
		Jti      *string                                    `json:"jti,omitempty"`
		Kind     *string                                    `json:"kind,omitempty"`
		Scope    *string                                    `json:"scope,omitempty"`
	} `json:"tokenSample,omitempty"`
}
type UpdateJwtCustomizer2001TokenSampleAud0 = string
type UpdateJwtCustomizer2001TokenSampleAud1 = []string
type UpdateJwtCustomizer_200_1_TokenSample_Aud struct {
	union json.RawMessage
}

// Status returns HTTPResponse.Status
func (r UpdateJwtCustomizerResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateJwtCustomizerResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpsertJwtCustomizerResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		union json.RawMessage
	}
	JSON201 *struct {
		union json.RawMessage
	}
}
type UpsertJwtCustomizer2000 struct {
	ContextSample *struct {
		Grant *struct {
			// SubjectTokenContext arbitrary
			SubjectTokenContext *map[string]interface{} `json:"subjectTokenContext,omitempty"`
			Type                *string                 `json:"type,omitempty"`
		} `json:"grant,omitempty"`
		Interaction *struct {
			InteractionEvent    *UpsertJwtCustomizer2000ContextSampleInteractionInteractionEvent                `json:"interactionEvent,omitempty"`
			UserId              *string                                                                         `json:"userId,omitempty"`
			VerificationRecords *[]UpsertJwtCustomizer_200_0_ContextSample_Interaction_VerificationRecords_Item `json:"verificationRecords,omitempty"`
		} `json:"interaction,omitempty"`
		User struct {
			ApplicationId *string  `json:"applicationId"`
			Avatar        *string  `json:"avatar"`
			CreatedAt     *float32 `json:"createdAt,omitempty"`

			// CustomData arbitrary
			CustomData  *map[string]interface{} `json:"customData,omitempty"`
			HasPassword *bool                   `json:"hasPassword,omitempty"`
			Id          *string                 `json:"id,omitempty"`
			Identities  *map[string]struct {
				// Details arbitrary
				Details *map[string]interface{} `json:"details,omitempty"`
				UserId  string                  `json:"userId"`
			} `json:"identities,omitempty"`
			IsSuspended            *bool                                                             `json:"isSuspended,omitempty"`
			LastSignInAt           *float32                                                          `json:"lastSignInAt"`
			MfaVerificationFactors *[]UpsertJwtCustomizer2000ContextSampleUserMfaVerificationFactors `json:"mfaVerificationFactors,omitempty"`
			Name                   *string                                                           `json:"name"`
			OrganizationRoles      *[]struct {
				OrganizationId string `json:"organizationId"`
				RoleId         string `json:"roleId"`
				RoleName       string `json:"roleName"`
			} `json:"organizationRoles,omitempty"`
			Organizations *[]struct {
				Description *string `json:"description"`
				Id          string  `json:"id"`
				Name        string  `json:"name"`
			} `json:"organizations,omitempty"`
			PrimaryEmail *string `json:"primaryEmail"`
			PrimaryPhone *string `json:"primaryPhone"`
			Profile      *struct {
				Address *struct {
					Country       *string `json:"country,omitempty"`
					Formatted     *string `json:"formatted,omitempty"`
					Locality      *string `json:"locality,omitempty"`
					PostalCode    *string `json:"postalCode,omitempty"`
					Region        *string `json:"region,omitempty"`
					StreetAddress *string `json:"streetAddress,omitempty"`
				} `json:"address,omitempty"`
				Birthdate         *string `json:"birthdate,omitempty"`
				FamilyName        *string `json:"familyName,omitempty"`
				Gender            *string `json:"gender,omitempty"`
				GivenName         *string `json:"givenName,omitempty"`
				Locale            *string `json:"locale,omitempty"`
				MiddleName        *string `json:"middleName,omitempty"`
				Nickname          *string `json:"nickname,omitempty"`
				PreferredUsername *string `json:"preferredUsername,omitempty"`
				Profile           *string `json:"profile,omitempty"`
				Website           *string `json:"website,omitempty"`
				Zoneinfo          *string `json:"zoneinfo,omitempty"`
			} `json:"profile,omitempty"`
			Roles *[]struct {
				Description string `json:"description"`
				Id          string `json:"id"`
				Name        string `json:"name"`
				Scopes      []struct {
					Description *string `json:"description"`
					Id          string  `json:"id"`
					Name        string  `json:"name"`
					Resource    struct {
						AccessTokenTtl float32 `json:"accessTokenTtl"`
						Id             string  `json:"id"`
						Indicator      string  `json:"indicator"`
						IsDefault      bool    `json:"isDefault"`
						Name           string  `json:"name"`
						TenantId       string  `json:"tenantId"`
					} `json:"resource"`
					ResourceId string `json:"resourceId"`
				} `json:"scopes"`
			} `json:"roles,omitempty"`
			SsoIdentities *[]struct {
				// Detail arbitrary
				Detail     map[string]interface{} `json:"detail"`
				IdentityId string                 `json:"identityId"`
				Issuer     string                 `json:"issuer"`
			} `json:"ssoIdentities,omitempty"`
			UpdatedAt *float32 `json:"updatedAt,omitempty"`
			Username  *string  `json:"username"`
		} `json:"user"`
	} `json:"contextSample,omitempty"`
	EnvironmentVariables *map[string]string `json:"environmentVariables,omitempty"`
	Script               string             `json:"script"`
	TokenSample          *struct {
		AccountId          *string                                    `json:"accountId,omitempty"`
		Aud                *UpsertJwtCustomizer_200_0_TokenSample_Aud `json:"aud,omitempty"`
		ClientId           *string                                    `json:"clientId,omitempty"`
		ExpiresWithSession *bool                                      `json:"expiresWithSession,omitempty"`
		GrantId            *string                                    `json:"grantId,omitempty"`
		Gty                *string                                    `json:"gty,omitempty"`
		Jti                *string                                    `json:"jti,omitempty"`
		Kind               *string                                    `json:"kind,omitempty"`
		Scope              *string                                    `json:"scope,omitempty"`
		SessionUid         *string                                    `json:"sessionUid,omitempty"`
		Sid                *string                                    `json:"sid,omitempty"`
	} `json:"tokenSample,omitempty"`
}
type UpsertJwtCustomizer2000ContextSampleInteractionInteractionEvent string
type UpsertJwtCustomizer2000ContextSampleInteractionVerificationRecords0 struct {
	Id         string `json:"id"`
	Identifier struct {
		Type  UpsertJwtCustomizer_200_0_ContextSample_Interaction_VerificationRecords_0_Identifier_Type `json:"type"`
		Value string                                                                                    `json:"value"`
	} `json:"identifier"`
	Type     string `json:"type"`
	Verified bool   `json:"verified"`
}
type UpsertJwtCustomizer2000ContextSampleInteractionVerificationRecords0IdentifierType0 string
type UpsertJwtCustomizer2000ContextSampleInteractionVerificationRecords0IdentifierType1 string
type UpsertJwtCustomizer_200_0_ContextSample_Interaction_VerificationRecords_0_Identifier_Type struct {
	union json.RawMessage
}
type UpsertJwtCustomizer2000ContextSampleInteractionVerificationRecords1 struct {
	Id         string `json:"id"`
	Identifier struct {
		Type  string `json:"type"`
		Value string `json:"value"`
	} `json:"identifier"`
	TemplateType UpsertJwtCustomizer2000ContextSampleInteractionVerificationRecords1TemplateType `json:"templateType"`
	Type         string                                                                          `json:"type"`
	Verified     bool                                                                            `json:"verified"`
}
type UpsertJwtCustomizer2000ContextSampleInteractionVerificationRecords1TemplateType string
type UpsertJwtCustomizer2000ContextSampleInteractionVerificationRecords2 struct {
	Id         string `json:"id"`
	Identifier struct {
		Type  string `json:"type"`
		Value string `json:"value"`
	} `json:"identifier"`
	TemplateType UpsertJwtCustomizer2000ContextSampleInteractionVerificationRecords2TemplateType `json:"templateType"`
	Type         string                                                                          `json:"type"`
	Verified     bool                                                                            `json:"verified"`
}
type UpsertJwtCustomizer2000ContextSampleInteractionVerificationRecords2TemplateType string
type UpsertJwtCustomizer2000ContextSampleInteractionVerificationRecords3 struct {
	ConnectorId    string `json:"connectorId"`
	Id             string `json:"id"`
	SocialUserInfo *struct {
		Avatar  *string                                                                                           `json:"avatar,omitempty"`
		Email   *string                                                                                           `json:"email,omitempty"`
		Id      string                                                                                            `json:"id"`
		Name    *string                                                                                           `json:"name,omitempty"`
		Phone   *string                                                                                           `json:"phone,omitempty"`
		RawData *UpsertJwtCustomizer_200_0_ContextSample_Interaction_VerificationRecords_3_SocialUserInfo_RawData `json:"rawData"`
	} `json:"socialUserInfo,omitempty"`
	Type string `json:"type"`
}
type UpsertJwtCustomizer2000ContextSampleInteractionVerificationRecords3SocialUserInfoRawData0 = map[string]interface{}
type UpsertJwtCustomizer2000ContextSampleInteractionVerificationRecords3SocialUserInfoRawData1 = []UpsertJwtCustomizer_200_0_ContextSample_Interaction_VerificationRecords_3_SocialUserInfo_RawData_1_Item
type UpsertJwtCustomizer2000ContextSampleInteractionVerificationRecords3SocialUserInfoRawData10 = string
type UpsertJwtCustomizer2000ContextSampleInteractionVerificationRecords3SocialUserInfoRawData11 = float32
type UpsertJwtCustomizer2000ContextSampleInteractionVerificationRecords3SocialUserInfoRawData12 = bool
type UpsertJwtCustomizer2000ContextSampleInteractionVerificationRecords3SocialUserInfoRawData13 = interface{}
type UpsertJwtCustomizer2000ContextSampleInteractionVerificationRecords3SocialUserInfoRawData14 = map[string]interface{}
type UpsertJwtCustomizer_200_0_ContextSample_Interaction_VerificationRecords_3_SocialUserInfo_RawData_1_Item struct {
	union json.RawMessage
}
type UpsertJwtCustomizer2000ContextSampleInteractionVerificationRecords3SocialUserInfoRawData2 = string
type UpsertJwtCustomizer2000ContextSampleInteractionVerificationRecords3SocialUserInfoRawData3 = float32
type UpsertJwtCustomizer2000ContextSampleInteractionVerificationRecords3SocialUserInfoRawData4 = bool
type UpsertJwtCustomizer_200_0_ContextSample_Interaction_VerificationRecords_3_SocialUserInfo_RawData struct {
	union json.RawMessage
}
type UpsertJwtCustomizer2000ContextSampleInteractionVerificationRecords4 struct {
	ConnectorId           string `json:"connectorId"`
	EnterpriseSsoUserInfo *struct {
		Avatar  *string                                                                                                  `json:"avatar,omitempty"`
		Email   *string                                                                                                  `json:"email,omitempty"`
		Id      string                                                                                                   `json:"id"`
		Name    *string                                                                                                  `json:"name,omitempty"`
		Phone   *string                                                                                                  `json:"phone,omitempty"`
		RawData *UpsertJwtCustomizer_200_0_ContextSample_Interaction_VerificationRecords_4_EnterpriseSsoUserInfo_RawData `json:"rawData"`
	} `json:"enterpriseSsoUserInfo,omitempty"`
	Id     string  `json:"id"`
	Issuer *string `json:"issuer,omitempty"`
	Type   string  `json:"type"`
}
type UpsertJwtCustomizer2000ContextSampleInteractionVerificationRecords4EnterpriseSsoUserInfoRawData0 = map[string]interface{}
type UpsertJwtCustomizer2000ContextSampleInteractionVerificationRecords4EnterpriseSsoUserInfoRawData1 = []UpsertJwtCustomizer_200_0_ContextSample_Interaction_VerificationRecords_4_EnterpriseSsoUserInfo_RawData_1_Item
type UpsertJwtCustomizer2000ContextSampleInteractionVerificationRecords4EnterpriseSsoUserInfoRawData10 = string
type UpsertJwtCustomizer2000ContextSampleInteractionVerificationRecords4EnterpriseSsoUserInfoRawData11 = float32
type UpsertJwtCustomizer2000ContextSampleInteractionVerificationRecords4EnterpriseSsoUserInfoRawData12 = bool
type UpsertJwtCustomizer2000ContextSampleInteractionVerificationRecords4EnterpriseSsoUserInfoRawData13 = interface{}
type UpsertJwtCustomizer2000ContextSampleInteractionVerificationRecords4EnterpriseSsoUserInfoRawData14 = map[string]interface{}
type UpsertJwtCustomizer_200_0_ContextSample_Interaction_VerificationRecords_4_EnterpriseSsoUserInfo_RawData_1_Item struct {
	union json.RawMessage
}
type UpsertJwtCustomizer2000ContextSampleInteractionVerificationRecords4EnterpriseSsoUserInfoRawData2 = string
type UpsertJwtCustomizer2000ContextSampleInteractionVerificationRecords4EnterpriseSsoUserInfoRawData3 = float32
type UpsertJwtCustomizer2000ContextSampleInteractionVerificationRecords4EnterpriseSsoUserInfoRawData4 = bool
type UpsertJwtCustomizer_200_0_ContextSample_Interaction_VerificationRecords_4_EnterpriseSsoUserInfo_RawData struct {
	union json.RawMessage
}
type UpsertJwtCustomizer2000ContextSampleInteractionVerificationRecords5 struct {
	Id       string `json:"id"`
	Type     string `json:"type"`
	UserId   string `json:"userId"`
	Verified bool   `json:"verified"`
}
type UpsertJwtCustomizer2000ContextSampleInteractionVerificationRecords6 struct {
	Code   *string `json:"code,omitempty"`
	Id     string  `json:"id"`
	Type   string  `json:"type"`
	UserId string  `json:"userId"`
}
type UpsertJwtCustomizer2000ContextSampleInteractionVerificationRecords7 struct {
	Id       string `json:"id"`
	Type     string `json:"type"`
	UserId   string `json:"userId"`
	Verified bool   `json:"verified"`
}
type UpsertJwtCustomizer2000ContextSampleInteractionVerificationRecords8 struct {
	Id         string `json:"id"`
	Identifier struct {
		Type  string `json:"type"`
		Value string `json:"value"`
	} `json:"identifier"`
	OneTimeTokenContext *struct {
		JitOrganizationIds *[]string `json:"jitOrganizationIds,omitempty"`
	} `json:"oneTimeTokenContext,omitempty"`
	Type     string `json:"type"`
	Verified bool   `json:"verified"`
}
type UpsertJwtCustomizer2000ContextSampleInteractionVerificationRecords9 struct {
	Id         string `json:"id"`
	Identifier struct {
		Type  UpsertJwtCustomizer2000ContextSampleInteractionVerificationRecords9IdentifierType `json:"type"`
		Value string                                                                            `json:"value"`
	} `json:"identifier"`
	Type string `json:"type"`
}
type UpsertJwtCustomizer2000ContextSampleInteractionVerificationRecords9IdentifierType string
type UpsertJwtCustomizer_200_0_ContextSample_Interaction_VerificationRecords_Item struct {
	union json.RawMessage
}
type UpsertJwtCustomizer2000ContextSampleUserMfaVerificationFactors string
type UpsertJwtCustomizer2000TokenSampleAud0 = string
type UpsertJwtCustomizer2000TokenSampleAud1 = []string
type UpsertJwtCustomizer_200_0_TokenSample_Aud struct {
	union json.RawMessage
}
type UpsertJwtCustomizer2001 struct {
	// ContextSample arbitrary
	ContextSample        *map[string]interface{} `json:"contextSample,omitempty"`
	EnvironmentVariables *map[string]string      `json:"environmentVariables,omitempty"`
	Script               string                  `json:"script"`
	TokenSample          *struct {
		Aud      *UpsertJwtCustomizer_200_1_TokenSample_Aud `json:"aud,omitempty"`
		ClientId *string                                    `json:"clientId,omitempty"`
		Jti      *string                                    `json:"jti,omitempty"`
		Kind     *string                                    `json:"kind,omitempty"`
		Scope    *string                                    `json:"scope,omitempty"`
	} `json:"tokenSample,omitempty"`
}
type UpsertJwtCustomizer2001TokenSampleAud0 = string
type UpsertJwtCustomizer2001TokenSampleAud1 = []string
type UpsertJwtCustomizer_200_1_TokenSample_Aud struct {
	union json.RawMessage
}
type UpsertJwtCustomizer2010 struct {
	ContextSample *struct {
		Grant *struct {
			// SubjectTokenContext arbitrary
			SubjectTokenContext *map[string]interface{} `json:"subjectTokenContext,omitempty"`
			Type                *string                 `json:"type,omitempty"`
		} `json:"grant,omitempty"`
		Interaction *struct {
			InteractionEvent    *UpsertJwtCustomizer2010ContextSampleInteractionInteractionEvent                `json:"interactionEvent,omitempty"`
			UserId              *string                                                                         `json:"userId,omitempty"`
			VerificationRecords *[]UpsertJwtCustomizer_201_0_ContextSample_Interaction_VerificationRecords_Item `json:"verificationRecords,omitempty"`
		} `json:"interaction,omitempty"`
		User struct {
			ApplicationId *string  `json:"applicationId"`
			Avatar        *string  `json:"avatar"`
			CreatedAt     *float32 `json:"createdAt,omitempty"`

			// CustomData arbitrary
			CustomData  *map[string]interface{} `json:"customData,omitempty"`
			HasPassword *bool                   `json:"hasPassword,omitempty"`
			Id          *string                 `json:"id,omitempty"`
			Identities  *map[string]struct {
				// Details arbitrary
				Details *map[string]interface{} `json:"details,omitempty"`
				UserId  string                  `json:"userId"`
			} `json:"identities,omitempty"`
			IsSuspended            *bool                                                             `json:"isSuspended,omitempty"`
			LastSignInAt           *float32                                                          `json:"lastSignInAt"`
			MfaVerificationFactors *[]UpsertJwtCustomizer2010ContextSampleUserMfaVerificationFactors `json:"mfaVerificationFactors,omitempty"`
			Name                   *string                                                           `json:"name"`
			OrganizationRoles      *[]struct {
				OrganizationId string `json:"organizationId"`
				RoleId         string `json:"roleId"`
				RoleName       string `json:"roleName"`
			} `json:"organizationRoles,omitempty"`
			Organizations *[]struct {
				Description *string `json:"description"`
				Id          string  `json:"id"`
				Name        string  `json:"name"`
			} `json:"organizations,omitempty"`
			PrimaryEmail *string `json:"primaryEmail"`
			PrimaryPhone *string `json:"primaryPhone"`
			Profile      *struct {
				Address *struct {
					Country       *string `json:"country,omitempty"`
					Formatted     *string `json:"formatted,omitempty"`
					Locality      *string `json:"locality,omitempty"`
					PostalCode    *string `json:"postalCode,omitempty"`
					Region        *string `json:"region,omitempty"`
					StreetAddress *string `json:"streetAddress,omitempty"`
				} `json:"address,omitempty"`
				Birthdate         *string `json:"birthdate,omitempty"`
				FamilyName        *string `json:"familyName,omitempty"`
				Gender            *string `json:"gender,omitempty"`
				GivenName         *string `json:"givenName,omitempty"`
				Locale            *string `json:"locale,omitempty"`
				MiddleName        *string `json:"middleName,omitempty"`
				Nickname          *string `json:"nickname,omitempty"`
				PreferredUsername *string `json:"preferredUsername,omitempty"`
				Profile           *string `json:"profile,omitempty"`
				Website           *string `json:"website,omitempty"`
				Zoneinfo          *string `json:"zoneinfo,omitempty"`
			} `json:"profile,omitempty"`
			Roles *[]struct {
				Description string `json:"description"`
				Id          string `json:"id"`
				Name        string `json:"name"`
				Scopes      []struct {
					Description *string `json:"description"`
					Id          string  `json:"id"`
					Name        string  `json:"name"`
					Resource    struct {
						AccessTokenTtl float32 `json:"accessTokenTtl"`
						Id             string  `json:"id"`
						Indicator      string  `json:"indicator"`
						IsDefault      bool    `json:"isDefault"`
						Name           string  `json:"name"`
						TenantId       string  `json:"tenantId"`
					} `json:"resource"`
					ResourceId string `json:"resourceId"`
				} `json:"scopes"`
			} `json:"roles,omitempty"`
			SsoIdentities *[]struct {
				// Detail arbitrary
				Detail     map[string]interface{} `json:"detail"`
				IdentityId string                 `json:"identityId"`
				Issuer     string                 `json:"issuer"`
			} `json:"ssoIdentities,omitempty"`
			UpdatedAt *float32 `json:"updatedAt,omitempty"`
			Username  *string  `json:"username"`
		} `json:"user"`
	} `json:"contextSample,omitempty"`
	EnvironmentVariables *map[string]string `json:"environmentVariables,omitempty"`
	Script               string             `json:"script"`
	TokenSample          *struct {
		AccountId          *string                                    `json:"accountId,omitempty"`
		Aud                *UpsertJwtCustomizer_201_0_TokenSample_Aud `json:"aud,omitempty"`
		ClientId           *string                                    `json:"clientId,omitempty"`
		ExpiresWithSession *bool                                      `json:"expiresWithSession,omitempty"`
		GrantId            *string                                    `json:"grantId,omitempty"`
		Gty                *string                                    `json:"gty,omitempty"`
		Jti                *string                                    `json:"jti,omitempty"`
		Kind               *string                                    `json:"kind,omitempty"`
		Scope              *string                                    `json:"scope,omitempty"`
		SessionUid         *string                                    `json:"sessionUid,omitempty"`
		Sid                *string                                    `json:"sid,omitempty"`
	} `json:"tokenSample,omitempty"`
}
type UpsertJwtCustomizer2010ContextSampleInteractionInteractionEvent string
type UpsertJwtCustomizer2010ContextSampleInteractionVerificationRecords0 struct {
	Id         string `json:"id"`
	Identifier struct {
		Type  UpsertJwtCustomizer_201_0_ContextSample_Interaction_VerificationRecords_0_Identifier_Type `json:"type"`
		Value string                                                                                    `json:"value"`
	} `json:"identifier"`
	Type     string `json:"type"`
	Verified bool   `json:"verified"`
}
type UpsertJwtCustomizer2010ContextSampleInteractionVerificationRecords0IdentifierType0 string
type UpsertJwtCustomizer2010ContextSampleInteractionVerificationRecords0IdentifierType1 string
type UpsertJwtCustomizer_201_0_ContextSample_Interaction_VerificationRecords_0_Identifier_Type struct {
	union json.RawMessage
}
type UpsertJwtCustomizer2010ContextSampleInteractionVerificationRecords1 struct {
	Id         string `json:"id"`
	Identifier struct {
		Type  string `json:"type"`
		Value string `json:"value"`
	} `json:"identifier"`
	TemplateType UpsertJwtCustomizer2010ContextSampleInteractionVerificationRecords1TemplateType `json:"templateType"`
	Type         string                                                                          `json:"type"`
	Verified     bool                                                                            `json:"verified"`
}
type UpsertJwtCustomizer2010ContextSampleInteractionVerificationRecords1TemplateType string
type UpsertJwtCustomizer2010ContextSampleInteractionVerificationRecords2 struct {
	Id         string `json:"id"`
	Identifier struct {
		Type  string `json:"type"`
		Value string `json:"value"`
	} `json:"identifier"`
	TemplateType UpsertJwtCustomizer2010ContextSampleInteractionVerificationRecords2TemplateType `json:"templateType"`
	Type         string                                                                          `json:"type"`
	Verified     bool                                                                            `json:"verified"`
}
type UpsertJwtCustomizer2010ContextSampleInteractionVerificationRecords2TemplateType string
type UpsertJwtCustomizer2010ContextSampleInteractionVerificationRecords3 struct {
	ConnectorId    string `json:"connectorId"`
	Id             string `json:"id"`
	SocialUserInfo *struct {
		Avatar  *string                                                                                           `json:"avatar,omitempty"`
		Email   *string                                                                                           `json:"email,omitempty"`
		Id      string                                                                                            `json:"id"`
		Name    *string                                                                                           `json:"name,omitempty"`
		Phone   *string                                                                                           `json:"phone,omitempty"`
		RawData *UpsertJwtCustomizer_201_0_ContextSample_Interaction_VerificationRecords_3_SocialUserInfo_RawData `json:"rawData"`
	} `json:"socialUserInfo,omitempty"`
	Type string `json:"type"`
}
type UpsertJwtCustomizer2010ContextSampleInteractionVerificationRecords3SocialUserInfoRawData0 = map[string]interface{}
type UpsertJwtCustomizer2010ContextSampleInteractionVerificationRecords3SocialUserInfoRawData1 = []UpsertJwtCustomizer_201_0_ContextSample_Interaction_VerificationRecords_3_SocialUserInfo_RawData_1_Item
type UpsertJwtCustomizer2010ContextSampleInteractionVerificationRecords3SocialUserInfoRawData10 = string
type UpsertJwtCustomizer2010ContextSampleInteractionVerificationRecords3SocialUserInfoRawData11 = float32
type UpsertJwtCustomizer2010ContextSampleInteractionVerificationRecords3SocialUserInfoRawData12 = bool
type UpsertJwtCustomizer2010ContextSampleInteractionVerificationRecords3SocialUserInfoRawData13 = interface{}
type UpsertJwtCustomizer2010ContextSampleInteractionVerificationRecords3SocialUserInfoRawData14 = map[string]interface{}
type UpsertJwtCustomizer_201_0_ContextSample_Interaction_VerificationRecords_3_SocialUserInfo_RawData_1_Item struct {
	union json.RawMessage
}
type UpsertJwtCustomizer2010ContextSampleInteractionVerificationRecords3SocialUserInfoRawData2 = string
type UpsertJwtCustomizer2010ContextSampleInteractionVerificationRecords3SocialUserInfoRawData3 = float32
type UpsertJwtCustomizer2010ContextSampleInteractionVerificationRecords3SocialUserInfoRawData4 = bool
type UpsertJwtCustomizer_201_0_ContextSample_Interaction_VerificationRecords_3_SocialUserInfo_RawData struct {
	union json.RawMessage
}
type UpsertJwtCustomizer2010ContextSampleInteractionVerificationRecords4 struct {
	ConnectorId           string `json:"connectorId"`
	EnterpriseSsoUserInfo *struct {
		Avatar  *string                                                                                                  `json:"avatar,omitempty"`
		Email   *string                                                                                                  `json:"email,omitempty"`
		Id      string                                                                                                   `json:"id"`
		Name    *string                                                                                                  `json:"name,omitempty"`
		Phone   *string                                                                                                  `json:"phone,omitempty"`
		RawData *UpsertJwtCustomizer_201_0_ContextSample_Interaction_VerificationRecords_4_EnterpriseSsoUserInfo_RawData `json:"rawData"`
	} `json:"enterpriseSsoUserInfo,omitempty"`
	Id     string  `json:"id"`
	Issuer *string `json:"issuer,omitempty"`
	Type   string  `json:"type"`
}
type UpsertJwtCustomizer2010ContextSampleInteractionVerificationRecords4EnterpriseSsoUserInfoRawData0 = map[string]interface{}
type UpsertJwtCustomizer2010ContextSampleInteractionVerificationRecords4EnterpriseSsoUserInfoRawData1 = []UpsertJwtCustomizer_201_0_ContextSample_Interaction_VerificationRecords_4_EnterpriseSsoUserInfo_RawData_1_Item
type UpsertJwtCustomizer2010ContextSampleInteractionVerificationRecords4EnterpriseSsoUserInfoRawData10 = string
type UpsertJwtCustomizer2010ContextSampleInteractionVerificationRecords4EnterpriseSsoUserInfoRawData11 = float32
type UpsertJwtCustomizer2010ContextSampleInteractionVerificationRecords4EnterpriseSsoUserInfoRawData12 = bool
type UpsertJwtCustomizer2010ContextSampleInteractionVerificationRecords4EnterpriseSsoUserInfoRawData13 = interface{}
type UpsertJwtCustomizer2010ContextSampleInteractionVerificationRecords4EnterpriseSsoUserInfoRawData14 = map[string]interface{}
type UpsertJwtCustomizer_201_0_ContextSample_Interaction_VerificationRecords_4_EnterpriseSsoUserInfo_RawData_1_Item struct {
	union json.RawMessage
}
type UpsertJwtCustomizer2010ContextSampleInteractionVerificationRecords4EnterpriseSsoUserInfoRawData2 = string
type UpsertJwtCustomizer2010ContextSampleInteractionVerificationRecords4EnterpriseSsoUserInfoRawData3 = float32
type UpsertJwtCustomizer2010ContextSampleInteractionVerificationRecords4EnterpriseSsoUserInfoRawData4 = bool
type UpsertJwtCustomizer_201_0_ContextSample_Interaction_VerificationRecords_4_EnterpriseSsoUserInfo_RawData struct {
	union json.RawMessage
}
type UpsertJwtCustomizer2010ContextSampleInteractionVerificationRecords5 struct {
	Id       string `json:"id"`
	Type     string `json:"type"`
	UserId   string `json:"userId"`
	Verified bool   `json:"verified"`
}
type UpsertJwtCustomizer2010ContextSampleInteractionVerificationRecords6 struct {
	Code   *string `json:"code,omitempty"`
	Id     string  `json:"id"`
	Type   string  `json:"type"`
	UserId string  `json:"userId"`
}
type UpsertJwtCustomizer2010ContextSampleInteractionVerificationRecords7 struct {
	Id       string `json:"id"`
	Type     string `json:"type"`
	UserId   string `json:"userId"`
	Verified bool   `json:"verified"`
}
type UpsertJwtCustomizer2010ContextSampleInteractionVerificationRecords8 struct {
	Id         string `json:"id"`
	Identifier struct {
		Type  string `json:"type"`
		Value string `json:"value"`
	} `json:"identifier"`
	OneTimeTokenContext *struct {
		JitOrganizationIds *[]string `json:"jitOrganizationIds,omitempty"`
	} `json:"oneTimeTokenContext,omitempty"`
	Type     string `json:"type"`
	Verified bool   `json:"verified"`
}
type UpsertJwtCustomizer2010ContextSampleInteractionVerificationRecords9 struct {
	Id         string `json:"id"`
	Identifier struct {
		Type  UpsertJwtCustomizer2010ContextSampleInteractionVerificationRecords9IdentifierType `json:"type"`
		Value string                                                                            `json:"value"`
	} `json:"identifier"`
	Type string `json:"type"`
}
type UpsertJwtCustomizer2010ContextSampleInteractionVerificationRecords9IdentifierType string
type UpsertJwtCustomizer_201_0_ContextSample_Interaction_VerificationRecords_Item struct {
	union json.RawMessage
}
type UpsertJwtCustomizer2010ContextSampleUserMfaVerificationFactors string
type UpsertJwtCustomizer2010TokenSampleAud0 = string
type UpsertJwtCustomizer2010TokenSampleAud1 = []string
type UpsertJwtCustomizer_201_0_TokenSample_Aud struct {
	union json.RawMessage
}
type UpsertJwtCustomizer2011 struct {
	// ContextSample arbitrary
	ContextSample        *map[string]interface{} `json:"contextSample,omitempty"`
	EnvironmentVariables *map[string]string      `json:"environmentVariables,omitempty"`
	Script               string                  `json:"script"`
	TokenSample          *struct {
		Aud      *UpsertJwtCustomizer_201_1_TokenSample_Aud `json:"aud,omitempty"`
		ClientId *string                                    `json:"clientId,omitempty"`
		Jti      *string                                    `json:"jti,omitempty"`
		Kind     *string                                    `json:"kind,omitempty"`
		Scope    *string                                    `json:"scope,omitempty"`
	} `json:"tokenSample,omitempty"`
}
type UpsertJwtCustomizer2011TokenSampleAud0 = string
type UpsertJwtCustomizer2011TokenSampleAud1 = []string
type UpsertJwtCustomizer_201_1_TokenSample_Aud struct {
	union json.RawMessage
}

// Status returns HTTPResponse.Status
func (r UpsertJwtCustomizerResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpsertJwtCustomizerResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOidcKeysResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]struct {
		CreatedAt           float32                            `json:"createdAt"`
		Id                  string                             `json:"id"`
		SigningKeyAlgorithm *GetOidcKeys200SigningKeyAlgorithm `json:"signingKeyAlgorithm,omitempty"`
	}
}
type GetOidcKeys200SigningKeyAlgorithm string

// Status returns HTTPResponse.Status
func (r GetOidcKeysResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOidcKeysResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RotateOidcKeysResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]struct {
		CreatedAt           float32                               `json:"createdAt"`
		Id                  string                                `json:"id"`
		SigningKeyAlgorithm *RotateOidcKeys200SigningKeyAlgorithm `json:"signingKeyAlgorithm,omitempty"`
	}
}
type RotateOidcKeys200SigningKeyAlgorithm string

// Status returns HTTPResponse.Status
func (r RotateOidcKeysResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RotateOidcKeysResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteOidcKeyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteOidcKeyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteOidcKeyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListConnectorFactoriesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]struct {
		ConfigTemplate *string                 `json:"configTemplate,omitempty"`
		CustomData     *map[string]interface{} `json:"customData,omitempty"`

		// Description Validator function
		Description map[string]interface{}                       `json:"description"`
		FormItems   *[]ListConnectorFactories_200_FormItems_Item `json:"formItems,omitempty"`
		FromEmail   *string                                      `json:"fromEmail,omitempty"`
		Id          string                                       `json:"id"`
		IsDemo      *bool                                        `json:"isDemo,omitempty"`
		IsStandard  *bool                                        `json:"isStandard,omitempty"`
		Logo        string                                       `json:"logo"`
		LogoDark    *string                                      `json:"logoDark"`

		// Name Validator function
		Name     map[string]interface{}             `json:"name"`
		Platform *ListConnectorFactories200Platform `json:"platform"`
		Readme   string                             `json:"readme"`
		Target   string                             `json:"target"`
		Type     ListConnectorFactories200Type      `json:"type"`
	}
}
type ListConnectorFactories200FormItems0 struct {
	DefaultValue   *interface{} `json:"defaultValue,omitempty"`
	Description    *string      `json:"description,omitempty"`
	IsConfidential *bool        `json:"isConfidential,omitempty"`
	Key            string       `json:"key"`
	Label          string       `json:"label"`
	Placeholder    *string      `json:"placeholder,omitempty"`
	Required       *bool        `json:"required,omitempty"`
	SelectItems    []struct {
		Title string `json:"title"`
		Value string `json:"value"`
	} `json:"selectItems"`
	ShowConditions *[]struct {
		ExpectValue *interface{} `json:"expectValue,omitempty"`
		TargetKey   string       `json:"targetKey"`
	} `json:"showConditions,omitempty"`
	Tooltip *string `json:"tooltip,omitempty"`
	Type    string  `json:"type"`
}
type ListConnectorFactories200FormItems1 struct {
	DefaultValue   *interface{} `json:"defaultValue,omitempty"`
	Description    *string      `json:"description,omitempty"`
	IsConfidential *bool        `json:"isConfidential,omitempty"`
	Key            string       `json:"key"`
	Label          string       `json:"label"`
	Placeholder    *string      `json:"placeholder,omitempty"`
	Required       *bool        `json:"required,omitempty"`
	SelectItems    []struct {
		Value string `json:"value"`
	} `json:"selectItems"`
	ShowConditions *[]struct {
		ExpectValue *interface{} `json:"expectValue,omitempty"`
		TargetKey   string       `json:"targetKey"`
	} `json:"showConditions,omitempty"`
	Tooltip *string `json:"tooltip,omitempty"`
	Type    string  `json:"type"`
}
type ListConnectorFactories200FormItems2 struct {
	DefaultValue   *interface{} `json:"defaultValue,omitempty"`
	Description    *string      `json:"description,omitempty"`
	IsConfidential *bool        `json:"isConfidential,omitempty"`
	Key            string       `json:"key"`
	Label          string       `json:"label"`
	Placeholder    *string      `json:"placeholder,omitempty"`
	Required       *bool        `json:"required,omitempty"`
	ShowConditions *[]struct {
		ExpectValue *interface{} `json:"expectValue,omitempty"`
		TargetKey   string       `json:"targetKey"`
	} `json:"showConditions,omitempty"`
	Tooltip *string                                 `json:"tooltip,omitempty"`
	Type    ListConnectorFactories200FormItems2Type `json:"type"`
}
type ListConnectorFactories200FormItems2Type string
type ListConnectorFactories_200_FormItems_Item struct {
	union json.RawMessage
}
type ListConnectorFactories200Platform string
type ListConnectorFactories200Type string

// Status returns HTTPResponse.Status
func (r ListConnectorFactoriesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListConnectorFactoriesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetConnectorFactoryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		ConfigTemplate *string                 `json:"configTemplate,omitempty"`
		CustomData     *map[string]interface{} `json:"customData,omitempty"`

		// Description Validator function
		Description map[string]interface{}                    `json:"description"`
		FormItems   *[]GetConnectorFactory_200_FormItems_Item `json:"formItems,omitempty"`
		FromEmail   *string                                   `json:"fromEmail,omitempty"`
		Id          string                                    `json:"id"`
		IsDemo      *bool                                     `json:"isDemo,omitempty"`
		IsStandard  *bool                                     `json:"isStandard,omitempty"`
		Logo        string                                    `json:"logo"`
		LogoDark    *string                                   `json:"logoDark"`

		// Name Validator function
		Name     map[string]interface{}          `json:"name"`
		Platform *GetConnectorFactory200Platform `json:"platform"`
		Readme   string                          `json:"readme"`
		Target   string                          `json:"target"`
		Type     GetConnectorFactory200Type      `json:"type"`
	}
}
type GetConnectorFactory200FormItems0 struct {
	DefaultValue   *interface{} `json:"defaultValue,omitempty"`
	Description    *string      `json:"description,omitempty"`
	IsConfidential *bool        `json:"isConfidential,omitempty"`
	Key            string       `json:"key"`
	Label          string       `json:"label"`
	Placeholder    *string      `json:"placeholder,omitempty"`
	Required       *bool        `json:"required,omitempty"`
	SelectItems    []struct {
		Title string `json:"title"`
		Value string `json:"value"`
	} `json:"selectItems"`
	ShowConditions *[]struct {
		ExpectValue *interface{} `json:"expectValue,omitempty"`
		TargetKey   string       `json:"targetKey"`
	} `json:"showConditions,omitempty"`
	Tooltip *string `json:"tooltip,omitempty"`
	Type    string  `json:"type"`
}
type GetConnectorFactory200FormItems1 struct {
	DefaultValue   *interface{} `json:"defaultValue,omitempty"`
	Description    *string      `json:"description,omitempty"`
	IsConfidential *bool        `json:"isConfidential,omitempty"`
	Key            string       `json:"key"`
	Label          string       `json:"label"`
	Placeholder    *string      `json:"placeholder,omitempty"`
	Required       *bool        `json:"required,omitempty"`
	SelectItems    []struct {
		Value string `json:"value"`
	} `json:"selectItems"`
	ShowConditions *[]struct {
		ExpectValue *interface{} `json:"expectValue,omitempty"`
		TargetKey   string       `json:"targetKey"`
	} `json:"showConditions,omitempty"`
	Tooltip *string `json:"tooltip,omitempty"`
	Type    string  `json:"type"`
}
type GetConnectorFactory200FormItems2 struct {
	DefaultValue   *interface{} `json:"defaultValue,omitempty"`
	Description    *string      `json:"description,omitempty"`
	IsConfidential *bool        `json:"isConfidential,omitempty"`
	Key            string       `json:"key"`
	Label          string       `json:"label"`
	Placeholder    *string      `json:"placeholder,omitempty"`
	Required       *bool        `json:"required,omitempty"`
	ShowConditions *[]struct {
		ExpectValue *interface{} `json:"expectValue,omitempty"`
		TargetKey   string       `json:"targetKey"`
	} `json:"showConditions,omitempty"`
	Tooltip *string                              `json:"tooltip,omitempty"`
	Type    GetConnectorFactory200FormItems2Type `json:"type"`
}
type GetConnectorFactory200FormItems2Type string
type GetConnectorFactory_200_FormItems_Item struct {
	union json.RawMessage
}
type GetConnectorFactory200Platform string
type GetConnectorFactory200Type string

// Status returns HTTPResponse.Status
func (r GetConnectorFactoryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetConnectorFactoryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListConnectorsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]struct {
		// Config arbitrary
		Config         map[string]interface{}  `json:"config"`
		ConfigTemplate *string                 `json:"configTemplate,omitempty"`
		ConnectorId    string                  `json:"connectorId"`
		CustomData     *map[string]interface{} `json:"customData,omitempty"`

		// Description Validator function
		Description map[string]interface{}               `json:"description"`
		ExtraInfo   *map[string]interface{}              `json:"extraInfo,omitempty"`
		FormItems   *[]ListConnectors_200_FormItems_Item `json:"formItems,omitempty"`
		FromEmail   *string                              `json:"fromEmail,omitempty"`
		Id          string                               `json:"id"`
		IsDemo      *bool                                `json:"isDemo,omitempty"`
		IsStandard  *bool                                `json:"isStandard,omitempty"`
		Logo        string                               `json:"logo"`
		LogoDark    *string                              `json:"logoDark"`
		Metadata    struct {
			Logo     *string `json:"logo,omitempty"`
			LogoDark *string `json:"logoDark"`

			// Name Validator function
			Name   *map[string]interface{} `json:"name,omitempty"`
			Target *string                 `json:"target,omitempty"`
		} `json:"metadata"`

		// Name Validator function
		Name        map[string]interface{}     `json:"name"`
		Platform    *ListConnectors200Platform `json:"platform"`
		Readme      string                     `json:"readme"`
		SyncProfile bool                       `json:"syncProfile"`
		Target      string                     `json:"target"`
		Type        ListConnectors200Type      `json:"type"`
		Usage       *float32                   `json:"usage,omitempty"`
	}
}
type ListConnectors200FormItems0 struct {
	DefaultValue   *interface{} `json:"defaultValue,omitempty"`
	Description    *string      `json:"description,omitempty"`
	IsConfidential *bool        `json:"isConfidential,omitempty"`
	Key            string       `json:"key"`
	Label          string       `json:"label"`
	Placeholder    *string      `json:"placeholder,omitempty"`
	Required       *bool        `json:"required,omitempty"`
	SelectItems    []struct {
		Title string `json:"title"`
		Value string `json:"value"`
	} `json:"selectItems"`
	ShowConditions *[]struct {
		ExpectValue *interface{} `json:"expectValue,omitempty"`
		TargetKey   string       `json:"targetKey"`
	} `json:"showConditions,omitempty"`
	Tooltip *string `json:"tooltip,omitempty"`
	Type    string  `json:"type"`
}
type ListConnectors200FormItems1 struct {
	DefaultValue   *interface{} `json:"defaultValue,omitempty"`
	Description    *string      `json:"description,omitempty"`
	IsConfidential *bool        `json:"isConfidential,omitempty"`
	Key            string       `json:"key"`
	Label          string       `json:"label"`
	Placeholder    *string      `json:"placeholder,omitempty"`
	Required       *bool        `json:"required,omitempty"`
	SelectItems    []struct {
		Value string `json:"value"`
	} `json:"selectItems"`
	ShowConditions *[]struct {
		ExpectValue *interface{} `json:"expectValue,omitempty"`
		TargetKey   string       `json:"targetKey"`
	} `json:"showConditions,omitempty"`
	Tooltip *string `json:"tooltip,omitempty"`
	Type    string  `json:"type"`
}
type ListConnectors200FormItems2 struct {
	DefaultValue   *interface{} `json:"defaultValue,omitempty"`
	Description    *string      `json:"description,omitempty"`
	IsConfidential *bool        `json:"isConfidential,omitempty"`
	Key            string       `json:"key"`
	Label          string       `json:"label"`
	Placeholder    *string      `json:"placeholder,omitempty"`
	Required       *bool        `json:"required,omitempty"`
	ShowConditions *[]struct {
		ExpectValue *interface{} `json:"expectValue,omitempty"`
		TargetKey   string       `json:"targetKey"`
	} `json:"showConditions,omitempty"`
	Tooltip *string                         `json:"tooltip,omitempty"`
	Type    ListConnectors200FormItems2Type `json:"type"`
}
type ListConnectors200FormItems2Type string
type ListConnectors_200_FormItems_Item struct {
	union json.RawMessage
}
type ListConnectors200Platform string
type ListConnectors200Type string

// Status returns HTTPResponse.Status
func (r ListConnectorsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListConnectorsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateConnectorResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Config arbitrary
		Config         map[string]interface{}  `json:"config"`
		ConfigTemplate *string                 `json:"configTemplate,omitempty"`
		ConnectorId    string                  `json:"connectorId"`
		CustomData     *map[string]interface{} `json:"customData,omitempty"`

		// Description Validator function
		Description map[string]interface{}                `json:"description"`
		ExtraInfo   *map[string]interface{}               `json:"extraInfo,omitempty"`
		FormItems   *[]CreateConnector_200_FormItems_Item `json:"formItems,omitempty"`
		FromEmail   *string                               `json:"fromEmail,omitempty"`
		Id          string                                `json:"id"`
		IsDemo      *bool                                 `json:"isDemo,omitempty"`
		IsStandard  *bool                                 `json:"isStandard,omitempty"`
		Logo        string                                `json:"logo"`
		LogoDark    *string                               `json:"logoDark"`
		Metadata    struct {
			Logo     *string `json:"logo,omitempty"`
			LogoDark *string `json:"logoDark"`

			// Name Validator function
			Name   *map[string]interface{} `json:"name,omitempty"`
			Target *string                 `json:"target,omitempty"`
		} `json:"metadata"`

		// Name Validator function
		Name        map[string]interface{}      `json:"name"`
		Platform    *CreateConnector200Platform `json:"platform"`
		Readme      string                      `json:"readme"`
		SyncProfile bool                        `json:"syncProfile"`
		Target      string                      `json:"target"`
		Type        CreateConnector200Type      `json:"type"`
		Usage       *float32                    `json:"usage,omitempty"`
	}
}
type CreateConnector200FormItems0 struct {
	DefaultValue   *interface{} `json:"defaultValue,omitempty"`
	Description    *string      `json:"description,omitempty"`
	IsConfidential *bool        `json:"isConfidential,omitempty"`
	Key            string       `json:"key"`
	Label          string       `json:"label"`
	Placeholder    *string      `json:"placeholder,omitempty"`
	Required       *bool        `json:"required,omitempty"`
	SelectItems    []struct {
		Title string `json:"title"`
		Value string `json:"value"`
	} `json:"selectItems"`
	ShowConditions *[]struct {
		ExpectValue *interface{} `json:"expectValue,omitempty"`
		TargetKey   string       `json:"targetKey"`
	} `json:"showConditions,omitempty"`
	Tooltip *string `json:"tooltip,omitempty"`
	Type    string  `json:"type"`
}
type CreateConnector200FormItems1 struct {
	DefaultValue   *interface{} `json:"defaultValue,omitempty"`
	Description    *string      `json:"description,omitempty"`
	IsConfidential *bool        `json:"isConfidential,omitempty"`
	Key            string       `json:"key"`
	Label          string       `json:"label"`
	Placeholder    *string      `json:"placeholder,omitempty"`
	Required       *bool        `json:"required,omitempty"`
	SelectItems    []struct {
		Value string `json:"value"`
	} `json:"selectItems"`
	ShowConditions *[]struct {
		ExpectValue *interface{} `json:"expectValue,omitempty"`
		TargetKey   string       `json:"targetKey"`
	} `json:"showConditions,omitempty"`
	Tooltip *string `json:"tooltip,omitempty"`
	Type    string  `json:"type"`
}
type CreateConnector200FormItems2 struct {
	DefaultValue   *interface{} `json:"defaultValue,omitempty"`
	Description    *string      `json:"description,omitempty"`
	IsConfidential *bool        `json:"isConfidential,omitempty"`
	Key            string       `json:"key"`
	Label          string       `json:"label"`
	Placeholder    *string      `json:"placeholder,omitempty"`
	Required       *bool        `json:"required,omitempty"`
	ShowConditions *[]struct {
		ExpectValue *interface{} `json:"expectValue,omitempty"`
		TargetKey   string       `json:"targetKey"`
	} `json:"showConditions,omitempty"`
	Tooltip *string                          `json:"tooltip,omitempty"`
	Type    CreateConnector200FormItems2Type `json:"type"`
}
type CreateConnector200FormItems2Type string
type CreateConnector_200_FormItems_Item struct {
	union json.RawMessage
}
type CreateConnector200Platform string
type CreateConnector200Type string

// Status returns HTTPResponse.Status
func (r CreateConnectorResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateConnectorResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateConnectorAuthorizationUriResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		RedirectTo string `json:"redirectTo"`

		// RedirectUri The URI to navigate for authentication and authorization in the connected social identity provider.
		RedirectUri *interface{} `json:"redirectUri,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r CreateConnectorAuthorizationUriResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateConnectorAuthorizationUriResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateConnectorTestResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CreateConnectorTestResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateConnectorTestResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteConnectorResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteConnectorResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteConnectorResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetConnectorResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Config arbitrary
		Config         map[string]interface{}  `json:"config"`
		ConfigTemplate *string                 `json:"configTemplate,omitempty"`
		ConnectorId    string                  `json:"connectorId"`
		CustomData     *map[string]interface{} `json:"customData,omitempty"`

		// Description Validator function
		Description map[string]interface{}             `json:"description"`
		ExtraInfo   *map[string]interface{}            `json:"extraInfo,omitempty"`
		FormItems   *[]GetConnector_200_FormItems_Item `json:"formItems,omitempty"`
		FromEmail   *string                            `json:"fromEmail,omitempty"`
		Id          string                             `json:"id"`
		IsDemo      *bool                              `json:"isDemo,omitempty"`
		IsStandard  *bool                              `json:"isStandard,omitempty"`
		Logo        string                             `json:"logo"`
		LogoDark    *string                            `json:"logoDark"`
		Metadata    struct {
			Logo     *string `json:"logo,omitempty"`
			LogoDark *string `json:"logoDark"`

			// Name Validator function
			Name   *map[string]interface{} `json:"name,omitempty"`
			Target *string                 `json:"target,omitempty"`
		} `json:"metadata"`

		// Name Validator function
		Name        map[string]interface{}   `json:"name"`
		Platform    *GetConnector200Platform `json:"platform"`
		Readme      string                   `json:"readme"`
		SyncProfile bool                     `json:"syncProfile"`
		Target      string                   `json:"target"`
		Type        GetConnector200Type      `json:"type"`
		Usage       *float32                 `json:"usage,omitempty"`
	}
}
type GetConnector200FormItems0 struct {
	DefaultValue   *interface{} `json:"defaultValue,omitempty"`
	Description    *string      `json:"description,omitempty"`
	IsConfidential *bool        `json:"isConfidential,omitempty"`
	Key            string       `json:"key"`
	Label          string       `json:"label"`
	Placeholder    *string      `json:"placeholder,omitempty"`
	Required       *bool        `json:"required,omitempty"`
	SelectItems    []struct {
		Title string `json:"title"`
		Value string `json:"value"`
	} `json:"selectItems"`
	ShowConditions *[]struct {
		ExpectValue *interface{} `json:"expectValue,omitempty"`
		TargetKey   string       `json:"targetKey"`
	} `json:"showConditions,omitempty"`
	Tooltip *string `json:"tooltip,omitempty"`
	Type    string  `json:"type"`
}
type GetConnector200FormItems1 struct {
	DefaultValue   *interface{} `json:"defaultValue,omitempty"`
	Description    *string      `json:"description,omitempty"`
	IsConfidential *bool        `json:"isConfidential,omitempty"`
	Key            string       `json:"key"`
	Label          string       `json:"label"`
	Placeholder    *string      `json:"placeholder,omitempty"`
	Required       *bool        `json:"required,omitempty"`
	SelectItems    []struct {
		Value string `json:"value"`
	} `json:"selectItems"`
	ShowConditions *[]struct {
		ExpectValue *interface{} `json:"expectValue,omitempty"`
		TargetKey   string       `json:"targetKey"`
	} `json:"showConditions,omitempty"`
	Tooltip *string `json:"tooltip,omitempty"`
	Type    string  `json:"type"`
}
type GetConnector200FormItems2 struct {
	DefaultValue   *interface{} `json:"defaultValue,omitempty"`
	Description    *string      `json:"description,omitempty"`
	IsConfidential *bool        `json:"isConfidential,omitempty"`
	Key            string       `json:"key"`
	Label          string       `json:"label"`
	Placeholder    *string      `json:"placeholder,omitempty"`
	Required       *bool        `json:"required,omitempty"`
	ShowConditions *[]struct {
		ExpectValue *interface{} `json:"expectValue,omitempty"`
		TargetKey   string       `json:"targetKey"`
	} `json:"showConditions,omitempty"`
	Tooltip *string                       `json:"tooltip,omitempty"`
	Type    GetConnector200FormItems2Type `json:"type"`
}
type GetConnector200FormItems2Type string
type GetConnector_200_FormItems_Item struct {
	union json.RawMessage
}
type GetConnector200Platform string
type GetConnector200Type string

// Status returns HTTPResponse.Status
func (r GetConnectorResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetConnectorResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateConnectorResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Config arbitrary
		Config         map[string]interface{}  `json:"config"`
		ConfigTemplate *string                 `json:"configTemplate,omitempty"`
		ConnectorId    string                  `json:"connectorId"`
		CustomData     *map[string]interface{} `json:"customData,omitempty"`

		// Description Validator function
		Description map[string]interface{}                `json:"description"`
		ExtraInfo   *map[string]interface{}               `json:"extraInfo,omitempty"`
		FormItems   *[]UpdateConnector_200_FormItems_Item `json:"formItems,omitempty"`
		FromEmail   *string                               `json:"fromEmail,omitempty"`
		Id          string                                `json:"id"`
		IsDemo      *bool                                 `json:"isDemo,omitempty"`
		IsStandard  *bool                                 `json:"isStandard,omitempty"`
		Logo        string                                `json:"logo"`
		LogoDark    *string                               `json:"logoDark"`
		Metadata    struct {
			Logo     *string `json:"logo,omitempty"`
			LogoDark *string `json:"logoDark"`

			// Name Validator function
			Name   *map[string]interface{} `json:"name,omitempty"`
			Target *string                 `json:"target,omitempty"`
		} `json:"metadata"`

		// Name Validator function
		Name        map[string]interface{}      `json:"name"`
		Platform    *UpdateConnector200Platform `json:"platform"`
		Readme      string                      `json:"readme"`
		SyncProfile bool                        `json:"syncProfile"`
		Target      string                      `json:"target"`
		Type        UpdateConnector200Type      `json:"type"`
		Usage       *float32                    `json:"usage,omitempty"`
	}
}
type UpdateConnector200FormItems0 struct {
	DefaultValue   *interface{} `json:"defaultValue,omitempty"`
	Description    *string      `json:"description,omitempty"`
	IsConfidential *bool        `json:"isConfidential,omitempty"`
	Key            string       `json:"key"`
	Label          string       `json:"label"`
	Placeholder    *string      `json:"placeholder,omitempty"`
	Required       *bool        `json:"required,omitempty"`
	SelectItems    []struct {
		Title string `json:"title"`
		Value string `json:"value"`
	} `json:"selectItems"`
	ShowConditions *[]struct {
		ExpectValue *interface{} `json:"expectValue,omitempty"`
		TargetKey   string       `json:"targetKey"`
	} `json:"showConditions,omitempty"`
	Tooltip *string `json:"tooltip,omitempty"`
	Type    string  `json:"type"`
}
type UpdateConnector200FormItems1 struct {
	DefaultValue   *interface{} `json:"defaultValue,omitempty"`
	Description    *string      `json:"description,omitempty"`
	IsConfidential *bool        `json:"isConfidential,omitempty"`
	Key            string       `json:"key"`
	Label          string       `json:"label"`
	Placeholder    *string      `json:"placeholder,omitempty"`
	Required       *bool        `json:"required,omitempty"`
	SelectItems    []struct {
		Value string `json:"value"`
	} `json:"selectItems"`
	ShowConditions *[]struct {
		ExpectValue *interface{} `json:"expectValue,omitempty"`
		TargetKey   string       `json:"targetKey"`
	} `json:"showConditions,omitempty"`
	Tooltip *string `json:"tooltip,omitempty"`
	Type    string  `json:"type"`
}
type UpdateConnector200FormItems2 struct {
	DefaultValue   *interface{} `json:"defaultValue,omitempty"`
	Description    *string      `json:"description,omitempty"`
	IsConfidential *bool        `json:"isConfidential,omitempty"`
	Key            string       `json:"key"`
	Label          string       `json:"label"`
	Placeholder    *string      `json:"placeholder,omitempty"`
	Required       *bool        `json:"required,omitempty"`
	ShowConditions *[]struct {
		ExpectValue *interface{} `json:"expectValue,omitempty"`
		TargetKey   string       `json:"targetKey"`
	} `json:"showConditions,omitempty"`
	Tooltip *string                          `json:"tooltip,omitempty"`
	Type    UpdateConnector200FormItems2Type `json:"type"`
}
type UpdateConnector200FormItems2Type string
type UpdateConnector_200_FormItems_Item struct {
	union json.RawMessage
}
type UpdateConnector200Platform string
type UpdateConnector200Type string

// Status returns HTTPResponse.Status
func (r UpdateConnectorResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateConnectorResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListCustomPhrasesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]struct {
		Id          string            `json:"id"`
		LanguageTag string            `json:"languageTag"`
		TenantId    string            `json:"tenantId"`
		Translation TranslationObject `json:"translation"`
	}
}

// Status returns HTTPResponse.Status
func (r ListCustomPhrasesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListCustomPhrasesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteCustomPhraseResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteCustomPhraseResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteCustomPhraseResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCustomPhraseResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Id          string            `json:"id"`
		LanguageTag string            `json:"languageTag"`
		TenantId    string            `json:"tenantId"`
		Translation TranslationObject `json:"translation"`
	}
}

// Status returns HTTPResponse.Status
func (r GetCustomPhraseResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCustomPhraseResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReplaceCustomPhraseResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *struct {
		Id          string            `json:"id"`
		LanguageTag string            `json:"languageTag"`
		TenantId    string            `json:"tenantId"`
		Translation TranslationObject `json:"translation"`
	}
}

// Status returns HTTPResponse.Status
func (r ReplaceCustomPhraseResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReplaceCustomPhraseResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetActiveUserCountsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Dau struct {
			Count float32 `json:"count"`
			Delta float32 `json:"delta"`
		} `json:"dau"`
		DauCurve []struct {
			Count float32 `json:"count"`
			Date  string  `json:"date"`
		} `json:"dauCurve"`
		Mau struct {
			Count float32 `json:"count"`
			Delta float32 `json:"delta"`
		} `json:"mau"`
		Wau struct {
			Count float32 `json:"count"`
			Delta float32 `json:"delta"`
		} `json:"wau"`
	}
}

// Status returns HTTPResponse.Status
func (r GetActiveUserCountsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetActiveUserCountsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetNewUserCountsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Last7Days struct {
			Count float32 `json:"count"`
			Delta float32 `json:"delta"`
		} `json:"last7Days"`
		Today struct {
			Count float32 `json:"count"`
			Delta float32 `json:"delta"`
		} `json:"today"`
	}
}

// Status returns HTTPResponse.Status
func (r GetNewUserCountsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetNewUserCountsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTotalUserCountResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		TotalUserCount float32 `json:"totalUserCount"`
	}
}

// Status returns HTTPResponse.Status
func (r GetTotalUserCountResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTotalUserCountResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListDomainsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]struct {
		DnsRecords []struct {
			Name  string `json:"name"`
			Type  string `json:"type"`
			Value string `json:"value"`
		} `json:"dnsRecords"`
		Domain       string               `json:"domain"`
		ErrorMessage *string              `json:"errorMessage"`
		Id           string               `json:"id"`
		Status       ListDomains200Status `json:"status"`
	}
}
type ListDomains200Status string

// Status returns HTTPResponse.Status
func (r ListDomainsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListDomainsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateDomainResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *struct {
		DnsRecords []struct {
			Name  string `json:"name"`
			Type  string `json:"type"`
			Value string `json:"value"`
		} `json:"dnsRecords"`
		Domain       string                `json:"domain"`
		ErrorMessage *string               `json:"errorMessage"`
		Id           string                `json:"id"`
		Status       CreateDomain201Status `json:"status"`
	}
}
type CreateDomain201Status string

// Status returns HTTPResponse.Status
func (r CreateDomainResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateDomainResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteDomainResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteDomainResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteDomainResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetDomainResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		DnsRecords []struct {
			Name  string `json:"name"`
			Type  string `json:"type"`
			Value string `json:"value"`
		} `json:"dnsRecords"`
		Domain       string             `json:"domain"`
		ErrorMessage *string            `json:"errorMessage"`
		Id           string             `json:"id"`
		Status       GetDomain200Status `json:"status"`
	}
}
type GetDomain200Status string

// Status returns HTTPResponse.Status
func (r GetDomainResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDomainResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteEmailTemplatesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// RowCount The number of email templates deleted.
		RowCount float32 `json:"rowCount"`
	}
}

// Status returns HTTPResponse.Status
func (r DeleteEmailTemplatesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteEmailTemplatesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListEmailTemplatesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]struct {
		CreatedAt float32 `json:"createdAt"`
		Details   struct {
			Content     string                                      `json:"content"`
			ContentType *ListEmailTemplates_200_Details_ContentType `json:"contentType,omitempty"`
			ReplyTo     *string                                     `json:"replyTo,omitempty"`
			SendFrom    *string                                     `json:"sendFrom,omitempty"`
			Subject     string                                      `json:"subject"`
		} `json:"details"`
		Id           string                            `json:"id"`
		LanguageTag  string                            `json:"languageTag"`
		TemplateType ListEmailTemplates200TemplateType `json:"templateType"`
		TenantId     string                            `json:"tenantId"`
	}
}
type ListEmailTemplates200DetailsContentType0 = string
type ListEmailTemplates200DetailsContentType1 = string
type ListEmailTemplates_200_Details_ContentType struct {
	union json.RawMessage
}
type ListEmailTemplates200TemplateType string

// Status returns HTTPResponse.Status
func (r ListEmailTemplatesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListEmailTemplatesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReplaceEmailTemplatesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]struct {
		CreatedAt float32 `json:"createdAt"`
		Details   struct {
			Content     string                                         `json:"content"`
			ContentType *ReplaceEmailTemplates_200_Details_ContentType `json:"contentType,omitempty"`
			ReplyTo     *string                                        `json:"replyTo,omitempty"`
			SendFrom    *string                                        `json:"sendFrom,omitempty"`
			Subject     string                                         `json:"subject"`
		} `json:"details"`
		Id           string                               `json:"id"`
		LanguageTag  string                               `json:"languageTag"`
		TemplateType ReplaceEmailTemplates200TemplateType `json:"templateType"`
		TenantId     string                               `json:"tenantId"`
	}
}
type ReplaceEmailTemplates200DetailsContentType0 = string
type ReplaceEmailTemplates200DetailsContentType1 = string
type ReplaceEmailTemplates_200_Details_ContentType struct {
	union json.RawMessage
}
type ReplaceEmailTemplates200TemplateType string

// Status returns HTTPResponse.Status
func (r ReplaceEmailTemplatesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReplaceEmailTemplatesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteEmailTemplateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteEmailTemplateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteEmailTemplateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetEmailTemplateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		CreatedAt float32 `json:"createdAt"`
		Details   struct {
			Content     string                                    `json:"content"`
			ContentType *GetEmailTemplate_200_Details_ContentType `json:"contentType,omitempty"`
			ReplyTo     *string                                   `json:"replyTo,omitempty"`
			SendFrom    *string                                   `json:"sendFrom,omitempty"`
			Subject     string                                    `json:"subject"`
		} `json:"details"`
		Id           string                          `json:"id"`
		LanguageTag  string                          `json:"languageTag"`
		TemplateType GetEmailTemplate200TemplateType `json:"templateType"`
		TenantId     string                          `json:"tenantId"`
	}
}
type GetEmailTemplate200DetailsContentType0 = string
type GetEmailTemplate200DetailsContentType1 = string
type GetEmailTemplate_200_Details_ContentType struct {
	union json.RawMessage
}
type GetEmailTemplate200TemplateType string

// Status returns HTTPResponse.Status
func (r GetEmailTemplateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetEmailTemplateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateEmailTemplateDetailsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		CreatedAt float32 `json:"createdAt"`
		Details   struct {
			Content     string                                              `json:"content"`
			ContentType *UpdateEmailTemplateDetails_200_Details_ContentType `json:"contentType,omitempty"`
			ReplyTo     *string                                             `json:"replyTo,omitempty"`
			SendFrom    *string                                             `json:"sendFrom,omitempty"`
			Subject     string                                              `json:"subject"`
		} `json:"details"`
		Id           string                                    `json:"id"`
		LanguageTag  string                                    `json:"languageTag"`
		TemplateType UpdateEmailTemplateDetails200TemplateType `json:"templateType"`
		TenantId     string                                    `json:"tenantId"`
	}
}
type UpdateEmailTemplateDetails200DetailsContentType0 = string
type UpdateEmailTemplateDetails200DetailsContentType1 = string
type UpdateEmailTemplateDetails_200_Details_ContentType struct {
	union json.RawMessage
}
type UpdateEmailTemplateDetails200TemplateType string

// Status returns HTTPResponse.Status
func (r UpdateEmailTemplateDetailsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateEmailTemplateDetailsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InitInteractionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r InitInteractionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InitInteractionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type IdentifyUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r IdentifyUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r IdentifyUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateInteractionEventResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r UpdateInteractionEventResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateInteractionEventResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AddUserProfileResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r AddUserProfileResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AddUserProfileResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BindMfaVerificationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r BindMfaVerificationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BindMfaVerificationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SkipMfaBindingFlowResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r SkipMfaBindingFlowResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SkipMfaBindingFlowResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ResetUserPasswordResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ResetUserPasswordResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ResetUserPasswordResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetEnabledSsoConnectorsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// ConnectorIds The list of enabled SSO connectorIds. Returns an empty array if no enabled SSO connectors are found.
		ConnectorIds []string `json:"connectorIds"`
	}
}

// Status returns HTTPResponse.Status
func (r GetEnabledSsoConnectorsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetEnabledSsoConnectorsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SubmitInteractionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		RedirectTo string `json:"redirectTo"`
	}
}

// Status returns HTTPResponse.Status
func (r SubmitInteractionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SubmitInteractionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GenerateBackupCodesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Codes The generated backup codes.
		Codes []string `json:"codes"`

		// VerificationId The unique verification ID of the newly created BackupCode verification record. This ID is required when adding the backup codes to the user profile via the Profile API.
		VerificationId string `json:"verificationId"`
	}
}

// Status returns HTTPResponse.Status
func (r GenerateBackupCodesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GenerateBackupCodesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type VerifyBackupCodeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// VerificationId The unique verification ID of the BackupCode verification record.
		VerificationId string `json:"verificationId"`
	}
}

// Status returns HTTPResponse.Status
func (r VerifyBackupCodeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r VerifyBackupCodeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateNewPasswordIdentityVerificationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// VerificationId The unique verification ID of the newly created NewPasswordIdentity verification record. The `verificationId` is required when creating a new user account via the `Identification` API.
		VerificationId string `json:"verificationId"`
	}
}

// Status returns HTTPResponse.Status
func (r CreateNewPasswordIdentityVerificationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateNewPasswordIdentityVerificationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type VerifyOneTimeTokenVerificationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// VerificationId The unique ID of the verification record. Required for user identification via the `Identification` API or to bind the identifier to the user's account via the `Profile` API.
		VerificationId string `json:"verificationId"`
	}
}

// Status returns HTTPResponse.Status
func (r VerifyOneTimeTokenVerificationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r VerifyOneTimeTokenVerificationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreatePasswordVerificationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// VerificationId The unique verification ID of the newly created Password verification record. The `verificationId` is required when verifying the user's identity via the `Identification` API.
		VerificationId string `json:"verificationId"`
	}
}

// Status returns HTTPResponse.Status
func (r CreatePasswordVerificationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreatePasswordVerificationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateSocialVerificationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// AuthorizationUri The social authorization URI.
		AuthorizationUri string `json:"authorizationUri"`

		// VerificationId The unique verification ID of the newly created SocialVerification record. The `verificationId` is required when verifying the social authorization response.
		VerificationId string `json:"verificationId"`
	}
}

// Status returns HTTPResponse.Status
func (r CreateSocialVerificationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateSocialVerificationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type VerifySocialVerificationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// VerificationId The unique verification ID of the SocialVerification record. This ID is required when identifying the user in the current interaction.
		VerificationId string `json:"verificationId"`
	}
}

// Status returns HTTPResponse.Status
func (r VerifySocialVerificationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r VerifySocialVerificationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateEnterpriseSsoVerificationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// AuthorizationUri The SSO authorization URI.
		AuthorizationUri string `json:"authorizationUri"`

		// VerificationId The unique verification ID of the newly created EnterpriseSSO verification record. The `verificationId` is required when verifying the SSO authorization response.
		VerificationId string `json:"verificationId"`
	}
}

// Status returns HTTPResponse.Status
func (r CreateEnterpriseSsoVerificationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateEnterpriseSsoVerificationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type VerifyEnterpriseSsoVerificationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// VerificationId The current verified EnterpriseSSO verification record ID. This ID is required when identifying the user in the current interaction.
		VerificationId string `json:"verificationId"`
	}
}

// Status returns HTTPResponse.Status
func (r VerifyEnterpriseSsoVerificationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r VerifyEnterpriseSsoVerificationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateTotpSecretResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Secret The newly generated TOTP secret.
		Secret string `json:"secret"`

		// SecretQrCode A QR code image data URL for the TOTP secret. The user can scan this QR code with their TOTP authenticator app.
		SecretQrCode string `json:"secretQrCode"`

		// VerificationId The unique verification ID for the TOTP record. This ID is required to verify the TOTP code.
		VerificationId string `json:"verificationId"`
	}
}

// Status returns HTTPResponse.Status
func (r CreateTotpSecretResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateTotpSecretResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type VerifyTotpVerificationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// VerificationId The unique verification ID of the TOTP verification record. For newly created TOTP secret verification record, this ID is required to bind the TOTP secret to the user account through `Profile` API.
		VerificationId string `json:"verificationId"`
	}
}

// Status returns HTTPResponse.Status
func (r VerifyTotpVerificationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r VerifyTotpVerificationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateAndSendVerificationCodeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// VerificationId The unique ID of the verification record. Required to verify the code.
		VerificationId string `json:"verificationId"`
	}
}

// Status returns HTTPResponse.Status
func (r CreateAndSendVerificationCodeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateAndSendVerificationCodeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type VerifyVerificationCodeVerificationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// VerificationId The unique ID of the verification record. Required for user identification via the `Identification` API or to bind the identifier to the user's account via the `Profile` API.
		VerificationId string `json:"verificationId"`
	}
}

// Status returns HTTPResponse.Status
func (r VerifyVerificationCodeVerificationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r VerifyVerificationCodeVerificationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateWebAuthnAuthenticationVerificationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// AuthenticationOptions Options for the user to authenticate with their WebAuthn credential.
		AuthenticationOptions struct {
			AllowCredentials *[]struct {
				Id         string                                                                                        `json:"id"`
				Transports *[]CreateWebAuthnAuthenticationVerification200AuthenticationOptionsAllowCredentialsTransports `json:"transports,omitempty"`
				Type       string                                                                                        `json:"type"`
			} `json:"allowCredentials,omitempty"`
			Challenge  string `json:"challenge"`
			Extensions *struct {
				Appid            *string `json:"appid,omitempty"`
				CredProps        *bool   `json:"credProps,omitempty"`
				HmacCreateSecret *bool   `json:"hmacCreateSecret,omitempty"`
			} `json:"extensions,omitempty"`
			RpId             *string                                                                           `json:"rpId,omitempty"`
			Timeout          *float32                                                                          `json:"timeout,omitempty"`
			UserVerification *CreateWebAuthnAuthenticationVerification200AuthenticationOptionsUserVerification `json:"userVerification,omitempty"`
		} `json:"authenticationOptions"`

		// VerificationId The unique ID for the WebAuthn authentication record, required to verify the WebAuthn authentication challenge.
		VerificationId string `json:"verificationId"`
	}
}
type CreateWebAuthnAuthenticationVerification200AuthenticationOptionsAllowCredentialsTransports string
type CreateWebAuthnAuthenticationVerification200AuthenticationOptionsUserVerification string

// Status returns HTTPResponse.Status
func (r CreateWebAuthnAuthenticationVerificationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateWebAuthnAuthenticationVerificationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type VerifyWebAuthnAuthenticationVerificationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// VerificationId The unique verification ID of the WebAuthn authentication verification record.
		VerificationId string `json:"verificationId"`
	}
}

// Status returns HTTPResponse.Status
func (r VerifyWebAuthnAuthenticationVerificationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r VerifyWebAuthnAuthenticationVerificationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateWebAuthnRegistrationVerificationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// RegistrationOptions The WebAuthn registration options that the user needs to create a new WebAuthn credential.
		RegistrationOptions struct {
			Attestation            *CreateWebAuthnRegistrationVerification200RegistrationOptionsAttestation `json:"attestation,omitempty"`
			AuthenticatorSelection *struct {
				AuthenticatorAttachment *CreateWebAuthnRegistrationVerification200RegistrationOptionsAuthenticatorSelectionAuthenticatorAttachment `json:"authenticatorAttachment,omitempty"`
				RequireResidentKey      *bool                                                                                                      `json:"requireResidentKey,omitempty"`
				ResidentKey             *CreateWebAuthnRegistrationVerification200RegistrationOptionsAuthenticatorSelectionResidentKey             `json:"residentKey,omitempty"`
				UserVerification        *CreateWebAuthnRegistrationVerification200RegistrationOptionsAuthenticatorSelectionUserVerification        `json:"userVerification,omitempty"`
			} `json:"authenticatorSelection,omitempty"`
			Challenge          string `json:"challenge"`
			ExcludeCredentials *[]struct {
				Id         string                                                                                      `json:"id"`
				Transports *[]CreateWebAuthnRegistrationVerification200RegistrationOptionsExcludeCredentialsTransports `json:"transports,omitempty"`
				Type       string                                                                                      `json:"type"`
			} `json:"excludeCredentials,omitempty"`
			Extensions *struct {
				Appid            *string `json:"appid,omitempty"`
				CredProps        *bool   `json:"credProps,omitempty"`
				HmacCreateSecret *bool   `json:"hmacCreateSecret,omitempty"`
			} `json:"extensions,omitempty"`
			PubKeyCredParams []struct {
				Alg  float32 `json:"alg"`
				Type string  `json:"type"`
			} `json:"pubKeyCredParams"`
			Rp struct {
				Id   *string `json:"id,omitempty"`
				Name string  `json:"name"`
			} `json:"rp"`
			Timeout *float32 `json:"timeout,omitempty"`
			User    struct {
				DisplayName string `json:"displayName"`
				Id          string `json:"id"`
				Name        string `json:"name"`
			} `json:"user"`
		} `json:"registrationOptions"`

		// VerificationId The unique verification ID for the WebAuthn registration record. This ID is required to verify the WebAuthn registration challenge.
		VerificationId string `json:"verificationId"`
	}
}
type CreateWebAuthnRegistrationVerification200RegistrationOptionsAttestation string
type CreateWebAuthnRegistrationVerification200RegistrationOptionsAuthenticatorSelectionAuthenticatorAttachment string
type CreateWebAuthnRegistrationVerification200RegistrationOptionsAuthenticatorSelectionResidentKey string
type CreateWebAuthnRegistrationVerification200RegistrationOptionsAuthenticatorSelectionUserVerification string
type CreateWebAuthnRegistrationVerification200RegistrationOptionsExcludeCredentialsTransports string

// Status returns HTTPResponse.Status
func (r CreateWebAuthnRegistrationVerificationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateWebAuthnRegistrationVerificationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type VerifyWebAuthnRegistrationVerificationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// VerificationId The unique verification ID of the WebAuthn registration record. This `verificationId` is required to bind the WebAuthn credential to the user account via the `Profile` API.
		VerificationId string `json:"verificationId"`
	}
}

// Status returns HTTPResponse.Status
func (r VerifyWebAuthnRegistrationVerificationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r VerifyWebAuthnRegistrationVerificationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListHooksResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]struct {
		Config struct {
			Headers *map[string]string `json:"headers,omitempty"`
			Retries *float32           `json:"retries,omitempty"`
			Url     string             `json:"url"`
		} `json:"config"`
		CreatedAt      float32              `json:"createdAt"`
		Enabled        bool                 `json:"enabled"`
		Event          *ListHooks200Event   `json:"event"`
		Events         []ListHooks200Events `json:"events"`
		ExecutionStats *struct {
			RequestCount float32 `json:"requestCount"`
			SuccessCount float32 `json:"successCount"`
		} `json:"executionStats,omitempty"`
		Id         string `json:"id"`
		Name       string `json:"name"`
		SigningKey string `json:"signingKey"`
		TenantId   string `json:"tenantId"`
	}
}
type ListHooks200Event string
type ListHooks200Events string

// Status returns HTTPResponse.Status
func (r ListHooksResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListHooksResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateHookResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *struct {
		Config struct {
			Headers *map[string]string `json:"headers,omitempty"`
			Retries *float32           `json:"retries,omitempty"`
			Url     string             `json:"url"`
		} `json:"config"`
		CreatedAt  float32               `json:"createdAt"`
		Enabled    bool                  `json:"enabled"`
		Event      *CreateHook201Event   `json:"event"`
		Events     []CreateHook201Events `json:"events"`
		Id         string                `json:"id"`
		Name       string                `json:"name"`
		SigningKey string                `json:"signingKey"`
		TenantId   string                `json:"tenantId"`
	}
}
type CreateHook201Event string
type CreateHook201Events string

// Status returns HTTPResponse.Status
func (r CreateHookResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateHookResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteHookResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteHookResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteHookResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetHookResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Config struct {
			Headers *map[string]string `json:"headers,omitempty"`
			Retries *float32           `json:"retries,omitempty"`
			Url     string             `json:"url"`
		} `json:"config"`
		CreatedAt      float32            `json:"createdAt"`
		Enabled        bool               `json:"enabled"`
		Event          *GetHook200Event   `json:"event"`
		Events         []GetHook200Events `json:"events"`
		ExecutionStats *struct {
			RequestCount float32 `json:"requestCount"`
			SuccessCount float32 `json:"successCount"`
		} `json:"executionStats,omitempty"`
		Id         string `json:"id"`
		Name       string `json:"name"`
		SigningKey string `json:"signingKey"`
		TenantId   string `json:"tenantId"`
	}
}
type GetHook200Event string
type GetHook200Events string

// Status returns HTTPResponse.Status
func (r GetHookResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetHookResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateHookResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Config struct {
			Headers *map[string]string `json:"headers,omitempty"`
			Retries *float32           `json:"retries,omitempty"`
			Url     string             `json:"url"`
		} `json:"config"`
		CreatedAt  float32               `json:"createdAt"`
		Enabled    bool                  `json:"enabled"`
		Event      *UpdateHook200Event   `json:"event"`
		Events     []UpdateHook200Events `json:"events"`
		Id         string                `json:"id"`
		Name       string                `json:"name"`
		SigningKey string                `json:"signingKey"`
		TenantId   string                `json:"tenantId"`
	}
}
type UpdateHook200Event string
type UpdateHook200Events string

// Status returns HTTPResponse.Status
func (r UpdateHookResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateHookResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListHookRecentLogsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]struct {
		CreatedAt float32 `json:"createdAt"`
		Id        string  `json:"id"`
		Key       string  `json:"key"`
		Payload   struct {
			ApplicationId *string                               `json:"applicationId,omitempty"`
			Error         *ListHookRecentLogs_200_Payload_Error `json:"error,omitempty"`
			Ip            *string                               `json:"ip,omitempty"`
			Key           string                                `json:"key"`
			Params        *map[string]interface{}               `json:"params,omitempty"`
			Result        ListHookRecentLogs200PayloadResult    `json:"result"`
			SessionId     *string                               `json:"sessionId,omitempty"`
			UserAgent     *string                               `json:"userAgent,omitempty"`
			UserId        *string                               `json:"userId,omitempty"`
		} `json:"payload"`
	}
}
type ListHookRecentLogs200PayloadError0 map[string]interface{}
type ListHookRecentLogs200PayloadError1 = string
type ListHookRecentLogs_200_Payload_Error struct {
	union json.RawMessage
}
type ListHookRecentLogs200PayloadResult string

// Status returns HTTPResponse.Status
func (r ListHookRecentLogsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListHookRecentLogsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateHookSigningKeyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Config struct {
			Headers *map[string]string `json:"headers,omitempty"`
			Retries *float32           `json:"retries,omitempty"`
			Url     string             `json:"url"`
		} `json:"config"`
		CreatedAt  float32                         `json:"createdAt"`
		Enabled    bool                            `json:"enabled"`
		Event      *UpdateHookSigningKey200Event   `json:"event"`
		Events     []UpdateHookSigningKey200Events `json:"events"`
		Id         string                          `json:"id"`
		Name       string                          `json:"name"`
		SigningKey string                          `json:"signingKey"`
		TenantId   string                          `json:"tenantId"`
	}
}
type UpdateHookSigningKey200Event string
type UpdateHookSigningKey200Events string

// Status returns HTTPResponse.Status
func (r UpdateHookSigningKeyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateHookSigningKeyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateHookTestResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CreateHookTestResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateHookTestResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteApiInteractionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteApiInteractionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteApiInteractionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutApiInteractionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutApiInteractionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutApiInteractionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiInteractionBindMfaResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostApiInteractionBindMfaResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiInteractionBindMfaResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiInteractionConsentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Application struct {
			Branding *struct {
				DarkFavicon *string `json:"darkFavicon,omitempty"`
				DarkLogoUrl *string `json:"darkLogoUrl,omitempty"`
				Favicon     *string `json:"favicon,omitempty"`
				LogoUrl     *string `json:"logoUrl,omitempty"`
			} `json:"branding,omitempty"`
			DisplayName      *string `json:"displayName"`
			Id               string  `json:"id"`
			Name             string  `json:"name"`
			PrivacyPolicyUrl *string `json:"privacyPolicyUrl"`
			TermsOfUseUrl    *string `json:"termsOfUseUrl"`
		} `json:"application"`
		MissingOIDCScope      *[]string `json:"missingOIDCScope,omitempty"`
		MissingResourceScopes *[]struct {
			Resource struct {
				Id        string `json:"id"`
				Indicator string `json:"indicator"`
				Name      string `json:"name"`
			} `json:"resource"`
			Scopes []struct {
				Description *string `json:"description"`
				Id          string  `json:"id"`
				Name        string  `json:"name"`
			} `json:"scopes"`
		} `json:"missingResourceScopes,omitempty"`
		Organizations *[]struct {
			Id                    string `json:"id"`
			MissingResourceScopes *[]struct {
				Resource struct {
					Id        string `json:"id"`
					Indicator string `json:"indicator"`
					Name      string `json:"name"`
				} `json:"resource"`
				Scopes []struct {
					Description *string `json:"description"`
					Id          string  `json:"id"`
					Name        string  `json:"name"`
				} `json:"scopes"`
			} `json:"missingResourceScopes,omitempty"`
			Name string `json:"name"`
		} `json:"organizations,omitempty"`
		RedirectUri string `json:"redirectUri"`
		User        struct {
			Avatar       *string `json:"avatar"`
			Id           string  `json:"id"`
			Name         *string `json:"name"`
			PrimaryEmail *string `json:"primaryEmail"`
			PrimaryPhone *string `json:"primaryPhone"`
			Username     *string `json:"username"`
		} `json:"user"`
	}
}

// Status returns HTTPResponse.Status
func (r GetApiInteractionConsentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiInteractionConsentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiInteractionConsentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostApiInteractionConsentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiInteractionConsentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutApiInteractionEventResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutApiInteractionEventResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutApiInteractionEventResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchApiInteractionIdentifiersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PatchApiInteractionIdentifiersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchApiInteractionIdentifiersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutApiInteractionMfaResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutApiInteractionMfaResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutApiInteractionMfaResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutApiInteractionMfaSkippedResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutApiInteractionMfaSkippedResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutApiInteractionMfaSkippedResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteApiInteractionProfileResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteApiInteractionProfileResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteApiInteractionProfileResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchApiInteractionProfileResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PatchApiInteractionProfileResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchApiInteractionProfileResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutApiInteractionProfileResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutApiInteractionProfileResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutApiInteractionProfileResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiInteractionSingleSignOnConnectorsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]string
}

// Status returns HTTPResponse.Status
func (r GetApiInteractionSingleSignOnConnectorsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiInteractionSingleSignOnConnectorsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiInteractionSingleSignOnConnectorIdAuthenticationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		RedirectTo string `json:"redirectTo"`
	}
}

// Status returns HTTPResponse.Status
func (r PostApiInteractionSingleSignOnConnectorIdAuthenticationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiInteractionSingleSignOnConnectorIdAuthenticationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiInteractionSingleSignOnConnectorIdAuthorizationUrlResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		RedirectTo string `json:"redirectTo"`
	}
}

// Status returns HTTPResponse.Status
func (r PostApiInteractionSingleSignOnConnectorIdAuthorizationUrlResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiInteractionSingleSignOnConnectorIdAuthorizationUrlResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiInteractionSingleSignOnConnectorIdRegistrationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		RedirectTo string `json:"redirectTo"`
	}
}

// Status returns HTTPResponse.Status
func (r PostApiInteractionSingleSignOnConnectorIdRegistrationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiInteractionSingleSignOnConnectorIdRegistrationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiInteractionSubmitResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		RedirectTo string `json:"redirectTo"`
	}
}

// Status returns HTTPResponse.Status
func (r PostApiInteractionSubmitResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiInteractionSubmitResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiInteractionVerificationSocialAuthorizationUriResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		RedirectTo string `json:"redirectTo"`
	}
}

// Status returns HTTPResponse.Status
func (r PostApiInteractionVerificationSocialAuthorizationUriResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiInteractionVerificationSocialAuthorizationUriResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiInteractionVerificationTotpResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Secret       string `json:"secret"`
		SecretQrCode string `json:"secretQrCode"`
	}
}

// Status returns HTTPResponse.Status
func (r PostApiInteractionVerificationTotpResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiInteractionVerificationTotpResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiInteractionVerificationVerificationCodeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostApiInteractionVerificationVerificationCodeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiInteractionVerificationVerificationCodeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiInteractionVerificationWebauthnAuthenticationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		AllowCredentials *[]struct {
			Id         string                                                                               `json:"id"`
			Transports *[]PostApiInteractionVerificationWebauthnAuthentication200AllowCredentialsTransports `json:"transports,omitempty"`
			Type       string                                                                               `json:"type"`
		} `json:"allowCredentials,omitempty"`
		Challenge  string `json:"challenge"`
		Extensions *struct {
			Appid            *string `json:"appid,omitempty"`
			CredProps        *bool   `json:"credProps,omitempty"`
			HmacCreateSecret *bool   `json:"hmacCreateSecret,omitempty"`
		} `json:"extensions,omitempty"`
		RpId             *string                                                                  `json:"rpId,omitempty"`
		Timeout          *float32                                                                 `json:"timeout,omitempty"`
		UserVerification *PostApiInteractionVerificationWebauthnAuthentication200UserVerification `json:"userVerification,omitempty"`
	}
}
type PostApiInteractionVerificationWebauthnAuthentication200AllowCredentialsTransports string
type PostApiInteractionVerificationWebauthnAuthentication200UserVerification string

// Status returns HTTPResponse.Status
func (r PostApiInteractionVerificationWebauthnAuthenticationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiInteractionVerificationWebauthnAuthenticationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiInteractionVerificationWebauthnRegistrationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Attestation            *PostApiInteractionVerificationWebauthnRegistration200Attestation `json:"attestation,omitempty"`
		AuthenticatorSelection *struct {
			AuthenticatorAttachment *PostApiInteractionVerificationWebauthnRegistration200AuthenticatorSelectionAuthenticatorAttachment `json:"authenticatorAttachment,omitempty"`
			RequireResidentKey      *bool                                                                                               `json:"requireResidentKey,omitempty"`
			ResidentKey             *PostApiInteractionVerificationWebauthnRegistration200AuthenticatorSelectionResidentKey             `json:"residentKey,omitempty"`
			UserVerification        *PostApiInteractionVerificationWebauthnRegistration200AuthenticatorSelectionUserVerification        `json:"userVerification,omitempty"`
		} `json:"authenticatorSelection,omitempty"`
		Challenge          string `json:"challenge"`
		ExcludeCredentials *[]struct {
			Id         string                                                                               `json:"id"`
			Transports *[]PostApiInteractionVerificationWebauthnRegistration200ExcludeCredentialsTransports `json:"transports,omitempty"`
			Type       string                                                                               `json:"type"`
		} `json:"excludeCredentials,omitempty"`
		Extensions *struct {
			Appid            *string `json:"appid,omitempty"`
			CredProps        *bool   `json:"credProps,omitempty"`
			HmacCreateSecret *bool   `json:"hmacCreateSecret,omitempty"`
		} `json:"extensions,omitempty"`
		PubKeyCredParams []struct {
			Alg  float32 `json:"alg"`
			Type string  `json:"type"`
		} `json:"pubKeyCredParams"`
		Rp struct {
			Id   *string `json:"id,omitempty"`
			Name string  `json:"name"`
		} `json:"rp"`
		Timeout *float32 `json:"timeout,omitempty"`
		User    struct {
			DisplayName string `json:"displayName"`
			Id          string `json:"id"`
			Name        string `json:"name"`
		} `json:"user"`
	}
}
type PostApiInteractionVerificationWebauthnRegistration200Attestation string
type PostApiInteractionVerificationWebauthnRegistration200AuthenticatorSelectionAuthenticatorAttachment string
type PostApiInteractionVerificationWebauthnRegistration200AuthenticatorSelectionResidentKey string
type PostApiInteractionVerificationWebauthnRegistration200AuthenticatorSelectionUserVerification string
type PostApiInteractionVerificationWebauthnRegistration200ExcludeCredentialsTransports string

// Status returns HTTPResponse.Status
func (r PostApiInteractionVerificationWebauthnRegistrationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiInteractionVerificationWebauthnRegistrationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListLogsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]struct {
		CreatedAt float32 `json:"createdAt"`
		Id        string  `json:"id"`
		Key       string  `json:"key"`
		Payload   struct {
			ApplicationId *string                     `json:"applicationId,omitempty"`
			Error         *ListLogs_200_Payload_Error `json:"error,omitempty"`
			Ip            *string                     `json:"ip,omitempty"`
			Key           string                      `json:"key"`
			Params        *map[string]interface{}     `json:"params,omitempty"`
			Result        ListLogs200PayloadResult    `json:"result"`
			SessionId     *string                     `json:"sessionId,omitempty"`
			UserAgent     *string                     `json:"userAgent,omitempty"`
			UserId        *string                     `json:"userId,omitempty"`
		} `json:"payload"`
		TenantId string `json:"tenantId"`
	}
}
type ListLogs200PayloadError0 map[string]interface{}
type ListLogs200PayloadError1 = string
type ListLogs_200_Payload_Error struct {
	union json.RawMessage
}
type ListLogs200PayloadResult string

// Status returns HTTPResponse.Status
func (r ListLogsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListLogsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetLogResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		CreatedAt float32 `json:"createdAt"`
		Id        string  `json:"id"`
		Key       string  `json:"key"`
		Payload   struct {
			ApplicationId *string                   `json:"applicationId,omitempty"`
			Error         *GetLog_200_Payload_Error `json:"error,omitempty"`
			Ip            *string                   `json:"ip,omitempty"`
			Key           string                    `json:"key"`
			Params        *map[string]interface{}   `json:"params,omitempty"`
			Result        GetLog200PayloadResult    `json:"result"`
			SessionId     *string                   `json:"sessionId,omitempty"`
			UserAgent     *string                   `json:"userAgent,omitempty"`
			UserId        *string                   `json:"userId,omitempty"`
		} `json:"payload"`
		TenantId string `json:"tenantId"`
	}
}
type GetLog200PayloadError0 map[string]interface{}
type GetLog200PayloadError1 = string
type GetLog_200_Payload_Error struct {
	union json.RawMessage
}
type GetLog200PayloadResult string

// Status returns HTTPResponse.Status
func (r GetLogResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetLogResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetProfileResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		ApplicationId *string  `json:"applicationId"`
		Avatar        *string  `json:"avatar"`
		CreatedAt     *float32 `json:"createdAt,omitempty"`

		// CustomData arbitrary
		CustomData  *map[string]interface{} `json:"customData,omitempty"`
		HasPassword *bool                   `json:"hasPassword,omitempty"`
		Id          *string                 `json:"id,omitempty"`
		Identities  *map[string]struct {
			// Details arbitrary
			Details *map[string]interface{} `json:"details,omitempty"`
			UserId  string                  `json:"userId"`
		} `json:"identities,omitempty"`
		IsSuspended  *bool    `json:"isSuspended,omitempty"`
		LastSignInAt *float32 `json:"lastSignInAt"`
		Name         *string  `json:"name"`
		PrimaryEmail *string  `json:"primaryEmail"`
		PrimaryPhone *string  `json:"primaryPhone"`
		Profile      *struct {
			Address *struct {
				Country       *string `json:"country,omitempty"`
				Formatted     *string `json:"formatted,omitempty"`
				Locality      *string `json:"locality,omitempty"`
				PostalCode    *string `json:"postalCode,omitempty"`
				Region        *string `json:"region,omitempty"`
				StreetAddress *string `json:"streetAddress,omitempty"`
			} `json:"address,omitempty"`
			Birthdate         *string `json:"birthdate,omitempty"`
			FamilyName        *string `json:"familyName,omitempty"`
			Gender            *string `json:"gender,omitempty"`
			GivenName         *string `json:"givenName,omitempty"`
			Locale            *string `json:"locale,omitempty"`
			MiddleName        *string `json:"middleName,omitempty"`
			Nickname          *string `json:"nickname,omitempty"`
			PreferredUsername *string `json:"preferredUsername,omitempty"`
			Profile           *string `json:"profile,omitempty"`
			Website           *string `json:"website,omitempty"`
			Zoneinfo          *string `json:"zoneinfo,omitempty"`
		} `json:"profile,omitempty"`
		SsoIdentities *[]struct {
			CreatedAt float32 `json:"createdAt"`

			// Detail arbitrary
			Detail         map[string]interface{} `json:"detail"`
			Id             string                 `json:"id"`
			IdentityId     string                 `json:"identityId"`
			Issuer         string                 `json:"issuer"`
			SsoConnectorId string                 `json:"ssoConnectorId"`
			TenantId       string                 `json:"tenantId"`
			UpdatedAt      float32                `json:"updatedAt"`
			UserId         string                 `json:"userId"`
		} `json:"ssoIdentities,omitempty"`
		UpdatedAt *float32 `json:"updatedAt,omitempty"`
		Username  *string  `json:"username"`
	}
}

// Status returns HTTPResponse.Status
func (r GetProfileResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetProfileResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateProfileResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		ApplicationId *string  `json:"applicationId"`
		Avatar        *string  `json:"avatar"`
		CreatedAt     *float32 `json:"createdAt,omitempty"`

		// CustomData arbitrary
		CustomData  *map[string]interface{} `json:"customData,omitempty"`
		HasPassword *bool                   `json:"hasPassword,omitempty"`
		Id          *string                 `json:"id,omitempty"`
		Identities  *map[string]struct {
			// Details arbitrary
			Details *map[string]interface{} `json:"details,omitempty"`
			UserId  string                  `json:"userId"`
		} `json:"identities,omitempty"`
		IsSuspended  *bool    `json:"isSuspended,omitempty"`
		LastSignInAt *float32 `json:"lastSignInAt"`
		Name         *string  `json:"name"`
		PrimaryEmail *string  `json:"primaryEmail"`
		PrimaryPhone *string  `json:"primaryPhone"`
		Profile      *struct {
			Address *struct {
				Country       *string `json:"country,omitempty"`
				Formatted     *string `json:"formatted,omitempty"`
				Locality      *string `json:"locality,omitempty"`
				PostalCode    *string `json:"postalCode,omitempty"`
				Region        *string `json:"region,omitempty"`
				StreetAddress *string `json:"streetAddress,omitempty"`
			} `json:"address,omitempty"`
			Birthdate         *string `json:"birthdate,omitempty"`
			FamilyName        *string `json:"familyName,omitempty"`
			Gender            *string `json:"gender,omitempty"`
			GivenName         *string `json:"givenName,omitempty"`
			Locale            *string `json:"locale,omitempty"`
			MiddleName        *string `json:"middleName,omitempty"`
			Nickname          *string `json:"nickname,omitempty"`
			PreferredUsername *string `json:"preferredUsername,omitempty"`
			Profile           *string `json:"profile,omitempty"`
			Website           *string `json:"website,omitempty"`
			Zoneinfo          *string `json:"zoneinfo,omitempty"`
		} `json:"profile,omitempty"`
		SsoIdentities *[]struct {
			CreatedAt float32 `json:"createdAt"`

			// Detail arbitrary
			Detail         map[string]interface{} `json:"detail"`
			Id             string                 `json:"id"`
			IdentityId     string                 `json:"identityId"`
			Issuer         string                 `json:"issuer"`
			SsoConnectorId string                 `json:"ssoConnectorId"`
			TenantId       string                 `json:"tenantId"`
			UpdatedAt      float32                `json:"updatedAt"`
			UserId         string                 `json:"userId"`
		} `json:"ssoIdentities,omitempty"`
		UpdatedAt *float32 `json:"updatedAt,omitempty"`
		Username  *string  `json:"username"`
	}
}

// Status returns HTTPResponse.Status
func (r UpdateProfileResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateProfileResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AddUserIdentitiesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r AddUserIdentitiesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AddUserIdentitiesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteIdentityResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteIdentityResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteIdentityResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetMfaVerificationsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]struct {
		Agent       *string                    `json:"agent,omitempty"`
		CreatedAt   string                     `json:"createdAt"`
		Id          string                     `json:"id"`
		Name        *string                    `json:"name,omitempty"`
		RemainCodes *float32                   `json:"remainCodes,omitempty"`
		Type        GetMfaVerifications200Type `json:"type"`
	}
}
type GetMfaVerifications200Type string

// Status returns HTTPResponse.Status
func (r GetMfaVerificationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetMfaVerificationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AddMfaVerificationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r AddMfaVerificationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AddMfaVerificationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteMfaVerificationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteMfaVerificationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteMfaVerificationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateMfaVerificationNameResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r UpdateMfaVerificationNameResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateMfaVerificationNameResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdatePasswordResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r UpdatePasswordResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdatePasswordResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeletePrimaryEmailResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeletePrimaryEmailResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeletePrimaryEmailResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdatePrimaryEmailResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r UpdatePrimaryEmailResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdatePrimaryEmailResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeletePrimaryPhoneResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeletePrimaryPhoneResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeletePrimaryPhoneResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdatePrimaryPhoneResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r UpdatePrimaryPhoneResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdatePrimaryPhoneResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateOtherProfileResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Address *struct {
			Country       *string `json:"country,omitempty"`
			Formatted     *string `json:"formatted,omitempty"`
			Locality      *string `json:"locality,omitempty"`
			PostalCode    *string `json:"postalCode,omitempty"`
			Region        *string `json:"region,omitempty"`
			StreetAddress *string `json:"streetAddress,omitempty"`
		} `json:"address,omitempty"`
		Birthdate         *string `json:"birthdate,omitempty"`
		FamilyName        *string `json:"familyName,omitempty"`
		Gender            *string `json:"gender,omitempty"`
		GivenName         *string `json:"givenName,omitempty"`
		Locale            *string `json:"locale,omitempty"`
		MiddleName        *string `json:"middleName,omitempty"`
		Nickname          *string `json:"nickname,omitempty"`
		PreferredUsername *string `json:"preferredUsername,omitempty"`
		Profile           *string `json:"profile,omitempty"`
		Website           *string `json:"website,omitempty"`
		Zoneinfo          *string `json:"zoneinfo,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r UpdateOtherProfileResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateOtherProfileResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListOneTimeTokensResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]struct {
		Context struct {
			JitOrganizationIds *[]string `json:"jitOrganizationIds,omitempty"`
		} `json:"context"`
		CreatedAt float32                    `json:"createdAt"`
		Email     string                     `json:"email"`
		ExpiresAt float32                    `json:"expiresAt"`
		Id        string                     `json:"id"`
		Status    ListOneTimeTokens200Status `json:"status"`
		TenantId  string                     `json:"tenantId"`
		Token     string                     `json:"token"`
	}
}
type ListOneTimeTokens200Status string

// Status returns HTTPResponse.Status
func (r ListOneTimeTokensResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListOneTimeTokensResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AddOneTimeTokensResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *struct {
		Context struct {
			JitOrganizationIds *[]string `json:"jitOrganizationIds,omitempty"`
		} `json:"context"`
		CreatedAt float32                   `json:"createdAt"`
		Email     string                    `json:"email"`
		ExpiresAt float32                   `json:"expiresAt"`
		Id        string                    `json:"id"`
		Status    AddOneTimeTokens201Status `json:"status"`
		TenantId  string                    `json:"tenantId"`
		Token     string                    `json:"token"`
	}
}
type AddOneTimeTokens201Status string

// Status returns HTTPResponse.Status
func (r AddOneTimeTokensResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AddOneTimeTokensResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type VerifyOneTimeTokenResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Context struct {
			JitOrganizationIds *[]string `json:"jitOrganizationIds,omitempty"`
		} `json:"context"`
		CreatedAt float32                     `json:"createdAt"`
		Email     string                      `json:"email"`
		ExpiresAt float32                     `json:"expiresAt"`
		Id        string                      `json:"id"`
		Status    VerifyOneTimeToken200Status `json:"status"`
		TenantId  string                      `json:"tenantId"`
		Token     string                      `json:"token"`
	}
}
type VerifyOneTimeToken200Status string

// Status returns HTTPResponse.Status
func (r VerifyOneTimeTokenResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r VerifyOneTimeTokenResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteOneTimeTokenResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteOneTimeTokenResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteOneTimeTokenResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOneTimeTokenResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Context struct {
			JitOrganizationIds *[]string `json:"jitOrganizationIds,omitempty"`
		} `json:"context"`
		CreatedAt float32                  `json:"createdAt"`
		Email     string                   `json:"email"`
		ExpiresAt float32                  `json:"expiresAt"`
		Id        string                   `json:"id"`
		Status    GetOneTimeToken200Status `json:"status"`
		TenantId  string                   `json:"tenantId"`
		Token     string                   `json:"token"`
	}
}
type GetOneTimeToken200Status string

// Status returns HTTPResponse.Status
func (r GetOneTimeTokenResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOneTimeTokenResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReplaceOneTimeTokenStatusResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Context struct {
			JitOrganizationIds *[]string `json:"jitOrganizationIds,omitempty"`
		} `json:"context"`
		CreatedAt float32                            `json:"createdAt"`
		Email     string                             `json:"email"`
		ExpiresAt float32                            `json:"expiresAt"`
		Id        string                             `json:"id"`
		Status    ReplaceOneTimeTokenStatus200Status `json:"status"`
		TenantId  string                             `json:"tenantId"`
		Token     string                             `json:"token"`
	}
}
type ReplaceOneTimeTokenStatus200Status string

// Status returns HTTPResponse.Status
func (r ReplaceOneTimeTokenStatusResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReplaceOneTimeTokenStatusResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListOrganizationInvitationsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]struct {
		AcceptedUserId    *string `json:"acceptedUserId"`
		CreatedAt         float32 `json:"createdAt"`
		ExpiresAt         float32 `json:"expiresAt"`
		Id                string  `json:"id"`
		Invitee           string  `json:"invitee"`
		InviterId         *string `json:"inviterId"`
		OrganizationId    string  `json:"organizationId"`
		OrganizationRoles []struct {
			Id   string `json:"id"`
			Name string `json:"name"`
		} `json:"organizationRoles"`
		Status    ListOrganizationInvitations200Status `json:"status"`
		TenantId  string                               `json:"tenantId"`
		UpdatedAt float32                              `json:"updatedAt"`
	}
}
type ListOrganizationInvitations200Status string

// Status returns HTTPResponse.Status
func (r ListOrganizationInvitationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListOrganizationInvitationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateOrganizationInvitationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *struct {
		AcceptedUserId    *string `json:"acceptedUserId"`
		CreatedAt         float32 `json:"createdAt"`
		ExpiresAt         float32 `json:"expiresAt"`
		Id                string  `json:"id"`
		Invitee           string  `json:"invitee"`
		InviterId         *string `json:"inviterId"`
		OrganizationId    string  `json:"organizationId"`
		OrganizationRoles []struct {
			Id   string `json:"id"`
			Name string `json:"name"`
		} `json:"organizationRoles"`
		Status    CreateOrganizationInvitation201Status `json:"status"`
		TenantId  string                                `json:"tenantId"`
		UpdatedAt float32                               `json:"updatedAt"`
	}
}
type CreateOrganizationInvitation201Status string

// Status returns HTTPResponse.Status
func (r CreateOrganizationInvitationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateOrganizationInvitationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteOrganizationInvitationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteOrganizationInvitationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteOrganizationInvitationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOrganizationInvitationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		AcceptedUserId    *string `json:"acceptedUserId"`
		CreatedAt         float32 `json:"createdAt"`
		ExpiresAt         float32 `json:"expiresAt"`
		Id                string  `json:"id"`
		Invitee           string  `json:"invitee"`
		InviterId         *string `json:"inviterId"`
		OrganizationId    string  `json:"organizationId"`
		OrganizationRoles []struct {
			Id   string `json:"id"`
			Name string `json:"name"`
		} `json:"organizationRoles"`
		Status    GetOrganizationInvitation200Status `json:"status"`
		TenantId  string                             `json:"tenantId"`
		UpdatedAt float32                            `json:"updatedAt"`
	}
}
type GetOrganizationInvitation200Status string

// Status returns HTTPResponse.Status
func (r GetOrganizationInvitationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOrganizationInvitationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateOrganizationInvitationMessageResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CreateOrganizationInvitationMessageResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateOrganizationInvitationMessageResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReplaceOrganizationInvitationStatusResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		AcceptedUserId    *string `json:"acceptedUserId"`
		CreatedAt         float32 `json:"createdAt"`
		ExpiresAt         float32 `json:"expiresAt"`
		Id                string  `json:"id"`
		Invitee           string  `json:"invitee"`
		InviterId         *string `json:"inviterId"`
		OrganizationId    string  `json:"organizationId"`
		OrganizationRoles []struct {
			Id   string `json:"id"`
			Name string `json:"name"`
		} `json:"organizationRoles"`
		Status    ReplaceOrganizationInvitationStatus200Status `json:"status"`
		TenantId  string                                       `json:"tenantId"`
		UpdatedAt float32                                      `json:"updatedAt"`
	}
}
type ReplaceOrganizationInvitationStatus200Status string

// Status returns HTTPResponse.Status
func (r ReplaceOrganizationInvitationStatusResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReplaceOrganizationInvitationStatusResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListOrganizationRolesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]struct {
		Description    *string `json:"description"`
		Id             string  `json:"id"`
		Name           string  `json:"name"`
		ResourceScopes []struct {
			Id       string `json:"id"`
			Name     string `json:"name"`
			Resource struct {
				Id   string `json:"id"`
				Name string `json:"name"`
			} `json:"resource"`
		} `json:"resourceScopes"`
		Scopes []struct {
			Id   string `json:"id"`
			Name string `json:"name"`
		} `json:"scopes"`
		TenantId string                       `json:"tenantId"`
		Type     ListOrganizationRoles200Type `json:"type"`
	}
}
type ListOrganizationRoles200Type string

// Status returns HTTPResponse.Status
func (r ListOrganizationRolesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListOrganizationRolesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateOrganizationRoleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *struct {
		Description *string                       `json:"description"`
		Id          string                        `json:"id"`
		Name        string                        `json:"name"`
		TenantId    string                        `json:"tenantId"`
		Type        CreateOrganizationRole201Type `json:"type"`
	}
}
type CreateOrganizationRole201Type string

// Status returns HTTPResponse.Status
func (r CreateOrganizationRoleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateOrganizationRoleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteOrganizationRoleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteOrganizationRoleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteOrganizationRoleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOrganizationRoleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Description *string                    `json:"description"`
		Id          string                     `json:"id"`
		Name        string                     `json:"name"`
		TenantId    string                     `json:"tenantId"`
		Type        GetOrganizationRole200Type `json:"type"`
	}
}
type GetOrganizationRole200Type string

// Status returns HTTPResponse.Status
func (r GetOrganizationRoleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOrganizationRoleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateOrganizationRoleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Description *string                       `json:"description"`
		Id          string                        `json:"id"`
		Name        string                        `json:"name"`
		TenantId    string                        `json:"tenantId"`
		Type        UpdateOrganizationRole200Type `json:"type"`
	}
}
type UpdateOrganizationRole200Type string

// Status returns HTTPResponse.Status
func (r UpdateOrganizationRoleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateOrganizationRoleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListOrganizationRoleResourceScopesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]struct {
		CreatedAt   float32 `json:"createdAt"`
		Description *string `json:"description"`
		Id          string  `json:"id"`
		Name        string  `json:"name"`
		ResourceId  string  `json:"resourceId"`
		TenantId    string  `json:"tenantId"`
	}
}

// Status returns HTTPResponse.Status
func (r ListOrganizationRoleResourceScopesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListOrganizationRoleResourceScopesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateOrganizationRoleResourceScopeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CreateOrganizationRoleResourceScopeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateOrganizationRoleResourceScopeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReplaceOrganizationRoleResourceScopesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ReplaceOrganizationRoleResourceScopesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReplaceOrganizationRoleResourceScopesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteOrganizationRoleResourceScopeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteOrganizationRoleResourceScopeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteOrganizationRoleResourceScopeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListOrganizationRoleScopesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]struct {
		Description *string `json:"description"`
		Id          string  `json:"id"`
		Name        string  `json:"name"`
		TenantId    string  `json:"tenantId"`
	}
}

// Status returns HTTPResponse.Status
func (r ListOrganizationRoleScopesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListOrganizationRoleScopesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateOrganizationRoleScopeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CreateOrganizationRoleScopeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateOrganizationRoleScopeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReplaceOrganizationRoleScopesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ReplaceOrganizationRoleScopesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReplaceOrganizationRoleScopesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteOrganizationRoleScopeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteOrganizationRoleScopeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteOrganizationRoleScopeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListOrganizationScopesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]struct {
		Description *string `json:"description"`
		Id          string  `json:"id"`
		Name        string  `json:"name"`
		TenantId    string  `json:"tenantId"`
	}
}

// Status returns HTTPResponse.Status
func (r ListOrganizationScopesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListOrganizationScopesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateOrganizationScopeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *struct {
		Description *string `json:"description"`
		Id          string  `json:"id"`
		Name        string  `json:"name"`
		TenantId    string  `json:"tenantId"`
	}
}

// Status returns HTTPResponse.Status
func (r CreateOrganizationScopeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateOrganizationScopeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteOrganizationScopeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteOrganizationScopeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteOrganizationScopeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOrganizationScopeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Description *string `json:"description"`
		Id          string  `json:"id"`
		Name        string  `json:"name"`
		TenantId    string  `json:"tenantId"`
	}
}

// Status returns HTTPResponse.Status
func (r GetOrganizationScopeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOrganizationScopeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateOrganizationScopeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Description *string `json:"description"`
		Id          string  `json:"id"`
		Name        string  `json:"name"`
		TenantId    string  `json:"tenantId"`
	}
}

// Status returns HTTPResponse.Status
func (r UpdateOrganizationScopeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateOrganizationScopeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListOrganizationsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]struct {
		Branding struct {
			DarkFavicon *string `json:"darkFavicon,omitempty"`
			DarkLogoUrl *string `json:"darkLogoUrl,omitempty"`
			Favicon     *string `json:"favicon,omitempty"`
			LogoUrl     *string `json:"logoUrl,omitempty"`
		} `json:"branding"`
		CreatedAt float32 `json:"createdAt"`

		// CustomData arbitrary
		CustomData    map[string]interface{} `json:"customData"`
		Description   *string                `json:"description"`
		FeaturedUsers *[]struct {
			Avatar *string `json:"avatar"`
			Id     string  `json:"id"`
			Name   *string `json:"name"`
		} `json:"featuredUsers,omitempty"`
		Id            string   `json:"id"`
		IsMfaRequired bool     `json:"isMfaRequired"`
		Name          string   `json:"name"`
		TenantId      string   `json:"tenantId"`
		UsersCount    *float32 `json:"usersCount,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ListOrganizationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListOrganizationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateOrganizationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *struct {
		Branding struct {
			DarkFavicon *string `json:"darkFavicon,omitempty"`
			DarkLogoUrl *string `json:"darkLogoUrl,omitempty"`
			Favicon     *string `json:"favicon,omitempty"`
			LogoUrl     *string `json:"logoUrl,omitempty"`
		} `json:"branding"`
		CreatedAt float32 `json:"createdAt"`

		// CustomData arbitrary
		CustomData    map[string]interface{} `json:"customData"`
		Description   *string                `json:"description"`
		Id            string                 `json:"id"`
		IsMfaRequired bool                   `json:"isMfaRequired"`
		Name          string                 `json:"name"`
		TenantId      string                 `json:"tenantId"`
	}
}

// Status returns HTTPResponse.Status
func (r CreateOrganizationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateOrganizationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteOrganizationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteOrganizationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteOrganizationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOrganizationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Branding struct {
			DarkFavicon *string `json:"darkFavicon,omitempty"`
			DarkLogoUrl *string `json:"darkLogoUrl,omitempty"`
			Favicon     *string `json:"favicon,omitempty"`
			LogoUrl     *string `json:"logoUrl,omitempty"`
		} `json:"branding"`
		CreatedAt float32 `json:"createdAt"`

		// CustomData arbitrary
		CustomData    map[string]interface{} `json:"customData"`
		Description   *string                `json:"description"`
		Id            string                 `json:"id"`
		IsMfaRequired bool                   `json:"isMfaRequired"`
		Name          string                 `json:"name"`
		TenantId      string                 `json:"tenantId"`
	}
}

// Status returns HTTPResponse.Status
func (r GetOrganizationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOrganizationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateOrganizationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Branding struct {
			DarkFavicon *string `json:"darkFavicon,omitempty"`
			DarkLogoUrl *string `json:"darkLogoUrl,omitempty"`
			Favicon     *string `json:"favicon,omitempty"`
			LogoUrl     *string `json:"logoUrl,omitempty"`
		} `json:"branding"`
		CreatedAt float32 `json:"createdAt"`

		// CustomData arbitrary
		CustomData    map[string]interface{} `json:"customData"`
		Description   *string                `json:"description"`
		Id            string                 `json:"id"`
		IsMfaRequired bool                   `json:"isMfaRequired"`
		Name          string                 `json:"name"`
		TenantId      string                 `json:"tenantId"`
	}
}

// Status returns HTTPResponse.Status
func (r UpdateOrganizationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateOrganizationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListOrganizationApplicationsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]struct {
		CreatedAt            float32 `json:"createdAt"`
		CustomClientMetadata struct {
			AlwaysIssueRefreshToken *bool     `json:"alwaysIssueRefreshToken,omitempty"`
			CorsAllowedOrigins      *[]string `json:"corsAllowedOrigins,omitempty"`
			IdTokenTtl              *float32  `json:"idTokenTtl,omitempty"`
			RefreshTokenTtl         *float32  `json:"refreshTokenTtl,omitempty"`
			RefreshTokenTtlInDays   *float32  `json:"refreshTokenTtlInDays,omitempty"`
			RotateRefreshToken      *bool     `json:"rotateRefreshToken,omitempty"`
			TenantId                *string   `json:"tenantId,omitempty"`
		} `json:"customClientMetadata"`

		// CustomData arbitrary
		CustomData         map[string]interface{} `json:"customData"`
		Description        *string                `json:"description"`
		Id                 string                 `json:"id"`
		IsThirdParty       bool                   `json:"isThirdParty"`
		Name               string                 `json:"name"`
		OidcClientMetadata struct {
			BackchannelLogoutSessionRequired *bool                                                                   `json:"backchannelLogoutSessionRequired,omitempty"`
			BackchannelLogoutUri             *string                                                                 `json:"backchannelLogoutUri,omitempty"`
			LogoUri                          *string                                                                 `json:"logoUri,omitempty"`
			PostLogoutRedirectUris           []string                                                                `json:"postLogoutRedirectUris"`
			RedirectUris                     []ListOrganizationApplications_200_OidcClientMetadata_RedirectUris_Item `json:"redirectUris"`
		} `json:"oidcClientMetadata"`
		OrganizationRoles []struct {
			Id   string `json:"id"`
			Name string `json:"name"`
		} `json:"organizationRoles"`
		ProtectedAppMetadata *struct {
			CustomDomains *[]struct {
				CloudflareData *struct {
					Id  string `json:"id"`
					Ssl struct {
						Status           string `json:"status"`
						ValidationErrors *[]struct {
							Message string `json:"message"`
						} `json:"validation_errors,omitempty"`
					} `json:"ssl"`
					Status             string    `json:"status"`
					VerificationErrors *[]string `json:"verification_errors,omitempty"`
				} `json:"cloudflareData"`
				DnsRecords []struct {
					Name  string `json:"name"`
					Type  string `json:"type"`
					Value string `json:"value"`
				} `json:"dnsRecords"`
				Domain       string                                                                 `json:"domain"`
				ErrorMessage *string                                                                `json:"errorMessage"`
				Status       ListOrganizationApplications200ProtectedAppMetadataCustomDomainsStatus `json:"status"`
			} `json:"customDomains,omitempty"`
			Host      string `json:"host"`
			Origin    string `json:"origin"`
			PageRules []struct {
				Path string `json:"path"`
			} `json:"pageRules"`
			SessionDuration float32 `json:"sessionDuration"`
		} `json:"protectedAppMetadata"`

		// Secret The internal client secret. Note it is only used for internal validation, and the actual secrets should be retrieved from `/api/applications/{id}/secrets` endpoints.
		// Deprecated:
		Secret   ApplicationLegacySecret             `json:"secret"`
		TenantId string                              `json:"tenantId"`
		Type     ListOrganizationApplications200Type `json:"type"`
	}
}
type ListOrganizationApplications200OidcClientMetadataRedirectUris0 = map[string]interface{}
type ListOrganizationApplications200OidcClientMetadataRedirectUris1 = map[string]interface{}
type ListOrganizationApplications_200_OidcClientMetadata_RedirectUris_Item struct {
	union json.RawMessage
}
type ListOrganizationApplications200ProtectedAppMetadataCustomDomainsStatus string
type ListOrganizationApplications200Type string

// Status returns HTTPResponse.Status
func (r ListOrganizationApplicationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListOrganizationApplicationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AddOrganizationApplicationsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r AddOrganizationApplicationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AddOrganizationApplicationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReplaceOrganizationApplicationsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ReplaceOrganizationApplicationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReplaceOrganizationApplicationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AssignOrganizationRolesToApplicationsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r AssignOrganizationRolesToApplicationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AssignOrganizationRolesToApplicationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteOrganizationApplicationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteOrganizationApplicationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteOrganizationApplicationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListOrganizationApplicationRolesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]struct {
		Description *string                                 `json:"description"`
		Id          string                                  `json:"id"`
		Name        string                                  `json:"name"`
		TenantId    string                                  `json:"tenantId"`
		Type        ListOrganizationApplicationRoles200Type `json:"type"`
	}
}
type ListOrganizationApplicationRoles200Type string

// Status returns HTTPResponse.Status
func (r ListOrganizationApplicationRolesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListOrganizationApplicationRolesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AssignOrganizationRolesToApplicationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r AssignOrganizationRolesToApplicationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AssignOrganizationRolesToApplicationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReplaceOrganizationApplicationRolesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ReplaceOrganizationApplicationRolesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReplaceOrganizationApplicationRolesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteOrganizationApplicationRoleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteOrganizationApplicationRoleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteOrganizationApplicationRoleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListOrganizationJitEmailDomainsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]struct {
		EmailDomain    string `json:"emailDomain"`
		OrganizationId string `json:"organizationId"`
		TenantId       string `json:"tenantId"`
	}
}

// Status returns HTTPResponse.Status
func (r ListOrganizationJitEmailDomainsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListOrganizationJitEmailDomainsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateOrganizationJitEmailDomainResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *struct {
		EmailDomain    string `json:"emailDomain"`
		OrganizationId string `json:"organizationId"`
		TenantId       string `json:"tenantId"`
	}
}

// Status returns HTTPResponse.Status
func (r CreateOrganizationJitEmailDomainResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateOrganizationJitEmailDomainResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReplaceOrganizationJitEmailDomainsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ReplaceOrganizationJitEmailDomainsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReplaceOrganizationJitEmailDomainsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteOrganizationJitEmailDomainResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteOrganizationJitEmailDomainResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteOrganizationJitEmailDomainResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListOrganizationJitRolesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]struct {
		Description *string                         `json:"description"`
		Id          string                          `json:"id"`
		Name        string                          `json:"name"`
		TenantId    string                          `json:"tenantId"`
		Type        ListOrganizationJitRoles200Type `json:"type"`
	}
}
type ListOrganizationJitRoles200Type string

// Status returns HTTPResponse.Status
func (r ListOrganizationJitRolesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListOrganizationJitRolesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateOrganizationJitRoleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CreateOrganizationJitRoleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateOrganizationJitRoleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReplaceOrganizationJitRolesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ReplaceOrganizationJitRolesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReplaceOrganizationJitRolesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteOrganizationJitRoleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteOrganizationJitRoleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteOrganizationJitRoleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListOrganizationJitSsoConnectorsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]struct {
		Branding struct {
			DarkLogo    *string `json:"darkLogo,omitempty"`
			DisplayName *string `json:"displayName,omitempty"`
			Logo        *string `json:"logo,omitempty"`
		} `json:"branding"`

		// Config arbitrary
		Config        map[string]interface{} `json:"config"`
		ConnectorName string                 `json:"connectorName"`
		CreatedAt     float32                `json:"createdAt"`
		Domains       []string               `json:"domains"`
		Id            string                 `json:"id"`
		ProviderName  string                 `json:"providerName"`
		SyncProfile   bool                   `json:"syncProfile"`
		TenantId      string                 `json:"tenantId"`
	}
}

// Status returns HTTPResponse.Status
func (r ListOrganizationJitSsoConnectorsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListOrganizationJitSsoConnectorsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateOrganizationJitSsoConnectorResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CreateOrganizationJitSsoConnectorResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateOrganizationJitSsoConnectorResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReplaceOrganizationJitSsoConnectorsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ReplaceOrganizationJitSsoConnectorsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReplaceOrganizationJitSsoConnectorsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteOrganizationJitSsoConnectorResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteOrganizationJitSsoConnectorResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteOrganizationJitSsoConnectorResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListOrganizationUsersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]struct {
		ApplicationId *string `json:"applicationId"`
		Avatar        *string `json:"avatar"`
		CreatedAt     float32 `json:"createdAt"`

		// CustomData arbitrary
		CustomData map[string]interface{} `json:"customData"`
		Id         string                 `json:"id"`
		Identities map[string]struct {
			// Details arbitrary
			Details *map[string]interface{} `json:"details,omitempty"`
			UserId  string                  `json:"userId"`
		} `json:"identities"`
		IsSuspended       bool     `json:"isSuspended"`
		LastSignInAt      *float32 `json:"lastSignInAt"`
		Name              *string  `json:"name"`
		OrganizationRoles []struct {
			Id   string `json:"id"`
			Name string `json:"name"`
		} `json:"organizationRoles"`
		PrimaryEmail *string `json:"primaryEmail"`
		PrimaryPhone *string `json:"primaryPhone"`
		Profile      struct {
			Address *struct {
				Country       *string `json:"country,omitempty"`
				Formatted     *string `json:"formatted,omitempty"`
				Locality      *string `json:"locality,omitempty"`
				PostalCode    *string `json:"postalCode,omitempty"`
				Region        *string `json:"region,omitempty"`
				StreetAddress *string `json:"streetAddress,omitempty"`
			} `json:"address,omitempty"`
			Birthdate         *string `json:"birthdate,omitempty"`
			FamilyName        *string `json:"familyName,omitempty"`
			Gender            *string `json:"gender,omitempty"`
			GivenName         *string `json:"givenName,omitempty"`
			Locale            *string `json:"locale,omitempty"`
			MiddleName        *string `json:"middleName,omitempty"`
			Nickname          *string `json:"nickname,omitempty"`
			PreferredUsername *string `json:"preferredUsername,omitempty"`
			Profile           *string `json:"profile,omitempty"`
			Website           *string `json:"website,omitempty"`
			Zoneinfo          *string `json:"zoneinfo,omitempty"`
		} `json:"profile"`
		UpdatedAt float32 `json:"updatedAt"`
		Username  *string `json:"username"`
	}
}

// Status returns HTTPResponse.Status
func (r ListOrganizationUsersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListOrganizationUsersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AddOrganizationUsersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r AddOrganizationUsersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AddOrganizationUsersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReplaceOrganizationUsersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ReplaceOrganizationUsersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReplaceOrganizationUsersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AssignOrganizationRolesToUsersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r AssignOrganizationRolesToUsersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AssignOrganizationRolesToUsersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteOrganizationUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteOrganizationUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteOrganizationUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListOrganizationUserRolesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]struct {
		Description *string                          `json:"description"`
		Id          string                           `json:"id"`
		Name        string                           `json:"name"`
		TenantId    string                           `json:"tenantId"`
		Type        ListOrganizationUserRoles200Type `json:"type"`
	}
}
type ListOrganizationUserRoles200Type string

// Status returns HTTPResponse.Status
func (r ListOrganizationUserRolesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListOrganizationUserRolesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AssignOrganizationRolesToUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r AssignOrganizationRolesToUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AssignOrganizationRolesToUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReplaceOrganizationUserRolesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ReplaceOrganizationUserRolesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReplaceOrganizationUserRolesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteOrganizationUserRoleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteOrganizationUserRoleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteOrganizationUserRoleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListOrganizationUserScopesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]struct {
		Description *string `json:"description"`
		Id          string  `json:"id"`
		Name        string  `json:"name"`
		TenantId    string  `json:"tenantId"`
	}
}

// Status returns HTTPResponse.Status
func (r ListOrganizationUserScopesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListOrganizationUserScopesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListResourcesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]struct {
		AccessTokenTtl float32 `json:"accessTokenTtl"`
		Id             string  `json:"id"`
		Indicator      string  `json:"indicator"`
		IsDefault      bool    `json:"isDefault"`
		Name           string  `json:"name"`
		Scopes         *[]struct {
			CreatedAt   float32 `json:"createdAt"`
			Description *string `json:"description"`
			Id          string  `json:"id"`
			Name        string  `json:"name"`
			ResourceId  string  `json:"resourceId"`
			TenantId    string  `json:"tenantId"`
		} `json:"scopes,omitempty"`
		TenantId string `json:"tenantId"`
	}
}

// Status returns HTTPResponse.Status
func (r ListResourcesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListResourcesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateResourceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *struct {
		AccessTokenTtl float32 `json:"accessTokenTtl"`
		Id             string  `json:"id"`
		Indicator      string  `json:"indicator"`
		IsDefault      bool    `json:"isDefault"`
		Name           string  `json:"name"`
		Scopes         *[]struct {
			CreatedAt   float32 `json:"createdAt"`
			Description *string `json:"description"`
			Id          string  `json:"id"`
			Name        string  `json:"name"`
			ResourceId  string  `json:"resourceId"`
			TenantId    string  `json:"tenantId"`
		} `json:"scopes,omitempty"`
		TenantId string `json:"tenantId"`
	}
}

// Status returns HTTPResponse.Status
func (r CreateResourceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateResourceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteResourceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteResourceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteResourceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetResourceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		AccessTokenTtl float32 `json:"accessTokenTtl"`
		Id             string  `json:"id"`
		Indicator      string  `json:"indicator"`
		IsDefault      bool    `json:"isDefault"`
		Name           string  `json:"name"`
		TenantId       string  `json:"tenantId"`
	}
}

// Status returns HTTPResponse.Status
func (r GetResourceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetResourceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateResourceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		AccessTokenTtl float32 `json:"accessTokenTtl"`
		Id             string  `json:"id"`
		Indicator      string  `json:"indicator"`
		IsDefault      bool    `json:"isDefault"`
		Name           string  `json:"name"`
		TenantId       string  `json:"tenantId"`
	}
}

// Status returns HTTPResponse.Status
func (r UpdateResourceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateResourceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateResourceIsDefaultResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		AccessTokenTtl float32 `json:"accessTokenTtl"`
		Id             string  `json:"id"`
		Indicator      string  `json:"indicator"`
		IsDefault      bool    `json:"isDefault"`
		Name           string  `json:"name"`
		TenantId       string  `json:"tenantId"`
	}
}

// Status returns HTTPResponse.Status
func (r UpdateResourceIsDefaultResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateResourceIsDefaultResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListResourceScopesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]struct {
		CreatedAt   float32 `json:"createdAt"`
		Description *string `json:"description"`
		Id          string  `json:"id"`
		Name        string  `json:"name"`
		ResourceId  string  `json:"resourceId"`
		TenantId    string  `json:"tenantId"`
	}
}

// Status returns HTTPResponse.Status
func (r ListResourceScopesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListResourceScopesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateResourceScopeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *struct {
		CreatedAt   float32 `json:"createdAt"`
		Description *string `json:"description"`
		Id          string  `json:"id"`
		Name        string  `json:"name"`
		ResourceId  string  `json:"resourceId"`
		TenantId    string  `json:"tenantId"`
	}
}

// Status returns HTTPResponse.Status
func (r CreateResourceScopeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateResourceScopeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteResourceScopeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteResourceScopeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteResourceScopeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateResourceScopeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		CreatedAt   float32 `json:"createdAt"`
		Description *string `json:"description"`
		Id          string  `json:"id"`
		Name        string  `json:"name"`
		ResourceId  string  `json:"resourceId"`
		TenantId    string  `json:"tenantId"`
	}
}

// Status returns HTTPResponse.Status
func (r UpdateResourceScopeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateResourceScopeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListRolesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]struct {
		ApplicationsCount    float32 `json:"applicationsCount"`
		Description          string  `json:"description"`
		FeaturedApplications []struct {
			Id   string                               `json:"id"`
			Name string                               `json:"name"`
			Type ListRoles200FeaturedApplicationsType `json:"type"`
		} `json:"featuredApplications"`
		FeaturedUsers []struct {
			Avatar *string `json:"avatar"`
			Id     string  `json:"id"`
			Name   *string `json:"name"`
		} `json:"featuredUsers"`
		Id         string           `json:"id"`
		IsDefault  bool             `json:"isDefault"`
		Name       string           `json:"name"`
		TenantId   string           `json:"tenantId"`
		Type       ListRoles200Type `json:"type"`
		UsersCount float32          `json:"usersCount"`
	}
}
type ListRoles200FeaturedApplicationsType string
type ListRoles200Type string

// Status returns HTTPResponse.Status
func (r ListRolesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListRolesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateRoleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Description string            `json:"description"`
		Id          string            `json:"id"`
		IsDefault   bool              `json:"isDefault"`
		Name        string            `json:"name"`
		TenantId    string            `json:"tenantId"`
		Type        CreateRole200Type `json:"type"`
	}
}
type CreateRole200Type string

// Status returns HTTPResponse.Status
func (r CreateRoleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateRoleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteRoleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteRoleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteRoleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRoleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Description string         `json:"description"`
		Id          string         `json:"id"`
		IsDefault   bool           `json:"isDefault"`
		Name        string         `json:"name"`
		TenantId    string         `json:"tenantId"`
		Type        GetRole200Type `json:"type"`
	}
}
type GetRole200Type string

// Status returns HTTPResponse.Status
func (r GetRoleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRoleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateRoleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Description string            `json:"description"`
		Id          string            `json:"id"`
		IsDefault   bool              `json:"isDefault"`
		Name        string            `json:"name"`
		TenantId    string            `json:"tenantId"`
		Type        UpdateRole200Type `json:"type"`
	}
}
type UpdateRole200Type string

// Status returns HTTPResponse.Status
func (r UpdateRoleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateRoleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListRoleApplicationsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]struct {
		CreatedAt            float32 `json:"createdAt"`
		CustomClientMetadata struct {
			AlwaysIssueRefreshToken *bool     `json:"alwaysIssueRefreshToken,omitempty"`
			CorsAllowedOrigins      *[]string `json:"corsAllowedOrigins,omitempty"`
			IdTokenTtl              *float32  `json:"idTokenTtl,omitempty"`
			RefreshTokenTtl         *float32  `json:"refreshTokenTtl,omitempty"`
			RefreshTokenTtlInDays   *float32  `json:"refreshTokenTtlInDays,omitempty"`
			RotateRefreshToken      *bool     `json:"rotateRefreshToken,omitempty"`
			TenantId                *string   `json:"tenantId,omitempty"`
		} `json:"customClientMetadata"`

		// CustomData arbitrary
		CustomData         map[string]interface{} `json:"customData"`
		Description        *string                `json:"description"`
		Id                 string                 `json:"id"`
		IsThirdParty       bool                   `json:"isThirdParty"`
		Name               string                 `json:"name"`
		OidcClientMetadata struct {
			BackchannelLogoutSessionRequired *bool                                                           `json:"backchannelLogoutSessionRequired,omitempty"`
			BackchannelLogoutUri             *string                                                         `json:"backchannelLogoutUri,omitempty"`
			LogoUri                          *string                                                         `json:"logoUri,omitempty"`
			PostLogoutRedirectUris           []string                                                        `json:"postLogoutRedirectUris"`
			RedirectUris                     []ListRoleApplications_200_OidcClientMetadata_RedirectUris_Item `json:"redirectUris"`
		} `json:"oidcClientMetadata"`
		ProtectedAppMetadata *struct {
			CustomDomains *[]struct {
				CloudflareData *struct {
					Id  string `json:"id"`
					Ssl struct {
						Status           string `json:"status"`
						ValidationErrors *[]struct {
							Message string `json:"message"`
						} `json:"validation_errors,omitempty"`
					} `json:"ssl"`
					Status             string    `json:"status"`
					VerificationErrors *[]string `json:"verification_errors,omitempty"`
				} `json:"cloudflareData"`
				DnsRecords []struct {
					Name  string `json:"name"`
					Type  string `json:"type"`
					Value string `json:"value"`
				} `json:"dnsRecords"`
				Domain       string                                                         `json:"domain"`
				ErrorMessage *string                                                        `json:"errorMessage"`
				Status       ListRoleApplications200ProtectedAppMetadataCustomDomainsStatus `json:"status"`
			} `json:"customDomains,omitempty"`
			Host      string `json:"host"`
			Origin    string `json:"origin"`
			PageRules []struct {
				Path string `json:"path"`
			} `json:"pageRules"`
			SessionDuration float32 `json:"sessionDuration"`
		} `json:"protectedAppMetadata"`
		Secret   string                      `json:"secret"`
		TenantId string                      `json:"tenantId"`
		Type     ListRoleApplications200Type `json:"type"`
	}
}
type ListRoleApplications200OidcClientMetadataRedirectUris0 = map[string]interface{}
type ListRoleApplications200OidcClientMetadataRedirectUris1 = map[string]interface{}
type ListRoleApplications_200_OidcClientMetadata_RedirectUris_Item struct {
	union json.RawMessage
}
type ListRoleApplications200ProtectedAppMetadataCustomDomainsStatus string
type ListRoleApplications200Type string

// Status returns HTTPResponse.Status
func (r ListRoleApplicationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListRoleApplicationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateRoleApplicationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CreateRoleApplicationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateRoleApplicationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteRoleApplicationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteRoleApplicationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteRoleApplicationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListRoleScopesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]struct {
		CreatedAt   float32 `json:"createdAt"`
		Description *string `json:"description"`
		Id          string  `json:"id"`
		Name        string  `json:"name"`
		Resource    struct {
			AccessTokenTtl float32 `json:"accessTokenTtl"`
			Id             string  `json:"id"`
			Indicator      string  `json:"indicator"`
			IsDefault      bool    `json:"isDefault"`
			Name           string  `json:"name"`
			TenantId       string  `json:"tenantId"`
		} `json:"resource"`
		ResourceId string `json:"resourceId"`
		TenantId   string `json:"tenantId"`
	}
}

// Status returns HTTPResponse.Status
func (r ListRoleScopesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListRoleScopesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateRoleScopeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *[]struct {
		CreatedAt   float32 `json:"createdAt"`
		Description *string `json:"description"`
		Id          string  `json:"id"`
		Name        string  `json:"name"`
		ResourceId  string  `json:"resourceId"`
		TenantId    string  `json:"tenantId"`
	}
}

// Status returns HTTPResponse.Status
func (r CreateRoleScopeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateRoleScopeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteRoleScopeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteRoleScopeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteRoleScopeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListRoleUsersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]struct {
		ApplicationId *string `json:"applicationId"`
		Avatar        *string `json:"avatar"`
		CreatedAt     float32 `json:"createdAt"`

		// CustomData arbitrary
		CustomData  map[string]interface{} `json:"customData"`
		HasPassword *bool                  `json:"hasPassword,omitempty"`
		Id          string                 `json:"id"`
		Identities  map[string]struct {
			// Details arbitrary
			Details *map[string]interface{} `json:"details,omitempty"`
			UserId  string                  `json:"userId"`
		} `json:"identities"`
		IsSuspended  bool     `json:"isSuspended"`
		LastSignInAt *float32 `json:"lastSignInAt"`
		Name         *string  `json:"name"`
		PrimaryEmail *string  `json:"primaryEmail"`
		PrimaryPhone *string  `json:"primaryPhone"`
		Profile      struct {
			Address *struct {
				Country       *string `json:"country,omitempty"`
				Formatted     *string `json:"formatted,omitempty"`
				Locality      *string `json:"locality,omitempty"`
				PostalCode    *string `json:"postalCode,omitempty"`
				Region        *string `json:"region,omitempty"`
				StreetAddress *string `json:"streetAddress,omitempty"`
			} `json:"address,omitempty"`
			Birthdate         *string `json:"birthdate,omitempty"`
			FamilyName        *string `json:"familyName,omitempty"`
			Gender            *string `json:"gender,omitempty"`
			GivenName         *string `json:"givenName,omitempty"`
			Locale            *string `json:"locale,omitempty"`
			MiddleName        *string `json:"middleName,omitempty"`
			Nickname          *string `json:"nickname,omitempty"`
			PreferredUsername *string `json:"preferredUsername,omitempty"`
			Profile           *string `json:"profile,omitempty"`
			Website           *string `json:"website,omitempty"`
			Zoneinfo          *string `json:"zoneinfo,omitempty"`
		} `json:"profile"`
		SsoIdentities *[]struct {
			CreatedAt float32 `json:"createdAt"`

			// Detail arbitrary
			Detail         map[string]interface{} `json:"detail"`
			Id             string                 `json:"id"`
			IdentityId     string                 `json:"identityId"`
			Issuer         string                 `json:"issuer"`
			SsoConnectorId string                 `json:"ssoConnectorId"`
			TenantId       string                 `json:"tenantId"`
			UpdatedAt      float32                `json:"updatedAt"`
			UserId         string                 `json:"userId"`
		} `json:"ssoIdentities,omitempty"`
		UpdatedAt float32 `json:"updatedAt"`
		Username  *string `json:"username"`
	}
}

// Status returns HTTPResponse.Status
func (r ListRoleUsersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListRoleUsersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateRoleUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CreateRoleUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateRoleUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteRoleUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteRoleUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteRoleUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateSamlApplicationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *struct {
		AcsUrl *struct {
			Binding CreateSamlApplication201AcsUrlBinding `json:"binding"`
			Url     string                                `json:"url"`
		} `json:"acsUrl"`
		AttributeMapping struct {
			Address             *string `json:"address,omitempty"`
			Birthdate           *string `json:"birthdate,omitempty"`
			CreatedAt           *string `json:"created_at,omitempty"`
			CustomData          *string `json:"custom_data,omitempty"`
			Email               *string `json:"email,omitempty"`
			EmailVerified       *string `json:"email_verified,omitempty"`
			FamilyName          *string `json:"family_name,omitempty"`
			Gender              *string `json:"gender,omitempty"`
			GivenName           *string `json:"given_name,omitempty"`
			Identities          *string `json:"identities,omitempty"`
			Locale              *string `json:"locale,omitempty"`
			MiddleName          *string `json:"middle_name,omitempty"`
			Name                *string `json:"name,omitempty"`
			Nickname            *string `json:"nickname,omitempty"`
			OrganizationData    *string `json:"organization_data,omitempty"`
			OrganizationRoles   *string `json:"organization_roles,omitempty"`
			Organizations       *string `json:"organizations,omitempty"`
			PhoneNumber         *string `json:"phone_number,omitempty"`
			PhoneNumberVerified *string `json:"phone_number_verified,omitempty"`
			Picture             *string `json:"picture,omitempty"`
			PreferredUsername   *string `json:"preferred_username,omitempty"`
			Profile             *string `json:"profile,omitempty"`
			Roles               *string `json:"roles,omitempty"`
			SsoIdentities       *string `json:"sso_identities,omitempty"`
			Sub                 *string `json:"sub,omitempty"`
			UpdatedAt           *string `json:"updated_at,omitempty"`
			Username            *string `json:"username,omitempty"`
			Website             *string `json:"website,omitempty"`
			Zoneinfo            *string `json:"zoneinfo,omitempty"`
		} `json:"attributeMapping"`
		CreatedAt float32 `json:"createdAt"`

		// CustomData arbitrary
		CustomData  map[string]interface{} `json:"customData"`
		Description *string                `json:"description"`

		// Encryption Validator function
		Encryption   *map[string]interface{}              `json:"encryption"`
		EntityId     *string                              `json:"entityId"`
		Id           string                               `json:"id"`
		IsThirdParty bool                                 `json:"isThirdParty"`
		Name         string                               `json:"name"`
		NameIdFormat CreateSamlApplication201NameIdFormat `json:"nameIdFormat"`
		TenantId     string                               `json:"tenantId"`
		Type         CreateSamlApplication201Type         `json:"type"`
	}
}
type CreateSamlApplication201AcsUrlBinding string
type CreateSamlApplication201NameIdFormat string
type CreateSamlApplication201Type string

// Status returns HTTPResponse.Status
func (r CreateSamlApplicationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateSamlApplicationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteSamlApplicationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteSamlApplicationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteSamlApplicationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSamlApplicationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		AcsUrl *struct {
			Binding GetSamlApplication200AcsUrlBinding `json:"binding"`
			Url     string                             `json:"url"`
		} `json:"acsUrl"`
		AttributeMapping struct {
			Address             *string `json:"address,omitempty"`
			Birthdate           *string `json:"birthdate,omitempty"`
			CreatedAt           *string `json:"created_at,omitempty"`
			CustomData          *string `json:"custom_data,omitempty"`
			Email               *string `json:"email,omitempty"`
			EmailVerified       *string `json:"email_verified,omitempty"`
			FamilyName          *string `json:"family_name,omitempty"`
			Gender              *string `json:"gender,omitempty"`
			GivenName           *string `json:"given_name,omitempty"`
			Identities          *string `json:"identities,omitempty"`
			Locale              *string `json:"locale,omitempty"`
			MiddleName          *string `json:"middle_name,omitempty"`
			Name                *string `json:"name,omitempty"`
			Nickname            *string `json:"nickname,omitempty"`
			OrganizationData    *string `json:"organization_data,omitempty"`
			OrganizationRoles   *string `json:"organization_roles,omitempty"`
			Organizations       *string `json:"organizations,omitempty"`
			PhoneNumber         *string `json:"phone_number,omitempty"`
			PhoneNumberVerified *string `json:"phone_number_verified,omitempty"`
			Picture             *string `json:"picture,omitempty"`
			PreferredUsername   *string `json:"preferred_username,omitempty"`
			Profile             *string `json:"profile,omitempty"`
			Roles               *string `json:"roles,omitempty"`
			SsoIdentities       *string `json:"sso_identities,omitempty"`
			Sub                 *string `json:"sub,omitempty"`
			UpdatedAt           *string `json:"updated_at,omitempty"`
			Username            *string `json:"username,omitempty"`
			Website             *string `json:"website,omitempty"`
			Zoneinfo            *string `json:"zoneinfo,omitempty"`
		} `json:"attributeMapping"`
		CreatedAt float32 `json:"createdAt"`

		// CustomData arbitrary
		CustomData  map[string]interface{} `json:"customData"`
		Description *string                `json:"description"`

		// Encryption Validator function
		Encryption   *map[string]interface{}           `json:"encryption"`
		EntityId     *string                           `json:"entityId"`
		Id           string                            `json:"id"`
		IsThirdParty bool                              `json:"isThirdParty"`
		Name         string                            `json:"name"`
		NameIdFormat GetSamlApplication200NameIdFormat `json:"nameIdFormat"`
		TenantId     string                            `json:"tenantId"`
		Type         GetSamlApplication200Type         `json:"type"`
	}
}
type GetSamlApplication200AcsUrlBinding string
type GetSamlApplication200NameIdFormat string
type GetSamlApplication200Type string

// Status returns HTTPResponse.Status
func (r GetSamlApplicationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSamlApplicationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateSamlApplicationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		AcsUrl *struct {
			Binding UpdateSamlApplication200AcsUrlBinding `json:"binding"`
			Url     string                                `json:"url"`
		} `json:"acsUrl"`
		AttributeMapping struct {
			Address             *string `json:"address,omitempty"`
			Birthdate           *string `json:"birthdate,omitempty"`
			CreatedAt           *string `json:"created_at,omitempty"`
			CustomData          *string `json:"custom_data,omitempty"`
			Email               *string `json:"email,omitempty"`
			EmailVerified       *string `json:"email_verified,omitempty"`
			FamilyName          *string `json:"family_name,omitempty"`
			Gender              *string `json:"gender,omitempty"`
			GivenName           *string `json:"given_name,omitempty"`
			Identities          *string `json:"identities,omitempty"`
			Locale              *string `json:"locale,omitempty"`
			MiddleName          *string `json:"middle_name,omitempty"`
			Name                *string `json:"name,omitempty"`
			Nickname            *string `json:"nickname,omitempty"`
			OrganizationData    *string `json:"organization_data,omitempty"`
			OrganizationRoles   *string `json:"organization_roles,omitempty"`
			Organizations       *string `json:"organizations,omitempty"`
			PhoneNumber         *string `json:"phone_number,omitempty"`
			PhoneNumberVerified *string `json:"phone_number_verified,omitempty"`
			Picture             *string `json:"picture,omitempty"`
			PreferredUsername   *string `json:"preferred_username,omitempty"`
			Profile             *string `json:"profile,omitempty"`
			Roles               *string `json:"roles,omitempty"`
			SsoIdentities       *string `json:"sso_identities,omitempty"`
			Sub                 *string `json:"sub,omitempty"`
			UpdatedAt           *string `json:"updated_at,omitempty"`
			Username            *string `json:"username,omitempty"`
			Website             *string `json:"website,omitempty"`
			Zoneinfo            *string `json:"zoneinfo,omitempty"`
		} `json:"attributeMapping"`
		CreatedAt float32 `json:"createdAt"`

		// CustomData arbitrary
		CustomData  map[string]interface{} `json:"customData"`
		Description *string                `json:"description"`

		// Encryption Validator function
		Encryption   *map[string]interface{}              `json:"encryption"`
		EntityId     *string                              `json:"entityId"`
		Id           string                               `json:"id"`
		IsThirdParty bool                                 `json:"isThirdParty"`
		Name         string                               `json:"name"`
		NameIdFormat UpdateSamlApplication200NameIdFormat `json:"nameIdFormat"`
		TenantId     string                               `json:"tenantId"`
		Type         UpdateSamlApplication200Type         `json:"type"`
	}
}
type UpdateSamlApplication200AcsUrlBinding string
type UpdateSamlApplication200NameIdFormat string
type UpdateSamlApplication200Type string

// Status returns HTTPResponse.Status
func (r UpdateSamlApplicationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateSamlApplicationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSamlApplicationCallbackResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetSamlApplicationCallbackResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSamlApplicationCallbackResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListSamlApplicationMetadataResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *string
	XML200       *string
}

// Status returns HTTPResponse.Status
func (r ListSamlApplicationMetadataResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListSamlApplicationMetadataResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListSamlApplicationSecretsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]struct {
		Active bool `json:"active"`

		// Certificate The X.509 certificate in PEM format.
		Certificate string  `json:"certificate"`
		CreatedAt   float32 `json:"createdAt"`

		// ExpiresAt The expiration time of the certificate.
		ExpiresAt time.Time `json:"expiresAt"`

		// Fingerprint The SHA-256 fingerprint of the certificate.
		Fingerprint  *string `json:"fingerprint,omitempty"`
		Fingerprints struct {
			Sha256 struct {
				Formatted   string `json:"formatted"`
				Unformatted string `json:"unformatted"`
			} `json:"sha256"`
		} `json:"fingerprints"`

		// Id The ID of the signing certificate.
		Id string `json:"id"`

		// IsActive Whether this certificate is currently active.
		IsActive *bool `json:"isActive,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ListSamlApplicationSecretsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListSamlApplicationSecretsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateSamlApplicationSecretResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *struct {
		Active       bool    `json:"active"`
		Certificate  string  `json:"certificate"`
		CreatedAt    float32 `json:"createdAt"`
		ExpiresAt    float32 `json:"expiresAt"`
		Fingerprints struct {
			Sha256 struct {
				Formatted   string `json:"formatted"`
				Unformatted string `json:"unformatted"`
			} `json:"sha256"`
		} `json:"fingerprints"`
		Id string `json:"id"`
	}
}

// Status returns HTTPResponse.Status
func (r CreateSamlApplicationSecretResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateSamlApplicationSecretResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteSamlApplicationSecretResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteSamlApplicationSecretResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteSamlApplicationSecretResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateSamlApplicationSecretResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Active       bool    `json:"active"`
		Certificate  string  `json:"certificate"`
		CreatedAt    float32 `json:"createdAt"`
		ExpiresAt    float32 `json:"expiresAt"`
		Fingerprints struct {
			Sha256 struct {
				Formatted   string `json:"formatted"`
				Unformatted string `json:"unformatted"`
			} `json:"sha256"`
		} `json:"fingerprints"`
		Id string `json:"id"`
	}
}

// Status returns HTTPResponse.Status
func (r UpdateSamlApplicationSecretResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateSamlApplicationSecretResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSamlAuthnResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetSamlAuthnResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSamlAuthnResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateSamlAuthnResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CreateSamlAuthnResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateSamlAuthnResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteSentinelActivitiesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteSentinelActivitiesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteSentinelActivitiesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSignInExpResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		AgreeToTermsPolicy GetSignInExp200AgreeToTermsPolicy `json:"agreeToTermsPolicy"`
		Branding           struct {
			DarkFavicon *string `json:"darkFavicon,omitempty"`
			DarkLogoUrl *string `json:"darkLogoUrl,omitempty"`
			Favicon     *string `json:"favicon,omitempty"`
			LogoUrl     *string `json:"logoUrl,omitempty"`
		} `json:"branding"`
		CaptchaPolicy struct {
			Enabled *bool `json:"enabled,omitempty"`
		} `json:"captchaPolicy"`

		// Color The primary branding color for the sign-in page (both light/dark mode).
		Color struct {
			DarkPrimaryColor  string `json:"darkPrimaryColor"`
			IsDarkModeEnabled bool   `json:"isDarkModeEnabled"`
			PrimaryColor      string `json:"primaryColor"`
		} `json:"color"`

		// CustomContent Custom content to display on experience flow pages. the page pathname will be the config key, the content will be the config value.
		CustomContent  map[string]string `json:"customContent"`
		CustomCss      *string           `json:"customCss"`
		CustomUiAssets *struct {
			CreatedAt float32 `json:"createdAt"`
			Id        string  `json:"id"`
		} `json:"customUiAssets"`

		// EmailBlocklistPolicy Define email restriction policies. Users will be prohibited from registering or linking any email addresses that are included in the blocklist.
		EmailBlocklistPolicy struct {
			// BlockDisposableAddress Cloud only.  Whether to block disposable email addresses. Once enabled, Logto will check the email domain against a list of known disposable email domains. If the domain is found in the list, the email address will be blocked.
			BlockDisposableAddress   *interface{} `json:"blockDisposableAddress,omitempty"`
			BlockDisposableAddresses *bool        `json:"blockDisposableAddresses,omitempty"`

			// BlockSubaddressing Whether to block sub-addresses. (E.g., example+shopping@test.com)
			BlockSubaddressing *bool `json:"blockSubaddressing,omitempty"`

			// CustomBlocklist Custom blocklist of email addresses or domains.
			CustomBlocklist *[]string `json:"customBlocklist,omitempty"`
		} `json:"emailBlocklistPolicy"`
		Id string `json:"id"`

		// LanguageInfo The language detection policy for the sign-in page.
		LanguageInfo struct {
			AutoDetect       bool                                        `json:"autoDetect"`
			FallbackLanguage GetSignInExp200LanguageInfoFallbackLanguage `json:"fallbackLanguage"`
		} `json:"languageInfo"`

		// Mfa MFA settings
		Mfa struct {
			Factors                       []GetSignInExp200MfaFactors                      `json:"factors"`
			OrganizationRequiredMfaPolicy *GetSignInExp200MfaOrganizationRequiredMfaPolicy `json:"organizationRequiredMfaPolicy,omitempty"`
			Policy                        GetSignInExp200MfaPolicy                         `json:"policy"`
		} `json:"mfa"`

		// PasswordPolicy Password policies to adjust the password strength requirements.
		PasswordPolicy struct {
			CharacterTypes *struct {
				Min float32 `json:"min"`
			} `json:"characterTypes,omitempty"`
			Length *struct {
				Max float32 `json:"max"`
				Min float32 `json:"min"`
			} `json:"length,omitempty"`
			Rejects *struct {
				Pwned                 bool     `json:"pwned"`
				RepetitionAndSequence bool     `json:"repetitionAndSequence"`
				UserInfo              bool     `json:"userInfo"`
				Words                 []string `json:"words"`
			} `json:"rejects,omitempty"`
		} `json:"passwordPolicy"`
		PrivacyPolicyUrl *string `json:"privacyPolicyUrl"`

		// SentinelPolicy Custom sentinel policy settings. Use this field to customize the user lockout policy. The default value is 100 failed attempts within one hour. The user will be locked out for 60 minutes after exceeding the limit.
		SentinelPolicy struct {
			LockoutDuration *float32 `json:"lockoutDuration,omitempty"`
			MaxAttempts     *float32 `json:"maxAttempts,omitempty"`
		} `json:"sentinelPolicy"`

		// SignIn Sign-in method settings.
		SignIn struct {
			Methods []struct {
				Identifier        GetSignInExp200SignInMethodsIdentifier `json:"identifier"`
				IsPasswordPrimary bool                                   `json:"isPasswordPrimary"`
				Password          bool                                   `json:"password"`
				VerificationCode  bool                                   `json:"verificationCode"`
			} `json:"methods"`
		} `json:"signIn"`
		SignInMode GetSignInExp200SignInMode `json:"signInMode"`

		// SignUp Sign-up method settings.
		SignUp struct {
			// Identifiers Allowed identifiers when signing-up.
			Identifiers []GetSignInExp200SignUpIdentifiers `json:"identifiers"`

			// Password Whether the user is required to set a password when signing-up.
			Password bool `json:"password"`

			// SecondaryIdentifiers Additional identifiers required during sign-up. Once specified, users will be prompted to provide these identifiers when creating an account.
			SecondaryIdentifiers *[]struct {
				Identifier GetSignInExp_200_SignUp_SecondaryIdentifiers_Identifier `json:"identifier"`
				Verify     *bool                                                   `json:"verify,omitempty"`
			} `json:"secondaryIdentifiers,omitempty"`

			// Verify Whether the user is required to verify their email/phone when signing-up.
			Verify bool `json:"verify"`
		} `json:"signUp"`
		SingleSignOnEnabled bool `json:"singleSignOnEnabled"`
		SocialSignIn        struct {
			AutomaticAccountLinking *bool `json:"automaticAccountLinking,omitempty"`
		} `json:"socialSignIn"`

		// SocialSignInConnectorTargets Enabled social sign-in connectors, will displayed on the sign-in page.
		SocialSignInConnectorTargets []string `json:"socialSignInConnectorTargets"`

		// SupportEmail The support email address to display on the error pages.
		SupportEmail *string `json:"supportEmail"`

		// SupportWebsiteUrl The support website URL to display on the error pages.
		SupportWebsiteUrl *string `json:"supportWebsiteUrl"`
		TenantId          string  `json:"tenantId"`
		TermsOfUseUrl     *string `json:"termsOfUseUrl"`

		// UnknownSessionRedirectUrl The fallback URL to redirect users when the sign-in session does not exist or unknown. Client should initiates a new authentication flow after the redirection.
		UnknownSessionRedirectUrl *string `json:"unknownSessionRedirectUrl"`
	}
}
type GetSignInExp200AgreeToTermsPolicy string
type GetSignInExp200LanguageInfoFallbackLanguage string
type GetSignInExp200MfaFactors string
type GetSignInExp200MfaOrganizationRequiredMfaPolicy string
type GetSignInExp200MfaPolicy string
type GetSignInExp200SignInMethodsIdentifier string
type GetSignInExp200SignInMode string
type GetSignInExp200SignUpIdentifiers string
type GetSignInExp200SignUpSecondaryIdentifiersIdentifier0 string
type GetSignInExp200SignUpSecondaryIdentifiersIdentifier1 string
type GetSignInExp_200_SignUp_SecondaryIdentifiers_Identifier struct {
	union json.RawMessage
}

// Status returns HTTPResponse.Status
func (r GetSignInExpResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSignInExpResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateSignInExpResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		AgreeToTermsPolicy UpdateSignInExp200AgreeToTermsPolicy `json:"agreeToTermsPolicy"`
		Branding           struct {
			DarkFavicon *string `json:"darkFavicon,omitempty"`
			DarkLogoUrl *string `json:"darkLogoUrl,omitempty"`
			Favicon     *string `json:"favicon,omitempty"`
			LogoUrl     *string `json:"logoUrl,omitempty"`
		} `json:"branding"`
		CaptchaPolicy struct {
			Enabled *bool `json:"enabled,omitempty"`
		} `json:"captchaPolicy"`
		Color struct {
			DarkPrimaryColor  string `json:"darkPrimaryColor"`
			IsDarkModeEnabled bool   `json:"isDarkModeEnabled"`
			PrimaryColor      string `json:"primaryColor"`
		} `json:"color"`
		CustomContent  map[string]string `json:"customContent"`
		CustomCss      *string           `json:"customCss"`
		CustomUiAssets *struct {
			CreatedAt float32 `json:"createdAt"`
			Id        string  `json:"id"`
		} `json:"customUiAssets"`
		EmailBlocklistPolicy struct {
			BlockDisposableAddresses *bool     `json:"blockDisposableAddresses,omitempty"`
			BlockSubaddressing       *bool     `json:"blockSubaddressing,omitempty"`
			CustomBlocklist          *[]string `json:"customBlocklist,omitempty"`
		} `json:"emailBlocklistPolicy"`
		Id           string `json:"id"`
		LanguageInfo struct {
			AutoDetect       bool                                           `json:"autoDetect"`
			FallbackLanguage UpdateSignInExp200LanguageInfoFallbackLanguage `json:"fallbackLanguage"`
		} `json:"languageInfo"`
		Mfa struct {
			Factors                       []UpdateSignInExp200MfaFactors                      `json:"factors"`
			OrganizationRequiredMfaPolicy *UpdateSignInExp200MfaOrganizationRequiredMfaPolicy `json:"organizationRequiredMfaPolicy,omitempty"`
			Policy                        UpdateSignInExp200MfaPolicy                         `json:"policy"`
		} `json:"mfa"`
		PasswordPolicy struct {
			CharacterTypes *struct {
				Min float32 `json:"min"`
			} `json:"characterTypes,omitempty"`
			Length *struct {
				Max float32 `json:"max"`
				Min float32 `json:"min"`
			} `json:"length,omitempty"`
			Rejects *struct {
				Pwned                 bool     `json:"pwned"`
				RepetitionAndSequence bool     `json:"repetitionAndSequence"`
				UserInfo              bool     `json:"userInfo"`
				Words                 []string `json:"words"`
			} `json:"rejects,omitempty"`
		} `json:"passwordPolicy"`
		PrivacyPolicyUrl *string `json:"privacyPolicyUrl"`
		SentinelPolicy   struct {
			LockoutDuration *float32 `json:"lockoutDuration,omitempty"`
			MaxAttempts     *float32 `json:"maxAttempts,omitempty"`
		} `json:"sentinelPolicy"`
		SignIn struct {
			Methods []struct {
				Identifier        UpdateSignInExp200SignInMethodsIdentifier `json:"identifier"`
				IsPasswordPrimary bool                                      `json:"isPasswordPrimary"`
				Password          bool                                      `json:"password"`
				VerificationCode  bool                                      `json:"verificationCode"`
			} `json:"methods"`
		} `json:"signIn"`
		SignInMode UpdateSignInExp200SignInMode `json:"signInMode"`
		SignUp     struct {
			Identifiers          []UpdateSignInExp200SignUpIdentifiers `json:"identifiers"`
			Password             bool                                  `json:"password"`
			SecondaryIdentifiers *[]struct {
				Identifier UpdateSignInExp_200_SignUp_SecondaryIdentifiers_Identifier `json:"identifier"`
				Verify     *bool                                                      `json:"verify,omitempty"`
			} `json:"secondaryIdentifiers,omitempty"`
			Verify bool `json:"verify"`
		} `json:"signUp"`
		SingleSignOnEnabled bool `json:"singleSignOnEnabled"`
		SocialSignIn        struct {
			AutomaticAccountLinking *bool `json:"automaticAccountLinking,omitempty"`
		} `json:"socialSignIn"`
		SocialSignInConnectorTargets []string `json:"socialSignInConnectorTargets"`
		SupportEmail                 *string  `json:"supportEmail"`
		SupportWebsiteUrl            *string  `json:"supportWebsiteUrl"`
		TenantId                     string   `json:"tenantId"`
		TermsOfUseUrl                *string  `json:"termsOfUseUrl"`
		UnknownSessionRedirectUrl    *string  `json:"unknownSessionRedirectUrl"`
	}
}
type UpdateSignInExp200AgreeToTermsPolicy string
type UpdateSignInExp200LanguageInfoFallbackLanguage string
type UpdateSignInExp200MfaFactors string
type UpdateSignInExp200MfaOrganizationRequiredMfaPolicy string
type UpdateSignInExp200MfaPolicy string
type UpdateSignInExp200SignInMethodsIdentifier string
type UpdateSignInExp200SignInMode string
type UpdateSignInExp200SignUpIdentifiers string
type UpdateSignInExp200SignUpSecondaryIdentifiersIdentifier0 string
type UpdateSignInExp200SignUpSecondaryIdentifiersIdentifier1 string
type UpdateSignInExp_200_SignUp_SecondaryIdentifiers_Identifier struct {
	union json.RawMessage
}

// Status returns HTTPResponse.Status
func (r UpdateSignInExpResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateSignInExpResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CheckPasswordWithDefaultSignInExperienceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		union json.RawMessage
	}
}
type CheckPasswordWithDefaultSignInExperience2000 struct {
	Result bool `json:"result"`
}
type CheckPasswordWithDefaultSignInExperience2001 struct {
	Issues []struct {
		Code          string                  `json:"code"`
		Interpolation *map[string]interface{} `json:"interpolation,omitempty"`
	} `json:"issues"`
	Result bool `json:"result"`
}

// Status returns HTTPResponse.Status
func (r CheckPasswordWithDefaultSignInExperienceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CheckPasswordWithDefaultSignInExperienceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UploadCustomUiAssetsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		CustomUiAssetId string `json:"customUiAssetId"`
	}
}

// Status returns HTTPResponse.Status
func (r UploadCustomUiAssetsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UploadCustomUiAssetsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListSsoConnectorProvidersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]struct {
		Description  string                                   `json:"description"`
		Logo         string                                   `json:"logo"`
		LogoDark     string                                   `json:"logoDark"`
		Name         string                                   `json:"name"`
		ProviderName ListSsoConnectorProviders200ProviderName `json:"providerName"`
		ProviderType ListSsoConnectorProviders200ProviderType `json:"providerType"`
	}
}
type ListSsoConnectorProviders200ProviderName string
type ListSsoConnectorProviders200ProviderType string

// Status returns HTTPResponse.Status
func (r ListSsoConnectorProvidersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListSsoConnectorProvidersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListSsoConnectorsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]struct {
		Branding struct {
			DarkLogo    *string `json:"darkLogo,omitempty"`
			DisplayName *string `json:"displayName,omitempty"`
			Logo        *string `json:"logo,omitempty"`
		} `json:"branding"`

		// Config arbitrary
		Config           map[string]interface{}           `json:"config"`
		ConnectorName    string                           `json:"connectorName"`
		CreatedAt        float32                          `json:"createdAt"`
		Domains          []string                         `json:"domains"`
		Id               string                           `json:"id"`
		Name             string                           `json:"name"`
		ProviderConfig   *map[string]interface{}          `json:"providerConfig,omitempty"`
		ProviderLogo     string                           `json:"providerLogo"`
		ProviderLogoDark string                           `json:"providerLogoDark"`
		ProviderName     ListSsoConnectors200ProviderName `json:"providerName"`
		ProviderType     ListSsoConnectors200ProviderType `json:"providerType"`
		SyncProfile      bool                             `json:"syncProfile"`
		TenantId         string                           `json:"tenantId"`
	}
}
type ListSsoConnectors200ProviderName string
type ListSsoConnectors200ProviderType string

// Status returns HTTPResponse.Status
func (r ListSsoConnectorsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListSsoConnectorsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateSsoConnectorResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Branding struct {
			DarkLogo    *string `json:"darkLogo,omitempty"`
			DisplayName *string `json:"displayName,omitempty"`
			Logo        *string `json:"logo,omitempty"`
		} `json:"branding"`

		// Config arbitrary
		Config        map[string]interface{} `json:"config"`
		ConnectorName string                 `json:"connectorName"`
		CreatedAt     float32                `json:"createdAt"`
		Domains       []string               `json:"domains"`
		Id            string                 `json:"id"`
		ProviderName  string                 `json:"providerName"`
		SyncProfile   bool                   `json:"syncProfile"`
		TenantId      string                 `json:"tenantId"`
	}
}

// Status returns HTTPResponse.Status
func (r CreateSsoConnectorResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateSsoConnectorResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteSsoConnectorResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteSsoConnectorResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteSsoConnectorResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSsoConnectorResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Branding struct {
			DarkLogo    *string `json:"darkLogo,omitempty"`
			DisplayName *string `json:"displayName,omitempty"`
			Logo        *string `json:"logo,omitempty"`
		} `json:"branding"`

		// Config arbitrary
		Config           map[string]interface{}         `json:"config"`
		ConnectorName    string                         `json:"connectorName"`
		CreatedAt        float32                        `json:"createdAt"`
		Domains          []string                       `json:"domains"`
		Id               string                         `json:"id"`
		Name             string                         `json:"name"`
		ProviderConfig   *map[string]interface{}        `json:"providerConfig,omitempty"`
		ProviderLogo     string                         `json:"providerLogo"`
		ProviderLogoDark string                         `json:"providerLogoDark"`
		ProviderName     GetSsoConnector200ProviderName `json:"providerName"`
		ProviderType     GetSsoConnector200ProviderType `json:"providerType"`
		SyncProfile      bool                           `json:"syncProfile"`
		TenantId         string                         `json:"tenantId"`
	}
}
type GetSsoConnector200ProviderName string
type GetSsoConnector200ProviderType string

// Status returns HTTPResponse.Status
func (r GetSsoConnectorResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSsoConnectorResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateSsoConnectorResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Branding struct {
			DarkLogo    *string `json:"darkLogo,omitempty"`
			DisplayName *string `json:"displayName,omitempty"`
			Logo        *string `json:"logo,omitempty"`
		} `json:"branding"`

		// Config arbitrary
		Config           map[string]interface{}            `json:"config"`
		ConnectorName    string                            `json:"connectorName"`
		CreatedAt        float32                           `json:"createdAt"`
		Domains          []string                          `json:"domains"`
		Id               string                            `json:"id"`
		Name             string                            `json:"name"`
		ProviderConfig   *map[string]interface{}           `json:"providerConfig,omitempty"`
		ProviderLogo     string                            `json:"providerLogo"`
		ProviderLogoDark string                            `json:"providerLogoDark"`
		ProviderName     UpdateSsoConnector200ProviderName `json:"providerName"`
		ProviderType     UpdateSsoConnector200ProviderType `json:"providerType"`
		SyncProfile      bool                              `json:"syncProfile"`
		TenantId         string                            `json:"tenantId"`
	}
}
type UpdateSsoConnector200ProviderName string
type UpdateSsoConnector200ProviderType string

// Status returns HTTPResponse.Status
func (r UpdateSsoConnectorResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateSsoConnectorResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetStatusResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetStatusResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetStatusResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateSubjectTokenResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *struct {
		ExpiresIn    float32 `json:"expiresIn"`
		SubjectToken string  `json:"subjectToken"`
	}
}

// Status returns HTTPResponse.Status
func (r CreateSubjectTokenResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateSubjectTokenResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSwaggerJsonResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetSwaggerJsonResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSwaggerJsonResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSystemApplicationConfigResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		ProtectedApps struct {
			DefaultDomain string `json:"defaultDomain"`
		} `json:"protectedApps"`
	}
}

// Status returns HTTPResponse.Status
func (r GetSystemApplicationConfigResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSystemApplicationConfigResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateUserAssetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Url string `json:"url"`
	}
}

// Status returns HTTPResponse.Status
func (r CreateUserAssetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateUserAssetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUserAssetServiceStatusResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		AllowUploadMimeTypes *[]GetUserAssetServiceStatus200AllowUploadMimeTypes `json:"allowUploadMimeTypes,omitempty"`
		MaxUploadFileSize    *float32                                            `json:"maxUploadFileSize,omitempty"`
		Status               GetUserAssetServiceStatus_200_Status                `json:"status"`
	}
}
type GetUserAssetServiceStatus200AllowUploadMimeTypes string
type GetUserAssetServiceStatus200Status0 = string
type GetUserAssetServiceStatus200Status1 = string
type GetUserAssetServiceStatus_200_Status struct {
	union json.RawMessage
}

// Status returns HTTPResponse.Status
func (r GetUserAssetServiceStatusResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUserAssetServiceStatusResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListUsersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]struct {
		ApplicationId *string `json:"applicationId"`
		Avatar        *string `json:"avatar"`
		CreatedAt     float32 `json:"createdAt"`

		// CustomData arbitrary
		CustomData  map[string]interface{} `json:"customData"`
		HasPassword *bool                  `json:"hasPassword,omitempty"`
		Id          string                 `json:"id"`
		Identities  map[string]struct {
			// Details arbitrary
			Details *map[string]interface{} `json:"details,omitempty"`
			UserId  string                  `json:"userId"`
		} `json:"identities"`
		IsSuspended  bool     `json:"isSuspended"`
		LastSignInAt *float32 `json:"lastSignInAt"`
		Name         *string  `json:"name"`
		PrimaryEmail *string  `json:"primaryEmail"`
		PrimaryPhone *string  `json:"primaryPhone"`
		Profile      struct {
			Address *struct {
				Country       *string `json:"country,omitempty"`
				Formatted     *string `json:"formatted,omitempty"`
				Locality      *string `json:"locality,omitempty"`
				PostalCode    *string `json:"postalCode,omitempty"`
				Region        *string `json:"region,omitempty"`
				StreetAddress *string `json:"streetAddress,omitempty"`
			} `json:"address,omitempty"`
			Birthdate         *string `json:"birthdate,omitempty"`
			FamilyName        *string `json:"familyName,omitempty"`
			Gender            *string `json:"gender,omitempty"`
			GivenName         *string `json:"givenName,omitempty"`
			Locale            *string `json:"locale,omitempty"`
			MiddleName        *string `json:"middleName,omitempty"`
			Nickname          *string `json:"nickname,omitempty"`
			PreferredUsername *string `json:"preferredUsername,omitempty"`
			Profile           *string `json:"profile,omitempty"`
			Website           *string `json:"website,omitempty"`
			Zoneinfo          *string `json:"zoneinfo,omitempty"`
		} `json:"profile"`
		SsoIdentities *[]struct {
			CreatedAt float32 `json:"createdAt"`

			// Detail arbitrary
			Detail         map[string]interface{} `json:"detail"`
			Id             string                 `json:"id"`
			IdentityId     string                 `json:"identityId"`
			Issuer         string                 `json:"issuer"`
			SsoConnectorId string                 `json:"ssoConnectorId"`
			TenantId       string                 `json:"tenantId"`
			UpdatedAt      float32                `json:"updatedAt"`
			UserId         string                 `json:"userId"`
		} `json:"ssoIdentities,omitempty"`
		UpdatedAt float32 `json:"updatedAt"`
		Username  *string `json:"username"`
	}
}

// Status returns HTTPResponse.Status
func (r ListUsersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListUsersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		ApplicationId *string `json:"applicationId"`
		Avatar        *string `json:"avatar"`
		CreatedAt     float32 `json:"createdAt"`

		// CustomData arbitrary
		CustomData  map[string]interface{} `json:"customData"`
		HasPassword *bool                  `json:"hasPassword,omitempty"`
		Id          string                 `json:"id"`
		Identities  map[string]struct {
			// Details arbitrary
			Details *map[string]interface{} `json:"details,omitempty"`
			UserId  string                  `json:"userId"`
		} `json:"identities"`
		IsSuspended  bool     `json:"isSuspended"`
		LastSignInAt *float32 `json:"lastSignInAt"`
		Name         *string  `json:"name"`
		PrimaryEmail *string  `json:"primaryEmail"`
		PrimaryPhone *string  `json:"primaryPhone"`
		Profile      struct {
			Address *struct {
				Country       *string `json:"country,omitempty"`
				Formatted     *string `json:"formatted,omitempty"`
				Locality      *string `json:"locality,omitempty"`
				PostalCode    *string `json:"postalCode,omitempty"`
				Region        *string `json:"region,omitempty"`
				StreetAddress *string `json:"streetAddress,omitempty"`
			} `json:"address,omitempty"`
			Birthdate         *string `json:"birthdate,omitempty"`
			FamilyName        *string `json:"familyName,omitempty"`
			Gender            *string `json:"gender,omitempty"`
			GivenName         *string `json:"givenName,omitempty"`
			Locale            *string `json:"locale,omitempty"`
			MiddleName        *string `json:"middleName,omitempty"`
			Nickname          *string `json:"nickname,omitempty"`
			PreferredUsername *string `json:"preferredUsername,omitempty"`
			Profile           *string `json:"profile,omitempty"`
			Website           *string `json:"website,omitempty"`
			Zoneinfo          *string `json:"zoneinfo,omitempty"`
		} `json:"profile"`
		SsoIdentities *[]struct {
			CreatedAt float32 `json:"createdAt"`

			// Detail arbitrary
			Detail         map[string]interface{} `json:"detail"`
			Id             string                 `json:"id"`
			IdentityId     string                 `json:"identityId"`
			Issuer         string                 `json:"issuer"`
			SsoConnectorId string                 `json:"ssoConnectorId"`
			TenantId       string                 `json:"tenantId"`
			UpdatedAt      float32                `json:"updatedAt"`
			UserId         string                 `json:"userId"`
		} `json:"ssoIdentities,omitempty"`
		UpdatedAt float32 `json:"updatedAt"`
		Username  *string `json:"username"`
	}
}

// Status returns HTTPResponse.Status
func (r CreateUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		ApplicationId *string `json:"applicationId"`
		Avatar        *string `json:"avatar"`
		CreatedAt     float32 `json:"createdAt"`

		// CustomData arbitrary
		CustomData  map[string]interface{} `json:"customData"`
		HasPassword *bool                  `json:"hasPassword,omitempty"`
		Id          string                 `json:"id"`
		Identities  map[string]struct {
			// Details arbitrary
			Details *map[string]interface{} `json:"details,omitempty"`
			UserId  string                  `json:"userId"`
		} `json:"identities"`
		IsSuspended  bool     `json:"isSuspended"`
		LastSignInAt *float32 `json:"lastSignInAt"`
		Name         *string  `json:"name"`
		PrimaryEmail *string  `json:"primaryEmail"`
		PrimaryPhone *string  `json:"primaryPhone"`
		Profile      struct {
			Address *struct {
				Country       *string `json:"country,omitempty"`
				Formatted     *string `json:"formatted,omitempty"`
				Locality      *string `json:"locality,omitempty"`
				PostalCode    *string `json:"postalCode,omitempty"`
				Region        *string `json:"region,omitempty"`
				StreetAddress *string `json:"streetAddress,omitempty"`
			} `json:"address,omitempty"`
			Birthdate         *string `json:"birthdate,omitempty"`
			FamilyName        *string `json:"familyName,omitempty"`
			Gender            *string `json:"gender,omitempty"`
			GivenName         *string `json:"givenName,omitempty"`
			Locale            *string `json:"locale,omitempty"`
			MiddleName        *string `json:"middleName,omitempty"`
			Nickname          *string `json:"nickname,omitempty"`
			PreferredUsername *string `json:"preferredUsername,omitempty"`
			Profile           *string `json:"profile,omitempty"`
			Website           *string `json:"website,omitempty"`
			Zoneinfo          *string `json:"zoneinfo,omitempty"`
		} `json:"profile"`

		// SsoIdentities List of SSO identities associated with the user. Only available when the `includeSsoIdentities` query parameter is provided with a truthy value.
		SsoIdentities *[]struct {
			CreatedAt float32 `json:"createdAt"`

			// Detail arbitrary
			Detail         map[string]interface{} `json:"detail"`
			Id             string                 `json:"id"`
			IdentityId     string                 `json:"identityId"`
			Issuer         string                 `json:"issuer"`
			SsoConnectorId string                 `json:"ssoConnectorId"`
			TenantId       string                 `json:"tenantId"`
			UpdatedAt      float32                `json:"updatedAt"`
			UserId         string                 `json:"userId"`
		} `json:"ssoIdentities,omitempty"`
		UpdatedAt float32 `json:"updatedAt"`
		Username  *string `json:"username"`
	}
}

// Status returns HTTPResponse.Status
func (r GetUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		ApplicationId *string `json:"applicationId"`
		Avatar        *string `json:"avatar"`
		CreatedAt     float32 `json:"createdAt"`

		// CustomData arbitrary
		CustomData  map[string]interface{} `json:"customData"`
		HasPassword *bool                  `json:"hasPassword,omitempty"`
		Id          string                 `json:"id"`
		Identities  map[string]struct {
			// Details arbitrary
			Details *map[string]interface{} `json:"details,omitempty"`
			UserId  string                  `json:"userId"`
		} `json:"identities"`
		IsSuspended  bool     `json:"isSuspended"`
		LastSignInAt *float32 `json:"lastSignInAt"`
		Name         *string  `json:"name"`
		PrimaryEmail *string  `json:"primaryEmail"`
		PrimaryPhone *string  `json:"primaryPhone"`
		Profile      struct {
			Address *struct {
				Country       *string `json:"country,omitempty"`
				Formatted     *string `json:"formatted,omitempty"`
				Locality      *string `json:"locality,omitempty"`
				PostalCode    *string `json:"postalCode,omitempty"`
				Region        *string `json:"region,omitempty"`
				StreetAddress *string `json:"streetAddress,omitempty"`
			} `json:"address,omitempty"`
			Birthdate         *string `json:"birthdate,omitempty"`
			FamilyName        *string `json:"familyName,omitempty"`
			Gender            *string `json:"gender,omitempty"`
			GivenName         *string `json:"givenName,omitempty"`
			Locale            *string `json:"locale,omitempty"`
			MiddleName        *string `json:"middleName,omitempty"`
			Nickname          *string `json:"nickname,omitempty"`
			PreferredUsername *string `json:"preferredUsername,omitempty"`
			Profile           *string `json:"profile,omitempty"`
			Website           *string `json:"website,omitempty"`
			Zoneinfo          *string `json:"zoneinfo,omitempty"`
		} `json:"profile"`
		SsoIdentities *[]struct {
			CreatedAt float32 `json:"createdAt"`

			// Detail arbitrary
			Detail         map[string]interface{} `json:"detail"`
			Id             string                 `json:"id"`
			IdentityId     string                 `json:"identityId"`
			Issuer         string                 `json:"issuer"`
			SsoConnectorId string                 `json:"ssoConnectorId"`
			TenantId       string                 `json:"tenantId"`
			UpdatedAt      float32                `json:"updatedAt"`
			UserId         string                 `json:"userId"`
		} `json:"ssoIdentities,omitempty"`
		UpdatedAt float32 `json:"updatedAt"`
		Username  *string `json:"username"`
	}
}

// Status returns HTTPResponse.Status
func (r UpdateUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListUserCustomDataResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r ListUserCustomDataResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListUserCustomDataResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateUserCustomDataResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r UpdateUserCustomDataResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateUserCustomDataResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUserHasPasswordResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		HasPassword bool `json:"hasPassword"`
	}
}

// Status returns HTTPResponse.Status
func (r GetUserHasPasswordResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUserHasPasswordResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateUserIdentityResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]struct {
		// Details arbitrary
		Details *map[string]interface{} `json:"details,omitempty"`
		UserId  string                  `json:"userId"`
	}
}

// Status returns HTTPResponse.Status
func (r CreateUserIdentityResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateUserIdentityResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteUserIdentityResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		ApplicationId *string `json:"applicationId"`
		Avatar        *string `json:"avatar"`
		CreatedAt     float32 `json:"createdAt"`

		// CustomData arbitrary
		CustomData  map[string]interface{} `json:"customData"`
		HasPassword *bool                  `json:"hasPassword,omitempty"`
		Id          string                 `json:"id"`
		Identities  map[string]struct {
			// Details arbitrary
			Details *map[string]interface{} `json:"details,omitempty"`
			UserId  string                  `json:"userId"`
		} `json:"identities"`
		IsSuspended  bool     `json:"isSuspended"`
		LastSignInAt *float32 `json:"lastSignInAt"`
		Name         *string  `json:"name"`
		PrimaryEmail *string  `json:"primaryEmail"`
		PrimaryPhone *string  `json:"primaryPhone"`
		Profile      struct {
			Address *struct {
				Country       *string `json:"country,omitempty"`
				Formatted     *string `json:"formatted,omitempty"`
				Locality      *string `json:"locality,omitempty"`
				PostalCode    *string `json:"postalCode,omitempty"`
				Region        *string `json:"region,omitempty"`
				StreetAddress *string `json:"streetAddress,omitempty"`
			} `json:"address,omitempty"`
			Birthdate         *string `json:"birthdate,omitempty"`
			FamilyName        *string `json:"familyName,omitempty"`
			Gender            *string `json:"gender,omitempty"`
			GivenName         *string `json:"givenName,omitempty"`
			Locale            *string `json:"locale,omitempty"`
			MiddleName        *string `json:"middleName,omitempty"`
			Nickname          *string `json:"nickname,omitempty"`
			PreferredUsername *string `json:"preferredUsername,omitempty"`
			Profile           *string `json:"profile,omitempty"`
			Website           *string `json:"website,omitempty"`
			Zoneinfo          *string `json:"zoneinfo,omitempty"`
		} `json:"profile"`
		SsoIdentities *[]struct {
			CreatedAt float32 `json:"createdAt"`

			// Detail arbitrary
			Detail         map[string]interface{} `json:"detail"`
			Id             string                 `json:"id"`
			IdentityId     string                 `json:"identityId"`
			Issuer         string                 `json:"issuer"`
			SsoConnectorId string                 `json:"ssoConnectorId"`
			TenantId       string                 `json:"tenantId"`
			UpdatedAt      float32                `json:"updatedAt"`
			UserId         string                 `json:"userId"`
		} `json:"ssoIdentities,omitempty"`
		UpdatedAt float32 `json:"updatedAt"`
		Username  *string `json:"username"`
	}
}

// Status returns HTTPResponse.Status
func (r DeleteUserIdentityResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteUserIdentityResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReplaceUserIdentityResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]struct {
		// Details arbitrary
		Details *map[string]interface{} `json:"details,omitempty"`
		UserId  string                  `json:"userId"`
	}
	JSON201 *map[string]struct {
		// Details arbitrary
		Details *map[string]interface{} `json:"details,omitempty"`
		UserId  string                  `json:"userId"`
	}
}

// Status returns HTTPResponse.Status
func (r ReplaceUserIdentityResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReplaceUserIdentityResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateUserIsSuspendedResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		ApplicationId *string `json:"applicationId"`
		Avatar        *string `json:"avatar"`
		CreatedAt     float32 `json:"createdAt"`

		// CustomData arbitrary
		CustomData  map[string]interface{} `json:"customData"`
		HasPassword *bool                  `json:"hasPassword,omitempty"`
		Id          string                 `json:"id"`
		Identities  map[string]struct {
			// Details arbitrary
			Details *map[string]interface{} `json:"details,omitempty"`
			UserId  string                  `json:"userId"`
		} `json:"identities"`
		IsSuspended  bool     `json:"isSuspended"`
		LastSignInAt *float32 `json:"lastSignInAt"`
		Name         *string  `json:"name"`
		PrimaryEmail *string  `json:"primaryEmail"`
		PrimaryPhone *string  `json:"primaryPhone"`
		Profile      struct {
			Address *struct {
				Country       *string `json:"country,omitempty"`
				Formatted     *string `json:"formatted,omitempty"`
				Locality      *string `json:"locality,omitempty"`
				PostalCode    *string `json:"postalCode,omitempty"`
				Region        *string `json:"region,omitempty"`
				StreetAddress *string `json:"streetAddress,omitempty"`
			} `json:"address,omitempty"`
			Birthdate         *string `json:"birthdate,omitempty"`
			FamilyName        *string `json:"familyName,omitempty"`
			Gender            *string `json:"gender,omitempty"`
			GivenName         *string `json:"givenName,omitempty"`
			Locale            *string `json:"locale,omitempty"`
			MiddleName        *string `json:"middleName,omitempty"`
			Nickname          *string `json:"nickname,omitempty"`
			PreferredUsername *string `json:"preferredUsername,omitempty"`
			Profile           *string `json:"profile,omitempty"`
			Website           *string `json:"website,omitempty"`
			Zoneinfo          *string `json:"zoneinfo,omitempty"`
		} `json:"profile"`
		SsoIdentities *[]struct {
			CreatedAt float32 `json:"createdAt"`

			// Detail arbitrary
			Detail         map[string]interface{} `json:"detail"`
			Id             string                 `json:"id"`
			IdentityId     string                 `json:"identityId"`
			Issuer         string                 `json:"issuer"`
			SsoConnectorId string                 `json:"ssoConnectorId"`
			TenantId       string                 `json:"tenantId"`
			UpdatedAt      float32                `json:"updatedAt"`
			UserId         string                 `json:"userId"`
		} `json:"ssoIdentities,omitempty"`
		UpdatedAt float32 `json:"updatedAt"`
		Username  *string `json:"username"`
	}
}

// Status returns HTTPResponse.Status
func (r UpdateUserIsSuspendedResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateUserIsSuspendedResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListUserMfaVerificationsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]struct {
		Agent       *string                         `json:"agent,omitempty"`
		CreatedAt   string                          `json:"createdAt"`
		Id          string                          `json:"id"`
		Name        *string                         `json:"name,omitempty"`
		RemainCodes *float32                        `json:"remainCodes,omitempty"`
		Type        ListUserMfaVerifications200Type `json:"type"`
	}
}
type ListUserMfaVerifications200Type string

// Status returns HTTPResponse.Status
func (r ListUserMfaVerificationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListUserMfaVerificationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateUserMfaVerificationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		union json.RawMessage
	}
}
type CreateUserMfaVerification2000 struct {
	Secret       string `json:"secret"`
	SecretQrCode string `json:"secretQrCode"`
	Type         string `json:"type"`
}
type CreateUserMfaVerification2001 struct {
	Codes []string `json:"codes"`
	Type  string   `json:"type"`
}

// Status returns HTTPResponse.Status
func (r CreateUserMfaVerificationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateUserMfaVerificationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteUserMfaVerificationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteUserMfaVerificationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteUserMfaVerificationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListUserOrganizationsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]struct {
		Branding struct {
			DarkFavicon *string `json:"darkFavicon,omitempty"`
			DarkLogoUrl *string `json:"darkLogoUrl,omitempty"`
			Favicon     *string `json:"favicon,omitempty"`
			LogoUrl     *string `json:"logoUrl,omitempty"`
		} `json:"branding"`
		CreatedAt float32 `json:"createdAt"`

		// CustomData arbitrary
		CustomData        map[string]interface{} `json:"customData"`
		Description       *string                `json:"description"`
		Id                string                 `json:"id"`
		IsMfaRequired     bool                   `json:"isMfaRequired"`
		Name              string                 `json:"name"`
		OrganizationRoles []struct {
			Id   string `json:"id"`
			Name string `json:"name"`
		} `json:"organizationRoles"`
		TenantId string `json:"tenantId"`
	}
}

// Status returns HTTPResponse.Status
func (r ListUserOrganizationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListUserOrganizationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateUserPasswordResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		ApplicationId *string `json:"applicationId"`
		Avatar        *string `json:"avatar"`
		CreatedAt     float32 `json:"createdAt"`

		// CustomData arbitrary
		CustomData  map[string]interface{} `json:"customData"`
		HasPassword *bool                  `json:"hasPassword,omitempty"`
		Id          string                 `json:"id"`
		Identities  map[string]struct {
			// Details arbitrary
			Details *map[string]interface{} `json:"details,omitempty"`
			UserId  string                  `json:"userId"`
		} `json:"identities"`
		IsSuspended  bool     `json:"isSuspended"`
		LastSignInAt *float32 `json:"lastSignInAt"`
		Name         *string  `json:"name"`
		PrimaryEmail *string  `json:"primaryEmail"`
		PrimaryPhone *string  `json:"primaryPhone"`
		Profile      struct {
			Address *struct {
				Country       *string `json:"country,omitempty"`
				Formatted     *string `json:"formatted,omitempty"`
				Locality      *string `json:"locality,omitempty"`
				PostalCode    *string `json:"postalCode,omitempty"`
				Region        *string `json:"region,omitempty"`
				StreetAddress *string `json:"streetAddress,omitempty"`
			} `json:"address,omitempty"`
			Birthdate         *string `json:"birthdate,omitempty"`
			FamilyName        *string `json:"familyName,omitempty"`
			Gender            *string `json:"gender,omitempty"`
			GivenName         *string `json:"givenName,omitempty"`
			Locale            *string `json:"locale,omitempty"`
			MiddleName        *string `json:"middleName,omitempty"`
			Nickname          *string `json:"nickname,omitempty"`
			PreferredUsername *string `json:"preferredUsername,omitempty"`
			Profile           *string `json:"profile,omitempty"`
			Website           *string `json:"website,omitempty"`
			Zoneinfo          *string `json:"zoneinfo,omitempty"`
		} `json:"profile"`
		SsoIdentities *[]struct {
			CreatedAt float32 `json:"createdAt"`

			// Detail arbitrary
			Detail         map[string]interface{} `json:"detail"`
			Id             string                 `json:"id"`
			IdentityId     string                 `json:"identityId"`
			Issuer         string                 `json:"issuer"`
			SsoConnectorId string                 `json:"ssoConnectorId"`
			TenantId       string                 `json:"tenantId"`
			UpdatedAt      float32                `json:"updatedAt"`
			UserId         string                 `json:"userId"`
		} `json:"ssoIdentities,omitempty"`
		UpdatedAt float32 `json:"updatedAt"`
		Username  *string `json:"username"`
	}
}

// Status returns HTTPResponse.Status
func (r UpdateUserPasswordResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateUserPasswordResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type VerifyUserPasswordResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r VerifyUserPasswordResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r VerifyUserPasswordResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListUserPersonalAccessTokensResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]struct {
		CreatedAt float32  `json:"createdAt"`
		ExpiresAt *float32 `json:"expiresAt"`
		Name      string   `json:"name"`
		TenantId  string   `json:"tenantId"`
		UserId    string   `json:"userId"`
		Value     string   `json:"value"`
	}
}

// Status returns HTTPResponse.Status
func (r ListUserPersonalAccessTokensResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListUserPersonalAccessTokensResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateUserPersonalAccessTokenResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *struct {
		CreatedAt float32  `json:"createdAt"`
		ExpiresAt *float32 `json:"expiresAt"`
		Name      string   `json:"name"`
		TenantId  string   `json:"tenantId"`
		UserId    string   `json:"userId"`
		Value     string   `json:"value"`
	}
}

// Status returns HTTPResponse.Status
func (r CreateUserPersonalAccessTokenResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateUserPersonalAccessTokenResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteUserPersonalAccessTokenResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteUserPersonalAccessTokenResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteUserPersonalAccessTokenResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateUserPersonalAccessTokenResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		CreatedAt float32  `json:"createdAt"`
		ExpiresAt *float32 `json:"expiresAt"`
		Name      string   `json:"name"`
		TenantId  string   `json:"tenantId"`
		UserId    string   `json:"userId"`
		Value     string   `json:"value"`
	}
}

// Status returns HTTPResponse.Status
func (r UpdateUserPersonalAccessTokenResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateUserPersonalAccessTokenResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateUserProfileResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Address *struct {
			Country       *string `json:"country,omitempty"`
			Formatted     *string `json:"formatted,omitempty"`
			Locality      *string `json:"locality,omitempty"`
			PostalCode    *string `json:"postalCode,omitempty"`
			Region        *string `json:"region,omitempty"`
			StreetAddress *string `json:"streetAddress,omitempty"`
		} `json:"address,omitempty"`
		Birthdate         *string `json:"birthdate,omitempty"`
		FamilyName        *string `json:"familyName,omitempty"`
		Gender            *string `json:"gender,omitempty"`
		GivenName         *string `json:"givenName,omitempty"`
		Locale            *string `json:"locale,omitempty"`
		MiddleName        *string `json:"middleName,omitempty"`
		Nickname          *string `json:"nickname,omitempty"`
		PreferredUsername *string `json:"preferredUsername,omitempty"`
		Profile           *string `json:"profile,omitempty"`
		Website           *string `json:"website,omitempty"`
		Zoneinfo          *string `json:"zoneinfo,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r UpdateUserProfileResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateUserProfileResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListUserRolesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]struct {
		Description string               `json:"description"`
		Id          string               `json:"id"`
		IsDefault   bool                 `json:"isDefault"`
		Name        string               `json:"name"`
		TenantId    string               `json:"tenantId"`
		Type        ListUserRoles200Type `json:"type"`
	}
}
type ListUserRoles200Type string

// Status returns HTTPResponse.Status
func (r ListUserRolesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListUserRolesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AssignUserRolesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r AssignUserRolesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AssignUserRolesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReplaceUserRolesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ReplaceUserRolesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReplaceUserRolesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteUserRoleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteUserRoleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteUserRoleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateVerificationCodeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CreateVerificationCodeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateVerificationCodeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type VerifyVerificationCodeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r VerifyVerificationCodeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r VerifyVerificationCodeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateVerificationByPasswordResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *struct {
		ExpiresAt            string `json:"expiresAt"`
		VerificationRecordId string `json:"verificationRecordId"`
	}
}

// Status returns HTTPResponse.Status
func (r CreateVerificationByPasswordResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateVerificationByPasswordResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateVerificationBySocialResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *struct {
		// AuthorizationUri The authorization URI to navigate to for authentication and authorization in the connected social identity provider.
		AuthorizationUri string `json:"authorizationUri"`

		// ExpiresAt The expiration date and time of the verification record.
		ExpiresAt string `json:"expiresAt"`

		// VerificationRecordId The ID of the verification record.
		VerificationRecordId string `json:"verificationRecordId"`
	}
}

// Status returns HTTPResponse.Status
func (r CreateVerificationBySocialResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateVerificationBySocialResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type VerifyVerificationBySocialResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		VerificationRecordId string `json:"verificationRecordId"`
	}
}

// Status returns HTTPResponse.Status
func (r VerifyVerificationBySocialResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r VerifyVerificationBySocialResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateVerificationByVerificationCodeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *struct {
		ExpiresAt            string `json:"expiresAt"`
		VerificationRecordId string `json:"verificationRecordId"`
	}
}

// Status returns HTTPResponse.Status
func (r CreateVerificationByVerificationCodeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateVerificationByVerificationCodeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type VerifyVerificationByVerificationCodeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		VerificationRecordId string `json:"verificationRecordId"`
	}
}

// Status returns HTTPResponse.Status
func (r VerifyVerificationByVerificationCodeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r VerifyVerificationByVerificationCodeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GenerateWebAuthnRegistrationOptionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		ExpiresAt           string `json:"expiresAt"`
		RegistrationOptions struct {
			Attestation            *GenerateWebAuthnRegistrationOptions200RegistrationOptionsAttestation `json:"attestation,omitempty"`
			AuthenticatorSelection *struct {
				AuthenticatorAttachment *GenerateWebAuthnRegistrationOptions200RegistrationOptionsAuthenticatorSelectionAuthenticatorAttachment `json:"authenticatorAttachment,omitempty"`
				RequireResidentKey      *bool                                                                                                   `json:"requireResidentKey,omitempty"`
				ResidentKey             *GenerateWebAuthnRegistrationOptions200RegistrationOptionsAuthenticatorSelectionResidentKey             `json:"residentKey,omitempty"`
				UserVerification        *GenerateWebAuthnRegistrationOptions200RegistrationOptionsAuthenticatorSelectionUserVerification        `json:"userVerification,omitempty"`
			} `json:"authenticatorSelection,omitempty"`
			Challenge          string `json:"challenge"`
			ExcludeCredentials *[]struct {
				Id         string                                                                                   `json:"id"`
				Transports *[]GenerateWebAuthnRegistrationOptions200RegistrationOptionsExcludeCredentialsTransports `json:"transports,omitempty"`
				Type       string                                                                                   `json:"type"`
			} `json:"excludeCredentials,omitempty"`
			Extensions *struct {
				Appid            *string `json:"appid,omitempty"`
				CredProps        *bool   `json:"credProps,omitempty"`
				HmacCreateSecret *bool   `json:"hmacCreateSecret,omitempty"`
			} `json:"extensions,omitempty"`
			PubKeyCredParams []struct {
				Alg  float32 `json:"alg"`
				Type string  `json:"type"`
			} `json:"pubKeyCredParams"`
			Rp struct {
				Id   *string `json:"id,omitempty"`
				Name string  `json:"name"`
			} `json:"rp"`
			Timeout *float32 `json:"timeout,omitempty"`
			User    struct {
				DisplayName string `json:"displayName"`
				Id          string `json:"id"`
				Name        string `json:"name"`
			} `json:"user"`
		} `json:"registrationOptions"`
		VerificationRecordId string `json:"verificationRecordId"`
	}
}
type GenerateWebAuthnRegistrationOptions200RegistrationOptionsAttestation string
type GenerateWebAuthnRegistrationOptions200RegistrationOptionsAuthenticatorSelectionAuthenticatorAttachment string
type GenerateWebAuthnRegistrationOptions200RegistrationOptionsAuthenticatorSelectionResidentKey string
type GenerateWebAuthnRegistrationOptions200RegistrationOptionsAuthenticatorSelectionUserVerification string
type GenerateWebAuthnRegistrationOptions200RegistrationOptionsExcludeCredentialsTransports string

// Status returns HTTPResponse.Status
func (r GenerateWebAuthnRegistrationOptionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GenerateWebAuthnRegistrationOptionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type VerifyWebAuthnRegistrationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		VerificationRecordId string `json:"verificationRecordId"`
	}
}

// Status returns HTTPResponse.Status
func (r VerifyWebAuthnRegistrationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r VerifyWebAuthnRegistrationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetWellKnownExperienceWithResponse request returning *GetWellKnownExperienceResponse
func (c *ClientWithResponses) GetWellKnownExperienceWithResponse(ctx context.Context, params *GetWellKnownExperienceParams, reqEditors ...RequestEditorFn) (*GetWellKnownExperienceResponse, error) {
	rsp, err := c.GetWellKnownExperience(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetWellKnownExperienceResponse(rsp)
}

// GetWellKnownExperienceOpenapiJsonWithResponse request returning *GetWellKnownExperienceOpenapiJsonResponse
func (c *ClientWithResponses) GetWellKnownExperienceOpenapiJsonWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetWellKnownExperienceOpenapiJsonResponse, error) {
	rsp, err := c.GetWellKnownExperienceOpenapiJson(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetWellKnownExperienceOpenapiJsonResponse(rsp)
}

// GetWellKnownManagementOpenapiJsonWithResponse request returning *GetWellKnownManagementOpenapiJsonResponse
func (c *ClientWithResponses) GetWellKnownManagementOpenapiJsonWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetWellKnownManagementOpenapiJsonResponse, error) {
	rsp, err := c.GetWellKnownManagementOpenapiJson(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetWellKnownManagementOpenapiJsonResponse(rsp)
}

// GetSignInExperiencePhrasesWithResponse request returning *GetSignInExperiencePhrasesResponse
func (c *ClientWithResponses) GetSignInExperiencePhrasesWithResponse(ctx context.Context, params *GetSignInExperiencePhrasesParams, reqEditors ...RequestEditorFn) (*GetSignInExperiencePhrasesResponse, error) {
	rsp, err := c.GetSignInExperiencePhrases(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSignInExperiencePhrasesResponse(rsp)
}

// GetSignInExperienceConfigWithResponse request returning *GetSignInExperienceConfigResponse
func (c *ClientWithResponses) GetSignInExperienceConfigWithResponse(ctx context.Context, params *GetSignInExperienceConfigParams, reqEditors ...RequestEditorFn) (*GetSignInExperienceConfigResponse, error) {
	rsp, err := c.GetSignInExperienceConfig(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSignInExperienceConfigResponse(rsp)
}

// GetWellKnownUserOpenapiJsonWithResponse request returning *GetWellKnownUserOpenapiJsonResponse
func (c *ClientWithResponses) GetWellKnownUserOpenapiJsonWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetWellKnownUserOpenapiJsonResponse, error) {
	rsp, err := c.GetWellKnownUserOpenapiJson(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetWellKnownUserOpenapiJsonResponse(rsp)
}

// GetAccountCenterSettingsWithResponse request returning *GetAccountCenterSettingsResponse
func (c *ClientWithResponses) GetAccountCenterSettingsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAccountCenterSettingsResponse, error) {
	rsp, err := c.GetAccountCenterSettings(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAccountCenterSettingsResponse(rsp)
}

// UpdateAccountCenterSettingsWithBodyWithResponse request with arbitrary body returning *UpdateAccountCenterSettingsResponse
func (c *ClientWithResponses) UpdateAccountCenterSettingsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateAccountCenterSettingsResponse, error) {
	rsp, err := c.UpdateAccountCenterSettingsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateAccountCenterSettingsResponse(rsp)
}

func (c *ClientWithResponses) UpdateAccountCenterSettingsWithResponse(ctx context.Context, body UpdateAccountCenterSettingsJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateAccountCenterSettingsResponse, error) {
	rsp, err := c.UpdateAccountCenterSettings(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateAccountCenterSettingsResponse(rsp)
}

// ListApplicationsWithResponse request returning *ListApplicationsResponse
func (c *ClientWithResponses) ListApplicationsWithResponse(ctx context.Context, params *ListApplicationsParams, reqEditors ...RequestEditorFn) (*ListApplicationsResponse, error) {
	rsp, err := c.ListApplications(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListApplicationsResponse(rsp)
}

// CreateApplicationWithBodyWithResponse request with arbitrary body returning *CreateApplicationResponse
func (c *ClientWithResponses) CreateApplicationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateApplicationResponse, error) {
	rsp, err := c.CreateApplicationWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateApplicationResponse(rsp)
}

func (c *ClientWithResponses) CreateApplicationWithResponse(ctx context.Context, body CreateApplicationJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateApplicationResponse, error) {
	rsp, err := c.CreateApplication(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateApplicationResponse(rsp)
}

// UpdateApplicationCustomDataWithBodyWithResponse request with arbitrary body returning *UpdateApplicationCustomDataResponse
func (c *ClientWithResponses) UpdateApplicationCustomDataWithBodyWithResponse(ctx context.Context, applicationId ApplicationId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateApplicationCustomDataResponse, error) {
	rsp, err := c.UpdateApplicationCustomDataWithBody(ctx, applicationId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateApplicationCustomDataResponse(rsp)
}

func (c *ClientWithResponses) UpdateApplicationCustomDataWithResponse(ctx context.Context, applicationId ApplicationId, body UpdateApplicationCustomDataJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateApplicationCustomDataResponse, error) {
	rsp, err := c.UpdateApplicationCustomData(ctx, applicationId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateApplicationCustomDataResponse(rsp)
}

// ListApplicationRolesWithResponse request returning *ListApplicationRolesResponse
func (c *ClientWithResponses) ListApplicationRolesWithResponse(ctx context.Context, applicationId ApplicationId, params *ListApplicationRolesParams, reqEditors ...RequestEditorFn) (*ListApplicationRolesResponse, error) {
	rsp, err := c.ListApplicationRoles(ctx, applicationId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListApplicationRolesResponse(rsp)
}

// AssignApplicationRolesWithBodyWithResponse request with arbitrary body returning *AssignApplicationRolesResponse
func (c *ClientWithResponses) AssignApplicationRolesWithBodyWithResponse(ctx context.Context, applicationId ApplicationId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AssignApplicationRolesResponse, error) {
	rsp, err := c.AssignApplicationRolesWithBody(ctx, applicationId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAssignApplicationRolesResponse(rsp)
}

func (c *ClientWithResponses) AssignApplicationRolesWithResponse(ctx context.Context, applicationId ApplicationId, body AssignApplicationRolesJSONRequestBody, reqEditors ...RequestEditorFn) (*AssignApplicationRolesResponse, error) {
	rsp, err := c.AssignApplicationRoles(ctx, applicationId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAssignApplicationRolesResponse(rsp)
}

// ReplaceApplicationRolesWithBodyWithResponse request with arbitrary body returning *ReplaceApplicationRolesResponse
func (c *ClientWithResponses) ReplaceApplicationRolesWithBodyWithResponse(ctx context.Context, applicationId ApplicationId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReplaceApplicationRolesResponse, error) {
	rsp, err := c.ReplaceApplicationRolesWithBody(ctx, applicationId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReplaceApplicationRolesResponse(rsp)
}

func (c *ClientWithResponses) ReplaceApplicationRolesWithResponse(ctx context.Context, applicationId ApplicationId, body ReplaceApplicationRolesJSONRequestBody, reqEditors ...RequestEditorFn) (*ReplaceApplicationRolesResponse, error) {
	rsp, err := c.ReplaceApplicationRoles(ctx, applicationId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReplaceApplicationRolesResponse(rsp)
}

// DeleteApplicationRoleWithResponse request returning *DeleteApplicationRoleResponse
func (c *ClientWithResponses) DeleteApplicationRoleWithResponse(ctx context.Context, applicationId ApplicationId, roleId RoleId, reqEditors ...RequestEditorFn) (*DeleteApplicationRoleResponse, error) {
	rsp, err := c.DeleteApplicationRole(ctx, applicationId, roleId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteApplicationRoleResponse(rsp)
}

// GetApplicationSignInExperienceWithResponse request returning *GetApplicationSignInExperienceResponse
func (c *ClientWithResponses) GetApplicationSignInExperienceWithResponse(ctx context.Context, applicationId ApplicationId, reqEditors ...RequestEditorFn) (*GetApplicationSignInExperienceResponse, error) {
	rsp, err := c.GetApplicationSignInExperience(ctx, applicationId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApplicationSignInExperienceResponse(rsp)
}

// ReplaceApplicationSignInExperienceWithBodyWithResponse request with arbitrary body returning *ReplaceApplicationSignInExperienceResponse
func (c *ClientWithResponses) ReplaceApplicationSignInExperienceWithBodyWithResponse(ctx context.Context, applicationId ApplicationId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReplaceApplicationSignInExperienceResponse, error) {
	rsp, err := c.ReplaceApplicationSignInExperienceWithBody(ctx, applicationId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReplaceApplicationSignInExperienceResponse(rsp)
}

func (c *ClientWithResponses) ReplaceApplicationSignInExperienceWithResponse(ctx context.Context, applicationId ApplicationId, body ReplaceApplicationSignInExperienceJSONRequestBody, reqEditors ...RequestEditorFn) (*ReplaceApplicationSignInExperienceResponse, error) {
	rsp, err := c.ReplaceApplicationSignInExperience(ctx, applicationId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReplaceApplicationSignInExperienceResponse(rsp)
}

// ListApplicationUserConsentScopesWithResponse request returning *ListApplicationUserConsentScopesResponse
func (c *ClientWithResponses) ListApplicationUserConsentScopesWithResponse(ctx context.Context, applicationId ApplicationId, reqEditors ...RequestEditorFn) (*ListApplicationUserConsentScopesResponse, error) {
	rsp, err := c.ListApplicationUserConsentScopes(ctx, applicationId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListApplicationUserConsentScopesResponse(rsp)
}

// CreateApplicationUserConsentScopeWithBodyWithResponse request with arbitrary body returning *CreateApplicationUserConsentScopeResponse
func (c *ClientWithResponses) CreateApplicationUserConsentScopeWithBodyWithResponse(ctx context.Context, applicationId ApplicationId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateApplicationUserConsentScopeResponse, error) {
	rsp, err := c.CreateApplicationUserConsentScopeWithBody(ctx, applicationId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateApplicationUserConsentScopeResponse(rsp)
}

func (c *ClientWithResponses) CreateApplicationUserConsentScopeWithResponse(ctx context.Context, applicationId ApplicationId, body CreateApplicationUserConsentScopeJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateApplicationUserConsentScopeResponse, error) {
	rsp, err := c.CreateApplicationUserConsentScope(ctx, applicationId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateApplicationUserConsentScopeResponse(rsp)
}

// DeleteApplicationUserConsentScopeWithResponse request returning *DeleteApplicationUserConsentScopeResponse
func (c *ClientWithResponses) DeleteApplicationUserConsentScopeWithResponse(ctx context.Context, applicationId ApplicationId, scopeType DeleteApplicationUserConsentScopeParamsScopeType, scopeId ScopeId, reqEditors ...RequestEditorFn) (*DeleteApplicationUserConsentScopeResponse, error) {
	rsp, err := c.DeleteApplicationUserConsentScope(ctx, applicationId, scopeType, scopeId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteApplicationUserConsentScopeResponse(rsp)
}

// DeleteApplicationWithResponse request returning *DeleteApplicationResponse
func (c *ClientWithResponses) DeleteApplicationWithResponse(ctx context.Context, id ApplicationIdRoot, reqEditors ...RequestEditorFn) (*DeleteApplicationResponse, error) {
	rsp, err := c.DeleteApplication(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteApplicationResponse(rsp)
}

// GetApplicationWithResponse request returning *GetApplicationResponse
func (c *ClientWithResponses) GetApplicationWithResponse(ctx context.Context, id ApplicationIdRoot, reqEditors ...RequestEditorFn) (*GetApplicationResponse, error) {
	rsp, err := c.GetApplication(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApplicationResponse(rsp)
}

// UpdateApplicationWithBodyWithResponse request with arbitrary body returning *UpdateApplicationResponse
func (c *ClientWithResponses) UpdateApplicationWithBodyWithResponse(ctx context.Context, id ApplicationIdRoot, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateApplicationResponse, error) {
	rsp, err := c.UpdateApplicationWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateApplicationResponse(rsp)
}

func (c *ClientWithResponses) UpdateApplicationWithResponse(ctx context.Context, id ApplicationIdRoot, body UpdateApplicationJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateApplicationResponse, error) {
	rsp, err := c.UpdateApplication(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateApplicationResponse(rsp)
}

// DeleteApplicationLegacySecretWithResponse request returning *DeleteApplicationLegacySecretResponse
func (c *ClientWithResponses) DeleteApplicationLegacySecretWithResponse(ctx context.Context, id ApplicationIdRoot, reqEditors ...RequestEditorFn) (*DeleteApplicationLegacySecretResponse, error) {
	rsp, err := c.DeleteApplicationLegacySecret(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteApplicationLegacySecretResponse(rsp)
}

// ListApplicationOrganizationsWithResponse request returning *ListApplicationOrganizationsResponse
func (c *ClientWithResponses) ListApplicationOrganizationsWithResponse(ctx context.Context, id ApplicationIdRoot, params *ListApplicationOrganizationsParams, reqEditors ...RequestEditorFn) (*ListApplicationOrganizationsResponse, error) {
	rsp, err := c.ListApplicationOrganizations(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListApplicationOrganizationsResponse(rsp)
}

// ListApplicationProtectedAppMetadataCustomDomainsWithResponse request returning *ListApplicationProtectedAppMetadataCustomDomainsResponse
func (c *ClientWithResponses) ListApplicationProtectedAppMetadataCustomDomainsWithResponse(ctx context.Context, id ApplicationIdRoot, reqEditors ...RequestEditorFn) (*ListApplicationProtectedAppMetadataCustomDomainsResponse, error) {
	rsp, err := c.ListApplicationProtectedAppMetadataCustomDomains(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListApplicationProtectedAppMetadataCustomDomainsResponse(rsp)
}

// CreateApplicationProtectedAppMetadataCustomDomainWithBodyWithResponse request with arbitrary body returning *CreateApplicationProtectedAppMetadataCustomDomainResponse
func (c *ClientWithResponses) CreateApplicationProtectedAppMetadataCustomDomainWithBodyWithResponse(ctx context.Context, id ApplicationIdRoot, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateApplicationProtectedAppMetadataCustomDomainResponse, error) {
	rsp, err := c.CreateApplicationProtectedAppMetadataCustomDomainWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateApplicationProtectedAppMetadataCustomDomainResponse(rsp)
}

func (c *ClientWithResponses) CreateApplicationProtectedAppMetadataCustomDomainWithResponse(ctx context.Context, id ApplicationIdRoot, body CreateApplicationProtectedAppMetadataCustomDomainJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateApplicationProtectedAppMetadataCustomDomainResponse, error) {
	rsp, err := c.CreateApplicationProtectedAppMetadataCustomDomain(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateApplicationProtectedAppMetadataCustomDomainResponse(rsp)
}

// DeleteApplicationProtectedAppMetadataCustomDomainWithResponse request returning *DeleteApplicationProtectedAppMetadataCustomDomainResponse
func (c *ClientWithResponses) DeleteApplicationProtectedAppMetadataCustomDomainWithResponse(ctx context.Context, id ApplicationIdRoot, domain string, reqEditors ...RequestEditorFn) (*DeleteApplicationProtectedAppMetadataCustomDomainResponse, error) {
	rsp, err := c.DeleteApplicationProtectedAppMetadataCustomDomain(ctx, id, domain, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteApplicationProtectedAppMetadataCustomDomainResponse(rsp)
}

// ListApplicationSecretsWithResponse request returning *ListApplicationSecretsResponse
func (c *ClientWithResponses) ListApplicationSecretsWithResponse(ctx context.Context, id ApplicationIdRoot, reqEditors ...RequestEditorFn) (*ListApplicationSecretsResponse, error) {
	rsp, err := c.ListApplicationSecrets(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListApplicationSecretsResponse(rsp)
}

// CreateApplicationSecretWithBodyWithResponse request with arbitrary body returning *CreateApplicationSecretResponse
func (c *ClientWithResponses) CreateApplicationSecretWithBodyWithResponse(ctx context.Context, id ApplicationIdRoot, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateApplicationSecretResponse, error) {
	rsp, err := c.CreateApplicationSecretWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateApplicationSecretResponse(rsp)
}

func (c *ClientWithResponses) CreateApplicationSecretWithResponse(ctx context.Context, id ApplicationIdRoot, body CreateApplicationSecretJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateApplicationSecretResponse, error) {
	rsp, err := c.CreateApplicationSecret(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateApplicationSecretResponse(rsp)
}

// DeleteApplicationSecretWithResponse request returning *DeleteApplicationSecretResponse
func (c *ClientWithResponses) DeleteApplicationSecretWithResponse(ctx context.Context, id ApplicationIdRoot, name string, reqEditors ...RequestEditorFn) (*DeleteApplicationSecretResponse, error) {
	rsp, err := c.DeleteApplicationSecret(ctx, id, name, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteApplicationSecretResponse(rsp)
}

// UpdateApplicationSecretWithBodyWithResponse request with arbitrary body returning *UpdateApplicationSecretResponse
func (c *ClientWithResponses) UpdateApplicationSecretWithBodyWithResponse(ctx context.Context, id ApplicationIdRoot, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateApplicationSecretResponse, error) {
	rsp, err := c.UpdateApplicationSecretWithBody(ctx, id, name, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateApplicationSecretResponse(rsp)
}

func (c *ClientWithResponses) UpdateApplicationSecretWithResponse(ctx context.Context, id ApplicationIdRoot, name string, body UpdateApplicationSecretJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateApplicationSecretResponse, error) {
	rsp, err := c.UpdateApplicationSecret(ctx, id, name, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateApplicationSecretResponse(rsp)
}

// ListApplicationUserConsentOrganizationsWithResponse request returning *ListApplicationUserConsentOrganizationsResponse
func (c *ClientWithResponses) ListApplicationUserConsentOrganizationsWithResponse(ctx context.Context, id ApplicationIdRoot, userId UserId, params *ListApplicationUserConsentOrganizationsParams, reqEditors ...RequestEditorFn) (*ListApplicationUserConsentOrganizationsResponse, error) {
	rsp, err := c.ListApplicationUserConsentOrganizations(ctx, id, userId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListApplicationUserConsentOrganizationsResponse(rsp)
}

// CreateApplicationUserConsentOrganizationWithBodyWithResponse request with arbitrary body returning *CreateApplicationUserConsentOrganizationResponse
func (c *ClientWithResponses) CreateApplicationUserConsentOrganizationWithBodyWithResponse(ctx context.Context, id ApplicationIdRoot, userId UserId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateApplicationUserConsentOrganizationResponse, error) {
	rsp, err := c.CreateApplicationUserConsentOrganizationWithBody(ctx, id, userId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateApplicationUserConsentOrganizationResponse(rsp)
}

func (c *ClientWithResponses) CreateApplicationUserConsentOrganizationWithResponse(ctx context.Context, id ApplicationIdRoot, userId UserId, body CreateApplicationUserConsentOrganizationJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateApplicationUserConsentOrganizationResponse, error) {
	rsp, err := c.CreateApplicationUserConsentOrganization(ctx, id, userId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateApplicationUserConsentOrganizationResponse(rsp)
}

// ReplaceApplicationUserConsentOrganizationsWithBodyWithResponse request with arbitrary body returning *ReplaceApplicationUserConsentOrganizationsResponse
func (c *ClientWithResponses) ReplaceApplicationUserConsentOrganizationsWithBodyWithResponse(ctx context.Context, id ApplicationIdRoot, userId UserId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReplaceApplicationUserConsentOrganizationsResponse, error) {
	rsp, err := c.ReplaceApplicationUserConsentOrganizationsWithBody(ctx, id, userId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReplaceApplicationUserConsentOrganizationsResponse(rsp)
}

func (c *ClientWithResponses) ReplaceApplicationUserConsentOrganizationsWithResponse(ctx context.Context, id ApplicationIdRoot, userId UserId, body ReplaceApplicationUserConsentOrganizationsJSONRequestBody, reqEditors ...RequestEditorFn) (*ReplaceApplicationUserConsentOrganizationsResponse, error) {
	rsp, err := c.ReplaceApplicationUserConsentOrganizations(ctx, id, userId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReplaceApplicationUserConsentOrganizationsResponse(rsp)
}

// DeleteApplicationUserConsentOrganizationWithResponse request returning *DeleteApplicationUserConsentOrganizationResponse
func (c *ClientWithResponses) DeleteApplicationUserConsentOrganizationWithResponse(ctx context.Context, id ApplicationIdRoot, userId UserId, organizationId OrganizationId, reqEditors ...RequestEditorFn) (*DeleteApplicationUserConsentOrganizationResponse, error) {
	rsp, err := c.DeleteApplicationUserConsentOrganization(ctx, id, userId, organizationId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteApplicationUserConsentOrganizationResponse(rsp)
}

// GetHasuraAuthWithResponse request returning *GetHasuraAuthResponse
func (c *ClientWithResponses) GetHasuraAuthWithResponse(ctx context.Context, params *GetHasuraAuthParams, reqEditors ...RequestEditorFn) (*GetHasuraAuthResponse, error) {
	rsp, err := c.GetHasuraAuth(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetHasuraAuthResponse(rsp)
}

// AssertSamlWithBodyWithResponse request with arbitrary body returning *AssertSamlResponse
func (c *ClientWithResponses) AssertSamlWithBodyWithResponse(ctx context.Context, connectorId ConnectorId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AssertSamlResponse, error) {
	rsp, err := c.AssertSamlWithBody(ctx, connectorId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAssertSamlResponse(rsp)
}

func (c *ClientWithResponses) AssertSamlWithResponse(ctx context.Context, connectorId ConnectorId, body AssertSamlJSONRequestBody, reqEditors ...RequestEditorFn) (*AssertSamlResponse, error) {
	rsp, err := c.AssertSaml(ctx, connectorId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAssertSamlResponse(rsp)
}

// AssertSingleSignOnSamlWithBodyWithResponse request with arbitrary body returning *AssertSingleSignOnSamlResponse
func (c *ClientWithResponses) AssertSingleSignOnSamlWithBodyWithResponse(ctx context.Context, connectorId ConnectorId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AssertSingleSignOnSamlResponse, error) {
	rsp, err := c.AssertSingleSignOnSamlWithBody(ctx, connectorId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAssertSingleSignOnSamlResponse(rsp)
}

func (c *ClientWithResponses) AssertSingleSignOnSamlWithResponse(ctx context.Context, connectorId ConnectorId, body AssertSingleSignOnSamlJSONRequestBody, reqEditors ...RequestEditorFn) (*AssertSingleSignOnSamlResponse, error) {
	rsp, err := c.AssertSingleSignOnSaml(ctx, connectorId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAssertSingleSignOnSamlResponse(rsp)
}

// DeleteCaptchaProviderWithResponse request returning *DeleteCaptchaProviderResponse
func (c *ClientWithResponses) DeleteCaptchaProviderWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*DeleteCaptchaProviderResponse, error) {
	rsp, err := c.DeleteCaptchaProvider(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteCaptchaProviderResponse(rsp)
}

// GetCaptchaProviderWithResponse request returning *GetCaptchaProviderResponse
func (c *ClientWithResponses) GetCaptchaProviderWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetCaptchaProviderResponse, error) {
	rsp, err := c.GetCaptchaProvider(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCaptchaProviderResponse(rsp)
}

// UpdateCaptchaProviderWithBodyWithResponse request with arbitrary body returning *UpdateCaptchaProviderResponse
func (c *ClientWithResponses) UpdateCaptchaProviderWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateCaptchaProviderResponse, error) {
	rsp, err := c.UpdateCaptchaProviderWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateCaptchaProviderResponse(rsp)
}

func (c *ClientWithResponses) UpdateCaptchaProviderWithResponse(ctx context.Context, body UpdateCaptchaProviderJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateCaptchaProviderResponse, error) {
	rsp, err := c.UpdateCaptchaProvider(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateCaptchaProviderResponse(rsp)
}

// GetAdminConsoleConfigWithResponse request returning *GetAdminConsoleConfigResponse
func (c *ClientWithResponses) GetAdminConsoleConfigWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAdminConsoleConfigResponse, error) {
	rsp, err := c.GetAdminConsoleConfig(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAdminConsoleConfigResponse(rsp)
}

// UpdateAdminConsoleConfigWithBodyWithResponse request with arbitrary body returning *UpdateAdminConsoleConfigResponse
func (c *ClientWithResponses) UpdateAdminConsoleConfigWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateAdminConsoleConfigResponse, error) {
	rsp, err := c.UpdateAdminConsoleConfigWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateAdminConsoleConfigResponse(rsp)
}

func (c *ClientWithResponses) UpdateAdminConsoleConfigWithResponse(ctx context.Context, body UpdateAdminConsoleConfigJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateAdminConsoleConfigResponse, error) {
	rsp, err := c.UpdateAdminConsoleConfig(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateAdminConsoleConfigResponse(rsp)
}

// ListJwtCustomizersWithResponse request returning *ListJwtCustomizersResponse
func (c *ClientWithResponses) ListJwtCustomizersWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ListJwtCustomizersResponse, error) {
	rsp, err := c.ListJwtCustomizers(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListJwtCustomizersResponse(rsp)
}

// TestJwtCustomizerWithBodyWithResponse request with arbitrary body returning *TestJwtCustomizerResponse
func (c *ClientWithResponses) TestJwtCustomizerWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TestJwtCustomizerResponse, error) {
	rsp, err := c.TestJwtCustomizerWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTestJwtCustomizerResponse(rsp)
}

func (c *ClientWithResponses) TestJwtCustomizerWithResponse(ctx context.Context, body TestJwtCustomizerJSONRequestBody, reqEditors ...RequestEditorFn) (*TestJwtCustomizerResponse, error) {
	rsp, err := c.TestJwtCustomizer(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTestJwtCustomizerResponse(rsp)
}

// DeleteJwtCustomizerWithResponse request returning *DeleteJwtCustomizerResponse
func (c *ClientWithResponses) DeleteJwtCustomizerWithResponse(ctx context.Context, tokenTypePath DeleteJwtCustomizerParamsTokenTypePath, reqEditors ...RequestEditorFn) (*DeleteJwtCustomizerResponse, error) {
	rsp, err := c.DeleteJwtCustomizer(ctx, tokenTypePath, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteJwtCustomizerResponse(rsp)
}

// GetJwtCustomizerWithResponse request returning *GetJwtCustomizerResponse
func (c *ClientWithResponses) GetJwtCustomizerWithResponse(ctx context.Context, tokenTypePath GetJwtCustomizerParamsTokenTypePath, reqEditors ...RequestEditorFn) (*GetJwtCustomizerResponse, error) {
	rsp, err := c.GetJwtCustomizer(ctx, tokenTypePath, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetJwtCustomizerResponse(rsp)
}

// UpdateJwtCustomizerWithBodyWithResponse request with arbitrary body returning *UpdateJwtCustomizerResponse
func (c *ClientWithResponses) UpdateJwtCustomizerWithBodyWithResponse(ctx context.Context, tokenTypePath UpdateJwtCustomizerParamsTokenTypePath, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateJwtCustomizerResponse, error) {
	rsp, err := c.UpdateJwtCustomizerWithBody(ctx, tokenTypePath, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateJwtCustomizerResponse(rsp)
}

func (c *ClientWithResponses) UpdateJwtCustomizerWithResponse(ctx context.Context, tokenTypePath UpdateJwtCustomizerParamsTokenTypePath, body UpdateJwtCustomizerJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateJwtCustomizerResponse, error) {
	rsp, err := c.UpdateJwtCustomizer(ctx, tokenTypePath, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateJwtCustomizerResponse(rsp)
}

// UpsertJwtCustomizerWithBodyWithResponse request with arbitrary body returning *UpsertJwtCustomizerResponse
func (c *ClientWithResponses) UpsertJwtCustomizerWithBodyWithResponse(ctx context.Context, tokenTypePath UpsertJwtCustomizerParamsTokenTypePath, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpsertJwtCustomizerResponse, error) {
	rsp, err := c.UpsertJwtCustomizerWithBody(ctx, tokenTypePath, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpsertJwtCustomizerResponse(rsp)
}

func (c *ClientWithResponses) UpsertJwtCustomizerWithResponse(ctx context.Context, tokenTypePath UpsertJwtCustomizerParamsTokenTypePath, body UpsertJwtCustomizerJSONRequestBody, reqEditors ...RequestEditorFn) (*UpsertJwtCustomizerResponse, error) {
	rsp, err := c.UpsertJwtCustomizer(ctx, tokenTypePath, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpsertJwtCustomizerResponse(rsp)
}

// GetOidcKeysWithResponse request returning *GetOidcKeysResponse
func (c *ClientWithResponses) GetOidcKeysWithResponse(ctx context.Context, keyType GetOidcKeysParamsKeyType, reqEditors ...RequestEditorFn) (*GetOidcKeysResponse, error) {
	rsp, err := c.GetOidcKeys(ctx, keyType, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOidcKeysResponse(rsp)
}

// RotateOidcKeysWithBodyWithResponse request with arbitrary body returning *RotateOidcKeysResponse
func (c *ClientWithResponses) RotateOidcKeysWithBodyWithResponse(ctx context.Context, keyType RotateOidcKeysParamsKeyType, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RotateOidcKeysResponse, error) {
	rsp, err := c.RotateOidcKeysWithBody(ctx, keyType, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRotateOidcKeysResponse(rsp)
}

func (c *ClientWithResponses) RotateOidcKeysWithResponse(ctx context.Context, keyType RotateOidcKeysParamsKeyType, body RotateOidcKeysJSONRequestBody, reqEditors ...RequestEditorFn) (*RotateOidcKeysResponse, error) {
	rsp, err := c.RotateOidcKeys(ctx, keyType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRotateOidcKeysResponse(rsp)
}

// DeleteOidcKeyWithResponse request returning *DeleteOidcKeyResponse
func (c *ClientWithResponses) DeleteOidcKeyWithResponse(ctx context.Context, keyType DeleteOidcKeyParamsKeyType, keyId KeyId, reqEditors ...RequestEditorFn) (*DeleteOidcKeyResponse, error) {
	rsp, err := c.DeleteOidcKey(ctx, keyType, keyId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteOidcKeyResponse(rsp)
}

// ListConnectorFactoriesWithResponse request returning *ListConnectorFactoriesResponse
func (c *ClientWithResponses) ListConnectorFactoriesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ListConnectorFactoriesResponse, error) {
	rsp, err := c.ListConnectorFactories(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListConnectorFactoriesResponse(rsp)
}

// GetConnectorFactoryWithResponse request returning *GetConnectorFactoryResponse
func (c *ClientWithResponses) GetConnectorFactoryWithResponse(ctx context.Context, id ConnectorFactoryIdRoot, reqEditors ...RequestEditorFn) (*GetConnectorFactoryResponse, error) {
	rsp, err := c.GetConnectorFactory(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetConnectorFactoryResponse(rsp)
}

// ListConnectorsWithResponse request returning *ListConnectorsResponse
func (c *ClientWithResponses) ListConnectorsWithResponse(ctx context.Context, params *ListConnectorsParams, reqEditors ...RequestEditorFn) (*ListConnectorsResponse, error) {
	rsp, err := c.ListConnectors(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListConnectorsResponse(rsp)
}

// CreateConnectorWithBodyWithResponse request with arbitrary body returning *CreateConnectorResponse
func (c *ClientWithResponses) CreateConnectorWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateConnectorResponse, error) {
	rsp, err := c.CreateConnectorWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateConnectorResponse(rsp)
}

func (c *ClientWithResponses) CreateConnectorWithResponse(ctx context.Context, body CreateConnectorJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateConnectorResponse, error) {
	rsp, err := c.CreateConnector(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateConnectorResponse(rsp)
}

// CreateConnectorAuthorizationUriWithBodyWithResponse request with arbitrary body returning *CreateConnectorAuthorizationUriResponse
func (c *ClientWithResponses) CreateConnectorAuthorizationUriWithBodyWithResponse(ctx context.Context, connectorId ConnectorId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateConnectorAuthorizationUriResponse, error) {
	rsp, err := c.CreateConnectorAuthorizationUriWithBody(ctx, connectorId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateConnectorAuthorizationUriResponse(rsp)
}

func (c *ClientWithResponses) CreateConnectorAuthorizationUriWithResponse(ctx context.Context, connectorId ConnectorId, body CreateConnectorAuthorizationUriJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateConnectorAuthorizationUriResponse, error) {
	rsp, err := c.CreateConnectorAuthorizationUri(ctx, connectorId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateConnectorAuthorizationUriResponse(rsp)
}

// CreateConnectorTestWithBodyWithResponse request with arbitrary body returning *CreateConnectorTestResponse
func (c *ClientWithResponses) CreateConnectorTestWithBodyWithResponse(ctx context.Context, factoryId FactoryId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateConnectorTestResponse, error) {
	rsp, err := c.CreateConnectorTestWithBody(ctx, factoryId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateConnectorTestResponse(rsp)
}

func (c *ClientWithResponses) CreateConnectorTestWithResponse(ctx context.Context, factoryId FactoryId, body CreateConnectorTestJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateConnectorTestResponse, error) {
	rsp, err := c.CreateConnectorTest(ctx, factoryId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateConnectorTestResponse(rsp)
}

// DeleteConnectorWithResponse request returning *DeleteConnectorResponse
func (c *ClientWithResponses) DeleteConnectorWithResponse(ctx context.Context, id ConnectorIdRoot, reqEditors ...RequestEditorFn) (*DeleteConnectorResponse, error) {
	rsp, err := c.DeleteConnector(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteConnectorResponse(rsp)
}

// GetConnectorWithResponse request returning *GetConnectorResponse
func (c *ClientWithResponses) GetConnectorWithResponse(ctx context.Context, id ConnectorIdRoot, reqEditors ...RequestEditorFn) (*GetConnectorResponse, error) {
	rsp, err := c.GetConnector(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetConnectorResponse(rsp)
}

// UpdateConnectorWithBodyWithResponse request with arbitrary body returning *UpdateConnectorResponse
func (c *ClientWithResponses) UpdateConnectorWithBodyWithResponse(ctx context.Context, id ConnectorIdRoot, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateConnectorResponse, error) {
	rsp, err := c.UpdateConnectorWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateConnectorResponse(rsp)
}

func (c *ClientWithResponses) UpdateConnectorWithResponse(ctx context.Context, id ConnectorIdRoot, body UpdateConnectorJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateConnectorResponse, error) {
	rsp, err := c.UpdateConnector(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateConnectorResponse(rsp)
}

// ListCustomPhrasesWithResponse request returning *ListCustomPhrasesResponse
func (c *ClientWithResponses) ListCustomPhrasesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ListCustomPhrasesResponse, error) {
	rsp, err := c.ListCustomPhrases(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListCustomPhrasesResponse(rsp)
}

// DeleteCustomPhraseWithResponse request returning *DeleteCustomPhraseResponse
func (c *ClientWithResponses) DeleteCustomPhraseWithResponse(ctx context.Context, languageTag DeleteCustomPhraseParamsLanguageTag, reqEditors ...RequestEditorFn) (*DeleteCustomPhraseResponse, error) {
	rsp, err := c.DeleteCustomPhrase(ctx, languageTag, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteCustomPhraseResponse(rsp)
}

// GetCustomPhraseWithResponse request returning *GetCustomPhraseResponse
func (c *ClientWithResponses) GetCustomPhraseWithResponse(ctx context.Context, languageTag GetCustomPhraseParamsLanguageTag, reqEditors ...RequestEditorFn) (*GetCustomPhraseResponse, error) {
	rsp, err := c.GetCustomPhrase(ctx, languageTag, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCustomPhraseResponse(rsp)
}

// ReplaceCustomPhraseWithBodyWithResponse request with arbitrary body returning *ReplaceCustomPhraseResponse
func (c *ClientWithResponses) ReplaceCustomPhraseWithBodyWithResponse(ctx context.Context, languageTag ReplaceCustomPhraseParamsLanguageTag, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReplaceCustomPhraseResponse, error) {
	rsp, err := c.ReplaceCustomPhraseWithBody(ctx, languageTag, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReplaceCustomPhraseResponse(rsp)
}

func (c *ClientWithResponses) ReplaceCustomPhraseWithResponse(ctx context.Context, languageTag ReplaceCustomPhraseParamsLanguageTag, body ReplaceCustomPhraseJSONRequestBody, reqEditors ...RequestEditorFn) (*ReplaceCustomPhraseResponse, error) {
	rsp, err := c.ReplaceCustomPhrase(ctx, languageTag, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReplaceCustomPhraseResponse(rsp)
}

// GetActiveUserCountsWithResponse request returning *GetActiveUserCountsResponse
func (c *ClientWithResponses) GetActiveUserCountsWithResponse(ctx context.Context, params *GetActiveUserCountsParams, reqEditors ...RequestEditorFn) (*GetActiveUserCountsResponse, error) {
	rsp, err := c.GetActiveUserCounts(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetActiveUserCountsResponse(rsp)
}

// GetNewUserCountsWithResponse request returning *GetNewUserCountsResponse
func (c *ClientWithResponses) GetNewUserCountsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetNewUserCountsResponse, error) {
	rsp, err := c.GetNewUserCounts(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetNewUserCountsResponse(rsp)
}

// GetTotalUserCountWithResponse request returning *GetTotalUserCountResponse
func (c *ClientWithResponses) GetTotalUserCountWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetTotalUserCountResponse, error) {
	rsp, err := c.GetTotalUserCount(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTotalUserCountResponse(rsp)
}

// ListDomainsWithResponse request returning *ListDomainsResponse
func (c *ClientWithResponses) ListDomainsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ListDomainsResponse, error) {
	rsp, err := c.ListDomains(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListDomainsResponse(rsp)
}

// CreateDomainWithBodyWithResponse request with arbitrary body returning *CreateDomainResponse
func (c *ClientWithResponses) CreateDomainWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateDomainResponse, error) {
	rsp, err := c.CreateDomainWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateDomainResponse(rsp)
}

func (c *ClientWithResponses) CreateDomainWithResponse(ctx context.Context, body CreateDomainJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateDomainResponse, error) {
	rsp, err := c.CreateDomain(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateDomainResponse(rsp)
}

// DeleteDomainWithResponse request returning *DeleteDomainResponse
func (c *ClientWithResponses) DeleteDomainWithResponse(ctx context.Context, id DomainIdRoot, reqEditors ...RequestEditorFn) (*DeleteDomainResponse, error) {
	rsp, err := c.DeleteDomain(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteDomainResponse(rsp)
}

// GetDomainWithResponse request returning *GetDomainResponse
func (c *ClientWithResponses) GetDomainWithResponse(ctx context.Context, id DomainIdRoot, reqEditors ...RequestEditorFn) (*GetDomainResponse, error) {
	rsp, err := c.GetDomain(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetDomainResponse(rsp)
}

// DeleteEmailTemplatesWithResponse request returning *DeleteEmailTemplatesResponse
func (c *ClientWithResponses) DeleteEmailTemplatesWithResponse(ctx context.Context, params *DeleteEmailTemplatesParams, reqEditors ...RequestEditorFn) (*DeleteEmailTemplatesResponse, error) {
	rsp, err := c.DeleteEmailTemplates(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteEmailTemplatesResponse(rsp)
}

// ListEmailTemplatesWithResponse request returning *ListEmailTemplatesResponse
func (c *ClientWithResponses) ListEmailTemplatesWithResponse(ctx context.Context, params *ListEmailTemplatesParams, reqEditors ...RequestEditorFn) (*ListEmailTemplatesResponse, error) {
	rsp, err := c.ListEmailTemplates(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListEmailTemplatesResponse(rsp)
}

// ReplaceEmailTemplatesWithBodyWithResponse request with arbitrary body returning *ReplaceEmailTemplatesResponse
func (c *ClientWithResponses) ReplaceEmailTemplatesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReplaceEmailTemplatesResponse, error) {
	rsp, err := c.ReplaceEmailTemplatesWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReplaceEmailTemplatesResponse(rsp)
}

func (c *ClientWithResponses) ReplaceEmailTemplatesWithResponse(ctx context.Context, body ReplaceEmailTemplatesJSONRequestBody, reqEditors ...RequestEditorFn) (*ReplaceEmailTemplatesResponse, error) {
	rsp, err := c.ReplaceEmailTemplates(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReplaceEmailTemplatesResponse(rsp)
}

// DeleteEmailTemplateWithResponse request returning *DeleteEmailTemplateResponse
func (c *ClientWithResponses) DeleteEmailTemplateWithResponse(ctx context.Context, id EmailTemplateIdRoot, reqEditors ...RequestEditorFn) (*DeleteEmailTemplateResponse, error) {
	rsp, err := c.DeleteEmailTemplate(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteEmailTemplateResponse(rsp)
}

// GetEmailTemplateWithResponse request returning *GetEmailTemplateResponse
func (c *ClientWithResponses) GetEmailTemplateWithResponse(ctx context.Context, id EmailTemplateIdRoot, reqEditors ...RequestEditorFn) (*GetEmailTemplateResponse, error) {
	rsp, err := c.GetEmailTemplate(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetEmailTemplateResponse(rsp)
}

// UpdateEmailTemplateDetailsWithBodyWithResponse request with arbitrary body returning *UpdateEmailTemplateDetailsResponse
func (c *ClientWithResponses) UpdateEmailTemplateDetailsWithBodyWithResponse(ctx context.Context, id EmailTemplateIdRoot, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateEmailTemplateDetailsResponse, error) {
	rsp, err := c.UpdateEmailTemplateDetailsWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateEmailTemplateDetailsResponse(rsp)
}

func (c *ClientWithResponses) UpdateEmailTemplateDetailsWithResponse(ctx context.Context, id EmailTemplateIdRoot, body UpdateEmailTemplateDetailsJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateEmailTemplateDetailsResponse, error) {
	rsp, err := c.UpdateEmailTemplateDetails(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateEmailTemplateDetailsResponse(rsp)
}

// InitInteractionWithBodyWithResponse request with arbitrary body returning *InitInteractionResponse
func (c *ClientWithResponses) InitInteractionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InitInteractionResponse, error) {
	rsp, err := c.InitInteractionWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInitInteractionResponse(rsp)
}

func (c *ClientWithResponses) InitInteractionWithResponse(ctx context.Context, body InitInteractionJSONRequestBody, reqEditors ...RequestEditorFn) (*InitInteractionResponse, error) {
	rsp, err := c.InitInteraction(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInitInteractionResponse(rsp)
}

// IdentifyUserWithBodyWithResponse request with arbitrary body returning *IdentifyUserResponse
func (c *ClientWithResponses) IdentifyUserWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*IdentifyUserResponse, error) {
	rsp, err := c.IdentifyUserWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseIdentifyUserResponse(rsp)
}

func (c *ClientWithResponses) IdentifyUserWithResponse(ctx context.Context, body IdentifyUserJSONRequestBody, reqEditors ...RequestEditorFn) (*IdentifyUserResponse, error) {
	rsp, err := c.IdentifyUser(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseIdentifyUserResponse(rsp)
}

// UpdateInteractionEventWithBodyWithResponse request with arbitrary body returning *UpdateInteractionEventResponse
func (c *ClientWithResponses) UpdateInteractionEventWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateInteractionEventResponse, error) {
	rsp, err := c.UpdateInteractionEventWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateInteractionEventResponse(rsp)
}

func (c *ClientWithResponses) UpdateInteractionEventWithResponse(ctx context.Context, body UpdateInteractionEventJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateInteractionEventResponse, error) {
	rsp, err := c.UpdateInteractionEvent(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateInteractionEventResponse(rsp)
}

// AddUserProfileWithBodyWithResponse request with arbitrary body returning *AddUserProfileResponse
func (c *ClientWithResponses) AddUserProfileWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddUserProfileResponse, error) {
	rsp, err := c.AddUserProfileWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddUserProfileResponse(rsp)
}

func (c *ClientWithResponses) AddUserProfileWithResponse(ctx context.Context, body AddUserProfileJSONRequestBody, reqEditors ...RequestEditorFn) (*AddUserProfileResponse, error) {
	rsp, err := c.AddUserProfile(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddUserProfileResponse(rsp)
}

// BindMfaVerificationWithBodyWithResponse request with arbitrary body returning *BindMfaVerificationResponse
func (c *ClientWithResponses) BindMfaVerificationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BindMfaVerificationResponse, error) {
	rsp, err := c.BindMfaVerificationWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBindMfaVerificationResponse(rsp)
}

func (c *ClientWithResponses) BindMfaVerificationWithResponse(ctx context.Context, body BindMfaVerificationJSONRequestBody, reqEditors ...RequestEditorFn) (*BindMfaVerificationResponse, error) {
	rsp, err := c.BindMfaVerification(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBindMfaVerificationResponse(rsp)
}

// SkipMfaBindingFlowWithResponse request returning *SkipMfaBindingFlowResponse
func (c *ClientWithResponses) SkipMfaBindingFlowWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*SkipMfaBindingFlowResponse, error) {
	rsp, err := c.SkipMfaBindingFlow(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSkipMfaBindingFlowResponse(rsp)
}

// ResetUserPasswordWithBodyWithResponse request with arbitrary body returning *ResetUserPasswordResponse
func (c *ClientWithResponses) ResetUserPasswordWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ResetUserPasswordResponse, error) {
	rsp, err := c.ResetUserPasswordWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseResetUserPasswordResponse(rsp)
}

func (c *ClientWithResponses) ResetUserPasswordWithResponse(ctx context.Context, body ResetUserPasswordJSONRequestBody, reqEditors ...RequestEditorFn) (*ResetUserPasswordResponse, error) {
	rsp, err := c.ResetUserPassword(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseResetUserPasswordResponse(rsp)
}

// GetEnabledSsoConnectorsWithResponse request returning *GetEnabledSsoConnectorsResponse
func (c *ClientWithResponses) GetEnabledSsoConnectorsWithResponse(ctx context.Context, params *GetEnabledSsoConnectorsParams, reqEditors ...RequestEditorFn) (*GetEnabledSsoConnectorsResponse, error) {
	rsp, err := c.GetEnabledSsoConnectors(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetEnabledSsoConnectorsResponse(rsp)
}

// SubmitInteractionWithResponse request returning *SubmitInteractionResponse
func (c *ClientWithResponses) SubmitInteractionWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*SubmitInteractionResponse, error) {
	rsp, err := c.SubmitInteraction(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSubmitInteractionResponse(rsp)
}

// GenerateBackupCodesWithResponse request returning *GenerateBackupCodesResponse
func (c *ClientWithResponses) GenerateBackupCodesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GenerateBackupCodesResponse, error) {
	rsp, err := c.GenerateBackupCodes(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGenerateBackupCodesResponse(rsp)
}

// VerifyBackupCodeWithBodyWithResponse request with arbitrary body returning *VerifyBackupCodeResponse
func (c *ClientWithResponses) VerifyBackupCodeWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*VerifyBackupCodeResponse, error) {
	rsp, err := c.VerifyBackupCodeWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseVerifyBackupCodeResponse(rsp)
}

func (c *ClientWithResponses) VerifyBackupCodeWithResponse(ctx context.Context, body VerifyBackupCodeJSONRequestBody, reqEditors ...RequestEditorFn) (*VerifyBackupCodeResponse, error) {
	rsp, err := c.VerifyBackupCode(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseVerifyBackupCodeResponse(rsp)
}

// CreateNewPasswordIdentityVerificationWithBodyWithResponse request with arbitrary body returning *CreateNewPasswordIdentityVerificationResponse
func (c *ClientWithResponses) CreateNewPasswordIdentityVerificationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateNewPasswordIdentityVerificationResponse, error) {
	rsp, err := c.CreateNewPasswordIdentityVerificationWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateNewPasswordIdentityVerificationResponse(rsp)
}

func (c *ClientWithResponses) CreateNewPasswordIdentityVerificationWithResponse(ctx context.Context, body CreateNewPasswordIdentityVerificationJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateNewPasswordIdentityVerificationResponse, error) {
	rsp, err := c.CreateNewPasswordIdentityVerification(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateNewPasswordIdentityVerificationResponse(rsp)
}

// VerifyOneTimeTokenVerificationWithBodyWithResponse request with arbitrary body returning *VerifyOneTimeTokenVerificationResponse
func (c *ClientWithResponses) VerifyOneTimeTokenVerificationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*VerifyOneTimeTokenVerificationResponse, error) {
	rsp, err := c.VerifyOneTimeTokenVerificationWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseVerifyOneTimeTokenVerificationResponse(rsp)
}

func (c *ClientWithResponses) VerifyOneTimeTokenVerificationWithResponse(ctx context.Context, body VerifyOneTimeTokenVerificationJSONRequestBody, reqEditors ...RequestEditorFn) (*VerifyOneTimeTokenVerificationResponse, error) {
	rsp, err := c.VerifyOneTimeTokenVerification(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseVerifyOneTimeTokenVerificationResponse(rsp)
}

// CreatePasswordVerificationWithBodyWithResponse request with arbitrary body returning *CreatePasswordVerificationResponse
func (c *ClientWithResponses) CreatePasswordVerificationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreatePasswordVerificationResponse, error) {
	rsp, err := c.CreatePasswordVerificationWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreatePasswordVerificationResponse(rsp)
}

func (c *ClientWithResponses) CreatePasswordVerificationWithResponse(ctx context.Context, body CreatePasswordVerificationJSONRequestBody, reqEditors ...RequestEditorFn) (*CreatePasswordVerificationResponse, error) {
	rsp, err := c.CreatePasswordVerification(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreatePasswordVerificationResponse(rsp)
}

// CreateSocialVerificationWithBodyWithResponse request with arbitrary body returning *CreateSocialVerificationResponse
func (c *ClientWithResponses) CreateSocialVerificationWithBodyWithResponse(ctx context.Context, connectorId ConnectorId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateSocialVerificationResponse, error) {
	rsp, err := c.CreateSocialVerificationWithBody(ctx, connectorId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateSocialVerificationResponse(rsp)
}

func (c *ClientWithResponses) CreateSocialVerificationWithResponse(ctx context.Context, connectorId ConnectorId, body CreateSocialVerificationJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateSocialVerificationResponse, error) {
	rsp, err := c.CreateSocialVerification(ctx, connectorId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateSocialVerificationResponse(rsp)
}

// VerifySocialVerificationWithBodyWithResponse request with arbitrary body returning *VerifySocialVerificationResponse
func (c *ClientWithResponses) VerifySocialVerificationWithBodyWithResponse(ctx context.Context, connectorId ConnectorId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*VerifySocialVerificationResponse, error) {
	rsp, err := c.VerifySocialVerificationWithBody(ctx, connectorId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseVerifySocialVerificationResponse(rsp)
}

func (c *ClientWithResponses) VerifySocialVerificationWithResponse(ctx context.Context, connectorId ConnectorId, body VerifySocialVerificationJSONRequestBody, reqEditors ...RequestEditorFn) (*VerifySocialVerificationResponse, error) {
	rsp, err := c.VerifySocialVerification(ctx, connectorId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseVerifySocialVerificationResponse(rsp)
}

// CreateEnterpriseSsoVerificationWithBodyWithResponse request with arbitrary body returning *CreateEnterpriseSsoVerificationResponse
func (c *ClientWithResponses) CreateEnterpriseSsoVerificationWithBodyWithResponse(ctx context.Context, connectorId ConnectorId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateEnterpriseSsoVerificationResponse, error) {
	rsp, err := c.CreateEnterpriseSsoVerificationWithBody(ctx, connectorId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateEnterpriseSsoVerificationResponse(rsp)
}

func (c *ClientWithResponses) CreateEnterpriseSsoVerificationWithResponse(ctx context.Context, connectorId ConnectorId, body CreateEnterpriseSsoVerificationJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateEnterpriseSsoVerificationResponse, error) {
	rsp, err := c.CreateEnterpriseSsoVerification(ctx, connectorId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateEnterpriseSsoVerificationResponse(rsp)
}

// VerifyEnterpriseSsoVerificationWithBodyWithResponse request with arbitrary body returning *VerifyEnterpriseSsoVerificationResponse
func (c *ClientWithResponses) VerifyEnterpriseSsoVerificationWithBodyWithResponse(ctx context.Context, connectorId ConnectorId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*VerifyEnterpriseSsoVerificationResponse, error) {
	rsp, err := c.VerifyEnterpriseSsoVerificationWithBody(ctx, connectorId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseVerifyEnterpriseSsoVerificationResponse(rsp)
}

func (c *ClientWithResponses) VerifyEnterpriseSsoVerificationWithResponse(ctx context.Context, connectorId ConnectorId, body VerifyEnterpriseSsoVerificationJSONRequestBody, reqEditors ...RequestEditorFn) (*VerifyEnterpriseSsoVerificationResponse, error) {
	rsp, err := c.VerifyEnterpriseSsoVerification(ctx, connectorId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseVerifyEnterpriseSsoVerificationResponse(rsp)
}

// CreateTotpSecretWithResponse request returning *CreateTotpSecretResponse
func (c *ClientWithResponses) CreateTotpSecretWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*CreateTotpSecretResponse, error) {
	rsp, err := c.CreateTotpSecret(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateTotpSecretResponse(rsp)
}

// VerifyTotpVerificationWithBodyWithResponse request with arbitrary body returning *VerifyTotpVerificationResponse
func (c *ClientWithResponses) VerifyTotpVerificationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*VerifyTotpVerificationResponse, error) {
	rsp, err := c.VerifyTotpVerificationWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseVerifyTotpVerificationResponse(rsp)
}

func (c *ClientWithResponses) VerifyTotpVerificationWithResponse(ctx context.Context, body VerifyTotpVerificationJSONRequestBody, reqEditors ...RequestEditorFn) (*VerifyTotpVerificationResponse, error) {
	rsp, err := c.VerifyTotpVerification(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseVerifyTotpVerificationResponse(rsp)
}

// CreateAndSendVerificationCodeWithBodyWithResponse request with arbitrary body returning *CreateAndSendVerificationCodeResponse
func (c *ClientWithResponses) CreateAndSendVerificationCodeWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateAndSendVerificationCodeResponse, error) {
	rsp, err := c.CreateAndSendVerificationCodeWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateAndSendVerificationCodeResponse(rsp)
}

func (c *ClientWithResponses) CreateAndSendVerificationCodeWithResponse(ctx context.Context, body CreateAndSendVerificationCodeJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateAndSendVerificationCodeResponse, error) {
	rsp, err := c.CreateAndSendVerificationCode(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateAndSendVerificationCodeResponse(rsp)
}

// VerifyVerificationCodeVerificationWithBodyWithResponse request with arbitrary body returning *VerifyVerificationCodeVerificationResponse
func (c *ClientWithResponses) VerifyVerificationCodeVerificationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*VerifyVerificationCodeVerificationResponse, error) {
	rsp, err := c.VerifyVerificationCodeVerificationWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseVerifyVerificationCodeVerificationResponse(rsp)
}

func (c *ClientWithResponses) VerifyVerificationCodeVerificationWithResponse(ctx context.Context, body VerifyVerificationCodeVerificationJSONRequestBody, reqEditors ...RequestEditorFn) (*VerifyVerificationCodeVerificationResponse, error) {
	rsp, err := c.VerifyVerificationCodeVerification(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseVerifyVerificationCodeVerificationResponse(rsp)
}

// CreateWebAuthnAuthenticationVerificationWithResponse request returning *CreateWebAuthnAuthenticationVerificationResponse
func (c *ClientWithResponses) CreateWebAuthnAuthenticationVerificationWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*CreateWebAuthnAuthenticationVerificationResponse, error) {
	rsp, err := c.CreateWebAuthnAuthenticationVerification(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateWebAuthnAuthenticationVerificationResponse(rsp)
}

// VerifyWebAuthnAuthenticationVerificationWithBodyWithResponse request with arbitrary body returning *VerifyWebAuthnAuthenticationVerificationResponse
func (c *ClientWithResponses) VerifyWebAuthnAuthenticationVerificationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*VerifyWebAuthnAuthenticationVerificationResponse, error) {
	rsp, err := c.VerifyWebAuthnAuthenticationVerificationWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseVerifyWebAuthnAuthenticationVerificationResponse(rsp)
}

func (c *ClientWithResponses) VerifyWebAuthnAuthenticationVerificationWithResponse(ctx context.Context, body VerifyWebAuthnAuthenticationVerificationJSONRequestBody, reqEditors ...RequestEditorFn) (*VerifyWebAuthnAuthenticationVerificationResponse, error) {
	rsp, err := c.VerifyWebAuthnAuthenticationVerification(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseVerifyWebAuthnAuthenticationVerificationResponse(rsp)
}

// CreateWebAuthnRegistrationVerificationWithResponse request returning *CreateWebAuthnRegistrationVerificationResponse
func (c *ClientWithResponses) CreateWebAuthnRegistrationVerificationWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*CreateWebAuthnRegistrationVerificationResponse, error) {
	rsp, err := c.CreateWebAuthnRegistrationVerification(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateWebAuthnRegistrationVerificationResponse(rsp)
}

// VerifyWebAuthnRegistrationVerificationWithBodyWithResponse request with arbitrary body returning *VerifyWebAuthnRegistrationVerificationResponse
func (c *ClientWithResponses) VerifyWebAuthnRegistrationVerificationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*VerifyWebAuthnRegistrationVerificationResponse, error) {
	rsp, err := c.VerifyWebAuthnRegistrationVerificationWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseVerifyWebAuthnRegistrationVerificationResponse(rsp)
}

func (c *ClientWithResponses) VerifyWebAuthnRegistrationVerificationWithResponse(ctx context.Context, body VerifyWebAuthnRegistrationVerificationJSONRequestBody, reqEditors ...RequestEditorFn) (*VerifyWebAuthnRegistrationVerificationResponse, error) {
	rsp, err := c.VerifyWebAuthnRegistrationVerification(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseVerifyWebAuthnRegistrationVerificationResponse(rsp)
}

// ListHooksWithResponse request returning *ListHooksResponse
func (c *ClientWithResponses) ListHooksWithResponse(ctx context.Context, params *ListHooksParams, reqEditors ...RequestEditorFn) (*ListHooksResponse, error) {
	rsp, err := c.ListHooks(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListHooksResponse(rsp)
}

// CreateHookWithBodyWithResponse request with arbitrary body returning *CreateHookResponse
func (c *ClientWithResponses) CreateHookWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateHookResponse, error) {
	rsp, err := c.CreateHookWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateHookResponse(rsp)
}

func (c *ClientWithResponses) CreateHookWithResponse(ctx context.Context, body CreateHookJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateHookResponse, error) {
	rsp, err := c.CreateHook(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateHookResponse(rsp)
}

// DeleteHookWithResponse request returning *DeleteHookResponse
func (c *ClientWithResponses) DeleteHookWithResponse(ctx context.Context, id HookIdRoot, reqEditors ...RequestEditorFn) (*DeleteHookResponse, error) {
	rsp, err := c.DeleteHook(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteHookResponse(rsp)
}

// GetHookWithResponse request returning *GetHookResponse
func (c *ClientWithResponses) GetHookWithResponse(ctx context.Context, id HookIdRoot, params *GetHookParams, reqEditors ...RequestEditorFn) (*GetHookResponse, error) {
	rsp, err := c.GetHook(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetHookResponse(rsp)
}

// UpdateHookWithBodyWithResponse request with arbitrary body returning *UpdateHookResponse
func (c *ClientWithResponses) UpdateHookWithBodyWithResponse(ctx context.Context, id HookIdRoot, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateHookResponse, error) {
	rsp, err := c.UpdateHookWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateHookResponse(rsp)
}

func (c *ClientWithResponses) UpdateHookWithResponse(ctx context.Context, id HookIdRoot, body UpdateHookJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateHookResponse, error) {
	rsp, err := c.UpdateHook(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateHookResponse(rsp)
}

// ListHookRecentLogsWithResponse request returning *ListHookRecentLogsResponse
func (c *ClientWithResponses) ListHookRecentLogsWithResponse(ctx context.Context, id HookIdRoot, params *ListHookRecentLogsParams, reqEditors ...RequestEditorFn) (*ListHookRecentLogsResponse, error) {
	rsp, err := c.ListHookRecentLogs(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListHookRecentLogsResponse(rsp)
}

// UpdateHookSigningKeyWithResponse request returning *UpdateHookSigningKeyResponse
func (c *ClientWithResponses) UpdateHookSigningKeyWithResponse(ctx context.Context, id HookIdRoot, reqEditors ...RequestEditorFn) (*UpdateHookSigningKeyResponse, error) {
	rsp, err := c.UpdateHookSigningKey(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateHookSigningKeyResponse(rsp)
}

// CreateHookTestWithBodyWithResponse request with arbitrary body returning *CreateHookTestResponse
func (c *ClientWithResponses) CreateHookTestWithBodyWithResponse(ctx context.Context, id HookIdRoot, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateHookTestResponse, error) {
	rsp, err := c.CreateHookTestWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateHookTestResponse(rsp)
}

func (c *ClientWithResponses) CreateHookTestWithResponse(ctx context.Context, id HookIdRoot, body CreateHookTestJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateHookTestResponse, error) {
	rsp, err := c.CreateHookTest(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateHookTestResponse(rsp)
}

// DeleteApiInteractionWithResponse request returning *DeleteApiInteractionResponse
func (c *ClientWithResponses) DeleteApiInteractionWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*DeleteApiInteractionResponse, error) {
	rsp, err := c.DeleteApiInteraction(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteApiInteractionResponse(rsp)
}

// PutApiInteractionWithBodyWithResponse request with arbitrary body returning *PutApiInteractionResponse
func (c *ClientWithResponses) PutApiInteractionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiInteractionResponse, error) {
	rsp, err := c.PutApiInteractionWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiInteractionResponse(rsp)
}

func (c *ClientWithResponses) PutApiInteractionWithResponse(ctx context.Context, body PutApiInteractionJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiInteractionResponse, error) {
	rsp, err := c.PutApiInteraction(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiInteractionResponse(rsp)
}

// PostApiInteractionBindMfaWithBodyWithResponse request with arbitrary body returning *PostApiInteractionBindMfaResponse
func (c *ClientWithResponses) PostApiInteractionBindMfaWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiInteractionBindMfaResponse, error) {
	rsp, err := c.PostApiInteractionBindMfaWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiInteractionBindMfaResponse(rsp)
}

func (c *ClientWithResponses) PostApiInteractionBindMfaWithResponse(ctx context.Context, body PostApiInteractionBindMfaJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiInteractionBindMfaResponse, error) {
	rsp, err := c.PostApiInteractionBindMfa(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiInteractionBindMfaResponse(rsp)
}

// GetApiInteractionConsentWithResponse request returning *GetApiInteractionConsentResponse
func (c *ClientWithResponses) GetApiInteractionConsentWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiInteractionConsentResponse, error) {
	rsp, err := c.GetApiInteractionConsent(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiInteractionConsentResponse(rsp)
}

// PostApiInteractionConsentWithBodyWithResponse request with arbitrary body returning *PostApiInteractionConsentResponse
func (c *ClientWithResponses) PostApiInteractionConsentWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiInteractionConsentResponse, error) {
	rsp, err := c.PostApiInteractionConsentWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiInteractionConsentResponse(rsp)
}

func (c *ClientWithResponses) PostApiInteractionConsentWithResponse(ctx context.Context, body PostApiInteractionConsentJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiInteractionConsentResponse, error) {
	rsp, err := c.PostApiInteractionConsent(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiInteractionConsentResponse(rsp)
}

// PutApiInteractionEventWithBodyWithResponse request with arbitrary body returning *PutApiInteractionEventResponse
func (c *ClientWithResponses) PutApiInteractionEventWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiInteractionEventResponse, error) {
	rsp, err := c.PutApiInteractionEventWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiInteractionEventResponse(rsp)
}

func (c *ClientWithResponses) PutApiInteractionEventWithResponse(ctx context.Context, body PutApiInteractionEventJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiInteractionEventResponse, error) {
	rsp, err := c.PutApiInteractionEvent(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiInteractionEventResponse(rsp)
}

// PatchApiInteractionIdentifiersWithBodyWithResponse request with arbitrary body returning *PatchApiInteractionIdentifiersResponse
func (c *ClientWithResponses) PatchApiInteractionIdentifiersWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchApiInteractionIdentifiersResponse, error) {
	rsp, err := c.PatchApiInteractionIdentifiersWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchApiInteractionIdentifiersResponse(rsp)
}

func (c *ClientWithResponses) PatchApiInteractionIdentifiersWithResponse(ctx context.Context, body PatchApiInteractionIdentifiersJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchApiInteractionIdentifiersResponse, error) {
	rsp, err := c.PatchApiInteractionIdentifiers(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchApiInteractionIdentifiersResponse(rsp)
}

// PutApiInteractionMfaWithBodyWithResponse request with arbitrary body returning *PutApiInteractionMfaResponse
func (c *ClientWithResponses) PutApiInteractionMfaWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiInteractionMfaResponse, error) {
	rsp, err := c.PutApiInteractionMfaWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiInteractionMfaResponse(rsp)
}

func (c *ClientWithResponses) PutApiInteractionMfaWithResponse(ctx context.Context, body PutApiInteractionMfaJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiInteractionMfaResponse, error) {
	rsp, err := c.PutApiInteractionMfa(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiInteractionMfaResponse(rsp)
}

// PutApiInteractionMfaSkippedWithBodyWithResponse request with arbitrary body returning *PutApiInteractionMfaSkippedResponse
func (c *ClientWithResponses) PutApiInteractionMfaSkippedWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiInteractionMfaSkippedResponse, error) {
	rsp, err := c.PutApiInteractionMfaSkippedWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiInteractionMfaSkippedResponse(rsp)
}

func (c *ClientWithResponses) PutApiInteractionMfaSkippedWithResponse(ctx context.Context, body PutApiInteractionMfaSkippedJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiInteractionMfaSkippedResponse, error) {
	rsp, err := c.PutApiInteractionMfaSkipped(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiInteractionMfaSkippedResponse(rsp)
}

// DeleteApiInteractionProfileWithResponse request returning *DeleteApiInteractionProfileResponse
func (c *ClientWithResponses) DeleteApiInteractionProfileWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*DeleteApiInteractionProfileResponse, error) {
	rsp, err := c.DeleteApiInteractionProfile(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteApiInteractionProfileResponse(rsp)
}

// PatchApiInteractionProfileWithBodyWithResponse request with arbitrary body returning *PatchApiInteractionProfileResponse
func (c *ClientWithResponses) PatchApiInteractionProfileWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchApiInteractionProfileResponse, error) {
	rsp, err := c.PatchApiInteractionProfileWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchApiInteractionProfileResponse(rsp)
}

func (c *ClientWithResponses) PatchApiInteractionProfileWithResponse(ctx context.Context, body PatchApiInteractionProfileJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchApiInteractionProfileResponse, error) {
	rsp, err := c.PatchApiInteractionProfile(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchApiInteractionProfileResponse(rsp)
}

// PutApiInteractionProfileWithBodyWithResponse request with arbitrary body returning *PutApiInteractionProfileResponse
func (c *ClientWithResponses) PutApiInteractionProfileWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiInteractionProfileResponse, error) {
	rsp, err := c.PutApiInteractionProfileWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiInteractionProfileResponse(rsp)
}

func (c *ClientWithResponses) PutApiInteractionProfileWithResponse(ctx context.Context, body PutApiInteractionProfileJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiInteractionProfileResponse, error) {
	rsp, err := c.PutApiInteractionProfile(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiInteractionProfileResponse(rsp)
}

// GetApiInteractionSingleSignOnConnectorsWithResponse request returning *GetApiInteractionSingleSignOnConnectorsResponse
func (c *ClientWithResponses) GetApiInteractionSingleSignOnConnectorsWithResponse(ctx context.Context, params *GetApiInteractionSingleSignOnConnectorsParams, reqEditors ...RequestEditorFn) (*GetApiInteractionSingleSignOnConnectorsResponse, error) {
	rsp, err := c.GetApiInteractionSingleSignOnConnectors(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiInteractionSingleSignOnConnectorsResponse(rsp)
}

// PostApiInteractionSingleSignOnConnectorIdAuthenticationWithBodyWithResponse request with arbitrary body returning *PostApiInteractionSingleSignOnConnectorIdAuthenticationResponse
func (c *ClientWithResponses) PostApiInteractionSingleSignOnConnectorIdAuthenticationWithBodyWithResponse(ctx context.Context, connectorId ConnectorId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiInteractionSingleSignOnConnectorIdAuthenticationResponse, error) {
	rsp, err := c.PostApiInteractionSingleSignOnConnectorIdAuthenticationWithBody(ctx, connectorId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiInteractionSingleSignOnConnectorIdAuthenticationResponse(rsp)
}

func (c *ClientWithResponses) PostApiInteractionSingleSignOnConnectorIdAuthenticationWithResponse(ctx context.Context, connectorId ConnectorId, body PostApiInteractionSingleSignOnConnectorIdAuthenticationJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiInteractionSingleSignOnConnectorIdAuthenticationResponse, error) {
	rsp, err := c.PostApiInteractionSingleSignOnConnectorIdAuthentication(ctx, connectorId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiInteractionSingleSignOnConnectorIdAuthenticationResponse(rsp)
}

// PostApiInteractionSingleSignOnConnectorIdAuthorizationUrlWithBodyWithResponse request with arbitrary body returning *PostApiInteractionSingleSignOnConnectorIdAuthorizationUrlResponse
func (c *ClientWithResponses) PostApiInteractionSingleSignOnConnectorIdAuthorizationUrlWithBodyWithResponse(ctx context.Context, connectorId ConnectorId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiInteractionSingleSignOnConnectorIdAuthorizationUrlResponse, error) {
	rsp, err := c.PostApiInteractionSingleSignOnConnectorIdAuthorizationUrlWithBody(ctx, connectorId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiInteractionSingleSignOnConnectorIdAuthorizationUrlResponse(rsp)
}

func (c *ClientWithResponses) PostApiInteractionSingleSignOnConnectorIdAuthorizationUrlWithResponse(ctx context.Context, connectorId ConnectorId, body PostApiInteractionSingleSignOnConnectorIdAuthorizationUrlJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiInteractionSingleSignOnConnectorIdAuthorizationUrlResponse, error) {
	rsp, err := c.PostApiInteractionSingleSignOnConnectorIdAuthorizationUrl(ctx, connectorId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiInteractionSingleSignOnConnectorIdAuthorizationUrlResponse(rsp)
}

// PostApiInteractionSingleSignOnConnectorIdRegistrationWithResponse request returning *PostApiInteractionSingleSignOnConnectorIdRegistrationResponse
func (c *ClientWithResponses) PostApiInteractionSingleSignOnConnectorIdRegistrationWithResponse(ctx context.Context, connectorId ConnectorId, reqEditors ...RequestEditorFn) (*PostApiInteractionSingleSignOnConnectorIdRegistrationResponse, error) {
	rsp, err := c.PostApiInteractionSingleSignOnConnectorIdRegistration(ctx, connectorId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiInteractionSingleSignOnConnectorIdRegistrationResponse(rsp)
}

// PostApiInteractionSubmitWithResponse request returning *PostApiInteractionSubmitResponse
func (c *ClientWithResponses) PostApiInteractionSubmitWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PostApiInteractionSubmitResponse, error) {
	rsp, err := c.PostApiInteractionSubmit(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiInteractionSubmitResponse(rsp)
}

// PostApiInteractionVerificationSocialAuthorizationUriWithBodyWithResponse request with arbitrary body returning *PostApiInteractionVerificationSocialAuthorizationUriResponse
func (c *ClientWithResponses) PostApiInteractionVerificationSocialAuthorizationUriWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiInteractionVerificationSocialAuthorizationUriResponse, error) {
	rsp, err := c.PostApiInteractionVerificationSocialAuthorizationUriWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiInteractionVerificationSocialAuthorizationUriResponse(rsp)
}

func (c *ClientWithResponses) PostApiInteractionVerificationSocialAuthorizationUriWithResponse(ctx context.Context, body PostApiInteractionVerificationSocialAuthorizationUriJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiInteractionVerificationSocialAuthorizationUriResponse, error) {
	rsp, err := c.PostApiInteractionVerificationSocialAuthorizationUri(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiInteractionVerificationSocialAuthorizationUriResponse(rsp)
}

// PostApiInteractionVerificationTotpWithResponse request returning *PostApiInteractionVerificationTotpResponse
func (c *ClientWithResponses) PostApiInteractionVerificationTotpWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PostApiInteractionVerificationTotpResponse, error) {
	rsp, err := c.PostApiInteractionVerificationTotp(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiInteractionVerificationTotpResponse(rsp)
}

// PostApiInteractionVerificationVerificationCodeWithBodyWithResponse request with arbitrary body returning *PostApiInteractionVerificationVerificationCodeResponse
func (c *ClientWithResponses) PostApiInteractionVerificationVerificationCodeWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiInteractionVerificationVerificationCodeResponse, error) {
	rsp, err := c.PostApiInteractionVerificationVerificationCodeWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiInteractionVerificationVerificationCodeResponse(rsp)
}

func (c *ClientWithResponses) PostApiInteractionVerificationVerificationCodeWithResponse(ctx context.Context, body PostApiInteractionVerificationVerificationCodeJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiInteractionVerificationVerificationCodeResponse, error) {
	rsp, err := c.PostApiInteractionVerificationVerificationCode(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiInteractionVerificationVerificationCodeResponse(rsp)
}

// PostApiInteractionVerificationWebauthnAuthenticationWithResponse request returning *PostApiInteractionVerificationWebauthnAuthenticationResponse
func (c *ClientWithResponses) PostApiInteractionVerificationWebauthnAuthenticationWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PostApiInteractionVerificationWebauthnAuthenticationResponse, error) {
	rsp, err := c.PostApiInteractionVerificationWebauthnAuthentication(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiInteractionVerificationWebauthnAuthenticationResponse(rsp)
}

// PostApiInteractionVerificationWebauthnRegistrationWithResponse request returning *PostApiInteractionVerificationWebauthnRegistrationResponse
func (c *ClientWithResponses) PostApiInteractionVerificationWebauthnRegistrationWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PostApiInteractionVerificationWebauthnRegistrationResponse, error) {
	rsp, err := c.PostApiInteractionVerificationWebauthnRegistration(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiInteractionVerificationWebauthnRegistrationResponse(rsp)
}

// ListLogsWithResponse request returning *ListLogsResponse
func (c *ClientWithResponses) ListLogsWithResponse(ctx context.Context, params *ListLogsParams, reqEditors ...RequestEditorFn) (*ListLogsResponse, error) {
	rsp, err := c.ListLogs(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListLogsResponse(rsp)
}

// GetLogWithResponse request returning *GetLogResponse
func (c *ClientWithResponses) GetLogWithResponse(ctx context.Context, id LogIdRoot, reqEditors ...RequestEditorFn) (*GetLogResponse, error) {
	rsp, err := c.GetLog(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetLogResponse(rsp)
}

// GetProfileWithResponse request returning *GetProfileResponse
func (c *ClientWithResponses) GetProfileWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetProfileResponse, error) {
	rsp, err := c.GetProfile(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetProfileResponse(rsp)
}

// UpdateProfileWithBodyWithResponse request with arbitrary body returning *UpdateProfileResponse
func (c *ClientWithResponses) UpdateProfileWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateProfileResponse, error) {
	rsp, err := c.UpdateProfileWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateProfileResponse(rsp)
}

func (c *ClientWithResponses) UpdateProfileWithResponse(ctx context.Context, body UpdateProfileJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateProfileResponse, error) {
	rsp, err := c.UpdateProfile(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateProfileResponse(rsp)
}

// AddUserIdentitiesWithBodyWithResponse request with arbitrary body returning *AddUserIdentitiesResponse
func (c *ClientWithResponses) AddUserIdentitiesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddUserIdentitiesResponse, error) {
	rsp, err := c.AddUserIdentitiesWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddUserIdentitiesResponse(rsp)
}

func (c *ClientWithResponses) AddUserIdentitiesWithResponse(ctx context.Context, body AddUserIdentitiesJSONRequestBody, reqEditors ...RequestEditorFn) (*AddUserIdentitiesResponse, error) {
	rsp, err := c.AddUserIdentities(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddUserIdentitiesResponse(rsp)
}

// DeleteIdentityWithResponse request returning *DeleteIdentityResponse
func (c *ClientWithResponses) DeleteIdentityWithResponse(ctx context.Context, target string, reqEditors ...RequestEditorFn) (*DeleteIdentityResponse, error) {
	rsp, err := c.DeleteIdentity(ctx, target, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteIdentityResponse(rsp)
}

// GetMfaVerificationsWithResponse request returning *GetMfaVerificationsResponse
func (c *ClientWithResponses) GetMfaVerificationsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetMfaVerificationsResponse, error) {
	rsp, err := c.GetMfaVerifications(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetMfaVerificationsResponse(rsp)
}

// AddMfaVerificationWithBodyWithResponse request with arbitrary body returning *AddMfaVerificationResponse
func (c *ClientWithResponses) AddMfaVerificationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddMfaVerificationResponse, error) {
	rsp, err := c.AddMfaVerificationWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddMfaVerificationResponse(rsp)
}

func (c *ClientWithResponses) AddMfaVerificationWithResponse(ctx context.Context, body AddMfaVerificationJSONRequestBody, reqEditors ...RequestEditorFn) (*AddMfaVerificationResponse, error) {
	rsp, err := c.AddMfaVerification(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddMfaVerificationResponse(rsp)
}

// DeleteMfaVerificationWithResponse request returning *DeleteMfaVerificationResponse
func (c *ClientWithResponses) DeleteMfaVerificationWithResponse(ctx context.Context, verificationId VerificationId, reqEditors ...RequestEditorFn) (*DeleteMfaVerificationResponse, error) {
	rsp, err := c.DeleteMfaVerification(ctx, verificationId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteMfaVerificationResponse(rsp)
}

// UpdateMfaVerificationNameWithBodyWithResponse request with arbitrary body returning *UpdateMfaVerificationNameResponse
func (c *ClientWithResponses) UpdateMfaVerificationNameWithBodyWithResponse(ctx context.Context, verificationId VerificationId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateMfaVerificationNameResponse, error) {
	rsp, err := c.UpdateMfaVerificationNameWithBody(ctx, verificationId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateMfaVerificationNameResponse(rsp)
}

func (c *ClientWithResponses) UpdateMfaVerificationNameWithResponse(ctx context.Context, verificationId VerificationId, body UpdateMfaVerificationNameJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateMfaVerificationNameResponse, error) {
	rsp, err := c.UpdateMfaVerificationName(ctx, verificationId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateMfaVerificationNameResponse(rsp)
}

// UpdatePasswordWithBodyWithResponse request with arbitrary body returning *UpdatePasswordResponse
func (c *ClientWithResponses) UpdatePasswordWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdatePasswordResponse, error) {
	rsp, err := c.UpdatePasswordWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdatePasswordResponse(rsp)
}

func (c *ClientWithResponses) UpdatePasswordWithResponse(ctx context.Context, body UpdatePasswordJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdatePasswordResponse, error) {
	rsp, err := c.UpdatePassword(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdatePasswordResponse(rsp)
}

// DeletePrimaryEmailWithResponse request returning *DeletePrimaryEmailResponse
func (c *ClientWithResponses) DeletePrimaryEmailWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*DeletePrimaryEmailResponse, error) {
	rsp, err := c.DeletePrimaryEmail(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeletePrimaryEmailResponse(rsp)
}

// UpdatePrimaryEmailWithBodyWithResponse request with arbitrary body returning *UpdatePrimaryEmailResponse
func (c *ClientWithResponses) UpdatePrimaryEmailWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdatePrimaryEmailResponse, error) {
	rsp, err := c.UpdatePrimaryEmailWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdatePrimaryEmailResponse(rsp)
}

func (c *ClientWithResponses) UpdatePrimaryEmailWithResponse(ctx context.Context, body UpdatePrimaryEmailJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdatePrimaryEmailResponse, error) {
	rsp, err := c.UpdatePrimaryEmail(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdatePrimaryEmailResponse(rsp)
}

// DeletePrimaryPhoneWithResponse request returning *DeletePrimaryPhoneResponse
func (c *ClientWithResponses) DeletePrimaryPhoneWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*DeletePrimaryPhoneResponse, error) {
	rsp, err := c.DeletePrimaryPhone(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeletePrimaryPhoneResponse(rsp)
}

// UpdatePrimaryPhoneWithBodyWithResponse request with arbitrary body returning *UpdatePrimaryPhoneResponse
func (c *ClientWithResponses) UpdatePrimaryPhoneWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdatePrimaryPhoneResponse, error) {
	rsp, err := c.UpdatePrimaryPhoneWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdatePrimaryPhoneResponse(rsp)
}

func (c *ClientWithResponses) UpdatePrimaryPhoneWithResponse(ctx context.Context, body UpdatePrimaryPhoneJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdatePrimaryPhoneResponse, error) {
	rsp, err := c.UpdatePrimaryPhone(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdatePrimaryPhoneResponse(rsp)
}

// UpdateOtherProfileWithBodyWithResponse request with arbitrary body returning *UpdateOtherProfileResponse
func (c *ClientWithResponses) UpdateOtherProfileWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateOtherProfileResponse, error) {
	rsp, err := c.UpdateOtherProfileWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateOtherProfileResponse(rsp)
}

func (c *ClientWithResponses) UpdateOtherProfileWithResponse(ctx context.Context, body UpdateOtherProfileJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateOtherProfileResponse, error) {
	rsp, err := c.UpdateOtherProfile(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateOtherProfileResponse(rsp)
}

// ListOneTimeTokensWithResponse request returning *ListOneTimeTokensResponse
func (c *ClientWithResponses) ListOneTimeTokensWithResponse(ctx context.Context, params *ListOneTimeTokensParams, reqEditors ...RequestEditorFn) (*ListOneTimeTokensResponse, error) {
	rsp, err := c.ListOneTimeTokens(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListOneTimeTokensResponse(rsp)
}

// AddOneTimeTokensWithBodyWithResponse request with arbitrary body returning *AddOneTimeTokensResponse
func (c *ClientWithResponses) AddOneTimeTokensWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddOneTimeTokensResponse, error) {
	rsp, err := c.AddOneTimeTokensWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddOneTimeTokensResponse(rsp)
}

func (c *ClientWithResponses) AddOneTimeTokensWithResponse(ctx context.Context, body AddOneTimeTokensJSONRequestBody, reqEditors ...RequestEditorFn) (*AddOneTimeTokensResponse, error) {
	rsp, err := c.AddOneTimeTokens(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddOneTimeTokensResponse(rsp)
}

// VerifyOneTimeTokenWithBodyWithResponse request with arbitrary body returning *VerifyOneTimeTokenResponse
func (c *ClientWithResponses) VerifyOneTimeTokenWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*VerifyOneTimeTokenResponse, error) {
	rsp, err := c.VerifyOneTimeTokenWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseVerifyOneTimeTokenResponse(rsp)
}

func (c *ClientWithResponses) VerifyOneTimeTokenWithResponse(ctx context.Context, body VerifyOneTimeTokenJSONRequestBody, reqEditors ...RequestEditorFn) (*VerifyOneTimeTokenResponse, error) {
	rsp, err := c.VerifyOneTimeToken(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseVerifyOneTimeTokenResponse(rsp)
}

// DeleteOneTimeTokenWithResponse request returning *DeleteOneTimeTokenResponse
func (c *ClientWithResponses) DeleteOneTimeTokenWithResponse(ctx context.Context, id OneTimeTokenIdRoot, reqEditors ...RequestEditorFn) (*DeleteOneTimeTokenResponse, error) {
	rsp, err := c.DeleteOneTimeToken(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteOneTimeTokenResponse(rsp)
}

// GetOneTimeTokenWithResponse request returning *GetOneTimeTokenResponse
func (c *ClientWithResponses) GetOneTimeTokenWithResponse(ctx context.Context, id OneTimeTokenIdRoot, reqEditors ...RequestEditorFn) (*GetOneTimeTokenResponse, error) {
	rsp, err := c.GetOneTimeToken(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOneTimeTokenResponse(rsp)
}

// ReplaceOneTimeTokenStatusWithBodyWithResponse request with arbitrary body returning *ReplaceOneTimeTokenStatusResponse
func (c *ClientWithResponses) ReplaceOneTimeTokenStatusWithBodyWithResponse(ctx context.Context, id OneTimeTokenIdRoot, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReplaceOneTimeTokenStatusResponse, error) {
	rsp, err := c.ReplaceOneTimeTokenStatusWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReplaceOneTimeTokenStatusResponse(rsp)
}

func (c *ClientWithResponses) ReplaceOneTimeTokenStatusWithResponse(ctx context.Context, id OneTimeTokenIdRoot, body ReplaceOneTimeTokenStatusJSONRequestBody, reqEditors ...RequestEditorFn) (*ReplaceOneTimeTokenStatusResponse, error) {
	rsp, err := c.ReplaceOneTimeTokenStatus(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReplaceOneTimeTokenStatusResponse(rsp)
}

// ListOrganizationInvitationsWithResponse request returning *ListOrganizationInvitationsResponse
func (c *ClientWithResponses) ListOrganizationInvitationsWithResponse(ctx context.Context, params *ListOrganizationInvitationsParams, reqEditors ...RequestEditorFn) (*ListOrganizationInvitationsResponse, error) {
	rsp, err := c.ListOrganizationInvitations(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListOrganizationInvitationsResponse(rsp)
}

// CreateOrganizationInvitationWithBodyWithResponse request with arbitrary body returning *CreateOrganizationInvitationResponse
func (c *ClientWithResponses) CreateOrganizationInvitationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateOrganizationInvitationResponse, error) {
	rsp, err := c.CreateOrganizationInvitationWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateOrganizationInvitationResponse(rsp)
}

func (c *ClientWithResponses) CreateOrganizationInvitationWithResponse(ctx context.Context, body CreateOrganizationInvitationJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateOrganizationInvitationResponse, error) {
	rsp, err := c.CreateOrganizationInvitation(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateOrganizationInvitationResponse(rsp)
}

// DeleteOrganizationInvitationWithResponse request returning *DeleteOrganizationInvitationResponse
func (c *ClientWithResponses) DeleteOrganizationInvitationWithResponse(ctx context.Context, id OrganizationInvitationIdRoot, reqEditors ...RequestEditorFn) (*DeleteOrganizationInvitationResponse, error) {
	rsp, err := c.DeleteOrganizationInvitation(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteOrganizationInvitationResponse(rsp)
}

// GetOrganizationInvitationWithResponse request returning *GetOrganizationInvitationResponse
func (c *ClientWithResponses) GetOrganizationInvitationWithResponse(ctx context.Context, id OrganizationInvitationIdRoot, reqEditors ...RequestEditorFn) (*GetOrganizationInvitationResponse, error) {
	rsp, err := c.GetOrganizationInvitation(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOrganizationInvitationResponse(rsp)
}

// CreateOrganizationInvitationMessageWithBodyWithResponse request with arbitrary body returning *CreateOrganizationInvitationMessageResponse
func (c *ClientWithResponses) CreateOrganizationInvitationMessageWithBodyWithResponse(ctx context.Context, id OrganizationInvitationIdRoot, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateOrganizationInvitationMessageResponse, error) {
	rsp, err := c.CreateOrganizationInvitationMessageWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateOrganizationInvitationMessageResponse(rsp)
}

func (c *ClientWithResponses) CreateOrganizationInvitationMessageWithResponse(ctx context.Context, id OrganizationInvitationIdRoot, body CreateOrganizationInvitationMessageJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateOrganizationInvitationMessageResponse, error) {
	rsp, err := c.CreateOrganizationInvitationMessage(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateOrganizationInvitationMessageResponse(rsp)
}

// ReplaceOrganizationInvitationStatusWithBodyWithResponse request with arbitrary body returning *ReplaceOrganizationInvitationStatusResponse
func (c *ClientWithResponses) ReplaceOrganizationInvitationStatusWithBodyWithResponse(ctx context.Context, id OrganizationInvitationIdRoot, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReplaceOrganizationInvitationStatusResponse, error) {
	rsp, err := c.ReplaceOrganizationInvitationStatusWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReplaceOrganizationInvitationStatusResponse(rsp)
}

func (c *ClientWithResponses) ReplaceOrganizationInvitationStatusWithResponse(ctx context.Context, id OrganizationInvitationIdRoot, body ReplaceOrganizationInvitationStatusJSONRequestBody, reqEditors ...RequestEditorFn) (*ReplaceOrganizationInvitationStatusResponse, error) {
	rsp, err := c.ReplaceOrganizationInvitationStatus(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReplaceOrganizationInvitationStatusResponse(rsp)
}

// ListOrganizationRolesWithResponse request returning *ListOrganizationRolesResponse
func (c *ClientWithResponses) ListOrganizationRolesWithResponse(ctx context.Context, params *ListOrganizationRolesParams, reqEditors ...RequestEditorFn) (*ListOrganizationRolesResponse, error) {
	rsp, err := c.ListOrganizationRoles(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListOrganizationRolesResponse(rsp)
}

// CreateOrganizationRoleWithBodyWithResponse request with arbitrary body returning *CreateOrganizationRoleResponse
func (c *ClientWithResponses) CreateOrganizationRoleWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateOrganizationRoleResponse, error) {
	rsp, err := c.CreateOrganizationRoleWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateOrganizationRoleResponse(rsp)
}

func (c *ClientWithResponses) CreateOrganizationRoleWithResponse(ctx context.Context, body CreateOrganizationRoleJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateOrganizationRoleResponse, error) {
	rsp, err := c.CreateOrganizationRole(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateOrganizationRoleResponse(rsp)
}

// DeleteOrganizationRoleWithResponse request returning *DeleteOrganizationRoleResponse
func (c *ClientWithResponses) DeleteOrganizationRoleWithResponse(ctx context.Context, id OrganizationRoleIdRoot, reqEditors ...RequestEditorFn) (*DeleteOrganizationRoleResponse, error) {
	rsp, err := c.DeleteOrganizationRole(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteOrganizationRoleResponse(rsp)
}

// GetOrganizationRoleWithResponse request returning *GetOrganizationRoleResponse
func (c *ClientWithResponses) GetOrganizationRoleWithResponse(ctx context.Context, id OrganizationRoleIdRoot, reqEditors ...RequestEditorFn) (*GetOrganizationRoleResponse, error) {
	rsp, err := c.GetOrganizationRole(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOrganizationRoleResponse(rsp)
}

// UpdateOrganizationRoleWithBodyWithResponse request with arbitrary body returning *UpdateOrganizationRoleResponse
func (c *ClientWithResponses) UpdateOrganizationRoleWithBodyWithResponse(ctx context.Context, id OrganizationRoleIdRoot, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateOrganizationRoleResponse, error) {
	rsp, err := c.UpdateOrganizationRoleWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateOrganizationRoleResponse(rsp)
}

func (c *ClientWithResponses) UpdateOrganizationRoleWithResponse(ctx context.Context, id OrganizationRoleIdRoot, body UpdateOrganizationRoleJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateOrganizationRoleResponse, error) {
	rsp, err := c.UpdateOrganizationRole(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateOrganizationRoleResponse(rsp)
}

// ListOrganizationRoleResourceScopesWithResponse request returning *ListOrganizationRoleResourceScopesResponse
func (c *ClientWithResponses) ListOrganizationRoleResourceScopesWithResponse(ctx context.Context, id OrganizationRoleIdRoot, params *ListOrganizationRoleResourceScopesParams, reqEditors ...RequestEditorFn) (*ListOrganizationRoleResourceScopesResponse, error) {
	rsp, err := c.ListOrganizationRoleResourceScopes(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListOrganizationRoleResourceScopesResponse(rsp)
}

// CreateOrganizationRoleResourceScopeWithBodyWithResponse request with arbitrary body returning *CreateOrganizationRoleResourceScopeResponse
func (c *ClientWithResponses) CreateOrganizationRoleResourceScopeWithBodyWithResponse(ctx context.Context, id OrganizationRoleIdRoot, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateOrganizationRoleResourceScopeResponse, error) {
	rsp, err := c.CreateOrganizationRoleResourceScopeWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateOrganizationRoleResourceScopeResponse(rsp)
}

func (c *ClientWithResponses) CreateOrganizationRoleResourceScopeWithResponse(ctx context.Context, id OrganizationRoleIdRoot, body CreateOrganizationRoleResourceScopeJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateOrganizationRoleResourceScopeResponse, error) {
	rsp, err := c.CreateOrganizationRoleResourceScope(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateOrganizationRoleResourceScopeResponse(rsp)
}

// ReplaceOrganizationRoleResourceScopesWithBodyWithResponse request with arbitrary body returning *ReplaceOrganizationRoleResourceScopesResponse
func (c *ClientWithResponses) ReplaceOrganizationRoleResourceScopesWithBodyWithResponse(ctx context.Context, id OrganizationRoleIdRoot, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReplaceOrganizationRoleResourceScopesResponse, error) {
	rsp, err := c.ReplaceOrganizationRoleResourceScopesWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReplaceOrganizationRoleResourceScopesResponse(rsp)
}

func (c *ClientWithResponses) ReplaceOrganizationRoleResourceScopesWithResponse(ctx context.Context, id OrganizationRoleIdRoot, body ReplaceOrganizationRoleResourceScopesJSONRequestBody, reqEditors ...RequestEditorFn) (*ReplaceOrganizationRoleResourceScopesResponse, error) {
	rsp, err := c.ReplaceOrganizationRoleResourceScopes(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReplaceOrganizationRoleResourceScopesResponse(rsp)
}

// DeleteOrganizationRoleResourceScopeWithResponse request returning *DeleteOrganizationRoleResourceScopeResponse
func (c *ClientWithResponses) DeleteOrganizationRoleResourceScopeWithResponse(ctx context.Context, id OrganizationRoleIdRoot, scopeId ScopeId, reqEditors ...RequestEditorFn) (*DeleteOrganizationRoleResourceScopeResponse, error) {
	rsp, err := c.DeleteOrganizationRoleResourceScope(ctx, id, scopeId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteOrganizationRoleResourceScopeResponse(rsp)
}

// ListOrganizationRoleScopesWithResponse request returning *ListOrganizationRoleScopesResponse
func (c *ClientWithResponses) ListOrganizationRoleScopesWithResponse(ctx context.Context, id OrganizationRoleIdRoot, params *ListOrganizationRoleScopesParams, reqEditors ...RequestEditorFn) (*ListOrganizationRoleScopesResponse, error) {
	rsp, err := c.ListOrganizationRoleScopes(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListOrganizationRoleScopesResponse(rsp)
}

// CreateOrganizationRoleScopeWithBodyWithResponse request with arbitrary body returning *CreateOrganizationRoleScopeResponse
func (c *ClientWithResponses) CreateOrganizationRoleScopeWithBodyWithResponse(ctx context.Context, id OrganizationRoleIdRoot, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateOrganizationRoleScopeResponse, error) {
	rsp, err := c.CreateOrganizationRoleScopeWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateOrganizationRoleScopeResponse(rsp)
}

func (c *ClientWithResponses) CreateOrganizationRoleScopeWithResponse(ctx context.Context, id OrganizationRoleIdRoot, body CreateOrganizationRoleScopeJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateOrganizationRoleScopeResponse, error) {
	rsp, err := c.CreateOrganizationRoleScope(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateOrganizationRoleScopeResponse(rsp)
}

// ReplaceOrganizationRoleScopesWithBodyWithResponse request with arbitrary body returning *ReplaceOrganizationRoleScopesResponse
func (c *ClientWithResponses) ReplaceOrganizationRoleScopesWithBodyWithResponse(ctx context.Context, id OrganizationRoleIdRoot, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReplaceOrganizationRoleScopesResponse, error) {
	rsp, err := c.ReplaceOrganizationRoleScopesWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReplaceOrganizationRoleScopesResponse(rsp)
}

func (c *ClientWithResponses) ReplaceOrganizationRoleScopesWithResponse(ctx context.Context, id OrganizationRoleIdRoot, body ReplaceOrganizationRoleScopesJSONRequestBody, reqEditors ...RequestEditorFn) (*ReplaceOrganizationRoleScopesResponse, error) {
	rsp, err := c.ReplaceOrganizationRoleScopes(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReplaceOrganizationRoleScopesResponse(rsp)
}

// DeleteOrganizationRoleScopeWithResponse request returning *DeleteOrganizationRoleScopeResponse
func (c *ClientWithResponses) DeleteOrganizationRoleScopeWithResponse(ctx context.Context, id OrganizationRoleIdRoot, organizationScopeId OrganizationScopeId, reqEditors ...RequestEditorFn) (*DeleteOrganizationRoleScopeResponse, error) {
	rsp, err := c.DeleteOrganizationRoleScope(ctx, id, organizationScopeId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteOrganizationRoleScopeResponse(rsp)
}

// ListOrganizationScopesWithResponse request returning *ListOrganizationScopesResponse
func (c *ClientWithResponses) ListOrganizationScopesWithResponse(ctx context.Context, params *ListOrganizationScopesParams, reqEditors ...RequestEditorFn) (*ListOrganizationScopesResponse, error) {
	rsp, err := c.ListOrganizationScopes(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListOrganizationScopesResponse(rsp)
}

// CreateOrganizationScopeWithBodyWithResponse request with arbitrary body returning *CreateOrganizationScopeResponse
func (c *ClientWithResponses) CreateOrganizationScopeWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateOrganizationScopeResponse, error) {
	rsp, err := c.CreateOrganizationScopeWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateOrganizationScopeResponse(rsp)
}

func (c *ClientWithResponses) CreateOrganizationScopeWithResponse(ctx context.Context, body CreateOrganizationScopeJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateOrganizationScopeResponse, error) {
	rsp, err := c.CreateOrganizationScope(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateOrganizationScopeResponse(rsp)
}

// DeleteOrganizationScopeWithResponse request returning *DeleteOrganizationScopeResponse
func (c *ClientWithResponses) DeleteOrganizationScopeWithResponse(ctx context.Context, id OrganizationScopeIdRoot, reqEditors ...RequestEditorFn) (*DeleteOrganizationScopeResponse, error) {
	rsp, err := c.DeleteOrganizationScope(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteOrganizationScopeResponse(rsp)
}

// GetOrganizationScopeWithResponse request returning *GetOrganizationScopeResponse
func (c *ClientWithResponses) GetOrganizationScopeWithResponse(ctx context.Context, id OrganizationScopeIdRoot, reqEditors ...RequestEditorFn) (*GetOrganizationScopeResponse, error) {
	rsp, err := c.GetOrganizationScope(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOrganizationScopeResponse(rsp)
}

// UpdateOrganizationScopeWithBodyWithResponse request with arbitrary body returning *UpdateOrganizationScopeResponse
func (c *ClientWithResponses) UpdateOrganizationScopeWithBodyWithResponse(ctx context.Context, id OrganizationScopeIdRoot, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateOrganizationScopeResponse, error) {
	rsp, err := c.UpdateOrganizationScopeWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateOrganizationScopeResponse(rsp)
}

func (c *ClientWithResponses) UpdateOrganizationScopeWithResponse(ctx context.Context, id OrganizationScopeIdRoot, body UpdateOrganizationScopeJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateOrganizationScopeResponse, error) {
	rsp, err := c.UpdateOrganizationScope(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateOrganizationScopeResponse(rsp)
}

// ListOrganizationsWithResponse request returning *ListOrganizationsResponse
func (c *ClientWithResponses) ListOrganizationsWithResponse(ctx context.Context, params *ListOrganizationsParams, reqEditors ...RequestEditorFn) (*ListOrganizationsResponse, error) {
	rsp, err := c.ListOrganizations(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListOrganizationsResponse(rsp)
}

// CreateOrganizationWithBodyWithResponse request with arbitrary body returning *CreateOrganizationResponse
func (c *ClientWithResponses) CreateOrganizationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateOrganizationResponse, error) {
	rsp, err := c.CreateOrganizationWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateOrganizationResponse(rsp)
}

func (c *ClientWithResponses) CreateOrganizationWithResponse(ctx context.Context, body CreateOrganizationJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateOrganizationResponse, error) {
	rsp, err := c.CreateOrganization(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateOrganizationResponse(rsp)
}

// DeleteOrganizationWithResponse request returning *DeleteOrganizationResponse
func (c *ClientWithResponses) DeleteOrganizationWithResponse(ctx context.Context, id OrganizationIdRoot, reqEditors ...RequestEditorFn) (*DeleteOrganizationResponse, error) {
	rsp, err := c.DeleteOrganization(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteOrganizationResponse(rsp)
}

// GetOrganizationWithResponse request returning *GetOrganizationResponse
func (c *ClientWithResponses) GetOrganizationWithResponse(ctx context.Context, id OrganizationIdRoot, reqEditors ...RequestEditorFn) (*GetOrganizationResponse, error) {
	rsp, err := c.GetOrganization(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOrganizationResponse(rsp)
}

// UpdateOrganizationWithBodyWithResponse request with arbitrary body returning *UpdateOrganizationResponse
func (c *ClientWithResponses) UpdateOrganizationWithBodyWithResponse(ctx context.Context, id OrganizationIdRoot, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateOrganizationResponse, error) {
	rsp, err := c.UpdateOrganizationWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateOrganizationResponse(rsp)
}

func (c *ClientWithResponses) UpdateOrganizationWithResponse(ctx context.Context, id OrganizationIdRoot, body UpdateOrganizationJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateOrganizationResponse, error) {
	rsp, err := c.UpdateOrganization(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateOrganizationResponse(rsp)
}

// ListOrganizationApplicationsWithResponse request returning *ListOrganizationApplicationsResponse
func (c *ClientWithResponses) ListOrganizationApplicationsWithResponse(ctx context.Context, id OrganizationIdRoot, params *ListOrganizationApplicationsParams, reqEditors ...RequestEditorFn) (*ListOrganizationApplicationsResponse, error) {
	rsp, err := c.ListOrganizationApplications(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListOrganizationApplicationsResponse(rsp)
}

// AddOrganizationApplicationsWithBodyWithResponse request with arbitrary body returning *AddOrganizationApplicationsResponse
func (c *ClientWithResponses) AddOrganizationApplicationsWithBodyWithResponse(ctx context.Context, id OrganizationIdRoot, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddOrganizationApplicationsResponse, error) {
	rsp, err := c.AddOrganizationApplicationsWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddOrganizationApplicationsResponse(rsp)
}

func (c *ClientWithResponses) AddOrganizationApplicationsWithResponse(ctx context.Context, id OrganizationIdRoot, body AddOrganizationApplicationsJSONRequestBody, reqEditors ...RequestEditorFn) (*AddOrganizationApplicationsResponse, error) {
	rsp, err := c.AddOrganizationApplications(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddOrganizationApplicationsResponse(rsp)
}

// ReplaceOrganizationApplicationsWithBodyWithResponse request with arbitrary body returning *ReplaceOrganizationApplicationsResponse
func (c *ClientWithResponses) ReplaceOrganizationApplicationsWithBodyWithResponse(ctx context.Context, id OrganizationIdRoot, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReplaceOrganizationApplicationsResponse, error) {
	rsp, err := c.ReplaceOrganizationApplicationsWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReplaceOrganizationApplicationsResponse(rsp)
}

func (c *ClientWithResponses) ReplaceOrganizationApplicationsWithResponse(ctx context.Context, id OrganizationIdRoot, body ReplaceOrganizationApplicationsJSONRequestBody, reqEditors ...RequestEditorFn) (*ReplaceOrganizationApplicationsResponse, error) {
	rsp, err := c.ReplaceOrganizationApplications(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReplaceOrganizationApplicationsResponse(rsp)
}

// AssignOrganizationRolesToApplicationsWithBodyWithResponse request with arbitrary body returning *AssignOrganizationRolesToApplicationsResponse
func (c *ClientWithResponses) AssignOrganizationRolesToApplicationsWithBodyWithResponse(ctx context.Context, id OrganizationIdRoot, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AssignOrganizationRolesToApplicationsResponse, error) {
	rsp, err := c.AssignOrganizationRolesToApplicationsWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAssignOrganizationRolesToApplicationsResponse(rsp)
}

func (c *ClientWithResponses) AssignOrganizationRolesToApplicationsWithResponse(ctx context.Context, id OrganizationIdRoot, body AssignOrganizationRolesToApplicationsJSONRequestBody, reqEditors ...RequestEditorFn) (*AssignOrganizationRolesToApplicationsResponse, error) {
	rsp, err := c.AssignOrganizationRolesToApplications(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAssignOrganizationRolesToApplicationsResponse(rsp)
}

// DeleteOrganizationApplicationWithResponse request returning *DeleteOrganizationApplicationResponse
func (c *ClientWithResponses) DeleteOrganizationApplicationWithResponse(ctx context.Context, id OrganizationIdRoot, applicationId ApplicationId, reqEditors ...RequestEditorFn) (*DeleteOrganizationApplicationResponse, error) {
	rsp, err := c.DeleteOrganizationApplication(ctx, id, applicationId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteOrganizationApplicationResponse(rsp)
}

// ListOrganizationApplicationRolesWithResponse request returning *ListOrganizationApplicationRolesResponse
func (c *ClientWithResponses) ListOrganizationApplicationRolesWithResponse(ctx context.Context, id OrganizationIdRoot, applicationId ApplicationId, params *ListOrganizationApplicationRolesParams, reqEditors ...RequestEditorFn) (*ListOrganizationApplicationRolesResponse, error) {
	rsp, err := c.ListOrganizationApplicationRoles(ctx, id, applicationId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListOrganizationApplicationRolesResponse(rsp)
}

// AssignOrganizationRolesToApplicationWithBodyWithResponse request with arbitrary body returning *AssignOrganizationRolesToApplicationResponse
func (c *ClientWithResponses) AssignOrganizationRolesToApplicationWithBodyWithResponse(ctx context.Context, id OrganizationIdRoot, applicationId ApplicationId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AssignOrganizationRolesToApplicationResponse, error) {
	rsp, err := c.AssignOrganizationRolesToApplicationWithBody(ctx, id, applicationId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAssignOrganizationRolesToApplicationResponse(rsp)
}

func (c *ClientWithResponses) AssignOrganizationRolesToApplicationWithResponse(ctx context.Context, id OrganizationIdRoot, applicationId ApplicationId, body AssignOrganizationRolesToApplicationJSONRequestBody, reqEditors ...RequestEditorFn) (*AssignOrganizationRolesToApplicationResponse, error) {
	rsp, err := c.AssignOrganizationRolesToApplication(ctx, id, applicationId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAssignOrganizationRolesToApplicationResponse(rsp)
}

// ReplaceOrganizationApplicationRolesWithBodyWithResponse request with arbitrary body returning *ReplaceOrganizationApplicationRolesResponse
func (c *ClientWithResponses) ReplaceOrganizationApplicationRolesWithBodyWithResponse(ctx context.Context, id OrganizationIdRoot, applicationId ApplicationId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReplaceOrganizationApplicationRolesResponse, error) {
	rsp, err := c.ReplaceOrganizationApplicationRolesWithBody(ctx, id, applicationId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReplaceOrganizationApplicationRolesResponse(rsp)
}

func (c *ClientWithResponses) ReplaceOrganizationApplicationRolesWithResponse(ctx context.Context, id OrganizationIdRoot, applicationId ApplicationId, body ReplaceOrganizationApplicationRolesJSONRequestBody, reqEditors ...RequestEditorFn) (*ReplaceOrganizationApplicationRolesResponse, error) {
	rsp, err := c.ReplaceOrganizationApplicationRoles(ctx, id, applicationId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReplaceOrganizationApplicationRolesResponse(rsp)
}

// DeleteOrganizationApplicationRoleWithResponse request returning *DeleteOrganizationApplicationRoleResponse
func (c *ClientWithResponses) DeleteOrganizationApplicationRoleWithResponse(ctx context.Context, id OrganizationIdRoot, applicationId ApplicationId, organizationRoleId OrganizationRoleId, reqEditors ...RequestEditorFn) (*DeleteOrganizationApplicationRoleResponse, error) {
	rsp, err := c.DeleteOrganizationApplicationRole(ctx, id, applicationId, organizationRoleId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteOrganizationApplicationRoleResponse(rsp)
}

// ListOrganizationJitEmailDomainsWithResponse request returning *ListOrganizationJitEmailDomainsResponse
func (c *ClientWithResponses) ListOrganizationJitEmailDomainsWithResponse(ctx context.Context, id OrganizationIdRoot, params *ListOrganizationJitEmailDomainsParams, reqEditors ...RequestEditorFn) (*ListOrganizationJitEmailDomainsResponse, error) {
	rsp, err := c.ListOrganizationJitEmailDomains(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListOrganizationJitEmailDomainsResponse(rsp)
}

// CreateOrganizationJitEmailDomainWithBodyWithResponse request with arbitrary body returning *CreateOrganizationJitEmailDomainResponse
func (c *ClientWithResponses) CreateOrganizationJitEmailDomainWithBodyWithResponse(ctx context.Context, id OrganizationIdRoot, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateOrganizationJitEmailDomainResponse, error) {
	rsp, err := c.CreateOrganizationJitEmailDomainWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateOrganizationJitEmailDomainResponse(rsp)
}

func (c *ClientWithResponses) CreateOrganizationJitEmailDomainWithResponse(ctx context.Context, id OrganizationIdRoot, body CreateOrganizationJitEmailDomainJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateOrganizationJitEmailDomainResponse, error) {
	rsp, err := c.CreateOrganizationJitEmailDomain(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateOrganizationJitEmailDomainResponse(rsp)
}

// ReplaceOrganizationJitEmailDomainsWithBodyWithResponse request with arbitrary body returning *ReplaceOrganizationJitEmailDomainsResponse
func (c *ClientWithResponses) ReplaceOrganizationJitEmailDomainsWithBodyWithResponse(ctx context.Context, id OrganizationIdRoot, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReplaceOrganizationJitEmailDomainsResponse, error) {
	rsp, err := c.ReplaceOrganizationJitEmailDomainsWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReplaceOrganizationJitEmailDomainsResponse(rsp)
}

func (c *ClientWithResponses) ReplaceOrganizationJitEmailDomainsWithResponse(ctx context.Context, id OrganizationIdRoot, body ReplaceOrganizationJitEmailDomainsJSONRequestBody, reqEditors ...RequestEditorFn) (*ReplaceOrganizationJitEmailDomainsResponse, error) {
	rsp, err := c.ReplaceOrganizationJitEmailDomains(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReplaceOrganizationJitEmailDomainsResponse(rsp)
}

// DeleteOrganizationJitEmailDomainWithResponse request returning *DeleteOrganizationJitEmailDomainResponse
func (c *ClientWithResponses) DeleteOrganizationJitEmailDomainWithResponse(ctx context.Context, id OrganizationIdRoot, emailDomain string, reqEditors ...RequestEditorFn) (*DeleteOrganizationJitEmailDomainResponse, error) {
	rsp, err := c.DeleteOrganizationJitEmailDomain(ctx, id, emailDomain, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteOrganizationJitEmailDomainResponse(rsp)
}

// ListOrganizationJitRolesWithResponse request returning *ListOrganizationJitRolesResponse
func (c *ClientWithResponses) ListOrganizationJitRolesWithResponse(ctx context.Context, id OrganizationIdRoot, params *ListOrganizationJitRolesParams, reqEditors ...RequestEditorFn) (*ListOrganizationJitRolesResponse, error) {
	rsp, err := c.ListOrganizationJitRoles(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListOrganizationJitRolesResponse(rsp)
}

// CreateOrganizationJitRoleWithBodyWithResponse request with arbitrary body returning *CreateOrganizationJitRoleResponse
func (c *ClientWithResponses) CreateOrganizationJitRoleWithBodyWithResponse(ctx context.Context, id OrganizationIdRoot, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateOrganizationJitRoleResponse, error) {
	rsp, err := c.CreateOrganizationJitRoleWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateOrganizationJitRoleResponse(rsp)
}

func (c *ClientWithResponses) CreateOrganizationJitRoleWithResponse(ctx context.Context, id OrganizationIdRoot, body CreateOrganizationJitRoleJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateOrganizationJitRoleResponse, error) {
	rsp, err := c.CreateOrganizationJitRole(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateOrganizationJitRoleResponse(rsp)
}

// ReplaceOrganizationJitRolesWithBodyWithResponse request with arbitrary body returning *ReplaceOrganizationJitRolesResponse
func (c *ClientWithResponses) ReplaceOrganizationJitRolesWithBodyWithResponse(ctx context.Context, id OrganizationIdRoot, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReplaceOrganizationJitRolesResponse, error) {
	rsp, err := c.ReplaceOrganizationJitRolesWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReplaceOrganizationJitRolesResponse(rsp)
}

func (c *ClientWithResponses) ReplaceOrganizationJitRolesWithResponse(ctx context.Context, id OrganizationIdRoot, body ReplaceOrganizationJitRolesJSONRequestBody, reqEditors ...RequestEditorFn) (*ReplaceOrganizationJitRolesResponse, error) {
	rsp, err := c.ReplaceOrganizationJitRoles(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReplaceOrganizationJitRolesResponse(rsp)
}

// DeleteOrganizationJitRoleWithResponse request returning *DeleteOrganizationJitRoleResponse
func (c *ClientWithResponses) DeleteOrganizationJitRoleWithResponse(ctx context.Context, id OrganizationIdRoot, organizationRoleId OrganizationRoleId, reqEditors ...RequestEditorFn) (*DeleteOrganizationJitRoleResponse, error) {
	rsp, err := c.DeleteOrganizationJitRole(ctx, id, organizationRoleId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteOrganizationJitRoleResponse(rsp)
}

// ListOrganizationJitSsoConnectorsWithResponse request returning *ListOrganizationJitSsoConnectorsResponse
func (c *ClientWithResponses) ListOrganizationJitSsoConnectorsWithResponse(ctx context.Context, id OrganizationIdRoot, params *ListOrganizationJitSsoConnectorsParams, reqEditors ...RequestEditorFn) (*ListOrganizationJitSsoConnectorsResponse, error) {
	rsp, err := c.ListOrganizationJitSsoConnectors(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListOrganizationJitSsoConnectorsResponse(rsp)
}

// CreateOrganizationJitSsoConnectorWithBodyWithResponse request with arbitrary body returning *CreateOrganizationJitSsoConnectorResponse
func (c *ClientWithResponses) CreateOrganizationJitSsoConnectorWithBodyWithResponse(ctx context.Context, id OrganizationIdRoot, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateOrganizationJitSsoConnectorResponse, error) {
	rsp, err := c.CreateOrganizationJitSsoConnectorWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateOrganizationJitSsoConnectorResponse(rsp)
}

func (c *ClientWithResponses) CreateOrganizationJitSsoConnectorWithResponse(ctx context.Context, id OrganizationIdRoot, body CreateOrganizationJitSsoConnectorJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateOrganizationJitSsoConnectorResponse, error) {
	rsp, err := c.CreateOrganizationJitSsoConnector(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateOrganizationJitSsoConnectorResponse(rsp)
}

// ReplaceOrganizationJitSsoConnectorsWithBodyWithResponse request with arbitrary body returning *ReplaceOrganizationJitSsoConnectorsResponse
func (c *ClientWithResponses) ReplaceOrganizationJitSsoConnectorsWithBodyWithResponse(ctx context.Context, id OrganizationIdRoot, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReplaceOrganizationJitSsoConnectorsResponse, error) {
	rsp, err := c.ReplaceOrganizationJitSsoConnectorsWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReplaceOrganizationJitSsoConnectorsResponse(rsp)
}

func (c *ClientWithResponses) ReplaceOrganizationJitSsoConnectorsWithResponse(ctx context.Context, id OrganizationIdRoot, body ReplaceOrganizationJitSsoConnectorsJSONRequestBody, reqEditors ...RequestEditorFn) (*ReplaceOrganizationJitSsoConnectorsResponse, error) {
	rsp, err := c.ReplaceOrganizationJitSsoConnectors(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReplaceOrganizationJitSsoConnectorsResponse(rsp)
}

// DeleteOrganizationJitSsoConnectorWithResponse request returning *DeleteOrganizationJitSsoConnectorResponse
func (c *ClientWithResponses) DeleteOrganizationJitSsoConnectorWithResponse(ctx context.Context, id OrganizationIdRoot, ssoConnectorId SsoConnectorId, reqEditors ...RequestEditorFn) (*DeleteOrganizationJitSsoConnectorResponse, error) {
	rsp, err := c.DeleteOrganizationJitSsoConnector(ctx, id, ssoConnectorId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteOrganizationJitSsoConnectorResponse(rsp)
}

// ListOrganizationUsersWithResponse request returning *ListOrganizationUsersResponse
func (c *ClientWithResponses) ListOrganizationUsersWithResponse(ctx context.Context, id OrganizationIdRoot, params *ListOrganizationUsersParams, reqEditors ...RequestEditorFn) (*ListOrganizationUsersResponse, error) {
	rsp, err := c.ListOrganizationUsers(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListOrganizationUsersResponse(rsp)
}

// AddOrganizationUsersWithBodyWithResponse request with arbitrary body returning *AddOrganizationUsersResponse
func (c *ClientWithResponses) AddOrganizationUsersWithBodyWithResponse(ctx context.Context, id OrganizationIdRoot, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddOrganizationUsersResponse, error) {
	rsp, err := c.AddOrganizationUsersWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddOrganizationUsersResponse(rsp)
}

func (c *ClientWithResponses) AddOrganizationUsersWithResponse(ctx context.Context, id OrganizationIdRoot, body AddOrganizationUsersJSONRequestBody, reqEditors ...RequestEditorFn) (*AddOrganizationUsersResponse, error) {
	rsp, err := c.AddOrganizationUsers(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddOrganizationUsersResponse(rsp)
}

// ReplaceOrganizationUsersWithBodyWithResponse request with arbitrary body returning *ReplaceOrganizationUsersResponse
func (c *ClientWithResponses) ReplaceOrganizationUsersWithBodyWithResponse(ctx context.Context, id OrganizationIdRoot, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReplaceOrganizationUsersResponse, error) {
	rsp, err := c.ReplaceOrganizationUsersWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReplaceOrganizationUsersResponse(rsp)
}

func (c *ClientWithResponses) ReplaceOrganizationUsersWithResponse(ctx context.Context, id OrganizationIdRoot, body ReplaceOrganizationUsersJSONRequestBody, reqEditors ...RequestEditorFn) (*ReplaceOrganizationUsersResponse, error) {
	rsp, err := c.ReplaceOrganizationUsers(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReplaceOrganizationUsersResponse(rsp)
}

// AssignOrganizationRolesToUsersWithBodyWithResponse request with arbitrary body returning *AssignOrganizationRolesToUsersResponse
func (c *ClientWithResponses) AssignOrganizationRolesToUsersWithBodyWithResponse(ctx context.Context, id OrganizationIdRoot, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AssignOrganizationRolesToUsersResponse, error) {
	rsp, err := c.AssignOrganizationRolesToUsersWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAssignOrganizationRolesToUsersResponse(rsp)
}

func (c *ClientWithResponses) AssignOrganizationRolesToUsersWithResponse(ctx context.Context, id OrganizationIdRoot, body AssignOrganizationRolesToUsersJSONRequestBody, reqEditors ...RequestEditorFn) (*AssignOrganizationRolesToUsersResponse, error) {
	rsp, err := c.AssignOrganizationRolesToUsers(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAssignOrganizationRolesToUsersResponse(rsp)
}

// DeleteOrganizationUserWithResponse request returning *DeleteOrganizationUserResponse
func (c *ClientWithResponses) DeleteOrganizationUserWithResponse(ctx context.Context, id OrganizationIdRoot, userId UserId, reqEditors ...RequestEditorFn) (*DeleteOrganizationUserResponse, error) {
	rsp, err := c.DeleteOrganizationUser(ctx, id, userId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteOrganizationUserResponse(rsp)
}

// ListOrganizationUserRolesWithResponse request returning *ListOrganizationUserRolesResponse
func (c *ClientWithResponses) ListOrganizationUserRolesWithResponse(ctx context.Context, id OrganizationIdRoot, userId UserId, params *ListOrganizationUserRolesParams, reqEditors ...RequestEditorFn) (*ListOrganizationUserRolesResponse, error) {
	rsp, err := c.ListOrganizationUserRoles(ctx, id, userId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListOrganizationUserRolesResponse(rsp)
}

// AssignOrganizationRolesToUserWithBodyWithResponse request with arbitrary body returning *AssignOrganizationRolesToUserResponse
func (c *ClientWithResponses) AssignOrganizationRolesToUserWithBodyWithResponse(ctx context.Context, id OrganizationIdRoot, userId UserId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AssignOrganizationRolesToUserResponse, error) {
	rsp, err := c.AssignOrganizationRolesToUserWithBody(ctx, id, userId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAssignOrganizationRolesToUserResponse(rsp)
}

func (c *ClientWithResponses) AssignOrganizationRolesToUserWithResponse(ctx context.Context, id OrganizationIdRoot, userId UserId, body AssignOrganizationRolesToUserJSONRequestBody, reqEditors ...RequestEditorFn) (*AssignOrganizationRolesToUserResponse, error) {
	rsp, err := c.AssignOrganizationRolesToUser(ctx, id, userId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAssignOrganizationRolesToUserResponse(rsp)
}

// ReplaceOrganizationUserRolesWithBodyWithResponse request with arbitrary body returning *ReplaceOrganizationUserRolesResponse
func (c *ClientWithResponses) ReplaceOrganizationUserRolesWithBodyWithResponse(ctx context.Context, id OrganizationIdRoot, userId UserId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReplaceOrganizationUserRolesResponse, error) {
	rsp, err := c.ReplaceOrganizationUserRolesWithBody(ctx, id, userId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReplaceOrganizationUserRolesResponse(rsp)
}

func (c *ClientWithResponses) ReplaceOrganizationUserRolesWithResponse(ctx context.Context, id OrganizationIdRoot, userId UserId, body ReplaceOrganizationUserRolesJSONRequestBody, reqEditors ...RequestEditorFn) (*ReplaceOrganizationUserRolesResponse, error) {
	rsp, err := c.ReplaceOrganizationUserRoles(ctx, id, userId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReplaceOrganizationUserRolesResponse(rsp)
}

// DeleteOrganizationUserRoleWithResponse request returning *DeleteOrganizationUserRoleResponse
func (c *ClientWithResponses) DeleteOrganizationUserRoleWithResponse(ctx context.Context, id OrganizationIdRoot, userId UserId, organizationRoleId OrganizationRoleId, reqEditors ...RequestEditorFn) (*DeleteOrganizationUserRoleResponse, error) {
	rsp, err := c.DeleteOrganizationUserRole(ctx, id, userId, organizationRoleId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteOrganizationUserRoleResponse(rsp)
}

// ListOrganizationUserScopesWithResponse request returning *ListOrganizationUserScopesResponse
func (c *ClientWithResponses) ListOrganizationUserScopesWithResponse(ctx context.Context, id OrganizationIdRoot, userId UserId, reqEditors ...RequestEditorFn) (*ListOrganizationUserScopesResponse, error) {
	rsp, err := c.ListOrganizationUserScopes(ctx, id, userId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListOrganizationUserScopesResponse(rsp)
}

// ListResourcesWithResponse request returning *ListResourcesResponse
func (c *ClientWithResponses) ListResourcesWithResponse(ctx context.Context, params *ListResourcesParams, reqEditors ...RequestEditorFn) (*ListResourcesResponse, error) {
	rsp, err := c.ListResources(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListResourcesResponse(rsp)
}

// CreateResourceWithBodyWithResponse request with arbitrary body returning *CreateResourceResponse
func (c *ClientWithResponses) CreateResourceWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateResourceResponse, error) {
	rsp, err := c.CreateResourceWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateResourceResponse(rsp)
}

func (c *ClientWithResponses) CreateResourceWithResponse(ctx context.Context, body CreateResourceJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateResourceResponse, error) {
	rsp, err := c.CreateResource(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateResourceResponse(rsp)
}

// DeleteResourceWithResponse request returning *DeleteResourceResponse
func (c *ClientWithResponses) DeleteResourceWithResponse(ctx context.Context, id ResourceIdRoot, reqEditors ...RequestEditorFn) (*DeleteResourceResponse, error) {
	rsp, err := c.DeleteResource(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteResourceResponse(rsp)
}

// GetResourceWithResponse request returning *GetResourceResponse
func (c *ClientWithResponses) GetResourceWithResponse(ctx context.Context, id ResourceIdRoot, reqEditors ...RequestEditorFn) (*GetResourceResponse, error) {
	rsp, err := c.GetResource(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetResourceResponse(rsp)
}

// UpdateResourceWithBodyWithResponse request with arbitrary body returning *UpdateResourceResponse
func (c *ClientWithResponses) UpdateResourceWithBodyWithResponse(ctx context.Context, id ResourceIdRoot, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateResourceResponse, error) {
	rsp, err := c.UpdateResourceWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateResourceResponse(rsp)
}

func (c *ClientWithResponses) UpdateResourceWithResponse(ctx context.Context, id ResourceIdRoot, body UpdateResourceJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateResourceResponse, error) {
	rsp, err := c.UpdateResource(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateResourceResponse(rsp)
}

// UpdateResourceIsDefaultWithBodyWithResponse request with arbitrary body returning *UpdateResourceIsDefaultResponse
func (c *ClientWithResponses) UpdateResourceIsDefaultWithBodyWithResponse(ctx context.Context, id ResourceIdRoot, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateResourceIsDefaultResponse, error) {
	rsp, err := c.UpdateResourceIsDefaultWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateResourceIsDefaultResponse(rsp)
}

func (c *ClientWithResponses) UpdateResourceIsDefaultWithResponse(ctx context.Context, id ResourceIdRoot, body UpdateResourceIsDefaultJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateResourceIsDefaultResponse, error) {
	rsp, err := c.UpdateResourceIsDefault(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateResourceIsDefaultResponse(rsp)
}

// ListResourceScopesWithResponse request returning *ListResourceScopesResponse
func (c *ClientWithResponses) ListResourceScopesWithResponse(ctx context.Context, resourceId ResourceId, params *ListResourceScopesParams, reqEditors ...RequestEditorFn) (*ListResourceScopesResponse, error) {
	rsp, err := c.ListResourceScopes(ctx, resourceId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListResourceScopesResponse(rsp)
}

// CreateResourceScopeWithBodyWithResponse request with arbitrary body returning *CreateResourceScopeResponse
func (c *ClientWithResponses) CreateResourceScopeWithBodyWithResponse(ctx context.Context, resourceId ResourceId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateResourceScopeResponse, error) {
	rsp, err := c.CreateResourceScopeWithBody(ctx, resourceId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateResourceScopeResponse(rsp)
}

func (c *ClientWithResponses) CreateResourceScopeWithResponse(ctx context.Context, resourceId ResourceId, body CreateResourceScopeJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateResourceScopeResponse, error) {
	rsp, err := c.CreateResourceScope(ctx, resourceId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateResourceScopeResponse(rsp)
}

// DeleteResourceScopeWithResponse request returning *DeleteResourceScopeResponse
func (c *ClientWithResponses) DeleteResourceScopeWithResponse(ctx context.Context, resourceId ResourceId, scopeId ScopeId, reqEditors ...RequestEditorFn) (*DeleteResourceScopeResponse, error) {
	rsp, err := c.DeleteResourceScope(ctx, resourceId, scopeId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteResourceScopeResponse(rsp)
}

// UpdateResourceScopeWithBodyWithResponse request with arbitrary body returning *UpdateResourceScopeResponse
func (c *ClientWithResponses) UpdateResourceScopeWithBodyWithResponse(ctx context.Context, resourceId ResourceId, scopeId ScopeId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateResourceScopeResponse, error) {
	rsp, err := c.UpdateResourceScopeWithBody(ctx, resourceId, scopeId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateResourceScopeResponse(rsp)
}

func (c *ClientWithResponses) UpdateResourceScopeWithResponse(ctx context.Context, resourceId ResourceId, scopeId ScopeId, body UpdateResourceScopeJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateResourceScopeResponse, error) {
	rsp, err := c.UpdateResourceScope(ctx, resourceId, scopeId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateResourceScopeResponse(rsp)
}

// ListRolesWithResponse request returning *ListRolesResponse
func (c *ClientWithResponses) ListRolesWithResponse(ctx context.Context, params *ListRolesParams, reqEditors ...RequestEditorFn) (*ListRolesResponse, error) {
	rsp, err := c.ListRoles(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListRolesResponse(rsp)
}

// CreateRoleWithBodyWithResponse request with arbitrary body returning *CreateRoleResponse
func (c *ClientWithResponses) CreateRoleWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateRoleResponse, error) {
	rsp, err := c.CreateRoleWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateRoleResponse(rsp)
}

func (c *ClientWithResponses) CreateRoleWithResponse(ctx context.Context, body CreateRoleJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateRoleResponse, error) {
	rsp, err := c.CreateRole(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateRoleResponse(rsp)
}

// DeleteRoleWithResponse request returning *DeleteRoleResponse
func (c *ClientWithResponses) DeleteRoleWithResponse(ctx context.Context, id RoleIdRoot, reqEditors ...RequestEditorFn) (*DeleteRoleResponse, error) {
	rsp, err := c.DeleteRole(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteRoleResponse(rsp)
}

// GetRoleWithResponse request returning *GetRoleResponse
func (c *ClientWithResponses) GetRoleWithResponse(ctx context.Context, id RoleIdRoot, reqEditors ...RequestEditorFn) (*GetRoleResponse, error) {
	rsp, err := c.GetRole(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRoleResponse(rsp)
}

// UpdateRoleWithBodyWithResponse request with arbitrary body returning *UpdateRoleResponse
func (c *ClientWithResponses) UpdateRoleWithBodyWithResponse(ctx context.Context, id RoleIdRoot, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateRoleResponse, error) {
	rsp, err := c.UpdateRoleWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateRoleResponse(rsp)
}

func (c *ClientWithResponses) UpdateRoleWithResponse(ctx context.Context, id RoleIdRoot, body UpdateRoleJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateRoleResponse, error) {
	rsp, err := c.UpdateRole(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateRoleResponse(rsp)
}

// ListRoleApplicationsWithResponse request returning *ListRoleApplicationsResponse
func (c *ClientWithResponses) ListRoleApplicationsWithResponse(ctx context.Context, id RoleIdRoot, params *ListRoleApplicationsParams, reqEditors ...RequestEditorFn) (*ListRoleApplicationsResponse, error) {
	rsp, err := c.ListRoleApplications(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListRoleApplicationsResponse(rsp)
}

// CreateRoleApplicationWithBodyWithResponse request with arbitrary body returning *CreateRoleApplicationResponse
func (c *ClientWithResponses) CreateRoleApplicationWithBodyWithResponse(ctx context.Context, id RoleIdRoot, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateRoleApplicationResponse, error) {
	rsp, err := c.CreateRoleApplicationWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateRoleApplicationResponse(rsp)
}

func (c *ClientWithResponses) CreateRoleApplicationWithResponse(ctx context.Context, id RoleIdRoot, body CreateRoleApplicationJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateRoleApplicationResponse, error) {
	rsp, err := c.CreateRoleApplication(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateRoleApplicationResponse(rsp)
}

// DeleteRoleApplicationWithResponse request returning *DeleteRoleApplicationResponse
func (c *ClientWithResponses) DeleteRoleApplicationWithResponse(ctx context.Context, id RoleIdRoot, applicationId ApplicationId, reqEditors ...RequestEditorFn) (*DeleteRoleApplicationResponse, error) {
	rsp, err := c.DeleteRoleApplication(ctx, id, applicationId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteRoleApplicationResponse(rsp)
}

// ListRoleScopesWithResponse request returning *ListRoleScopesResponse
func (c *ClientWithResponses) ListRoleScopesWithResponse(ctx context.Context, id RoleIdRoot, params *ListRoleScopesParams, reqEditors ...RequestEditorFn) (*ListRoleScopesResponse, error) {
	rsp, err := c.ListRoleScopes(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListRoleScopesResponse(rsp)
}

// CreateRoleScopeWithBodyWithResponse request with arbitrary body returning *CreateRoleScopeResponse
func (c *ClientWithResponses) CreateRoleScopeWithBodyWithResponse(ctx context.Context, id RoleIdRoot, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateRoleScopeResponse, error) {
	rsp, err := c.CreateRoleScopeWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateRoleScopeResponse(rsp)
}

func (c *ClientWithResponses) CreateRoleScopeWithResponse(ctx context.Context, id RoleIdRoot, body CreateRoleScopeJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateRoleScopeResponse, error) {
	rsp, err := c.CreateRoleScope(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateRoleScopeResponse(rsp)
}

// DeleteRoleScopeWithResponse request returning *DeleteRoleScopeResponse
func (c *ClientWithResponses) DeleteRoleScopeWithResponse(ctx context.Context, id RoleIdRoot, scopeId ScopeId, reqEditors ...RequestEditorFn) (*DeleteRoleScopeResponse, error) {
	rsp, err := c.DeleteRoleScope(ctx, id, scopeId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteRoleScopeResponse(rsp)
}

// ListRoleUsersWithResponse request returning *ListRoleUsersResponse
func (c *ClientWithResponses) ListRoleUsersWithResponse(ctx context.Context, id RoleIdRoot, params *ListRoleUsersParams, reqEditors ...RequestEditorFn) (*ListRoleUsersResponse, error) {
	rsp, err := c.ListRoleUsers(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListRoleUsersResponse(rsp)
}

// CreateRoleUserWithBodyWithResponse request with arbitrary body returning *CreateRoleUserResponse
func (c *ClientWithResponses) CreateRoleUserWithBodyWithResponse(ctx context.Context, id RoleIdRoot, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateRoleUserResponse, error) {
	rsp, err := c.CreateRoleUserWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateRoleUserResponse(rsp)
}

func (c *ClientWithResponses) CreateRoleUserWithResponse(ctx context.Context, id RoleIdRoot, body CreateRoleUserJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateRoleUserResponse, error) {
	rsp, err := c.CreateRoleUser(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateRoleUserResponse(rsp)
}

// DeleteRoleUserWithResponse request returning *DeleteRoleUserResponse
func (c *ClientWithResponses) DeleteRoleUserWithResponse(ctx context.Context, id RoleIdRoot, userId UserId, reqEditors ...RequestEditorFn) (*DeleteRoleUserResponse, error) {
	rsp, err := c.DeleteRoleUser(ctx, id, userId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteRoleUserResponse(rsp)
}

// CreateSamlApplicationWithBodyWithResponse request with arbitrary body returning *CreateSamlApplicationResponse
func (c *ClientWithResponses) CreateSamlApplicationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateSamlApplicationResponse, error) {
	rsp, err := c.CreateSamlApplicationWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateSamlApplicationResponse(rsp)
}

func (c *ClientWithResponses) CreateSamlApplicationWithResponse(ctx context.Context, body CreateSamlApplicationJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateSamlApplicationResponse, error) {
	rsp, err := c.CreateSamlApplication(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateSamlApplicationResponse(rsp)
}

// DeleteSamlApplicationWithResponse request returning *DeleteSamlApplicationResponse
func (c *ClientWithResponses) DeleteSamlApplicationWithResponse(ctx context.Context, id SamlApplicationIdRoot, reqEditors ...RequestEditorFn) (*DeleteSamlApplicationResponse, error) {
	rsp, err := c.DeleteSamlApplication(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteSamlApplicationResponse(rsp)
}

// GetSamlApplicationWithResponse request returning *GetSamlApplicationResponse
func (c *ClientWithResponses) GetSamlApplicationWithResponse(ctx context.Context, id SamlApplicationIdRoot, reqEditors ...RequestEditorFn) (*GetSamlApplicationResponse, error) {
	rsp, err := c.GetSamlApplication(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSamlApplicationResponse(rsp)
}

// UpdateSamlApplicationWithBodyWithResponse request with arbitrary body returning *UpdateSamlApplicationResponse
func (c *ClientWithResponses) UpdateSamlApplicationWithBodyWithResponse(ctx context.Context, id SamlApplicationIdRoot, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateSamlApplicationResponse, error) {
	rsp, err := c.UpdateSamlApplicationWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateSamlApplicationResponse(rsp)
}

func (c *ClientWithResponses) UpdateSamlApplicationWithResponse(ctx context.Context, id SamlApplicationIdRoot, body UpdateSamlApplicationJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateSamlApplicationResponse, error) {
	rsp, err := c.UpdateSamlApplication(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateSamlApplicationResponse(rsp)
}

// GetSamlApplicationCallbackWithResponse request returning *GetSamlApplicationCallbackResponse
func (c *ClientWithResponses) GetSamlApplicationCallbackWithResponse(ctx context.Context, id SamlApplicationIdRoot, params *GetSamlApplicationCallbackParams, reqEditors ...RequestEditorFn) (*GetSamlApplicationCallbackResponse, error) {
	rsp, err := c.GetSamlApplicationCallback(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSamlApplicationCallbackResponse(rsp)
}

// ListSamlApplicationMetadataWithResponse request returning *ListSamlApplicationMetadataResponse
func (c *ClientWithResponses) ListSamlApplicationMetadataWithResponse(ctx context.Context, id SamlApplicationIdRoot, reqEditors ...RequestEditorFn) (*ListSamlApplicationMetadataResponse, error) {
	rsp, err := c.ListSamlApplicationMetadata(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListSamlApplicationMetadataResponse(rsp)
}

// ListSamlApplicationSecretsWithResponse request returning *ListSamlApplicationSecretsResponse
func (c *ClientWithResponses) ListSamlApplicationSecretsWithResponse(ctx context.Context, id SamlApplicationIdRoot, reqEditors ...RequestEditorFn) (*ListSamlApplicationSecretsResponse, error) {
	rsp, err := c.ListSamlApplicationSecrets(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListSamlApplicationSecretsResponse(rsp)
}

// CreateSamlApplicationSecretWithBodyWithResponse request with arbitrary body returning *CreateSamlApplicationSecretResponse
func (c *ClientWithResponses) CreateSamlApplicationSecretWithBodyWithResponse(ctx context.Context, id SamlApplicationIdRoot, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateSamlApplicationSecretResponse, error) {
	rsp, err := c.CreateSamlApplicationSecretWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateSamlApplicationSecretResponse(rsp)
}

func (c *ClientWithResponses) CreateSamlApplicationSecretWithResponse(ctx context.Context, id SamlApplicationIdRoot, body CreateSamlApplicationSecretJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateSamlApplicationSecretResponse, error) {
	rsp, err := c.CreateSamlApplicationSecret(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateSamlApplicationSecretResponse(rsp)
}

// DeleteSamlApplicationSecretWithResponse request returning *DeleteSamlApplicationSecretResponse
func (c *ClientWithResponses) DeleteSamlApplicationSecretWithResponse(ctx context.Context, id SamlApplicationIdRoot, secretId SecretId, reqEditors ...RequestEditorFn) (*DeleteSamlApplicationSecretResponse, error) {
	rsp, err := c.DeleteSamlApplicationSecret(ctx, id, secretId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteSamlApplicationSecretResponse(rsp)
}

// UpdateSamlApplicationSecretWithBodyWithResponse request with arbitrary body returning *UpdateSamlApplicationSecretResponse
func (c *ClientWithResponses) UpdateSamlApplicationSecretWithBodyWithResponse(ctx context.Context, id SamlApplicationIdRoot, secretId SecretId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateSamlApplicationSecretResponse, error) {
	rsp, err := c.UpdateSamlApplicationSecretWithBody(ctx, id, secretId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateSamlApplicationSecretResponse(rsp)
}

func (c *ClientWithResponses) UpdateSamlApplicationSecretWithResponse(ctx context.Context, id SamlApplicationIdRoot, secretId SecretId, body UpdateSamlApplicationSecretJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateSamlApplicationSecretResponse, error) {
	rsp, err := c.UpdateSamlApplicationSecret(ctx, id, secretId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateSamlApplicationSecretResponse(rsp)
}

// GetSamlAuthnWithResponse request returning *GetSamlAuthnResponse
func (c *ClientWithResponses) GetSamlAuthnWithResponse(ctx context.Context, id SamlIdRoot, params *GetSamlAuthnParams, reqEditors ...RequestEditorFn) (*GetSamlAuthnResponse, error) {
	rsp, err := c.GetSamlAuthn(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSamlAuthnResponse(rsp)
}

// CreateSamlAuthnWithBodyWithResponse request with arbitrary body returning *CreateSamlAuthnResponse
func (c *ClientWithResponses) CreateSamlAuthnWithBodyWithResponse(ctx context.Context, id SamlIdRoot, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateSamlAuthnResponse, error) {
	rsp, err := c.CreateSamlAuthnWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateSamlAuthnResponse(rsp)
}

func (c *ClientWithResponses) CreateSamlAuthnWithResponse(ctx context.Context, id SamlIdRoot, body CreateSamlAuthnJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateSamlAuthnResponse, error) {
	rsp, err := c.CreateSamlAuthn(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateSamlAuthnResponse(rsp)
}

func (c *ClientWithResponses) CreateSamlAuthnWithFormdataBodyWithResponse(ctx context.Context, id SamlIdRoot, body CreateSamlAuthnFormdataRequestBody, reqEditors ...RequestEditorFn) (*CreateSamlAuthnResponse, error) {
	rsp, err := c.CreateSamlAuthnWithFormdataBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateSamlAuthnResponse(rsp)
}

// DeleteSentinelActivitiesWithBodyWithResponse request with arbitrary body returning *DeleteSentinelActivitiesResponse
func (c *ClientWithResponses) DeleteSentinelActivitiesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteSentinelActivitiesResponse, error) {
	rsp, err := c.DeleteSentinelActivitiesWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteSentinelActivitiesResponse(rsp)
}

func (c *ClientWithResponses) DeleteSentinelActivitiesWithResponse(ctx context.Context, body DeleteSentinelActivitiesJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteSentinelActivitiesResponse, error) {
	rsp, err := c.DeleteSentinelActivities(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteSentinelActivitiesResponse(rsp)
}

// GetSignInExpWithResponse request returning *GetSignInExpResponse
func (c *ClientWithResponses) GetSignInExpWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetSignInExpResponse, error) {
	rsp, err := c.GetSignInExp(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSignInExpResponse(rsp)
}

// UpdateSignInExpWithBodyWithResponse request with arbitrary body returning *UpdateSignInExpResponse
func (c *ClientWithResponses) UpdateSignInExpWithBodyWithResponse(ctx context.Context, params *UpdateSignInExpParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateSignInExpResponse, error) {
	rsp, err := c.UpdateSignInExpWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateSignInExpResponse(rsp)
}

func (c *ClientWithResponses) UpdateSignInExpWithResponse(ctx context.Context, params *UpdateSignInExpParams, body UpdateSignInExpJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateSignInExpResponse, error) {
	rsp, err := c.UpdateSignInExp(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateSignInExpResponse(rsp)
}

// CheckPasswordWithDefaultSignInExperienceWithBodyWithResponse request with arbitrary body returning *CheckPasswordWithDefaultSignInExperienceResponse
func (c *ClientWithResponses) CheckPasswordWithDefaultSignInExperienceWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CheckPasswordWithDefaultSignInExperienceResponse, error) {
	rsp, err := c.CheckPasswordWithDefaultSignInExperienceWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCheckPasswordWithDefaultSignInExperienceResponse(rsp)
}

func (c *ClientWithResponses) CheckPasswordWithDefaultSignInExperienceWithResponse(ctx context.Context, body CheckPasswordWithDefaultSignInExperienceJSONRequestBody, reqEditors ...RequestEditorFn) (*CheckPasswordWithDefaultSignInExperienceResponse, error) {
	rsp, err := c.CheckPasswordWithDefaultSignInExperience(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCheckPasswordWithDefaultSignInExperienceResponse(rsp)
}

// UploadCustomUiAssetsWithBodyWithResponse request with arbitrary body returning *UploadCustomUiAssetsResponse
func (c *ClientWithResponses) UploadCustomUiAssetsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UploadCustomUiAssetsResponse, error) {
	rsp, err := c.UploadCustomUiAssetsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUploadCustomUiAssetsResponse(rsp)
}

// ListSsoConnectorProvidersWithResponse request returning *ListSsoConnectorProvidersResponse
func (c *ClientWithResponses) ListSsoConnectorProvidersWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ListSsoConnectorProvidersResponse, error) {
	rsp, err := c.ListSsoConnectorProviders(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListSsoConnectorProvidersResponse(rsp)
}

// ListSsoConnectorsWithResponse request returning *ListSsoConnectorsResponse
func (c *ClientWithResponses) ListSsoConnectorsWithResponse(ctx context.Context, params *ListSsoConnectorsParams, reqEditors ...RequestEditorFn) (*ListSsoConnectorsResponse, error) {
	rsp, err := c.ListSsoConnectors(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListSsoConnectorsResponse(rsp)
}

// CreateSsoConnectorWithBodyWithResponse request with arbitrary body returning *CreateSsoConnectorResponse
func (c *ClientWithResponses) CreateSsoConnectorWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateSsoConnectorResponse, error) {
	rsp, err := c.CreateSsoConnectorWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateSsoConnectorResponse(rsp)
}

func (c *ClientWithResponses) CreateSsoConnectorWithResponse(ctx context.Context, body CreateSsoConnectorJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateSsoConnectorResponse, error) {
	rsp, err := c.CreateSsoConnector(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateSsoConnectorResponse(rsp)
}

// DeleteSsoConnectorWithResponse request returning *DeleteSsoConnectorResponse
func (c *ClientWithResponses) DeleteSsoConnectorWithResponse(ctx context.Context, id SsoConnectorIdRoot, reqEditors ...RequestEditorFn) (*DeleteSsoConnectorResponse, error) {
	rsp, err := c.DeleteSsoConnector(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteSsoConnectorResponse(rsp)
}

// GetSsoConnectorWithResponse request returning *GetSsoConnectorResponse
func (c *ClientWithResponses) GetSsoConnectorWithResponse(ctx context.Context, id SsoConnectorIdRoot, reqEditors ...RequestEditorFn) (*GetSsoConnectorResponse, error) {
	rsp, err := c.GetSsoConnector(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSsoConnectorResponse(rsp)
}

// UpdateSsoConnectorWithBodyWithResponse request with arbitrary body returning *UpdateSsoConnectorResponse
func (c *ClientWithResponses) UpdateSsoConnectorWithBodyWithResponse(ctx context.Context, id SsoConnectorIdRoot, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateSsoConnectorResponse, error) {
	rsp, err := c.UpdateSsoConnectorWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateSsoConnectorResponse(rsp)
}

func (c *ClientWithResponses) UpdateSsoConnectorWithResponse(ctx context.Context, id SsoConnectorIdRoot, body UpdateSsoConnectorJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateSsoConnectorResponse, error) {
	rsp, err := c.UpdateSsoConnector(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateSsoConnectorResponse(rsp)
}

// GetStatusWithResponse request returning *GetStatusResponse
func (c *ClientWithResponses) GetStatusWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetStatusResponse, error) {
	rsp, err := c.GetStatus(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetStatusResponse(rsp)
}

// CreateSubjectTokenWithBodyWithResponse request with arbitrary body returning *CreateSubjectTokenResponse
func (c *ClientWithResponses) CreateSubjectTokenWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateSubjectTokenResponse, error) {
	rsp, err := c.CreateSubjectTokenWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateSubjectTokenResponse(rsp)
}

func (c *ClientWithResponses) CreateSubjectTokenWithResponse(ctx context.Context, body CreateSubjectTokenJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateSubjectTokenResponse, error) {
	rsp, err := c.CreateSubjectToken(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateSubjectTokenResponse(rsp)
}

// GetSwaggerJsonWithResponse request returning *GetSwaggerJsonResponse
func (c *ClientWithResponses) GetSwaggerJsonWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetSwaggerJsonResponse, error) {
	rsp, err := c.GetSwaggerJson(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSwaggerJsonResponse(rsp)
}

// GetSystemApplicationConfigWithResponse request returning *GetSystemApplicationConfigResponse
func (c *ClientWithResponses) GetSystemApplicationConfigWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetSystemApplicationConfigResponse, error) {
	rsp, err := c.GetSystemApplicationConfig(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSystemApplicationConfigResponse(rsp)
}

// CreateUserAssetWithBodyWithResponse request with arbitrary body returning *CreateUserAssetResponse
func (c *ClientWithResponses) CreateUserAssetWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateUserAssetResponse, error) {
	rsp, err := c.CreateUserAssetWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateUserAssetResponse(rsp)
}

// GetUserAssetServiceStatusWithResponse request returning *GetUserAssetServiceStatusResponse
func (c *ClientWithResponses) GetUserAssetServiceStatusWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetUserAssetServiceStatusResponse, error) {
	rsp, err := c.GetUserAssetServiceStatus(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUserAssetServiceStatusResponse(rsp)
}

// ListUsersWithResponse request returning *ListUsersResponse
func (c *ClientWithResponses) ListUsersWithResponse(ctx context.Context, params *ListUsersParams, reqEditors ...RequestEditorFn) (*ListUsersResponse, error) {
	rsp, err := c.ListUsers(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListUsersResponse(rsp)
}

// CreateUserWithBodyWithResponse request with arbitrary body returning *CreateUserResponse
func (c *ClientWithResponses) CreateUserWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateUserResponse, error) {
	rsp, err := c.CreateUserWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateUserResponse(rsp)
}

func (c *ClientWithResponses) CreateUserWithResponse(ctx context.Context, body CreateUserJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateUserResponse, error) {
	rsp, err := c.CreateUser(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateUserResponse(rsp)
}

// DeleteUserWithResponse request returning *DeleteUserResponse
func (c *ClientWithResponses) DeleteUserWithResponse(ctx context.Context, userId UserId, reqEditors ...RequestEditorFn) (*DeleteUserResponse, error) {
	rsp, err := c.DeleteUser(ctx, userId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteUserResponse(rsp)
}

// GetUserWithResponse request returning *GetUserResponse
func (c *ClientWithResponses) GetUserWithResponse(ctx context.Context, userId UserId, params *GetUserParams, reqEditors ...RequestEditorFn) (*GetUserResponse, error) {
	rsp, err := c.GetUser(ctx, userId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUserResponse(rsp)
}

// UpdateUserWithBodyWithResponse request with arbitrary body returning *UpdateUserResponse
func (c *ClientWithResponses) UpdateUserWithBodyWithResponse(ctx context.Context, userId UserId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateUserResponse, error) {
	rsp, err := c.UpdateUserWithBody(ctx, userId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateUserResponse(rsp)
}

func (c *ClientWithResponses) UpdateUserWithResponse(ctx context.Context, userId UserId, body UpdateUserJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateUserResponse, error) {
	rsp, err := c.UpdateUser(ctx, userId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateUserResponse(rsp)
}

// ListUserCustomDataWithResponse request returning *ListUserCustomDataResponse
func (c *ClientWithResponses) ListUserCustomDataWithResponse(ctx context.Context, userId UserId, reqEditors ...RequestEditorFn) (*ListUserCustomDataResponse, error) {
	rsp, err := c.ListUserCustomData(ctx, userId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListUserCustomDataResponse(rsp)
}

// UpdateUserCustomDataWithBodyWithResponse request with arbitrary body returning *UpdateUserCustomDataResponse
func (c *ClientWithResponses) UpdateUserCustomDataWithBodyWithResponse(ctx context.Context, userId UserId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateUserCustomDataResponse, error) {
	rsp, err := c.UpdateUserCustomDataWithBody(ctx, userId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateUserCustomDataResponse(rsp)
}

func (c *ClientWithResponses) UpdateUserCustomDataWithResponse(ctx context.Context, userId UserId, body UpdateUserCustomDataJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateUserCustomDataResponse, error) {
	rsp, err := c.UpdateUserCustomData(ctx, userId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateUserCustomDataResponse(rsp)
}

// GetUserHasPasswordWithResponse request returning *GetUserHasPasswordResponse
func (c *ClientWithResponses) GetUserHasPasswordWithResponse(ctx context.Context, userId UserId, reqEditors ...RequestEditorFn) (*GetUserHasPasswordResponse, error) {
	rsp, err := c.GetUserHasPassword(ctx, userId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUserHasPasswordResponse(rsp)
}

// CreateUserIdentityWithBodyWithResponse request with arbitrary body returning *CreateUserIdentityResponse
func (c *ClientWithResponses) CreateUserIdentityWithBodyWithResponse(ctx context.Context, userId UserId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateUserIdentityResponse, error) {
	rsp, err := c.CreateUserIdentityWithBody(ctx, userId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateUserIdentityResponse(rsp)
}

func (c *ClientWithResponses) CreateUserIdentityWithResponse(ctx context.Context, userId UserId, body CreateUserIdentityJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateUserIdentityResponse, error) {
	rsp, err := c.CreateUserIdentity(ctx, userId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateUserIdentityResponse(rsp)
}

// DeleteUserIdentityWithResponse request returning *DeleteUserIdentityResponse
func (c *ClientWithResponses) DeleteUserIdentityWithResponse(ctx context.Context, userId UserId, target string, reqEditors ...RequestEditorFn) (*DeleteUserIdentityResponse, error) {
	rsp, err := c.DeleteUserIdentity(ctx, userId, target, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteUserIdentityResponse(rsp)
}

// ReplaceUserIdentityWithBodyWithResponse request with arbitrary body returning *ReplaceUserIdentityResponse
func (c *ClientWithResponses) ReplaceUserIdentityWithBodyWithResponse(ctx context.Context, userId UserId, target string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReplaceUserIdentityResponse, error) {
	rsp, err := c.ReplaceUserIdentityWithBody(ctx, userId, target, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReplaceUserIdentityResponse(rsp)
}

func (c *ClientWithResponses) ReplaceUserIdentityWithResponse(ctx context.Context, userId UserId, target string, body ReplaceUserIdentityJSONRequestBody, reqEditors ...RequestEditorFn) (*ReplaceUserIdentityResponse, error) {
	rsp, err := c.ReplaceUserIdentity(ctx, userId, target, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReplaceUserIdentityResponse(rsp)
}

// UpdateUserIsSuspendedWithBodyWithResponse request with arbitrary body returning *UpdateUserIsSuspendedResponse
func (c *ClientWithResponses) UpdateUserIsSuspendedWithBodyWithResponse(ctx context.Context, userId UserId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateUserIsSuspendedResponse, error) {
	rsp, err := c.UpdateUserIsSuspendedWithBody(ctx, userId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateUserIsSuspendedResponse(rsp)
}

func (c *ClientWithResponses) UpdateUserIsSuspendedWithResponse(ctx context.Context, userId UserId, body UpdateUserIsSuspendedJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateUserIsSuspendedResponse, error) {
	rsp, err := c.UpdateUserIsSuspended(ctx, userId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateUserIsSuspendedResponse(rsp)
}

// ListUserMfaVerificationsWithResponse request returning *ListUserMfaVerificationsResponse
func (c *ClientWithResponses) ListUserMfaVerificationsWithResponse(ctx context.Context, userId UserId, reqEditors ...RequestEditorFn) (*ListUserMfaVerificationsResponse, error) {
	rsp, err := c.ListUserMfaVerifications(ctx, userId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListUserMfaVerificationsResponse(rsp)
}

// CreateUserMfaVerificationWithBodyWithResponse request with arbitrary body returning *CreateUserMfaVerificationResponse
func (c *ClientWithResponses) CreateUserMfaVerificationWithBodyWithResponse(ctx context.Context, userId UserId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateUserMfaVerificationResponse, error) {
	rsp, err := c.CreateUserMfaVerificationWithBody(ctx, userId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateUserMfaVerificationResponse(rsp)
}

func (c *ClientWithResponses) CreateUserMfaVerificationWithResponse(ctx context.Context, userId UserId, body CreateUserMfaVerificationJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateUserMfaVerificationResponse, error) {
	rsp, err := c.CreateUserMfaVerification(ctx, userId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateUserMfaVerificationResponse(rsp)
}

// DeleteUserMfaVerificationWithResponse request returning *DeleteUserMfaVerificationResponse
func (c *ClientWithResponses) DeleteUserMfaVerificationWithResponse(ctx context.Context, userId UserId, verificationId VerificationId, reqEditors ...RequestEditorFn) (*DeleteUserMfaVerificationResponse, error) {
	rsp, err := c.DeleteUserMfaVerification(ctx, userId, verificationId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteUserMfaVerificationResponse(rsp)
}

// ListUserOrganizationsWithResponse request returning *ListUserOrganizationsResponse
func (c *ClientWithResponses) ListUserOrganizationsWithResponse(ctx context.Context, userId UserId, reqEditors ...RequestEditorFn) (*ListUserOrganizationsResponse, error) {
	rsp, err := c.ListUserOrganizations(ctx, userId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListUserOrganizationsResponse(rsp)
}

// UpdateUserPasswordWithBodyWithResponse request with arbitrary body returning *UpdateUserPasswordResponse
func (c *ClientWithResponses) UpdateUserPasswordWithBodyWithResponse(ctx context.Context, userId UserId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateUserPasswordResponse, error) {
	rsp, err := c.UpdateUserPasswordWithBody(ctx, userId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateUserPasswordResponse(rsp)
}

func (c *ClientWithResponses) UpdateUserPasswordWithResponse(ctx context.Context, userId UserId, body UpdateUserPasswordJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateUserPasswordResponse, error) {
	rsp, err := c.UpdateUserPassword(ctx, userId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateUserPasswordResponse(rsp)
}

// VerifyUserPasswordWithBodyWithResponse request with arbitrary body returning *VerifyUserPasswordResponse
func (c *ClientWithResponses) VerifyUserPasswordWithBodyWithResponse(ctx context.Context, userId UserId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*VerifyUserPasswordResponse, error) {
	rsp, err := c.VerifyUserPasswordWithBody(ctx, userId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseVerifyUserPasswordResponse(rsp)
}

func (c *ClientWithResponses) VerifyUserPasswordWithResponse(ctx context.Context, userId UserId, body VerifyUserPasswordJSONRequestBody, reqEditors ...RequestEditorFn) (*VerifyUserPasswordResponse, error) {
	rsp, err := c.VerifyUserPassword(ctx, userId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseVerifyUserPasswordResponse(rsp)
}

// ListUserPersonalAccessTokensWithResponse request returning *ListUserPersonalAccessTokensResponse
func (c *ClientWithResponses) ListUserPersonalAccessTokensWithResponse(ctx context.Context, userId UserId, reqEditors ...RequestEditorFn) (*ListUserPersonalAccessTokensResponse, error) {
	rsp, err := c.ListUserPersonalAccessTokens(ctx, userId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListUserPersonalAccessTokensResponse(rsp)
}

// CreateUserPersonalAccessTokenWithBodyWithResponse request with arbitrary body returning *CreateUserPersonalAccessTokenResponse
func (c *ClientWithResponses) CreateUserPersonalAccessTokenWithBodyWithResponse(ctx context.Context, userId UserId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateUserPersonalAccessTokenResponse, error) {
	rsp, err := c.CreateUserPersonalAccessTokenWithBody(ctx, userId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateUserPersonalAccessTokenResponse(rsp)
}

func (c *ClientWithResponses) CreateUserPersonalAccessTokenWithResponse(ctx context.Context, userId UserId, body CreateUserPersonalAccessTokenJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateUserPersonalAccessTokenResponse, error) {
	rsp, err := c.CreateUserPersonalAccessToken(ctx, userId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateUserPersonalAccessTokenResponse(rsp)
}

// DeleteUserPersonalAccessTokenWithResponse request returning *DeleteUserPersonalAccessTokenResponse
func (c *ClientWithResponses) DeleteUserPersonalAccessTokenWithResponse(ctx context.Context, userId UserId, name string, reqEditors ...RequestEditorFn) (*DeleteUserPersonalAccessTokenResponse, error) {
	rsp, err := c.DeleteUserPersonalAccessToken(ctx, userId, name, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteUserPersonalAccessTokenResponse(rsp)
}

// UpdateUserPersonalAccessTokenWithBodyWithResponse request with arbitrary body returning *UpdateUserPersonalAccessTokenResponse
func (c *ClientWithResponses) UpdateUserPersonalAccessTokenWithBodyWithResponse(ctx context.Context, userId UserId, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateUserPersonalAccessTokenResponse, error) {
	rsp, err := c.UpdateUserPersonalAccessTokenWithBody(ctx, userId, name, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateUserPersonalAccessTokenResponse(rsp)
}

func (c *ClientWithResponses) UpdateUserPersonalAccessTokenWithResponse(ctx context.Context, userId UserId, name string, body UpdateUserPersonalAccessTokenJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateUserPersonalAccessTokenResponse, error) {
	rsp, err := c.UpdateUserPersonalAccessToken(ctx, userId, name, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateUserPersonalAccessTokenResponse(rsp)
}

// UpdateUserProfileWithBodyWithResponse request with arbitrary body returning *UpdateUserProfileResponse
func (c *ClientWithResponses) UpdateUserProfileWithBodyWithResponse(ctx context.Context, userId UserId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateUserProfileResponse, error) {
	rsp, err := c.UpdateUserProfileWithBody(ctx, userId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateUserProfileResponse(rsp)
}

func (c *ClientWithResponses) UpdateUserProfileWithResponse(ctx context.Context, userId UserId, body UpdateUserProfileJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateUserProfileResponse, error) {
	rsp, err := c.UpdateUserProfile(ctx, userId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateUserProfileResponse(rsp)
}

// ListUserRolesWithResponse request returning *ListUserRolesResponse
func (c *ClientWithResponses) ListUserRolesWithResponse(ctx context.Context, userId UserId, params *ListUserRolesParams, reqEditors ...RequestEditorFn) (*ListUserRolesResponse, error) {
	rsp, err := c.ListUserRoles(ctx, userId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListUserRolesResponse(rsp)
}

// AssignUserRolesWithBodyWithResponse request with arbitrary body returning *AssignUserRolesResponse
func (c *ClientWithResponses) AssignUserRolesWithBodyWithResponse(ctx context.Context, userId UserId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AssignUserRolesResponse, error) {
	rsp, err := c.AssignUserRolesWithBody(ctx, userId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAssignUserRolesResponse(rsp)
}

func (c *ClientWithResponses) AssignUserRolesWithResponse(ctx context.Context, userId UserId, body AssignUserRolesJSONRequestBody, reqEditors ...RequestEditorFn) (*AssignUserRolesResponse, error) {
	rsp, err := c.AssignUserRoles(ctx, userId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAssignUserRolesResponse(rsp)
}

// ReplaceUserRolesWithBodyWithResponse request with arbitrary body returning *ReplaceUserRolesResponse
func (c *ClientWithResponses) ReplaceUserRolesWithBodyWithResponse(ctx context.Context, userId UserId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReplaceUserRolesResponse, error) {
	rsp, err := c.ReplaceUserRolesWithBody(ctx, userId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReplaceUserRolesResponse(rsp)
}

func (c *ClientWithResponses) ReplaceUserRolesWithResponse(ctx context.Context, userId UserId, body ReplaceUserRolesJSONRequestBody, reqEditors ...RequestEditorFn) (*ReplaceUserRolesResponse, error) {
	rsp, err := c.ReplaceUserRoles(ctx, userId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReplaceUserRolesResponse(rsp)
}

// DeleteUserRoleWithResponse request returning *DeleteUserRoleResponse
func (c *ClientWithResponses) DeleteUserRoleWithResponse(ctx context.Context, userId UserId, roleId RoleId, reqEditors ...RequestEditorFn) (*DeleteUserRoleResponse, error) {
	rsp, err := c.DeleteUserRole(ctx, userId, roleId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteUserRoleResponse(rsp)
}

// CreateVerificationCodeWithBodyWithResponse request with arbitrary body returning *CreateVerificationCodeResponse
func (c *ClientWithResponses) CreateVerificationCodeWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateVerificationCodeResponse, error) {
	rsp, err := c.CreateVerificationCodeWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateVerificationCodeResponse(rsp)
}

func (c *ClientWithResponses) CreateVerificationCodeWithResponse(ctx context.Context, body CreateVerificationCodeJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateVerificationCodeResponse, error) {
	rsp, err := c.CreateVerificationCode(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateVerificationCodeResponse(rsp)
}

// VerifyVerificationCodeWithBodyWithResponse request with arbitrary body returning *VerifyVerificationCodeResponse
func (c *ClientWithResponses) VerifyVerificationCodeWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*VerifyVerificationCodeResponse, error) {
	rsp, err := c.VerifyVerificationCodeWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseVerifyVerificationCodeResponse(rsp)
}

func (c *ClientWithResponses) VerifyVerificationCodeWithResponse(ctx context.Context, body VerifyVerificationCodeJSONRequestBody, reqEditors ...RequestEditorFn) (*VerifyVerificationCodeResponse, error) {
	rsp, err := c.VerifyVerificationCode(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseVerifyVerificationCodeResponse(rsp)
}

// CreateVerificationByPasswordWithBodyWithResponse request with arbitrary body returning *CreateVerificationByPasswordResponse
func (c *ClientWithResponses) CreateVerificationByPasswordWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateVerificationByPasswordResponse, error) {
	rsp, err := c.CreateVerificationByPasswordWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateVerificationByPasswordResponse(rsp)
}

func (c *ClientWithResponses) CreateVerificationByPasswordWithResponse(ctx context.Context, body CreateVerificationByPasswordJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateVerificationByPasswordResponse, error) {
	rsp, err := c.CreateVerificationByPassword(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateVerificationByPasswordResponse(rsp)
}

// CreateVerificationBySocialWithBodyWithResponse request with arbitrary body returning *CreateVerificationBySocialResponse
func (c *ClientWithResponses) CreateVerificationBySocialWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateVerificationBySocialResponse, error) {
	rsp, err := c.CreateVerificationBySocialWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateVerificationBySocialResponse(rsp)
}

func (c *ClientWithResponses) CreateVerificationBySocialWithResponse(ctx context.Context, body CreateVerificationBySocialJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateVerificationBySocialResponse, error) {
	rsp, err := c.CreateVerificationBySocial(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateVerificationBySocialResponse(rsp)
}

// VerifyVerificationBySocialWithBodyWithResponse request with arbitrary body returning *VerifyVerificationBySocialResponse
func (c *ClientWithResponses) VerifyVerificationBySocialWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*VerifyVerificationBySocialResponse, error) {
	rsp, err := c.VerifyVerificationBySocialWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseVerifyVerificationBySocialResponse(rsp)
}

func (c *ClientWithResponses) VerifyVerificationBySocialWithResponse(ctx context.Context, body VerifyVerificationBySocialJSONRequestBody, reqEditors ...RequestEditorFn) (*VerifyVerificationBySocialResponse, error) {
	rsp, err := c.VerifyVerificationBySocial(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseVerifyVerificationBySocialResponse(rsp)
}

// CreateVerificationByVerificationCodeWithBodyWithResponse request with arbitrary body returning *CreateVerificationByVerificationCodeResponse
func (c *ClientWithResponses) CreateVerificationByVerificationCodeWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateVerificationByVerificationCodeResponse, error) {
	rsp, err := c.CreateVerificationByVerificationCodeWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateVerificationByVerificationCodeResponse(rsp)
}

func (c *ClientWithResponses) CreateVerificationByVerificationCodeWithResponse(ctx context.Context, body CreateVerificationByVerificationCodeJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateVerificationByVerificationCodeResponse, error) {
	rsp, err := c.CreateVerificationByVerificationCode(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateVerificationByVerificationCodeResponse(rsp)
}

// VerifyVerificationByVerificationCodeWithBodyWithResponse request with arbitrary body returning *VerifyVerificationByVerificationCodeResponse
func (c *ClientWithResponses) VerifyVerificationByVerificationCodeWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*VerifyVerificationByVerificationCodeResponse, error) {
	rsp, err := c.VerifyVerificationByVerificationCodeWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseVerifyVerificationByVerificationCodeResponse(rsp)
}

func (c *ClientWithResponses) VerifyVerificationByVerificationCodeWithResponse(ctx context.Context, body VerifyVerificationByVerificationCodeJSONRequestBody, reqEditors ...RequestEditorFn) (*VerifyVerificationByVerificationCodeResponse, error) {
	rsp, err := c.VerifyVerificationByVerificationCode(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseVerifyVerificationByVerificationCodeResponse(rsp)
}

// GenerateWebAuthnRegistrationOptionsWithResponse request returning *GenerateWebAuthnRegistrationOptionsResponse
func (c *ClientWithResponses) GenerateWebAuthnRegistrationOptionsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GenerateWebAuthnRegistrationOptionsResponse, error) {
	rsp, err := c.GenerateWebAuthnRegistrationOptions(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGenerateWebAuthnRegistrationOptionsResponse(rsp)
}

// VerifyWebAuthnRegistrationWithBodyWithResponse request with arbitrary body returning *VerifyWebAuthnRegistrationResponse
func (c *ClientWithResponses) VerifyWebAuthnRegistrationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*VerifyWebAuthnRegistrationResponse, error) {
	rsp, err := c.VerifyWebAuthnRegistrationWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseVerifyWebAuthnRegistrationResponse(rsp)
}

func (c *ClientWithResponses) VerifyWebAuthnRegistrationWithResponse(ctx context.Context, body VerifyWebAuthnRegistrationJSONRequestBody, reqEditors ...RequestEditorFn) (*VerifyWebAuthnRegistrationResponse, error) {
	rsp, err := c.VerifyWebAuthnRegistration(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseVerifyWebAuthnRegistrationResponse(rsp)
}

// ParseGetWellKnownExperienceResponse parses an HTTP response from a GetWellKnownExperienceWithResponse call
func ParseGetWellKnownExperienceResponse(rsp *http.Response) (*GetWellKnownExperienceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetWellKnownExperienceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			AgreeToTermsPolicy GetWellKnownExperience200AgreeToTermsPolicy `json:"agreeToTermsPolicy"`
			Branding           struct {
				DarkFavicon *string `json:"darkFavicon,omitempty"`
				DarkLogoUrl *string `json:"darkLogoUrl,omitempty"`
				Favicon     *string `json:"favicon,omitempty"`
				LogoUrl     *string `json:"logoUrl,omitempty"`
			} `json:"branding"`
			CaptchaConfig *struct {
				SiteKey string                                     `json:"siteKey"`
				Type    GetWellKnownExperience200CaptchaConfigType `json:"type"`
			} `json:"captchaConfig,omitempty"`
			CaptchaPolicy struct {
				Enabled *bool `json:"enabled,omitempty"`
			} `json:"captchaPolicy"`
			Color struct {
				DarkPrimaryColor  string `json:"darkPrimaryColor"`
				IsDarkModeEnabled bool   `json:"isDarkModeEnabled"`
				PrimaryColor      string `json:"primaryColor"`
			} `json:"color"`
			CustomContent  map[string]string `json:"customContent"`
			CustomCss      *string           `json:"customCss"`
			CustomUiAssets *struct {
				CreatedAt float32 `json:"createdAt"`
				Id        string  `json:"id"`
			} `json:"customUiAssets"`
			EmailBlocklistPolicy struct {
				BlockDisposableAddresses *bool     `json:"blockDisposableAddresses,omitempty"`
				BlockSubaddressing       *bool     `json:"blockSubaddressing,omitempty"`
				CustomBlocklist          *[]string `json:"customBlocklist,omitempty"`
			} `json:"emailBlocklistPolicy"`
			ForgotPassword struct {
				Email bool `json:"email"`
				Phone bool `json:"phone"`
			} `json:"forgotPassword"`
			GoogleOneTap *struct {
				AutoSelect        *bool  `json:"autoSelect,omitempty"`
				ClientId          string `json:"clientId"`
				CloseOnTapOutside *bool  `json:"closeOnTapOutside,omitempty"`
				ConnectorId       string `json:"connectorId"`
				IsEnabled         *bool  `json:"isEnabled,omitempty"`
				ItpSupport        *bool  `json:"itpSupport,omitempty"`
			} `json:"googleOneTap,omitempty"`
			Id                  string `json:"id"`
			IsDevelopmentTenant bool   `json:"isDevelopmentTenant"`
			LanguageInfo        struct {
				AutoDetect       bool                                                  `json:"autoDetect"`
				FallbackLanguage GetWellKnownExperience200LanguageInfoFallbackLanguage `json:"fallbackLanguage"`
			} `json:"languageInfo"`
			Mfa struct {
				Factors                       []GetWellKnownExperience200MfaFactors                      `json:"factors"`
				OrganizationRequiredMfaPolicy *GetWellKnownExperience200MfaOrganizationRequiredMfaPolicy `json:"organizationRequiredMfaPolicy,omitempty"`
				Policy                        GetWellKnownExperience200MfaPolicy                         `json:"policy"`
			} `json:"mfa"`
			PasswordPolicy struct {
				CharacterTypes *struct {
					Min float32 `json:"min"`
				} `json:"characterTypes,omitempty"`
				Length *struct {
					Max float32 `json:"max"`
					Min float32 `json:"min"`
				} `json:"length,omitempty"`
				Rejects *struct {
					Pwned                 bool     `json:"pwned"`
					RepetitionAndSequence bool     `json:"repetitionAndSequence"`
					UserInfo              bool     `json:"userInfo"`
					Words                 []string `json:"words"`
				} `json:"rejects,omitempty"`
			} `json:"passwordPolicy"`
			PrivacyPolicyUrl *string `json:"privacyPolicyUrl"`
			SentinelPolicy   struct {
				LockoutDuration *float32 `json:"lockoutDuration,omitempty"`
				MaxAttempts     *float32 `json:"maxAttempts,omitempty"`
			} `json:"sentinelPolicy"`
			SignIn struct {
				Methods []struct {
					Identifier        GetWellKnownExperience200SignInMethodsIdentifier `json:"identifier"`
					IsPasswordPrimary bool                                             `json:"isPasswordPrimary"`
					Password          bool                                             `json:"password"`
					VerificationCode  bool                                             `json:"verificationCode"`
				} `json:"methods"`
			} `json:"signIn"`
			SignInMode GetWellKnownExperience200SignInMode `json:"signInMode"`
			SignUp     struct {
				Identifiers          []GetWellKnownExperience200SignUpIdentifiers `json:"identifiers"`
				Password             bool                                         `json:"password"`
				SecondaryIdentifiers *[]struct {
					Identifier GetWellKnownExperience_200_SignUp_SecondaryIdentifiers_Identifier `json:"identifier"`
					Verify     *bool                                                             `json:"verify,omitempty"`
				} `json:"secondaryIdentifiers,omitempty"`
				Verify bool `json:"verify"`
			} `json:"signUp"`
			SingleSignOnEnabled bool `json:"singleSignOnEnabled"`
			SocialConnectors    []struct {
				FromEmail  *string `json:"fromEmail,omitempty"`
				Id         string  `json:"id"`
				IsStandard *bool   `json:"isStandard,omitempty"`
				Logo       string  `json:"logo"`
				LogoDark   *string `json:"logoDark"`

				// Name Validator function
				Name     map[string]interface{}                             `json:"name"`
				Platform *GetWellKnownExperience200SocialConnectorsPlatform `json:"platform"`
				Target   string                                             `json:"target"`
			} `json:"socialConnectors"`
			SocialSignIn struct {
				AutomaticAccountLinking *bool `json:"automaticAccountLinking,omitempty"`
			} `json:"socialSignIn"`
			SocialSignInConnectorTargets []string `json:"socialSignInConnectorTargets"`
			SsoConnectors                []struct {
				ConnectorName string  `json:"connectorName"`
				DarkLogo      *string `json:"darkLogo,omitempty"`
				Id            string  `json:"id"`
				Logo          string  `json:"logo"`
			} `json:"ssoConnectors"`
			SupportEmail              *string `json:"supportEmail"`
			SupportWebsiteUrl         *string `json:"supportWebsiteUrl"`
			TenantId                  string  `json:"tenantId"`
			TermsOfUseUrl             *string `json:"termsOfUseUrl"`
			UnknownSessionRedirectUrl *string `json:"unknownSessionRedirectUrl"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetWellKnownExperienceOpenapiJsonResponse parses an HTTP response from a GetWellKnownExperienceOpenapiJsonWithResponse call
func ParseGetWellKnownExperienceOpenapiJsonResponse(rsp *http.Response) (*GetWellKnownExperienceOpenapiJsonResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetWellKnownExperienceOpenapiJsonResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetWellKnownManagementOpenapiJsonResponse parses an HTTP response from a GetWellKnownManagementOpenapiJsonWithResponse call
func ParseGetWellKnownManagementOpenapiJsonResponse(rsp *http.Response) (*GetWellKnownManagementOpenapiJsonResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetWellKnownManagementOpenapiJsonResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetSignInExperiencePhrasesResponse parses an HTTP response from a GetSignInExperiencePhrasesWithResponse call
func ParseGetSignInExperiencePhrasesResponse(rsp *http.Response) (*GetSignInExperiencePhrasesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSignInExperiencePhrasesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]GetSignInExperiencePhrases_200_AdditionalProperties
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetSignInExperienceConfigResponse parses an HTTP response from a GetSignInExperienceConfigWithResponse call
func ParseGetSignInExperienceConfigResponse(rsp *http.Response) (*GetSignInExperienceConfigResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSignInExperienceConfigResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			AgreeToTermsPolicy GetSignInExperienceConfig200AgreeToTermsPolicy `json:"agreeToTermsPolicy"`
			Branding           struct {
				DarkFavicon *string `json:"darkFavicon,omitempty"`
				DarkLogoUrl *string `json:"darkLogoUrl,omitempty"`
				Favicon     *string `json:"favicon,omitempty"`
				LogoUrl     *string `json:"logoUrl,omitempty"`
			} `json:"branding"`
			CaptchaConfig *struct {
				SiteKey string                                        `json:"siteKey"`
				Type    GetSignInExperienceConfig200CaptchaConfigType `json:"type"`
			} `json:"captchaConfig,omitempty"`
			CaptchaPolicy struct {
				Enabled *bool `json:"enabled,omitempty"`
			} `json:"captchaPolicy"`
			Color struct {
				DarkPrimaryColor  string `json:"darkPrimaryColor"`
				IsDarkModeEnabled bool   `json:"isDarkModeEnabled"`
				PrimaryColor      string `json:"primaryColor"`
			} `json:"color"`
			CustomContent  map[string]string `json:"customContent"`
			CustomCss      *string           `json:"customCss"`
			CustomUiAssets *struct {
				CreatedAt float32 `json:"createdAt"`
				Id        string  `json:"id"`
			} `json:"customUiAssets"`
			EmailBlocklistPolicy struct {
				BlockDisposableAddresses *bool     `json:"blockDisposableAddresses,omitempty"`
				BlockSubaddressing       *bool     `json:"blockSubaddressing,omitempty"`
				CustomBlocklist          *[]string `json:"customBlocklist,omitempty"`
			} `json:"emailBlocklistPolicy"`
			ForgotPassword struct {
				Email bool `json:"email"`
				Phone bool `json:"phone"`
			} `json:"forgotPassword"`
			GoogleOneTap *struct {
				AutoSelect        *bool  `json:"autoSelect,omitempty"`
				ClientId          string `json:"clientId"`
				CloseOnTapOutside *bool  `json:"closeOnTapOutside,omitempty"`
				ConnectorId       string `json:"connectorId"`
				IsEnabled         *bool  `json:"isEnabled,omitempty"`
				ItpSupport        *bool  `json:"itpSupport,omitempty"`
			} `json:"googleOneTap,omitempty"`
			Id                  string `json:"id"`
			IsDevelopmentTenant bool   `json:"isDevelopmentTenant"`
			LanguageInfo        struct {
				AutoDetect       bool                                                     `json:"autoDetect"`
				FallbackLanguage GetSignInExperienceConfig200LanguageInfoFallbackLanguage `json:"fallbackLanguage"`
			} `json:"languageInfo"`
			Mfa struct {
				Factors                       []GetSignInExperienceConfig200MfaFactors                      `json:"factors"`
				OrganizationRequiredMfaPolicy *GetSignInExperienceConfig200MfaOrganizationRequiredMfaPolicy `json:"organizationRequiredMfaPolicy,omitempty"`
				Policy                        GetSignInExperienceConfig200MfaPolicy                         `json:"policy"`
			} `json:"mfa"`
			PasswordPolicy struct {
				CharacterTypes *struct {
					Min float32 `json:"min"`
				} `json:"characterTypes,omitempty"`
				Length *struct {
					Max float32 `json:"max"`
					Min float32 `json:"min"`
				} `json:"length,omitempty"`
				Rejects *struct {
					Pwned                 bool     `json:"pwned"`
					RepetitionAndSequence bool     `json:"repetitionAndSequence"`
					UserInfo              bool     `json:"userInfo"`
					Words                 []string `json:"words"`
				} `json:"rejects,omitempty"`
			} `json:"passwordPolicy"`
			PrivacyPolicyUrl *string `json:"privacyPolicyUrl"`
			SentinelPolicy   struct {
				LockoutDuration *float32 `json:"lockoutDuration,omitempty"`
				MaxAttempts     *float32 `json:"maxAttempts,omitempty"`
			} `json:"sentinelPolicy"`
			SignIn struct {
				Methods []struct {
					Identifier        GetSignInExperienceConfig200SignInMethodsIdentifier `json:"identifier"`
					IsPasswordPrimary bool                                                `json:"isPasswordPrimary"`
					Password          bool                                                `json:"password"`
					VerificationCode  bool                                                `json:"verificationCode"`
				} `json:"methods"`
			} `json:"signIn"`
			SignInMode GetSignInExperienceConfig200SignInMode `json:"signInMode"`
			SignUp     struct {
				Identifiers          []GetSignInExperienceConfig200SignUpIdentifiers `json:"identifiers"`
				Password             bool                                            `json:"password"`
				SecondaryIdentifiers *[]struct {
					Identifier GetSignInExperienceConfig_200_SignUp_SecondaryIdentifiers_Identifier `json:"identifier"`
					Verify     *bool                                                                `json:"verify,omitempty"`
				} `json:"secondaryIdentifiers,omitempty"`
				Verify bool `json:"verify"`
			} `json:"signUp"`
			SingleSignOnEnabled bool `json:"singleSignOnEnabled"`
			SocialConnectors    []struct {
				FromEmail  *string `json:"fromEmail,omitempty"`
				Id         string  `json:"id"`
				IsStandard *bool   `json:"isStandard,omitempty"`
				Logo       string  `json:"logo"`
				LogoDark   *string `json:"logoDark"`

				// Name Validator function
				Name     map[string]interface{}                                `json:"name"`
				Platform *GetSignInExperienceConfig200SocialConnectorsPlatform `json:"platform"`
				Target   string                                                `json:"target"`
			} `json:"socialConnectors"`
			SocialSignIn struct {
				AutomaticAccountLinking *bool `json:"automaticAccountLinking,omitempty"`
			} `json:"socialSignIn"`
			SocialSignInConnectorTargets []string `json:"socialSignInConnectorTargets"`
			SsoConnectors                []struct {
				ConnectorName string  `json:"connectorName"`
				DarkLogo      *string `json:"darkLogo,omitempty"`
				Id            string  `json:"id"`
				Logo          string  `json:"logo"`
			} `json:"ssoConnectors"`
			SupportEmail              *string `json:"supportEmail"`
			SupportWebsiteUrl         *string `json:"supportWebsiteUrl"`
			TenantId                  string  `json:"tenantId"`
			TermsOfUseUrl             *string `json:"termsOfUseUrl"`
			UnknownSessionRedirectUrl *string `json:"unknownSessionRedirectUrl"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetWellKnownUserOpenapiJsonResponse parses an HTTP response from a GetWellKnownUserOpenapiJsonWithResponse call
func ParseGetWellKnownUserOpenapiJsonResponse(rsp *http.Response) (*GetWellKnownUserOpenapiJsonResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetWellKnownUserOpenapiJsonResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetAccountCenterSettingsResponse parses an HTTP response from a GetAccountCenterSettingsWithResponse call
func ParseGetAccountCenterSettingsResponse(rsp *http.Response) (*GetAccountCenterSettingsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAccountCenterSettingsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Enabled bool `json:"enabled"`
			Fields  struct {
				Avatar     *GetAccountCenterSettings200FieldsAvatar     `json:"avatar,omitempty"`
				CustomData *GetAccountCenterSettings200FieldsCustomData `json:"customData,omitempty"`
				Email      *GetAccountCenterSettings200FieldsEmail      `json:"email,omitempty"`
				Mfa        *GetAccountCenterSettings200FieldsMfa        `json:"mfa,omitempty"`
				Name       *GetAccountCenterSettings200FieldsName       `json:"name,omitempty"`
				Password   *GetAccountCenterSettings200FieldsPassword   `json:"password,omitempty"`
				Phone      *GetAccountCenterSettings200FieldsPhone      `json:"phone,omitempty"`
				Profile    *GetAccountCenterSettings200FieldsProfile    `json:"profile,omitempty"`
				Social     *GetAccountCenterSettings200FieldsSocial     `json:"social,omitempty"`
				Username   *GetAccountCenterSettings200FieldsUsername   `json:"username,omitempty"`
			} `json:"fields"`
			Id                     string   `json:"id"`
			TenantId               string   `json:"tenantId"`
			WebauthnRelatedOrigins []string `json:"webauthnRelatedOrigins"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUpdateAccountCenterSettingsResponse parses an HTTP response from a UpdateAccountCenterSettingsWithResponse call
func ParseUpdateAccountCenterSettingsResponse(rsp *http.Response) (*UpdateAccountCenterSettingsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateAccountCenterSettingsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Enabled bool `json:"enabled"`
			Fields  struct {
				Avatar     *UpdateAccountCenterSettings200FieldsAvatar     `json:"avatar,omitempty"`
				CustomData *UpdateAccountCenterSettings200FieldsCustomData `json:"customData,omitempty"`
				Email      *UpdateAccountCenterSettings200FieldsEmail      `json:"email,omitempty"`
				Mfa        *UpdateAccountCenterSettings200FieldsMfa        `json:"mfa,omitempty"`
				Name       *UpdateAccountCenterSettings200FieldsName       `json:"name,omitempty"`
				Password   *UpdateAccountCenterSettings200FieldsPassword   `json:"password,omitempty"`
				Phone      *UpdateAccountCenterSettings200FieldsPhone      `json:"phone,omitempty"`
				Profile    *UpdateAccountCenterSettings200FieldsProfile    `json:"profile,omitempty"`
				Social     *UpdateAccountCenterSettings200FieldsSocial     `json:"social,omitempty"`
				Username   *UpdateAccountCenterSettings200FieldsUsername   `json:"username,omitempty"`
			} `json:"fields"`
			Id                     string   `json:"id"`
			TenantId               string   `json:"tenantId"`
			WebauthnRelatedOrigins []string `json:"webauthnRelatedOrigins"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseListApplicationsResponse parses an HTTP response from a ListApplicationsWithResponse call
func ParseListApplicationsResponse(rsp *http.Response) (*ListApplicationsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListApplicationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []struct {
			CreatedAt            float32 `json:"createdAt"`
			CustomClientMetadata struct {
				AlwaysIssueRefreshToken *bool     `json:"alwaysIssueRefreshToken,omitempty"`
				CorsAllowedOrigins      *[]string `json:"corsAllowedOrigins,omitempty"`
				IdTokenTtl              *float32  `json:"idTokenTtl,omitempty"`
				RefreshTokenTtl         *float32  `json:"refreshTokenTtl,omitempty"`
				RefreshTokenTtlInDays   *float32  `json:"refreshTokenTtlInDays,omitempty"`
				RotateRefreshToken      *bool     `json:"rotateRefreshToken,omitempty"`
				TenantId                *string   `json:"tenantId,omitempty"`
			} `json:"customClientMetadata"`

			// CustomData arbitrary
			CustomData         map[string]interface{} `json:"customData"`
			Description        *string                `json:"description"`
			Id                 string                 `json:"id"`
			IsThirdParty       bool                   `json:"isThirdParty"`
			Name               string                 `json:"name"`
			OidcClientMetadata struct {
				BackchannelLogoutSessionRequired *bool                                                       `json:"backchannelLogoutSessionRequired,omitempty"`
				BackchannelLogoutUri             *string                                                     `json:"backchannelLogoutUri,omitempty"`
				LogoUri                          *string                                                     `json:"logoUri,omitempty"`
				PostLogoutRedirectUris           []string                                                    `json:"postLogoutRedirectUris"`
				RedirectUris                     []ListApplications_200_OidcClientMetadata_RedirectUris_Item `json:"redirectUris"`
			} `json:"oidcClientMetadata"`
			ProtectedAppMetadata *struct {
				CustomDomains *[]struct {
					CloudflareData *struct {
						Id  string `json:"id"`
						Ssl struct {
							Status           string `json:"status"`
							ValidationErrors *[]struct {
								Message string `json:"message"`
							} `json:"validation_errors,omitempty"`
						} `json:"ssl"`
						Status             string    `json:"status"`
						VerificationErrors *[]string `json:"verification_errors,omitempty"`
					} `json:"cloudflareData"`
					DnsRecords []struct {
						Name  string `json:"name"`
						Type  string `json:"type"`
						Value string `json:"value"`
					} `json:"dnsRecords"`
					Domain       string                                                     `json:"domain"`
					ErrorMessage *string                                                    `json:"errorMessage"`
					Status       ListApplications200ProtectedAppMetadataCustomDomainsStatus `json:"status"`
				} `json:"customDomains,omitempty"`
				Host      string `json:"host"`
				Origin    string `json:"origin"`
				PageRules []struct {
					Path string `json:"path"`
				} `json:"pageRules"`
				SessionDuration float32 `json:"sessionDuration"`
			} `json:"protectedAppMetadata"`

			// Secret The internal client secret. Note it is only used for internal validation, and the actual secrets should be retrieved from `/api/applications/{id}/secrets` endpoints.
			// Deprecated:
			Secret   ApplicationLegacySecret `json:"secret"`
			TenantId string                  `json:"tenantId"`
			Type     ListApplications200Type `json:"type"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateApplicationResponse parses an HTTP response from a CreateApplicationWithResponse call
func ParseCreateApplicationResponse(rsp *http.Response) (*CreateApplicationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateApplicationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			CreatedAt            float32 `json:"createdAt"`
			CustomClientMetadata struct {
				AlwaysIssueRefreshToken *bool     `json:"alwaysIssueRefreshToken,omitempty"`
				CorsAllowedOrigins      *[]string `json:"corsAllowedOrigins,omitempty"`
				IdTokenTtl              *float32  `json:"idTokenTtl,omitempty"`
				RefreshTokenTtl         *float32  `json:"refreshTokenTtl,omitempty"`
				RefreshTokenTtlInDays   *float32  `json:"refreshTokenTtlInDays,omitempty"`
				RotateRefreshToken      *bool     `json:"rotateRefreshToken,omitempty"`
				TenantId                *string   `json:"tenantId,omitempty"`
			} `json:"customClientMetadata"`

			// CustomData arbitrary
			CustomData         map[string]interface{} `json:"customData"`
			Description        *string                `json:"description"`
			Id                 string                 `json:"id"`
			IsThirdParty       bool                   `json:"isThirdParty"`
			Name               string                 `json:"name"`
			OidcClientMetadata struct {
				BackchannelLogoutSessionRequired *bool                                                        `json:"backchannelLogoutSessionRequired,omitempty"`
				BackchannelLogoutUri             *string                                                      `json:"backchannelLogoutUri,omitempty"`
				LogoUri                          *string                                                      `json:"logoUri,omitempty"`
				PostLogoutRedirectUris           []string                                                     `json:"postLogoutRedirectUris"`
				RedirectUris                     []CreateApplication_200_OidcClientMetadata_RedirectUris_Item `json:"redirectUris"`
			} `json:"oidcClientMetadata"`
			ProtectedAppMetadata *struct {
				CustomDomains *[]struct {
					CloudflareData *struct {
						Id  string `json:"id"`
						Ssl struct {
							Status           string `json:"status"`
							ValidationErrors *[]struct {
								Message string `json:"message"`
							} `json:"validation_errors,omitempty"`
						} `json:"ssl"`
						Status             string    `json:"status"`
						VerificationErrors *[]string `json:"verification_errors,omitempty"`
					} `json:"cloudflareData"`
					DnsRecords []struct {
						Name  string `json:"name"`
						Type  string `json:"type"`
						Value string `json:"value"`
					} `json:"dnsRecords"`
					Domain       string                                                      `json:"domain"`
					ErrorMessage *string                                                     `json:"errorMessage"`
					Status       CreateApplication200ProtectedAppMetadataCustomDomainsStatus `json:"status"`
				} `json:"customDomains,omitempty"`
				Host      string `json:"host"`
				Origin    string `json:"origin"`
				PageRules []struct {
					Path string `json:"path"`
				} `json:"pageRules"`
				SessionDuration float32 `json:"sessionDuration"`
			} `json:"protectedAppMetadata"`

			// Secret The internal client secret. Note it is only used for internal validation, and the actual secrets should be retrieved from `/api/applications/{id}/secrets` endpoints.
			// Deprecated:
			Secret   ApplicationLegacySecret  `json:"secret"`
			TenantId string                   `json:"tenantId"`
			Type     CreateApplication200Type `json:"type"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUpdateApplicationCustomDataResponse parses an HTTP response from a UpdateApplicationCustomDataWithResponse call
func ParseUpdateApplicationCustomDataResponse(rsp *http.Response) (*UpdateApplicationCustomDataResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateApplicationCustomDataResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseListApplicationRolesResponse parses an HTTP response from a ListApplicationRolesWithResponse call
func ParseListApplicationRolesResponse(rsp *http.Response) (*ListApplicationRolesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListApplicationRolesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []struct {
			Description string                      `json:"description"`
			Id          string                      `json:"id"`
			IsDefault   bool                        `json:"isDefault"`
			Name        string                      `json:"name"`
			TenantId    string                      `json:"tenantId"`
			Type        ListApplicationRoles200Type `json:"type"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseAssignApplicationRolesResponse parses an HTTP response from a AssignApplicationRolesWithResponse call
func ParseAssignApplicationRolesResponse(rsp *http.Response) (*AssignApplicationRolesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AssignApplicationRolesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseReplaceApplicationRolesResponse parses an HTTP response from a ReplaceApplicationRolesWithResponse call
func ParseReplaceApplicationRolesResponse(rsp *http.Response) (*ReplaceApplicationRolesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReplaceApplicationRolesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteApplicationRoleResponse parses an HTTP response from a DeleteApplicationRoleWithResponse call
func ParseDeleteApplicationRoleResponse(rsp *http.Response) (*DeleteApplicationRoleResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteApplicationRoleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetApplicationSignInExperienceResponse parses an HTTP response from a GetApplicationSignInExperienceWithResponse call
func ParseGetApplicationSignInExperienceResponse(rsp *http.Response) (*GetApplicationSignInExperienceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApplicationSignInExperienceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			ApplicationId string `json:"applicationId"`
			Branding      struct {
				DarkFavicon *string `json:"darkFavicon,omitempty"`
				DarkLogoUrl *string `json:"darkLogoUrl,omitempty"`
				Favicon     *string `json:"favicon,omitempty"`
				LogoUrl     *string `json:"logoUrl,omitempty"`
			} `json:"branding"`
			Color struct {
				DarkPrimaryColor  *string `json:"darkPrimaryColor,omitempty"`
				IsDarkModeEnabled *bool   `json:"isDarkModeEnabled,omitempty"`
				PrimaryColor      *string `json:"primaryColor,omitempty"`
			} `json:"color"`
			DisplayName      *string `json:"displayName"`
			PrivacyPolicyUrl *string `json:"privacyPolicyUrl"`
			TenantId         string  `json:"tenantId"`
			TermsOfUseUrl    *string `json:"termsOfUseUrl"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseReplaceApplicationSignInExperienceResponse parses an HTTP response from a ReplaceApplicationSignInExperienceWithResponse call
func ParseReplaceApplicationSignInExperienceResponse(rsp *http.Response) (*ReplaceApplicationSignInExperienceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReplaceApplicationSignInExperienceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			ApplicationId string `json:"applicationId"`
			Branding      struct {
				DarkFavicon *string `json:"darkFavicon,omitempty"`
				DarkLogoUrl *string `json:"darkLogoUrl,omitempty"`
				Favicon     *string `json:"favicon,omitempty"`
				LogoUrl     *string `json:"logoUrl,omitempty"`
			} `json:"branding"`
			Color struct {
				DarkPrimaryColor  *string `json:"darkPrimaryColor,omitempty"`
				IsDarkModeEnabled *bool   `json:"isDarkModeEnabled,omitempty"`
				PrimaryColor      *string `json:"primaryColor,omitempty"`
			} `json:"color"`
			DisplayName      *string `json:"displayName"`
			PrivacyPolicyUrl *string `json:"privacyPolicyUrl"`
			TenantId         string  `json:"tenantId"`
			TermsOfUseUrl    *string `json:"termsOfUseUrl"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest struct {
			ApplicationId string `json:"applicationId"`
			Branding      struct {
				DarkFavicon *string `json:"darkFavicon,omitempty"`
				DarkLogoUrl *string `json:"darkLogoUrl,omitempty"`
				Favicon     *string `json:"favicon,omitempty"`
				LogoUrl     *string `json:"logoUrl,omitempty"`
			} `json:"branding"`
			Color struct {
				DarkPrimaryColor  *string `json:"darkPrimaryColor,omitempty"`
				IsDarkModeEnabled *bool   `json:"isDarkModeEnabled,omitempty"`
				PrimaryColor      *string `json:"primaryColor,omitempty"`
			} `json:"color"`
			DisplayName      *string `json:"displayName"`
			PrivacyPolicyUrl *string `json:"privacyPolicyUrl"`
			TenantId         string  `json:"tenantId"`
			TermsOfUseUrl    *string `json:"termsOfUseUrl"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseListApplicationUserConsentScopesResponse parses an HTTP response from a ListApplicationUserConsentScopesWithResponse call
func ParseListApplicationUserConsentScopesResponse(rsp *http.Response) (*ListApplicationUserConsentScopesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListApplicationUserConsentScopesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// OrganizationResourceScopes A list of organization resource scope details grouped by resource id assigned to the application.
			OrganizationResourceScopes []struct {
				Resource struct {
					Id        string `json:"id"`
					Indicator string `json:"indicator"`
					Name      string `json:"name"`
				} `json:"resource"`
				Scopes []struct {
					Description *string `json:"description"`
					Id          string  `json:"id"`
					Name        string  `json:"name"`
				} `json:"scopes"`
			} `json:"organizationResourceScopes"`

			// OrganizationScopes A list of organization scope details assigned to the application.
			OrganizationScopes []struct {
				Description *string `json:"description"`
				Id          string  `json:"id"`
				Name        string  `json:"name"`
			} `json:"organizationScopes"`

			// ResourceScopes A list of resource scope details grouped by resource id assigned to the application.
			ResourceScopes []struct {
				Resource struct {
					Id        string `json:"id"`
					Indicator string `json:"indicator"`
					Name      string `json:"name"`
				} `json:"resource"`
				Scopes []struct {
					Description *string `json:"description"`
					Id          string  `json:"id"`
					Name        string  `json:"name"`
				} `json:"scopes"`
			} `json:"resourceScopes"`

			// UserScopes A list of user scope enum value assigned to the application.
			UserScopes []ListApplicationUserConsentScopes200UserScopes `json:"userScopes"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateApplicationUserConsentScopeResponse parses an HTTP response from a CreateApplicationUserConsentScopeWithResponse call
func ParseCreateApplicationUserConsentScopeResponse(rsp *http.Response) (*CreateApplicationUserConsentScopeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateApplicationUserConsentScopeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteApplicationUserConsentScopeResponse parses an HTTP response from a DeleteApplicationUserConsentScopeWithResponse call
func ParseDeleteApplicationUserConsentScopeResponse(rsp *http.Response) (*DeleteApplicationUserConsentScopeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteApplicationUserConsentScopeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteApplicationResponse parses an HTTP response from a DeleteApplicationWithResponse call
func ParseDeleteApplicationResponse(rsp *http.Response) (*DeleteApplicationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteApplicationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetApplicationResponse parses an HTTP response from a GetApplicationWithResponse call
func ParseGetApplicationResponse(rsp *http.Response) (*GetApplicationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApplicationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			CreatedAt            float32 `json:"createdAt"`
			CustomClientMetadata struct {
				AlwaysIssueRefreshToken *bool     `json:"alwaysIssueRefreshToken,omitempty"`
				CorsAllowedOrigins      *[]string `json:"corsAllowedOrigins,omitempty"`
				IdTokenTtl              *float32  `json:"idTokenTtl,omitempty"`
				RefreshTokenTtl         *float32  `json:"refreshTokenTtl,omitempty"`
				RefreshTokenTtlInDays   *float32  `json:"refreshTokenTtlInDays,omitempty"`
				RotateRefreshToken      *bool     `json:"rotateRefreshToken,omitempty"`
				TenantId                *string   `json:"tenantId,omitempty"`
			} `json:"customClientMetadata"`

			// CustomData arbitrary
			CustomData         map[string]interface{} `json:"customData"`
			Description        *string                `json:"description"`
			Id                 string                 `json:"id"`
			IsAdmin            bool                   `json:"isAdmin"`
			IsThirdParty       bool                   `json:"isThirdParty"`
			Name               string                 `json:"name"`
			OidcClientMetadata struct {
				BackchannelLogoutSessionRequired *bool                                                     `json:"backchannelLogoutSessionRequired,omitempty"`
				BackchannelLogoutUri             *string                                                   `json:"backchannelLogoutUri,omitempty"`
				LogoUri                          *string                                                   `json:"logoUri,omitempty"`
				PostLogoutRedirectUris           []string                                                  `json:"postLogoutRedirectUris"`
				RedirectUris                     []GetApplication_200_OidcClientMetadata_RedirectUris_Item `json:"redirectUris"`
			} `json:"oidcClientMetadata"`
			ProtectedAppMetadata *struct {
				CustomDomains *[]struct {
					CloudflareData *struct {
						Id  string `json:"id"`
						Ssl struct {
							Status           string `json:"status"`
							ValidationErrors *[]struct {
								Message string `json:"message"`
							} `json:"validation_errors,omitempty"`
						} `json:"ssl"`
						Status             string    `json:"status"`
						VerificationErrors *[]string `json:"verification_errors,omitempty"`
					} `json:"cloudflareData"`
					DnsRecords []struct {
						Name  string `json:"name"`
						Type  string `json:"type"`
						Value string `json:"value"`
					} `json:"dnsRecords"`
					Domain       string                                                   `json:"domain"`
					ErrorMessage *string                                                  `json:"errorMessage"`
					Status       GetApplication200ProtectedAppMetadataCustomDomainsStatus `json:"status"`
				} `json:"customDomains,omitempty"`
				Host      string `json:"host"`
				Origin    string `json:"origin"`
				PageRules []struct {
					Path string `json:"path"`
				} `json:"pageRules"`
				SessionDuration float32 `json:"sessionDuration"`
			} `json:"protectedAppMetadata"`

			// Secret The internal client secret. Note it is only used for internal validation, and the actual secrets should be retrieved from `/api/applications/{id}/secrets` endpoints.
			// Deprecated:
			Secret   ApplicationLegacySecret `json:"secret"`
			TenantId string                  `json:"tenantId"`
			Type     GetApplication200Type   `json:"type"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUpdateApplicationResponse parses an HTTP response from a UpdateApplicationWithResponse call
func ParseUpdateApplicationResponse(rsp *http.Response) (*UpdateApplicationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateApplicationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			CreatedAt            float32 `json:"createdAt"`
			CustomClientMetadata struct {
				AlwaysIssueRefreshToken *bool     `json:"alwaysIssueRefreshToken,omitempty"`
				CorsAllowedOrigins      *[]string `json:"corsAllowedOrigins,omitempty"`
				IdTokenTtl              *float32  `json:"idTokenTtl,omitempty"`
				RefreshTokenTtl         *float32  `json:"refreshTokenTtl,omitempty"`
				RefreshTokenTtlInDays   *float32  `json:"refreshTokenTtlInDays,omitempty"`
				RotateRefreshToken      *bool     `json:"rotateRefreshToken,omitempty"`
				TenantId                *string   `json:"tenantId,omitempty"`
			} `json:"customClientMetadata"`

			// CustomData arbitrary
			CustomData         map[string]interface{} `json:"customData"`
			Description        *string                `json:"description"`
			Id                 string                 `json:"id"`
			IsThirdParty       bool                   `json:"isThirdParty"`
			Name               string                 `json:"name"`
			OidcClientMetadata struct {
				BackchannelLogoutSessionRequired *bool                                                        `json:"backchannelLogoutSessionRequired,omitempty"`
				BackchannelLogoutUri             *string                                                      `json:"backchannelLogoutUri,omitempty"`
				LogoUri                          *string                                                      `json:"logoUri,omitempty"`
				PostLogoutRedirectUris           []string                                                     `json:"postLogoutRedirectUris"`
				RedirectUris                     []UpdateApplication_200_OidcClientMetadata_RedirectUris_Item `json:"redirectUris"`
			} `json:"oidcClientMetadata"`
			ProtectedAppMetadata *struct {
				CustomDomains *[]struct {
					CloudflareData *struct {
						Id  string `json:"id"`
						Ssl struct {
							Status           string `json:"status"`
							ValidationErrors *[]struct {
								Message string `json:"message"`
							} `json:"validation_errors,omitempty"`
						} `json:"ssl"`
						Status             string    `json:"status"`
						VerificationErrors *[]string `json:"verification_errors,omitempty"`
					} `json:"cloudflareData"`
					DnsRecords []struct {
						Name  string `json:"name"`
						Type  string `json:"type"`
						Value string `json:"value"`
					} `json:"dnsRecords"`
					Domain       string                                                      `json:"domain"`
					ErrorMessage *string                                                     `json:"errorMessage"`
					Status       UpdateApplication200ProtectedAppMetadataCustomDomainsStatus `json:"status"`
				} `json:"customDomains,omitempty"`
				Host      string `json:"host"`
				Origin    string `json:"origin"`
				PageRules []struct {
					Path string `json:"path"`
				} `json:"pageRules"`
				SessionDuration float32 `json:"sessionDuration"`
			} `json:"protectedAppMetadata"`

			// Secret The internal client secret. Note it is only used for internal validation, and the actual secrets should be retrieved from `/api/applications/{id}/secrets` endpoints.
			// Deprecated:
			Secret   ApplicationLegacySecret  `json:"secret"`
			TenantId string                   `json:"tenantId"`
			Type     UpdateApplication200Type `json:"type"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteApplicationLegacySecretResponse parses an HTTP response from a DeleteApplicationLegacySecretWithResponse call
func ParseDeleteApplicationLegacySecretResponse(rsp *http.Response) (*DeleteApplicationLegacySecretResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteApplicationLegacySecretResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			CreatedAt            float32 `json:"createdAt"`
			CustomClientMetadata struct {
				AlwaysIssueRefreshToken *bool     `json:"alwaysIssueRefreshToken,omitempty"`
				CorsAllowedOrigins      *[]string `json:"corsAllowedOrigins,omitempty"`
				IdTokenTtl              *float32  `json:"idTokenTtl,omitempty"`
				RefreshTokenTtl         *float32  `json:"refreshTokenTtl,omitempty"`
				RefreshTokenTtlInDays   *float32  `json:"refreshTokenTtlInDays,omitempty"`
				RotateRefreshToken      *bool     `json:"rotateRefreshToken,omitempty"`
				TenantId                *string   `json:"tenantId,omitempty"`
			} `json:"customClientMetadata"`

			// CustomData arbitrary
			CustomData         map[string]interface{} `json:"customData"`
			Description        *string                `json:"description"`
			Id                 string                 `json:"id"`
			IsThirdParty       bool                   `json:"isThirdParty"`
			Name               string                 `json:"name"`
			OidcClientMetadata struct {
				BackchannelLogoutSessionRequired *bool                                                                    `json:"backchannelLogoutSessionRequired,omitempty"`
				BackchannelLogoutUri             *string                                                                  `json:"backchannelLogoutUri,omitempty"`
				LogoUri                          *string                                                                  `json:"logoUri,omitempty"`
				PostLogoutRedirectUris           []string                                                                 `json:"postLogoutRedirectUris"`
				RedirectUris                     []DeleteApplicationLegacySecret_200_OidcClientMetadata_RedirectUris_Item `json:"redirectUris"`
			} `json:"oidcClientMetadata"`
			ProtectedAppMetadata *struct {
				CustomDomains *[]struct {
					CloudflareData *struct {
						Id  string `json:"id"`
						Ssl struct {
							Status           string `json:"status"`
							ValidationErrors *[]struct {
								Message string `json:"message"`
							} `json:"validation_errors,omitempty"`
						} `json:"ssl"`
						Status             string    `json:"status"`
						VerificationErrors *[]string `json:"verification_errors,omitempty"`
					} `json:"cloudflareData"`
					DnsRecords []struct {
						Name  string `json:"name"`
						Type  string `json:"type"`
						Value string `json:"value"`
					} `json:"dnsRecords"`
					Domain       string                                                                  `json:"domain"`
					ErrorMessage *string                                                                 `json:"errorMessage"`
					Status       DeleteApplicationLegacySecret200ProtectedAppMetadataCustomDomainsStatus `json:"status"`
				} `json:"customDomains,omitempty"`
				Host      string `json:"host"`
				Origin    string `json:"origin"`
				PageRules []struct {
					Path string `json:"path"`
				} `json:"pageRules"`
				SessionDuration float32 `json:"sessionDuration"`
			} `json:"protectedAppMetadata"`
			Secret   string                               `json:"secret"`
			TenantId string                               `json:"tenantId"`
			Type     DeleteApplicationLegacySecret200Type `json:"type"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseListApplicationOrganizationsResponse parses an HTTP response from a ListApplicationOrganizationsWithResponse call
func ParseListApplicationOrganizationsResponse(rsp *http.Response) (*ListApplicationOrganizationsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListApplicationOrganizationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []struct {
			Branding struct {
				DarkFavicon *string `json:"darkFavicon,omitempty"`
				DarkLogoUrl *string `json:"darkLogoUrl,omitempty"`
				Favicon     *string `json:"favicon,omitempty"`
				LogoUrl     *string `json:"logoUrl,omitempty"`
			} `json:"branding"`
			CreatedAt float32 `json:"createdAt"`

			// CustomData arbitrary
			CustomData        map[string]interface{} `json:"customData"`
			Description       *string                `json:"description"`
			Id                string                 `json:"id"`
			IsMfaRequired     bool                   `json:"isMfaRequired"`
			Name              string                 `json:"name"`
			OrganizationRoles []struct {
				Id   string `json:"id"`
				Name string `json:"name"`
			} `json:"organizationRoles"`
			TenantId string `json:"tenantId"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseListApplicationProtectedAppMetadataCustomDomainsResponse parses an HTTP response from a ListApplicationProtectedAppMetadataCustomDomainsWithResponse call
func ParseListApplicationProtectedAppMetadataCustomDomainsResponse(rsp *http.Response) (*ListApplicationProtectedAppMetadataCustomDomainsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListApplicationProtectedAppMetadataCustomDomainsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []struct {
			CloudflareData *struct {
				Id  string `json:"id"`
				Ssl struct {
					Status           string `json:"status"`
					ValidationErrors *[]struct {
						Message string `json:"message"`
					} `json:"validation_errors,omitempty"`
				} `json:"ssl"`
				Status             string    `json:"status"`
				VerificationErrors *[]string `json:"verification_errors,omitempty"`
			} `json:"cloudflareData"`
			DnsRecords []struct {
				Name  string `json:"name"`
				Type  string `json:"type"`
				Value string `json:"value"`
			} `json:"dnsRecords"`
			Domain       string                                                    `json:"domain"`
			ErrorMessage *string                                                   `json:"errorMessage"`
			Status       ListApplicationProtectedAppMetadataCustomDomains200Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateApplicationProtectedAppMetadataCustomDomainResponse parses an HTTP response from a CreateApplicationProtectedAppMetadataCustomDomainWithResponse call
func ParseCreateApplicationProtectedAppMetadataCustomDomainResponse(rsp *http.Response) (*CreateApplicationProtectedAppMetadataCustomDomainResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateApplicationProtectedAppMetadataCustomDomainResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteApplicationProtectedAppMetadataCustomDomainResponse parses an HTTP response from a DeleteApplicationProtectedAppMetadataCustomDomainWithResponse call
func ParseDeleteApplicationProtectedAppMetadataCustomDomainResponse(rsp *http.Response) (*DeleteApplicationProtectedAppMetadataCustomDomainResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteApplicationProtectedAppMetadataCustomDomainResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseListApplicationSecretsResponse parses an HTTP response from a ListApplicationSecretsWithResponse call
func ParseListApplicationSecretsResponse(rsp *http.Response) (*ListApplicationSecretsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListApplicationSecretsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []struct {
			ApplicationId string   `json:"applicationId"`
			CreatedAt     float32  `json:"createdAt"`
			ExpiresAt     *float32 `json:"expiresAt"`
			Name          string   `json:"name"`
			TenantId      string   `json:"tenantId"`
			Value         string   `json:"value"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateApplicationSecretResponse parses an HTTP response from a CreateApplicationSecretWithResponse call
func ParseCreateApplicationSecretResponse(rsp *http.Response) (*CreateApplicationSecretResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateApplicationSecretResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest struct {
			ApplicationId string   `json:"applicationId"`
			CreatedAt     float32  `json:"createdAt"`
			ExpiresAt     *float32 `json:"expiresAt"`
			Name          string   `json:"name"`
			TenantId      string   `json:"tenantId"`
			Value         string   `json:"value"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseDeleteApplicationSecretResponse parses an HTTP response from a DeleteApplicationSecretWithResponse call
func ParseDeleteApplicationSecretResponse(rsp *http.Response) (*DeleteApplicationSecretResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteApplicationSecretResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseUpdateApplicationSecretResponse parses an HTTP response from a UpdateApplicationSecretWithResponse call
func ParseUpdateApplicationSecretResponse(rsp *http.Response) (*UpdateApplicationSecretResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateApplicationSecretResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			ApplicationId string   `json:"applicationId"`
			CreatedAt     float32  `json:"createdAt"`
			ExpiresAt     *float32 `json:"expiresAt"`
			Name          string   `json:"name"`
			TenantId      string   `json:"tenantId"`
			Value         string   `json:"value"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseListApplicationUserConsentOrganizationsResponse parses an HTTP response from a ListApplicationUserConsentOrganizationsWithResponse call
func ParseListApplicationUserConsentOrganizationsResponse(rsp *http.Response) (*ListApplicationUserConsentOrganizationsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListApplicationUserConsentOrganizationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Organizations A list of organization entities granted by the user for the application.
			Organizations []struct {
				Branding struct {
					DarkFavicon *string `json:"darkFavicon,omitempty"`
					DarkLogoUrl *string `json:"darkLogoUrl,omitempty"`
					Favicon     *string `json:"favicon,omitempty"`
					LogoUrl     *string `json:"logoUrl,omitempty"`
				} `json:"branding"`
				CreatedAt float32 `json:"createdAt"`

				// CustomData arbitrary
				CustomData    map[string]interface{} `json:"customData"`
				Description   *string                `json:"description"`
				Id            string                 `json:"id"`
				IsMfaRequired bool                   `json:"isMfaRequired"`
				Name          string                 `json:"name"`
				TenantId      string                 `json:"tenantId"`
			} `json:"organizations"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateApplicationUserConsentOrganizationResponse parses an HTTP response from a CreateApplicationUserConsentOrganizationWithResponse call
func ParseCreateApplicationUserConsentOrganizationResponse(rsp *http.Response) (*CreateApplicationUserConsentOrganizationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateApplicationUserConsentOrganizationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseReplaceApplicationUserConsentOrganizationsResponse parses an HTTP response from a ReplaceApplicationUserConsentOrganizationsWithResponse call
func ParseReplaceApplicationUserConsentOrganizationsResponse(rsp *http.Response) (*ReplaceApplicationUserConsentOrganizationsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReplaceApplicationUserConsentOrganizationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteApplicationUserConsentOrganizationResponse parses an HTTP response from a DeleteApplicationUserConsentOrganizationWithResponse call
func ParseDeleteApplicationUserConsentOrganizationResponse(rsp *http.Response) (*DeleteApplicationUserConsentOrganizationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteApplicationUserConsentOrganizationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetHasuraAuthResponse parses an HTTP response from a GetHasuraAuthWithResponse call
func ParseGetHasuraAuthResponse(rsp *http.Response) (*GetHasuraAuthResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetHasuraAuthResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			XHasuraRole   *string `json:"X-Hasura-Role,omitempty"`
			XHasuraUserId *string `json:"X-Hasura-User-Id,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseAssertSamlResponse parses an HTTP response from a AssertSamlWithResponse call
func ParseAssertSamlResponse(rsp *http.Response) (*AssertSamlResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AssertSamlResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseAssertSingleSignOnSamlResponse parses an HTTP response from a AssertSingleSignOnSamlWithResponse call
func ParseAssertSingleSignOnSamlResponse(rsp *http.Response) (*AssertSingleSignOnSamlResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AssertSingleSignOnSamlResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteCaptchaProviderResponse parses an HTTP response from a DeleteCaptchaProviderWithResponse call
func ParseDeleteCaptchaProviderResponse(rsp *http.Response) (*DeleteCaptchaProviderResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteCaptchaProviderResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetCaptchaProviderResponse parses an HTTP response from a GetCaptchaProviderWithResponse call
func ParseGetCaptchaProviderResponse(rsp *http.Response) (*GetCaptchaProviderResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCaptchaProviderResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Config    GetCaptchaProvider_200_Config `json:"config"`
			CreatedAt float32                       `json:"createdAt"`
			Id        string                        `json:"id"`
			TenantId  string                        `json:"tenantId"`
			UpdatedAt float32                       `json:"updatedAt"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUpdateCaptchaProviderResponse parses an HTTP response from a UpdateCaptchaProviderWithResponse call
func ParseUpdateCaptchaProviderResponse(rsp *http.Response) (*UpdateCaptchaProviderResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateCaptchaProviderResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Config    UpdateCaptchaProvider_200_Config `json:"config"`
			CreatedAt float32                          `json:"createdAt"`
			Id        string                           `json:"id"`
			TenantId  string                           `json:"tenantId"`
			UpdatedAt float32                          `json:"updatedAt"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetAdminConsoleConfigResponse parses an HTTP response from a GetAdminConsoleConfigWithResponse call
func ParseGetAdminConsoleConfigResponse(rsp *http.Response) (*GetAdminConsoleConfigResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAdminConsoleConfigResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			CheckedChargeNotification *struct {
				ApiResource         *bool `json:"apiResource,omitempty"`
				MachineToMachineApp *bool `json:"machineToMachineApp,omitempty"`
				TenantMember        *bool `json:"tenantMember,omitempty"`
				Token               *bool `json:"token,omitempty"`
			} `json:"checkedChargeNotification,omitempty"`
			DevelopmentTenantMigrationNotification *struct {
				IsPaidTenant bool     `json:"isPaidTenant"`
				ReadAt       *float32 `json:"readAt,omitempty"`
				Tag          string   `json:"tag"`
			} `json:"developmentTenantMigrationNotification,omitempty"`
			OrganizationCreated        bool `json:"organizationCreated"`
			SignInExperienceCustomized bool `json:"signInExperienceCustomized"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUpdateAdminConsoleConfigResponse parses an HTTP response from a UpdateAdminConsoleConfigWithResponse call
func ParseUpdateAdminConsoleConfigResponse(rsp *http.Response) (*UpdateAdminConsoleConfigResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateAdminConsoleConfigResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			CheckedChargeNotification *struct {
				ApiResource         *bool `json:"apiResource,omitempty"`
				MachineToMachineApp *bool `json:"machineToMachineApp,omitempty"`
				TenantMember        *bool `json:"tenantMember,omitempty"`
				Token               *bool `json:"token,omitempty"`
			} `json:"checkedChargeNotification,omitempty"`
			DevelopmentTenantMigrationNotification *struct {
				IsPaidTenant bool     `json:"isPaidTenant"`
				ReadAt       *float32 `json:"readAt,omitempty"`
				Tag          string   `json:"tag"`
			} `json:"developmentTenantMigrationNotification,omitempty"`
			OrganizationCreated        bool `json:"organizationCreated"`
			SignInExperienceCustomized bool `json:"signInExperienceCustomized"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseListJwtCustomizersResponse parses an HTTP response from a ListJwtCustomizersWithResponse call
func ParseListJwtCustomizersResponse(rsp *http.Response) (*ListJwtCustomizersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListJwtCustomizersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []ListJwtCustomizers_200_Item
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseTestJwtCustomizerResponse parses an HTTP response from a TestJwtCustomizerWithResponse call
func ParseTestJwtCustomizerResponse(rsp *http.Response) (*TestJwtCustomizerResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TestJwtCustomizerResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteJwtCustomizerResponse parses an HTTP response from a DeleteJwtCustomizerWithResponse call
func ParseDeleteJwtCustomizerResponse(rsp *http.Response) (*DeleteJwtCustomizerResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteJwtCustomizerResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetJwtCustomizerResponse parses an HTTP response from a GetJwtCustomizerWithResponse call
func ParseGetJwtCustomizerResponse(rsp *http.Response) (*GetJwtCustomizerResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetJwtCustomizerResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			union json.RawMessage
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUpdateJwtCustomizerResponse parses an HTTP response from a UpdateJwtCustomizerWithResponse call
func ParseUpdateJwtCustomizerResponse(rsp *http.Response) (*UpdateJwtCustomizerResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateJwtCustomizerResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			union json.RawMessage
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUpsertJwtCustomizerResponse parses an HTTP response from a UpsertJwtCustomizerWithResponse call
func ParseUpsertJwtCustomizerResponse(rsp *http.Response) (*UpsertJwtCustomizerResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpsertJwtCustomizerResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			union json.RawMessage
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest struct {
			union json.RawMessage
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseGetOidcKeysResponse parses an HTTP response from a GetOidcKeysWithResponse call
func ParseGetOidcKeysResponse(rsp *http.Response) (*GetOidcKeysResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetOidcKeysResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []struct {
			CreatedAt           float32                            `json:"createdAt"`
			Id                  string                             `json:"id"`
			SigningKeyAlgorithm *GetOidcKeys200SigningKeyAlgorithm `json:"signingKeyAlgorithm,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseRotateOidcKeysResponse parses an HTTP response from a RotateOidcKeysWithResponse call
func ParseRotateOidcKeysResponse(rsp *http.Response) (*RotateOidcKeysResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RotateOidcKeysResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []struct {
			CreatedAt           float32                               `json:"createdAt"`
			Id                  string                                `json:"id"`
			SigningKeyAlgorithm *RotateOidcKeys200SigningKeyAlgorithm `json:"signingKeyAlgorithm,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteOidcKeyResponse parses an HTTP response from a DeleteOidcKeyWithResponse call
func ParseDeleteOidcKeyResponse(rsp *http.Response) (*DeleteOidcKeyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteOidcKeyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseListConnectorFactoriesResponse parses an HTTP response from a ListConnectorFactoriesWithResponse call
func ParseListConnectorFactoriesResponse(rsp *http.Response) (*ListConnectorFactoriesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListConnectorFactoriesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []struct {
			ConfigTemplate *string                 `json:"configTemplate,omitempty"`
			CustomData     *map[string]interface{} `json:"customData,omitempty"`

			// Description Validator function
			Description map[string]interface{}                       `json:"description"`
			FormItems   *[]ListConnectorFactories_200_FormItems_Item `json:"formItems,omitempty"`
			FromEmail   *string                                      `json:"fromEmail,omitempty"`
			Id          string                                       `json:"id"`
			IsDemo      *bool                                        `json:"isDemo,omitempty"`
			IsStandard  *bool                                        `json:"isStandard,omitempty"`
			Logo        string                                       `json:"logo"`
			LogoDark    *string                                      `json:"logoDark"`

			// Name Validator function
			Name     map[string]interface{}             `json:"name"`
			Platform *ListConnectorFactories200Platform `json:"platform"`
			Readme   string                             `json:"readme"`
			Target   string                             `json:"target"`
			Type     ListConnectorFactories200Type      `json:"type"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetConnectorFactoryResponse parses an HTTP response from a GetConnectorFactoryWithResponse call
func ParseGetConnectorFactoryResponse(rsp *http.Response) (*GetConnectorFactoryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetConnectorFactoryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			ConfigTemplate *string                 `json:"configTemplate,omitempty"`
			CustomData     *map[string]interface{} `json:"customData,omitempty"`

			// Description Validator function
			Description map[string]interface{}                    `json:"description"`
			FormItems   *[]GetConnectorFactory_200_FormItems_Item `json:"formItems,omitempty"`
			FromEmail   *string                                   `json:"fromEmail,omitempty"`
			Id          string                                    `json:"id"`
			IsDemo      *bool                                     `json:"isDemo,omitempty"`
			IsStandard  *bool                                     `json:"isStandard,omitempty"`
			Logo        string                                    `json:"logo"`
			LogoDark    *string                                   `json:"logoDark"`

			// Name Validator function
			Name     map[string]interface{}          `json:"name"`
			Platform *GetConnectorFactory200Platform `json:"platform"`
			Readme   string                          `json:"readme"`
			Target   string                          `json:"target"`
			Type     GetConnectorFactory200Type      `json:"type"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseListConnectorsResponse parses an HTTP response from a ListConnectorsWithResponse call
func ParseListConnectorsResponse(rsp *http.Response) (*ListConnectorsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListConnectorsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []struct {
			// Config arbitrary
			Config         map[string]interface{}  `json:"config"`
			ConfigTemplate *string                 `json:"configTemplate,omitempty"`
			ConnectorId    string                  `json:"connectorId"`
			CustomData     *map[string]interface{} `json:"customData,omitempty"`

			// Description Validator function
			Description map[string]interface{}               `json:"description"`
			ExtraInfo   *map[string]interface{}              `json:"extraInfo,omitempty"`
			FormItems   *[]ListConnectors_200_FormItems_Item `json:"formItems,omitempty"`
			FromEmail   *string                              `json:"fromEmail,omitempty"`
			Id          string                               `json:"id"`
			IsDemo      *bool                                `json:"isDemo,omitempty"`
			IsStandard  *bool                                `json:"isStandard,omitempty"`
			Logo        string                               `json:"logo"`
			LogoDark    *string                              `json:"logoDark"`
			Metadata    struct {
				Logo     *string `json:"logo,omitempty"`
				LogoDark *string `json:"logoDark"`

				// Name Validator function
				Name   *map[string]interface{} `json:"name,omitempty"`
				Target *string                 `json:"target,omitempty"`
			} `json:"metadata"`

			// Name Validator function
			Name        map[string]interface{}     `json:"name"`
			Platform    *ListConnectors200Platform `json:"platform"`
			Readme      string                     `json:"readme"`
			SyncProfile bool                       `json:"syncProfile"`
			Target      string                     `json:"target"`
			Type        ListConnectors200Type      `json:"type"`
			Usage       *float32                   `json:"usage,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateConnectorResponse parses an HTTP response from a CreateConnectorWithResponse call
func ParseCreateConnectorResponse(rsp *http.Response) (*CreateConnectorResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateConnectorResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Config arbitrary
			Config         map[string]interface{}  `json:"config"`
			ConfigTemplate *string                 `json:"configTemplate,omitempty"`
			ConnectorId    string                  `json:"connectorId"`
			CustomData     *map[string]interface{} `json:"customData,omitempty"`

			// Description Validator function
			Description map[string]interface{}                `json:"description"`
			ExtraInfo   *map[string]interface{}               `json:"extraInfo,omitempty"`
			FormItems   *[]CreateConnector_200_FormItems_Item `json:"formItems,omitempty"`
			FromEmail   *string                               `json:"fromEmail,omitempty"`
			Id          string                                `json:"id"`
			IsDemo      *bool                                 `json:"isDemo,omitempty"`
			IsStandard  *bool                                 `json:"isStandard,omitempty"`
			Logo        string                                `json:"logo"`
			LogoDark    *string                               `json:"logoDark"`
			Metadata    struct {
				Logo     *string `json:"logo,omitempty"`
				LogoDark *string `json:"logoDark"`

				// Name Validator function
				Name   *map[string]interface{} `json:"name,omitempty"`
				Target *string                 `json:"target,omitempty"`
			} `json:"metadata"`

			// Name Validator function
			Name        map[string]interface{}      `json:"name"`
			Platform    *CreateConnector200Platform `json:"platform"`
			Readme      string                      `json:"readme"`
			SyncProfile bool                        `json:"syncProfile"`
			Target      string                      `json:"target"`
			Type        CreateConnector200Type      `json:"type"`
			Usage       *float32                    `json:"usage,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateConnectorAuthorizationUriResponse parses an HTTP response from a CreateConnectorAuthorizationUriWithResponse call
func ParseCreateConnectorAuthorizationUriResponse(rsp *http.Response) (*CreateConnectorAuthorizationUriResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateConnectorAuthorizationUriResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			RedirectTo string `json:"redirectTo"`

			// RedirectUri The URI to navigate for authentication and authorization in the connected social identity provider.
			RedirectUri *interface{} `json:"redirectUri,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateConnectorTestResponse parses an HTTP response from a CreateConnectorTestWithResponse call
func ParseCreateConnectorTestResponse(rsp *http.Response) (*CreateConnectorTestResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateConnectorTestResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteConnectorResponse parses an HTTP response from a DeleteConnectorWithResponse call
func ParseDeleteConnectorResponse(rsp *http.Response) (*DeleteConnectorResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteConnectorResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetConnectorResponse parses an HTTP response from a GetConnectorWithResponse call
func ParseGetConnectorResponse(rsp *http.Response) (*GetConnectorResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetConnectorResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Config arbitrary
			Config         map[string]interface{}  `json:"config"`
			ConfigTemplate *string                 `json:"configTemplate,omitempty"`
			ConnectorId    string                  `json:"connectorId"`
			CustomData     *map[string]interface{} `json:"customData,omitempty"`

			// Description Validator function
			Description map[string]interface{}             `json:"description"`
			ExtraInfo   *map[string]interface{}            `json:"extraInfo,omitempty"`
			FormItems   *[]GetConnector_200_FormItems_Item `json:"formItems,omitempty"`
			FromEmail   *string                            `json:"fromEmail,omitempty"`
			Id          string                             `json:"id"`
			IsDemo      *bool                              `json:"isDemo,omitempty"`
			IsStandard  *bool                              `json:"isStandard,omitempty"`
			Logo        string                             `json:"logo"`
			LogoDark    *string                            `json:"logoDark"`
			Metadata    struct {
				Logo     *string `json:"logo,omitempty"`
				LogoDark *string `json:"logoDark"`

				// Name Validator function
				Name   *map[string]interface{} `json:"name,omitempty"`
				Target *string                 `json:"target,omitempty"`
			} `json:"metadata"`

			// Name Validator function
			Name        map[string]interface{}   `json:"name"`
			Platform    *GetConnector200Platform `json:"platform"`
			Readme      string                   `json:"readme"`
			SyncProfile bool                     `json:"syncProfile"`
			Target      string                   `json:"target"`
			Type        GetConnector200Type      `json:"type"`
			Usage       *float32                 `json:"usage,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUpdateConnectorResponse parses an HTTP response from a UpdateConnectorWithResponse call
func ParseUpdateConnectorResponse(rsp *http.Response) (*UpdateConnectorResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateConnectorResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Config arbitrary
			Config         map[string]interface{}  `json:"config"`
			ConfigTemplate *string                 `json:"configTemplate,omitempty"`
			ConnectorId    string                  `json:"connectorId"`
			CustomData     *map[string]interface{} `json:"customData,omitempty"`

			// Description Validator function
			Description map[string]interface{}                `json:"description"`
			ExtraInfo   *map[string]interface{}               `json:"extraInfo,omitempty"`
			FormItems   *[]UpdateConnector_200_FormItems_Item `json:"formItems,omitempty"`
			FromEmail   *string                               `json:"fromEmail,omitempty"`
			Id          string                                `json:"id"`
			IsDemo      *bool                                 `json:"isDemo,omitempty"`
			IsStandard  *bool                                 `json:"isStandard,omitempty"`
			Logo        string                                `json:"logo"`
			LogoDark    *string                               `json:"logoDark"`
			Metadata    struct {
				Logo     *string `json:"logo,omitempty"`
				LogoDark *string `json:"logoDark"`

				// Name Validator function
				Name   *map[string]interface{} `json:"name,omitempty"`
				Target *string                 `json:"target,omitempty"`
			} `json:"metadata"`

			// Name Validator function
			Name        map[string]interface{}      `json:"name"`
			Platform    *UpdateConnector200Platform `json:"platform"`
			Readme      string                      `json:"readme"`
			SyncProfile bool                        `json:"syncProfile"`
			Target      string                      `json:"target"`
			Type        UpdateConnector200Type      `json:"type"`
			Usage       *float32                    `json:"usage,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseListCustomPhrasesResponse parses an HTTP response from a ListCustomPhrasesWithResponse call
func ParseListCustomPhrasesResponse(rsp *http.Response) (*ListCustomPhrasesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListCustomPhrasesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []struct {
			Id          string            `json:"id"`
			LanguageTag string            `json:"languageTag"`
			TenantId    string            `json:"tenantId"`
			Translation TranslationObject `json:"translation"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteCustomPhraseResponse parses an HTTP response from a DeleteCustomPhraseWithResponse call
func ParseDeleteCustomPhraseResponse(rsp *http.Response) (*DeleteCustomPhraseResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteCustomPhraseResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetCustomPhraseResponse parses an HTTP response from a GetCustomPhraseWithResponse call
func ParseGetCustomPhraseResponse(rsp *http.Response) (*GetCustomPhraseResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCustomPhraseResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Id          string            `json:"id"`
			LanguageTag string            `json:"languageTag"`
			TenantId    string            `json:"tenantId"`
			Translation TranslationObject `json:"translation"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseReplaceCustomPhraseResponse parses an HTTP response from a ReplaceCustomPhraseWithResponse call
func ParseReplaceCustomPhraseResponse(rsp *http.Response) (*ReplaceCustomPhraseResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReplaceCustomPhraseResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest struct {
			Id          string            `json:"id"`
			LanguageTag string            `json:"languageTag"`
			TenantId    string            `json:"tenantId"`
			Translation TranslationObject `json:"translation"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseGetActiveUserCountsResponse parses an HTTP response from a GetActiveUserCountsWithResponse call
func ParseGetActiveUserCountsResponse(rsp *http.Response) (*GetActiveUserCountsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetActiveUserCountsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Dau struct {
				Count float32 `json:"count"`
				Delta float32 `json:"delta"`
			} `json:"dau"`
			DauCurve []struct {
				Count float32 `json:"count"`
				Date  string  `json:"date"`
			} `json:"dauCurve"`
			Mau struct {
				Count float32 `json:"count"`
				Delta float32 `json:"delta"`
			} `json:"mau"`
			Wau struct {
				Count float32 `json:"count"`
				Delta float32 `json:"delta"`
			} `json:"wau"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetNewUserCountsResponse parses an HTTP response from a GetNewUserCountsWithResponse call
func ParseGetNewUserCountsResponse(rsp *http.Response) (*GetNewUserCountsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetNewUserCountsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Last7Days struct {
				Count float32 `json:"count"`
				Delta float32 `json:"delta"`
			} `json:"last7Days"`
			Today struct {
				Count float32 `json:"count"`
				Delta float32 `json:"delta"`
			} `json:"today"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetTotalUserCountResponse parses an HTTP response from a GetTotalUserCountWithResponse call
func ParseGetTotalUserCountResponse(rsp *http.Response) (*GetTotalUserCountResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTotalUserCountResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			TotalUserCount float32 `json:"totalUserCount"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseListDomainsResponse parses an HTTP response from a ListDomainsWithResponse call
func ParseListDomainsResponse(rsp *http.Response) (*ListDomainsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListDomainsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []struct {
			DnsRecords []struct {
				Name  string `json:"name"`
				Type  string `json:"type"`
				Value string `json:"value"`
			} `json:"dnsRecords"`
			Domain       string               `json:"domain"`
			ErrorMessage *string              `json:"errorMessage"`
			Id           string               `json:"id"`
			Status       ListDomains200Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateDomainResponse parses an HTTP response from a CreateDomainWithResponse call
func ParseCreateDomainResponse(rsp *http.Response) (*CreateDomainResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateDomainResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest struct {
			DnsRecords []struct {
				Name  string `json:"name"`
				Type  string `json:"type"`
				Value string `json:"value"`
			} `json:"dnsRecords"`
			Domain       string                `json:"domain"`
			ErrorMessage *string               `json:"errorMessage"`
			Id           string                `json:"id"`
			Status       CreateDomain201Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseDeleteDomainResponse parses an HTTP response from a DeleteDomainWithResponse call
func ParseDeleteDomainResponse(rsp *http.Response) (*DeleteDomainResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteDomainResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetDomainResponse parses an HTTP response from a GetDomainWithResponse call
func ParseGetDomainResponse(rsp *http.Response) (*GetDomainResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetDomainResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			DnsRecords []struct {
				Name  string `json:"name"`
				Type  string `json:"type"`
				Value string `json:"value"`
			} `json:"dnsRecords"`
			Domain       string             `json:"domain"`
			ErrorMessage *string            `json:"errorMessage"`
			Id           string             `json:"id"`
			Status       GetDomain200Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteEmailTemplatesResponse parses an HTTP response from a DeleteEmailTemplatesWithResponse call
func ParseDeleteEmailTemplatesResponse(rsp *http.Response) (*DeleteEmailTemplatesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteEmailTemplatesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// RowCount The number of email templates deleted.
			RowCount float32 `json:"rowCount"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseListEmailTemplatesResponse parses an HTTP response from a ListEmailTemplatesWithResponse call
func ParseListEmailTemplatesResponse(rsp *http.Response) (*ListEmailTemplatesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListEmailTemplatesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []struct {
			CreatedAt float32 `json:"createdAt"`
			Details   struct {
				Content     string                                      `json:"content"`
				ContentType *ListEmailTemplates_200_Details_ContentType `json:"contentType,omitempty"`
				ReplyTo     *string                                     `json:"replyTo,omitempty"`
				SendFrom    *string                                     `json:"sendFrom,omitempty"`
				Subject     string                                      `json:"subject"`
			} `json:"details"`
			Id           string                            `json:"id"`
			LanguageTag  string                            `json:"languageTag"`
			TemplateType ListEmailTemplates200TemplateType `json:"templateType"`
			TenantId     string                            `json:"tenantId"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseReplaceEmailTemplatesResponse parses an HTTP response from a ReplaceEmailTemplatesWithResponse call
func ParseReplaceEmailTemplatesResponse(rsp *http.Response) (*ReplaceEmailTemplatesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReplaceEmailTemplatesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []struct {
			CreatedAt float32 `json:"createdAt"`
			Details   struct {
				Content     string                                         `json:"content"`
				ContentType *ReplaceEmailTemplates_200_Details_ContentType `json:"contentType,omitempty"`
				ReplyTo     *string                                        `json:"replyTo,omitempty"`
				SendFrom    *string                                        `json:"sendFrom,omitempty"`
				Subject     string                                         `json:"subject"`
			} `json:"details"`
			Id           string                               `json:"id"`
			LanguageTag  string                               `json:"languageTag"`
			TemplateType ReplaceEmailTemplates200TemplateType `json:"templateType"`
			TenantId     string                               `json:"tenantId"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteEmailTemplateResponse parses an HTTP response from a DeleteEmailTemplateWithResponse call
func ParseDeleteEmailTemplateResponse(rsp *http.Response) (*DeleteEmailTemplateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteEmailTemplateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetEmailTemplateResponse parses an HTTP response from a GetEmailTemplateWithResponse call
func ParseGetEmailTemplateResponse(rsp *http.Response) (*GetEmailTemplateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetEmailTemplateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			CreatedAt float32 `json:"createdAt"`
			Details   struct {
				Content     string                                    `json:"content"`
				ContentType *GetEmailTemplate_200_Details_ContentType `json:"contentType,omitempty"`
				ReplyTo     *string                                   `json:"replyTo,omitempty"`
				SendFrom    *string                                   `json:"sendFrom,omitempty"`
				Subject     string                                    `json:"subject"`
			} `json:"details"`
			Id           string                          `json:"id"`
			LanguageTag  string                          `json:"languageTag"`
			TemplateType GetEmailTemplate200TemplateType `json:"templateType"`
			TenantId     string                          `json:"tenantId"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUpdateEmailTemplateDetailsResponse parses an HTTP response from a UpdateEmailTemplateDetailsWithResponse call
func ParseUpdateEmailTemplateDetailsResponse(rsp *http.Response) (*UpdateEmailTemplateDetailsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateEmailTemplateDetailsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			CreatedAt float32 `json:"createdAt"`
			Details   struct {
				Content     string                                              `json:"content"`
				ContentType *UpdateEmailTemplateDetails_200_Details_ContentType `json:"contentType,omitempty"`
				ReplyTo     *string                                             `json:"replyTo,omitempty"`
				SendFrom    *string                                             `json:"sendFrom,omitempty"`
				Subject     string                                              `json:"subject"`
			} `json:"details"`
			Id           string                                    `json:"id"`
			LanguageTag  string                                    `json:"languageTag"`
			TemplateType UpdateEmailTemplateDetails200TemplateType `json:"templateType"`
			TenantId     string                                    `json:"tenantId"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseInitInteractionResponse parses an HTTP response from a InitInteractionWithResponse call
func ParseInitInteractionResponse(rsp *http.Response) (*InitInteractionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InitInteractionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseIdentifyUserResponse parses an HTTP response from a IdentifyUserWithResponse call
func ParseIdentifyUserResponse(rsp *http.Response) (*IdentifyUserResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &IdentifyUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseUpdateInteractionEventResponse parses an HTTP response from a UpdateInteractionEventWithResponse call
func ParseUpdateInteractionEventResponse(rsp *http.Response) (*UpdateInteractionEventResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateInteractionEventResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseAddUserProfileResponse parses an HTTP response from a AddUserProfileWithResponse call
func ParseAddUserProfileResponse(rsp *http.Response) (*AddUserProfileResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AddUserProfileResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseBindMfaVerificationResponse parses an HTTP response from a BindMfaVerificationWithResponse call
func ParseBindMfaVerificationResponse(rsp *http.Response) (*BindMfaVerificationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BindMfaVerificationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseSkipMfaBindingFlowResponse parses an HTTP response from a SkipMfaBindingFlowWithResponse call
func ParseSkipMfaBindingFlowResponse(rsp *http.Response) (*SkipMfaBindingFlowResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SkipMfaBindingFlowResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseResetUserPasswordResponse parses an HTTP response from a ResetUserPasswordWithResponse call
func ParseResetUserPasswordResponse(rsp *http.Response) (*ResetUserPasswordResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ResetUserPasswordResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetEnabledSsoConnectorsResponse parses an HTTP response from a GetEnabledSsoConnectorsWithResponse call
func ParseGetEnabledSsoConnectorsResponse(rsp *http.Response) (*GetEnabledSsoConnectorsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetEnabledSsoConnectorsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// ConnectorIds The list of enabled SSO connectorIds. Returns an empty array if no enabled SSO connectors are found.
			ConnectorIds []string `json:"connectorIds"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseSubmitInteractionResponse parses an HTTP response from a SubmitInteractionWithResponse call
func ParseSubmitInteractionResponse(rsp *http.Response) (*SubmitInteractionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SubmitInteractionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			RedirectTo string `json:"redirectTo"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGenerateBackupCodesResponse parses an HTTP response from a GenerateBackupCodesWithResponse call
func ParseGenerateBackupCodesResponse(rsp *http.Response) (*GenerateBackupCodesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GenerateBackupCodesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Codes The generated backup codes.
			Codes []string `json:"codes"`

			// VerificationId The unique verification ID of the newly created BackupCode verification record. This ID is required when adding the backup codes to the user profile via the Profile API.
			VerificationId string `json:"verificationId"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseVerifyBackupCodeResponse parses an HTTP response from a VerifyBackupCodeWithResponse call
func ParseVerifyBackupCodeResponse(rsp *http.Response) (*VerifyBackupCodeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &VerifyBackupCodeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// VerificationId The unique verification ID of the BackupCode verification record.
			VerificationId string `json:"verificationId"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateNewPasswordIdentityVerificationResponse parses an HTTP response from a CreateNewPasswordIdentityVerificationWithResponse call
func ParseCreateNewPasswordIdentityVerificationResponse(rsp *http.Response) (*CreateNewPasswordIdentityVerificationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateNewPasswordIdentityVerificationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// VerificationId The unique verification ID of the newly created NewPasswordIdentity verification record. The `verificationId` is required when creating a new user account via the `Identification` API.
			VerificationId string `json:"verificationId"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseVerifyOneTimeTokenVerificationResponse parses an HTTP response from a VerifyOneTimeTokenVerificationWithResponse call
func ParseVerifyOneTimeTokenVerificationResponse(rsp *http.Response) (*VerifyOneTimeTokenVerificationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &VerifyOneTimeTokenVerificationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// VerificationId The unique ID of the verification record. Required for user identification via the `Identification` API or to bind the identifier to the user's account via the `Profile` API.
			VerificationId string `json:"verificationId"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreatePasswordVerificationResponse parses an HTTP response from a CreatePasswordVerificationWithResponse call
func ParseCreatePasswordVerificationResponse(rsp *http.Response) (*CreatePasswordVerificationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreatePasswordVerificationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// VerificationId The unique verification ID of the newly created Password verification record. The `verificationId` is required when verifying the user's identity via the `Identification` API.
			VerificationId string `json:"verificationId"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateSocialVerificationResponse parses an HTTP response from a CreateSocialVerificationWithResponse call
func ParseCreateSocialVerificationResponse(rsp *http.Response) (*CreateSocialVerificationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateSocialVerificationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// AuthorizationUri The social authorization URI.
			AuthorizationUri string `json:"authorizationUri"`

			// VerificationId The unique verification ID of the newly created SocialVerification record. The `verificationId` is required when verifying the social authorization response.
			VerificationId string `json:"verificationId"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseVerifySocialVerificationResponse parses an HTTP response from a VerifySocialVerificationWithResponse call
func ParseVerifySocialVerificationResponse(rsp *http.Response) (*VerifySocialVerificationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &VerifySocialVerificationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// VerificationId The unique verification ID of the SocialVerification record. This ID is required when identifying the user in the current interaction.
			VerificationId string `json:"verificationId"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateEnterpriseSsoVerificationResponse parses an HTTP response from a CreateEnterpriseSsoVerificationWithResponse call
func ParseCreateEnterpriseSsoVerificationResponse(rsp *http.Response) (*CreateEnterpriseSsoVerificationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateEnterpriseSsoVerificationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// AuthorizationUri The SSO authorization URI.
			AuthorizationUri string `json:"authorizationUri"`

			// VerificationId The unique verification ID of the newly created EnterpriseSSO verification record. The `verificationId` is required when verifying the SSO authorization response.
			VerificationId string `json:"verificationId"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseVerifyEnterpriseSsoVerificationResponse parses an HTTP response from a VerifyEnterpriseSsoVerificationWithResponse call
func ParseVerifyEnterpriseSsoVerificationResponse(rsp *http.Response) (*VerifyEnterpriseSsoVerificationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &VerifyEnterpriseSsoVerificationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// VerificationId The current verified EnterpriseSSO verification record ID. This ID is required when identifying the user in the current interaction.
			VerificationId string `json:"verificationId"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateTotpSecretResponse parses an HTTP response from a CreateTotpSecretWithResponse call
func ParseCreateTotpSecretResponse(rsp *http.Response) (*CreateTotpSecretResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateTotpSecretResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Secret The newly generated TOTP secret.
			Secret string `json:"secret"`

			// SecretQrCode A QR code image data URL for the TOTP secret. The user can scan this QR code with their TOTP authenticator app.
			SecretQrCode string `json:"secretQrCode"`

			// VerificationId The unique verification ID for the TOTP record. This ID is required to verify the TOTP code.
			VerificationId string `json:"verificationId"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseVerifyTotpVerificationResponse parses an HTTP response from a VerifyTotpVerificationWithResponse call
func ParseVerifyTotpVerificationResponse(rsp *http.Response) (*VerifyTotpVerificationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &VerifyTotpVerificationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// VerificationId The unique verification ID of the TOTP verification record. For newly created TOTP secret verification record, this ID is required to bind the TOTP secret to the user account through `Profile` API.
			VerificationId string `json:"verificationId"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateAndSendVerificationCodeResponse parses an HTTP response from a CreateAndSendVerificationCodeWithResponse call
func ParseCreateAndSendVerificationCodeResponse(rsp *http.Response) (*CreateAndSendVerificationCodeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateAndSendVerificationCodeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// VerificationId The unique ID of the verification record. Required to verify the code.
			VerificationId string `json:"verificationId"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseVerifyVerificationCodeVerificationResponse parses an HTTP response from a VerifyVerificationCodeVerificationWithResponse call
func ParseVerifyVerificationCodeVerificationResponse(rsp *http.Response) (*VerifyVerificationCodeVerificationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &VerifyVerificationCodeVerificationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// VerificationId The unique ID of the verification record. Required for user identification via the `Identification` API or to bind the identifier to the user's account via the `Profile` API.
			VerificationId string `json:"verificationId"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateWebAuthnAuthenticationVerificationResponse parses an HTTP response from a CreateWebAuthnAuthenticationVerificationWithResponse call
func ParseCreateWebAuthnAuthenticationVerificationResponse(rsp *http.Response) (*CreateWebAuthnAuthenticationVerificationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateWebAuthnAuthenticationVerificationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// AuthenticationOptions Options for the user to authenticate with their WebAuthn credential.
			AuthenticationOptions struct {
				AllowCredentials *[]struct {
					Id         string                                                                                        `json:"id"`
					Transports *[]CreateWebAuthnAuthenticationVerification200AuthenticationOptionsAllowCredentialsTransports `json:"transports,omitempty"`
					Type       string                                                                                        `json:"type"`
				} `json:"allowCredentials,omitempty"`
				Challenge  string `json:"challenge"`
				Extensions *struct {
					Appid            *string `json:"appid,omitempty"`
					CredProps        *bool   `json:"credProps,omitempty"`
					HmacCreateSecret *bool   `json:"hmacCreateSecret,omitempty"`
				} `json:"extensions,omitempty"`
				RpId             *string                                                                           `json:"rpId,omitempty"`
				Timeout          *float32                                                                          `json:"timeout,omitempty"`
				UserVerification *CreateWebAuthnAuthenticationVerification200AuthenticationOptionsUserVerification `json:"userVerification,omitempty"`
			} `json:"authenticationOptions"`

			// VerificationId The unique ID for the WebAuthn authentication record, required to verify the WebAuthn authentication challenge.
			VerificationId string `json:"verificationId"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseVerifyWebAuthnAuthenticationVerificationResponse parses an HTTP response from a VerifyWebAuthnAuthenticationVerificationWithResponse call
func ParseVerifyWebAuthnAuthenticationVerificationResponse(rsp *http.Response) (*VerifyWebAuthnAuthenticationVerificationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &VerifyWebAuthnAuthenticationVerificationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// VerificationId The unique verification ID of the WebAuthn authentication verification record.
			VerificationId string `json:"verificationId"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateWebAuthnRegistrationVerificationResponse parses an HTTP response from a CreateWebAuthnRegistrationVerificationWithResponse call
func ParseCreateWebAuthnRegistrationVerificationResponse(rsp *http.Response) (*CreateWebAuthnRegistrationVerificationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateWebAuthnRegistrationVerificationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// RegistrationOptions The WebAuthn registration options that the user needs to create a new WebAuthn credential.
			RegistrationOptions struct {
				Attestation            *CreateWebAuthnRegistrationVerification200RegistrationOptionsAttestation `json:"attestation,omitempty"`
				AuthenticatorSelection *struct {
					AuthenticatorAttachment *CreateWebAuthnRegistrationVerification200RegistrationOptionsAuthenticatorSelectionAuthenticatorAttachment `json:"authenticatorAttachment,omitempty"`
					RequireResidentKey      *bool                                                                                                      `json:"requireResidentKey,omitempty"`
					ResidentKey             *CreateWebAuthnRegistrationVerification200RegistrationOptionsAuthenticatorSelectionResidentKey             `json:"residentKey,omitempty"`
					UserVerification        *CreateWebAuthnRegistrationVerification200RegistrationOptionsAuthenticatorSelectionUserVerification        `json:"userVerification,omitempty"`
				} `json:"authenticatorSelection,omitempty"`
				Challenge          string `json:"challenge"`
				ExcludeCredentials *[]struct {
					Id         string                                                                                      `json:"id"`
					Transports *[]CreateWebAuthnRegistrationVerification200RegistrationOptionsExcludeCredentialsTransports `json:"transports,omitempty"`
					Type       string                                                                                      `json:"type"`
				} `json:"excludeCredentials,omitempty"`
				Extensions *struct {
					Appid            *string `json:"appid,omitempty"`
					CredProps        *bool   `json:"credProps,omitempty"`
					HmacCreateSecret *bool   `json:"hmacCreateSecret,omitempty"`
				} `json:"extensions,omitempty"`
				PubKeyCredParams []struct {
					Alg  float32 `json:"alg"`
					Type string  `json:"type"`
				} `json:"pubKeyCredParams"`
				Rp struct {
					Id   *string `json:"id,omitempty"`
					Name string  `json:"name"`
				} `json:"rp"`
				Timeout *float32 `json:"timeout,omitempty"`
				User    struct {
					DisplayName string `json:"displayName"`
					Id          string `json:"id"`
					Name        string `json:"name"`
				} `json:"user"`
			} `json:"registrationOptions"`

			// VerificationId The unique verification ID for the WebAuthn registration record. This ID is required to verify the WebAuthn registration challenge.
			VerificationId string `json:"verificationId"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseVerifyWebAuthnRegistrationVerificationResponse parses an HTTP response from a VerifyWebAuthnRegistrationVerificationWithResponse call
func ParseVerifyWebAuthnRegistrationVerificationResponse(rsp *http.Response) (*VerifyWebAuthnRegistrationVerificationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &VerifyWebAuthnRegistrationVerificationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// VerificationId The unique verification ID of the WebAuthn registration record. This `verificationId` is required to bind the WebAuthn credential to the user account via the `Profile` API.
			VerificationId string `json:"verificationId"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseListHooksResponse parses an HTTP response from a ListHooksWithResponse call
func ParseListHooksResponse(rsp *http.Response) (*ListHooksResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListHooksResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []struct {
			Config struct {
				Headers *map[string]string `json:"headers,omitempty"`
				Retries *float32           `json:"retries,omitempty"`
				Url     string             `json:"url"`
			} `json:"config"`
			CreatedAt      float32              `json:"createdAt"`
			Enabled        bool                 `json:"enabled"`
			Event          *ListHooks200Event   `json:"event"`
			Events         []ListHooks200Events `json:"events"`
			ExecutionStats *struct {
				RequestCount float32 `json:"requestCount"`
				SuccessCount float32 `json:"successCount"`
			} `json:"executionStats,omitempty"`
			Id         string `json:"id"`
			Name       string `json:"name"`
			SigningKey string `json:"signingKey"`
			TenantId   string `json:"tenantId"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateHookResponse parses an HTTP response from a CreateHookWithResponse call
func ParseCreateHookResponse(rsp *http.Response) (*CreateHookResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateHookResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest struct {
			Config struct {
				Headers *map[string]string `json:"headers,omitempty"`
				Retries *float32           `json:"retries,omitempty"`
				Url     string             `json:"url"`
			} `json:"config"`
			CreatedAt  float32               `json:"createdAt"`
			Enabled    bool                  `json:"enabled"`
			Event      *CreateHook201Event   `json:"event"`
			Events     []CreateHook201Events `json:"events"`
			Id         string                `json:"id"`
			Name       string                `json:"name"`
			SigningKey string                `json:"signingKey"`
			TenantId   string                `json:"tenantId"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseDeleteHookResponse parses an HTTP response from a DeleteHookWithResponse call
func ParseDeleteHookResponse(rsp *http.Response) (*DeleteHookResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteHookResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetHookResponse parses an HTTP response from a GetHookWithResponse call
func ParseGetHookResponse(rsp *http.Response) (*GetHookResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetHookResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Config struct {
				Headers *map[string]string `json:"headers,omitempty"`
				Retries *float32           `json:"retries,omitempty"`
				Url     string             `json:"url"`
			} `json:"config"`
			CreatedAt      float32            `json:"createdAt"`
			Enabled        bool               `json:"enabled"`
			Event          *GetHook200Event   `json:"event"`
			Events         []GetHook200Events `json:"events"`
			ExecutionStats *struct {
				RequestCount float32 `json:"requestCount"`
				SuccessCount float32 `json:"successCount"`
			} `json:"executionStats,omitempty"`
			Id         string `json:"id"`
			Name       string `json:"name"`
			SigningKey string `json:"signingKey"`
			TenantId   string `json:"tenantId"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUpdateHookResponse parses an HTTP response from a UpdateHookWithResponse call
func ParseUpdateHookResponse(rsp *http.Response) (*UpdateHookResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateHookResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Config struct {
				Headers *map[string]string `json:"headers,omitempty"`
				Retries *float32           `json:"retries,omitempty"`
				Url     string             `json:"url"`
			} `json:"config"`
			CreatedAt  float32               `json:"createdAt"`
			Enabled    bool                  `json:"enabled"`
			Event      *UpdateHook200Event   `json:"event"`
			Events     []UpdateHook200Events `json:"events"`
			Id         string                `json:"id"`
			Name       string                `json:"name"`
			SigningKey string                `json:"signingKey"`
			TenantId   string                `json:"tenantId"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseListHookRecentLogsResponse parses an HTTP response from a ListHookRecentLogsWithResponse call
func ParseListHookRecentLogsResponse(rsp *http.Response) (*ListHookRecentLogsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListHookRecentLogsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []struct {
			CreatedAt float32 `json:"createdAt"`
			Id        string  `json:"id"`
			Key       string  `json:"key"`
			Payload   struct {
				ApplicationId *string                               `json:"applicationId,omitempty"`
				Error         *ListHookRecentLogs_200_Payload_Error `json:"error,omitempty"`
				Ip            *string                               `json:"ip,omitempty"`
				Key           string                                `json:"key"`
				Params        *map[string]interface{}               `json:"params,omitempty"`
				Result        ListHookRecentLogs200PayloadResult    `json:"result"`
				SessionId     *string                               `json:"sessionId,omitempty"`
				UserAgent     *string                               `json:"userAgent,omitempty"`
				UserId        *string                               `json:"userId,omitempty"`
			} `json:"payload"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUpdateHookSigningKeyResponse parses an HTTP response from a UpdateHookSigningKeyWithResponse call
func ParseUpdateHookSigningKeyResponse(rsp *http.Response) (*UpdateHookSigningKeyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateHookSigningKeyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Config struct {
				Headers *map[string]string `json:"headers,omitempty"`
				Retries *float32           `json:"retries,omitempty"`
				Url     string             `json:"url"`
			} `json:"config"`
			CreatedAt  float32                         `json:"createdAt"`
			Enabled    bool                            `json:"enabled"`
			Event      *UpdateHookSigningKey200Event   `json:"event"`
			Events     []UpdateHookSigningKey200Events `json:"events"`
			Id         string                          `json:"id"`
			Name       string                          `json:"name"`
			SigningKey string                          `json:"signingKey"`
			TenantId   string                          `json:"tenantId"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateHookTestResponse parses an HTTP response from a CreateHookTestWithResponse call
func ParseCreateHookTestResponse(rsp *http.Response) (*CreateHookTestResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateHookTestResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteApiInteractionResponse parses an HTTP response from a DeleteApiInteractionWithResponse call
func ParseDeleteApiInteractionResponse(rsp *http.Response) (*DeleteApiInteractionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteApiInteractionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePutApiInteractionResponse parses an HTTP response from a PutApiInteractionWithResponse call
func ParsePutApiInteractionResponse(rsp *http.Response) (*PutApiInteractionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutApiInteractionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostApiInteractionBindMfaResponse parses an HTTP response from a PostApiInteractionBindMfaWithResponse call
func ParsePostApiInteractionBindMfaResponse(rsp *http.Response) (*PostApiInteractionBindMfaResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiInteractionBindMfaResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetApiInteractionConsentResponse parses an HTTP response from a GetApiInteractionConsentWithResponse call
func ParseGetApiInteractionConsentResponse(rsp *http.Response) (*GetApiInteractionConsentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiInteractionConsentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Application struct {
				Branding *struct {
					DarkFavicon *string `json:"darkFavicon,omitempty"`
					DarkLogoUrl *string `json:"darkLogoUrl,omitempty"`
					Favicon     *string `json:"favicon,omitempty"`
					LogoUrl     *string `json:"logoUrl,omitempty"`
				} `json:"branding,omitempty"`
				DisplayName      *string `json:"displayName"`
				Id               string  `json:"id"`
				Name             string  `json:"name"`
				PrivacyPolicyUrl *string `json:"privacyPolicyUrl"`
				TermsOfUseUrl    *string `json:"termsOfUseUrl"`
			} `json:"application"`
			MissingOIDCScope      *[]string `json:"missingOIDCScope,omitempty"`
			MissingResourceScopes *[]struct {
				Resource struct {
					Id        string `json:"id"`
					Indicator string `json:"indicator"`
					Name      string `json:"name"`
				} `json:"resource"`
				Scopes []struct {
					Description *string `json:"description"`
					Id          string  `json:"id"`
					Name        string  `json:"name"`
				} `json:"scopes"`
			} `json:"missingResourceScopes,omitempty"`
			Organizations *[]struct {
				Id                    string `json:"id"`
				MissingResourceScopes *[]struct {
					Resource struct {
						Id        string `json:"id"`
						Indicator string `json:"indicator"`
						Name      string `json:"name"`
					} `json:"resource"`
					Scopes []struct {
						Description *string `json:"description"`
						Id          string  `json:"id"`
						Name        string  `json:"name"`
					} `json:"scopes"`
				} `json:"missingResourceScopes,omitempty"`
				Name string `json:"name"`
			} `json:"organizations,omitempty"`
			RedirectUri string `json:"redirectUri"`
			User        struct {
				Avatar       *string `json:"avatar"`
				Id           string  `json:"id"`
				Name         *string `json:"name"`
				PrimaryEmail *string `json:"primaryEmail"`
				PrimaryPhone *string `json:"primaryPhone"`
				Username     *string `json:"username"`
			} `json:"user"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostApiInteractionConsentResponse parses an HTTP response from a PostApiInteractionConsentWithResponse call
func ParsePostApiInteractionConsentResponse(rsp *http.Response) (*PostApiInteractionConsentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiInteractionConsentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePutApiInteractionEventResponse parses an HTTP response from a PutApiInteractionEventWithResponse call
func ParsePutApiInteractionEventResponse(rsp *http.Response) (*PutApiInteractionEventResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutApiInteractionEventResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePatchApiInteractionIdentifiersResponse parses an HTTP response from a PatchApiInteractionIdentifiersWithResponse call
func ParsePatchApiInteractionIdentifiersResponse(rsp *http.Response) (*PatchApiInteractionIdentifiersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchApiInteractionIdentifiersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePutApiInteractionMfaResponse parses an HTTP response from a PutApiInteractionMfaWithResponse call
func ParsePutApiInteractionMfaResponse(rsp *http.Response) (*PutApiInteractionMfaResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutApiInteractionMfaResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePutApiInteractionMfaSkippedResponse parses an HTTP response from a PutApiInteractionMfaSkippedWithResponse call
func ParsePutApiInteractionMfaSkippedResponse(rsp *http.Response) (*PutApiInteractionMfaSkippedResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutApiInteractionMfaSkippedResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteApiInteractionProfileResponse parses an HTTP response from a DeleteApiInteractionProfileWithResponse call
func ParseDeleteApiInteractionProfileResponse(rsp *http.Response) (*DeleteApiInteractionProfileResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteApiInteractionProfileResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePatchApiInteractionProfileResponse parses an HTTP response from a PatchApiInteractionProfileWithResponse call
func ParsePatchApiInteractionProfileResponse(rsp *http.Response) (*PatchApiInteractionProfileResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchApiInteractionProfileResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePutApiInteractionProfileResponse parses an HTTP response from a PutApiInteractionProfileWithResponse call
func ParsePutApiInteractionProfileResponse(rsp *http.Response) (*PutApiInteractionProfileResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutApiInteractionProfileResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetApiInteractionSingleSignOnConnectorsResponse parses an HTTP response from a GetApiInteractionSingleSignOnConnectorsWithResponse call
func ParseGetApiInteractionSingleSignOnConnectorsResponse(rsp *http.Response) (*GetApiInteractionSingleSignOnConnectorsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiInteractionSingleSignOnConnectorsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostApiInteractionSingleSignOnConnectorIdAuthenticationResponse parses an HTTP response from a PostApiInteractionSingleSignOnConnectorIdAuthenticationWithResponse call
func ParsePostApiInteractionSingleSignOnConnectorIdAuthenticationResponse(rsp *http.Response) (*PostApiInteractionSingleSignOnConnectorIdAuthenticationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiInteractionSingleSignOnConnectorIdAuthenticationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			RedirectTo string `json:"redirectTo"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostApiInteractionSingleSignOnConnectorIdAuthorizationUrlResponse parses an HTTP response from a PostApiInteractionSingleSignOnConnectorIdAuthorizationUrlWithResponse call
func ParsePostApiInteractionSingleSignOnConnectorIdAuthorizationUrlResponse(rsp *http.Response) (*PostApiInteractionSingleSignOnConnectorIdAuthorizationUrlResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiInteractionSingleSignOnConnectorIdAuthorizationUrlResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			RedirectTo string `json:"redirectTo"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostApiInteractionSingleSignOnConnectorIdRegistrationResponse parses an HTTP response from a PostApiInteractionSingleSignOnConnectorIdRegistrationWithResponse call
func ParsePostApiInteractionSingleSignOnConnectorIdRegistrationResponse(rsp *http.Response) (*PostApiInteractionSingleSignOnConnectorIdRegistrationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiInteractionSingleSignOnConnectorIdRegistrationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			RedirectTo string `json:"redirectTo"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostApiInteractionSubmitResponse parses an HTTP response from a PostApiInteractionSubmitWithResponse call
func ParsePostApiInteractionSubmitResponse(rsp *http.Response) (*PostApiInteractionSubmitResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiInteractionSubmitResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			RedirectTo string `json:"redirectTo"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostApiInteractionVerificationSocialAuthorizationUriResponse parses an HTTP response from a PostApiInteractionVerificationSocialAuthorizationUriWithResponse call
func ParsePostApiInteractionVerificationSocialAuthorizationUriResponse(rsp *http.Response) (*PostApiInteractionVerificationSocialAuthorizationUriResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiInteractionVerificationSocialAuthorizationUriResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			RedirectTo string `json:"redirectTo"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostApiInteractionVerificationTotpResponse parses an HTTP response from a PostApiInteractionVerificationTotpWithResponse call
func ParsePostApiInteractionVerificationTotpResponse(rsp *http.Response) (*PostApiInteractionVerificationTotpResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiInteractionVerificationTotpResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Secret       string `json:"secret"`
			SecretQrCode string `json:"secretQrCode"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostApiInteractionVerificationVerificationCodeResponse parses an HTTP response from a PostApiInteractionVerificationVerificationCodeWithResponse call
func ParsePostApiInteractionVerificationVerificationCodeResponse(rsp *http.Response) (*PostApiInteractionVerificationVerificationCodeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiInteractionVerificationVerificationCodeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostApiInteractionVerificationWebauthnAuthenticationResponse parses an HTTP response from a PostApiInteractionVerificationWebauthnAuthenticationWithResponse call
func ParsePostApiInteractionVerificationWebauthnAuthenticationResponse(rsp *http.Response) (*PostApiInteractionVerificationWebauthnAuthenticationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiInteractionVerificationWebauthnAuthenticationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			AllowCredentials *[]struct {
				Id         string                                                                               `json:"id"`
				Transports *[]PostApiInteractionVerificationWebauthnAuthentication200AllowCredentialsTransports `json:"transports,omitempty"`
				Type       string                                                                               `json:"type"`
			} `json:"allowCredentials,omitempty"`
			Challenge  string `json:"challenge"`
			Extensions *struct {
				Appid            *string `json:"appid,omitempty"`
				CredProps        *bool   `json:"credProps,omitempty"`
				HmacCreateSecret *bool   `json:"hmacCreateSecret,omitempty"`
			} `json:"extensions,omitempty"`
			RpId             *string                                                                  `json:"rpId,omitempty"`
			Timeout          *float32                                                                 `json:"timeout,omitempty"`
			UserVerification *PostApiInteractionVerificationWebauthnAuthentication200UserVerification `json:"userVerification,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostApiInteractionVerificationWebauthnRegistrationResponse parses an HTTP response from a PostApiInteractionVerificationWebauthnRegistrationWithResponse call
func ParsePostApiInteractionVerificationWebauthnRegistrationResponse(rsp *http.Response) (*PostApiInteractionVerificationWebauthnRegistrationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiInteractionVerificationWebauthnRegistrationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Attestation            *PostApiInteractionVerificationWebauthnRegistration200Attestation `json:"attestation,omitempty"`
			AuthenticatorSelection *struct {
				AuthenticatorAttachment *PostApiInteractionVerificationWebauthnRegistration200AuthenticatorSelectionAuthenticatorAttachment `json:"authenticatorAttachment,omitempty"`
				RequireResidentKey      *bool                                                                                               `json:"requireResidentKey,omitempty"`
				ResidentKey             *PostApiInteractionVerificationWebauthnRegistration200AuthenticatorSelectionResidentKey             `json:"residentKey,omitempty"`
				UserVerification        *PostApiInteractionVerificationWebauthnRegistration200AuthenticatorSelectionUserVerification        `json:"userVerification,omitempty"`
			} `json:"authenticatorSelection,omitempty"`
			Challenge          string `json:"challenge"`
			ExcludeCredentials *[]struct {
				Id         string                                                                               `json:"id"`
				Transports *[]PostApiInteractionVerificationWebauthnRegistration200ExcludeCredentialsTransports `json:"transports,omitempty"`
				Type       string                                                                               `json:"type"`
			} `json:"excludeCredentials,omitempty"`
			Extensions *struct {
				Appid            *string `json:"appid,omitempty"`
				CredProps        *bool   `json:"credProps,omitempty"`
				HmacCreateSecret *bool   `json:"hmacCreateSecret,omitempty"`
			} `json:"extensions,omitempty"`
			PubKeyCredParams []struct {
				Alg  float32 `json:"alg"`
				Type string  `json:"type"`
			} `json:"pubKeyCredParams"`
			Rp struct {
				Id   *string `json:"id,omitempty"`
				Name string  `json:"name"`
			} `json:"rp"`
			Timeout *float32 `json:"timeout,omitempty"`
			User    struct {
				DisplayName string `json:"displayName"`
				Id          string `json:"id"`
				Name        string `json:"name"`
			} `json:"user"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseListLogsResponse parses an HTTP response from a ListLogsWithResponse call
func ParseListLogsResponse(rsp *http.Response) (*ListLogsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListLogsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []struct {
			CreatedAt float32 `json:"createdAt"`
			Id        string  `json:"id"`
			Key       string  `json:"key"`
			Payload   struct {
				ApplicationId *string                     `json:"applicationId,omitempty"`
				Error         *ListLogs_200_Payload_Error `json:"error,omitempty"`
				Ip            *string                     `json:"ip,omitempty"`
				Key           string                      `json:"key"`
				Params        *map[string]interface{}     `json:"params,omitempty"`
				Result        ListLogs200PayloadResult    `json:"result"`
				SessionId     *string                     `json:"sessionId,omitempty"`
				UserAgent     *string                     `json:"userAgent,omitempty"`
				UserId        *string                     `json:"userId,omitempty"`
			} `json:"payload"`
			TenantId string `json:"tenantId"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetLogResponse parses an HTTP response from a GetLogWithResponse call
func ParseGetLogResponse(rsp *http.Response) (*GetLogResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetLogResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			CreatedAt float32 `json:"createdAt"`
			Id        string  `json:"id"`
			Key       string  `json:"key"`
			Payload   struct {
				ApplicationId *string                   `json:"applicationId,omitempty"`
				Error         *GetLog_200_Payload_Error `json:"error,omitempty"`
				Ip            *string                   `json:"ip,omitempty"`
				Key           string                    `json:"key"`
				Params        *map[string]interface{}   `json:"params,omitempty"`
				Result        GetLog200PayloadResult    `json:"result"`
				SessionId     *string                   `json:"sessionId,omitempty"`
				UserAgent     *string                   `json:"userAgent,omitempty"`
				UserId        *string                   `json:"userId,omitempty"`
			} `json:"payload"`
			TenantId string `json:"tenantId"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetProfileResponse parses an HTTP response from a GetProfileWithResponse call
func ParseGetProfileResponse(rsp *http.Response) (*GetProfileResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetProfileResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			ApplicationId *string  `json:"applicationId"`
			Avatar        *string  `json:"avatar"`
			CreatedAt     *float32 `json:"createdAt,omitempty"`

			// CustomData arbitrary
			CustomData  *map[string]interface{} `json:"customData,omitempty"`
			HasPassword *bool                   `json:"hasPassword,omitempty"`
			Id          *string                 `json:"id,omitempty"`
			Identities  *map[string]struct {
				// Details arbitrary
				Details *map[string]interface{} `json:"details,omitempty"`
				UserId  string                  `json:"userId"`
			} `json:"identities,omitempty"`
			IsSuspended  *bool    `json:"isSuspended,omitempty"`
			LastSignInAt *float32 `json:"lastSignInAt"`
			Name         *string  `json:"name"`
			PrimaryEmail *string  `json:"primaryEmail"`
			PrimaryPhone *string  `json:"primaryPhone"`
			Profile      *struct {
				Address *struct {
					Country       *string `json:"country,omitempty"`
					Formatted     *string `json:"formatted,omitempty"`
					Locality      *string `json:"locality,omitempty"`
					PostalCode    *string `json:"postalCode,omitempty"`
					Region        *string `json:"region,omitempty"`
					StreetAddress *string `json:"streetAddress,omitempty"`
				} `json:"address,omitempty"`
				Birthdate         *string `json:"birthdate,omitempty"`
				FamilyName        *string `json:"familyName,omitempty"`
				Gender            *string `json:"gender,omitempty"`
				GivenName         *string `json:"givenName,omitempty"`
				Locale            *string `json:"locale,omitempty"`
				MiddleName        *string `json:"middleName,omitempty"`
				Nickname          *string `json:"nickname,omitempty"`
				PreferredUsername *string `json:"preferredUsername,omitempty"`
				Profile           *string `json:"profile,omitempty"`
				Website           *string `json:"website,omitempty"`
				Zoneinfo          *string `json:"zoneinfo,omitempty"`
			} `json:"profile,omitempty"`
			SsoIdentities *[]struct {
				CreatedAt float32 `json:"createdAt"`

				// Detail arbitrary
				Detail         map[string]interface{} `json:"detail"`
				Id             string                 `json:"id"`
				IdentityId     string                 `json:"identityId"`
				Issuer         string                 `json:"issuer"`
				SsoConnectorId string                 `json:"ssoConnectorId"`
				TenantId       string                 `json:"tenantId"`
				UpdatedAt      float32                `json:"updatedAt"`
				UserId         string                 `json:"userId"`
			} `json:"ssoIdentities,omitempty"`
			UpdatedAt *float32 `json:"updatedAt,omitempty"`
			Username  *string  `json:"username"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUpdateProfileResponse parses an HTTP response from a UpdateProfileWithResponse call
func ParseUpdateProfileResponse(rsp *http.Response) (*UpdateProfileResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateProfileResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			ApplicationId *string  `json:"applicationId"`
			Avatar        *string  `json:"avatar"`
			CreatedAt     *float32 `json:"createdAt,omitempty"`

			// CustomData arbitrary
			CustomData  *map[string]interface{} `json:"customData,omitempty"`
			HasPassword *bool                   `json:"hasPassword,omitempty"`
			Id          *string                 `json:"id,omitempty"`
			Identities  *map[string]struct {
				// Details arbitrary
				Details *map[string]interface{} `json:"details,omitempty"`
				UserId  string                  `json:"userId"`
			} `json:"identities,omitempty"`
			IsSuspended  *bool    `json:"isSuspended,omitempty"`
			LastSignInAt *float32 `json:"lastSignInAt"`
			Name         *string  `json:"name"`
			PrimaryEmail *string  `json:"primaryEmail"`
			PrimaryPhone *string  `json:"primaryPhone"`
			Profile      *struct {
				Address *struct {
					Country       *string `json:"country,omitempty"`
					Formatted     *string `json:"formatted,omitempty"`
					Locality      *string `json:"locality,omitempty"`
					PostalCode    *string `json:"postalCode,omitempty"`
					Region        *string `json:"region,omitempty"`
					StreetAddress *string `json:"streetAddress,omitempty"`
				} `json:"address,omitempty"`
				Birthdate         *string `json:"birthdate,omitempty"`
				FamilyName        *string `json:"familyName,omitempty"`
				Gender            *string `json:"gender,omitempty"`
				GivenName         *string `json:"givenName,omitempty"`
				Locale            *string `json:"locale,omitempty"`
				MiddleName        *string `json:"middleName,omitempty"`
				Nickname          *string `json:"nickname,omitempty"`
				PreferredUsername *string `json:"preferredUsername,omitempty"`
				Profile           *string `json:"profile,omitempty"`
				Website           *string `json:"website,omitempty"`
				Zoneinfo          *string `json:"zoneinfo,omitempty"`
			} `json:"profile,omitempty"`
			SsoIdentities *[]struct {
				CreatedAt float32 `json:"createdAt"`

				// Detail arbitrary
				Detail         map[string]interface{} `json:"detail"`
				Id             string                 `json:"id"`
				IdentityId     string                 `json:"identityId"`
				Issuer         string                 `json:"issuer"`
				SsoConnectorId string                 `json:"ssoConnectorId"`
				TenantId       string                 `json:"tenantId"`
				UpdatedAt      float32                `json:"updatedAt"`
				UserId         string                 `json:"userId"`
			} `json:"ssoIdentities,omitempty"`
			UpdatedAt *float32 `json:"updatedAt,omitempty"`
			Username  *string  `json:"username"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseAddUserIdentitiesResponse parses an HTTP response from a AddUserIdentitiesWithResponse call
func ParseAddUserIdentitiesResponse(rsp *http.Response) (*AddUserIdentitiesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AddUserIdentitiesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteIdentityResponse parses an HTTP response from a DeleteIdentityWithResponse call
func ParseDeleteIdentityResponse(rsp *http.Response) (*DeleteIdentityResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteIdentityResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetMfaVerificationsResponse parses an HTTP response from a GetMfaVerificationsWithResponse call
func ParseGetMfaVerificationsResponse(rsp *http.Response) (*GetMfaVerificationsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetMfaVerificationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []struct {
			Agent       *string                    `json:"agent,omitempty"`
			CreatedAt   string                     `json:"createdAt"`
			Id          string                     `json:"id"`
			Name        *string                    `json:"name,omitempty"`
			RemainCodes *float32                   `json:"remainCodes,omitempty"`
			Type        GetMfaVerifications200Type `json:"type"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseAddMfaVerificationResponse parses an HTTP response from a AddMfaVerificationWithResponse call
func ParseAddMfaVerificationResponse(rsp *http.Response) (*AddMfaVerificationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AddMfaVerificationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteMfaVerificationResponse parses an HTTP response from a DeleteMfaVerificationWithResponse call
func ParseDeleteMfaVerificationResponse(rsp *http.Response) (*DeleteMfaVerificationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteMfaVerificationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseUpdateMfaVerificationNameResponse parses an HTTP response from a UpdateMfaVerificationNameWithResponse call
func ParseUpdateMfaVerificationNameResponse(rsp *http.Response) (*UpdateMfaVerificationNameResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateMfaVerificationNameResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseUpdatePasswordResponse parses an HTTP response from a UpdatePasswordWithResponse call
func ParseUpdatePasswordResponse(rsp *http.Response) (*UpdatePasswordResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdatePasswordResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeletePrimaryEmailResponse parses an HTTP response from a DeletePrimaryEmailWithResponse call
func ParseDeletePrimaryEmailResponse(rsp *http.Response) (*DeletePrimaryEmailResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeletePrimaryEmailResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseUpdatePrimaryEmailResponse parses an HTTP response from a UpdatePrimaryEmailWithResponse call
func ParseUpdatePrimaryEmailResponse(rsp *http.Response) (*UpdatePrimaryEmailResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdatePrimaryEmailResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeletePrimaryPhoneResponse parses an HTTP response from a DeletePrimaryPhoneWithResponse call
func ParseDeletePrimaryPhoneResponse(rsp *http.Response) (*DeletePrimaryPhoneResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeletePrimaryPhoneResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseUpdatePrimaryPhoneResponse parses an HTTP response from a UpdatePrimaryPhoneWithResponse call
func ParseUpdatePrimaryPhoneResponse(rsp *http.Response) (*UpdatePrimaryPhoneResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdatePrimaryPhoneResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseUpdateOtherProfileResponse parses an HTTP response from a UpdateOtherProfileWithResponse call
func ParseUpdateOtherProfileResponse(rsp *http.Response) (*UpdateOtherProfileResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateOtherProfileResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Address *struct {
				Country       *string `json:"country,omitempty"`
				Formatted     *string `json:"formatted,omitempty"`
				Locality      *string `json:"locality,omitempty"`
				PostalCode    *string `json:"postalCode,omitempty"`
				Region        *string `json:"region,omitempty"`
				StreetAddress *string `json:"streetAddress,omitempty"`
			} `json:"address,omitempty"`
			Birthdate         *string `json:"birthdate,omitempty"`
			FamilyName        *string `json:"familyName,omitempty"`
			Gender            *string `json:"gender,omitempty"`
			GivenName         *string `json:"givenName,omitempty"`
			Locale            *string `json:"locale,omitempty"`
			MiddleName        *string `json:"middleName,omitempty"`
			Nickname          *string `json:"nickname,omitempty"`
			PreferredUsername *string `json:"preferredUsername,omitempty"`
			Profile           *string `json:"profile,omitempty"`
			Website           *string `json:"website,omitempty"`
			Zoneinfo          *string `json:"zoneinfo,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseListOneTimeTokensResponse parses an HTTP response from a ListOneTimeTokensWithResponse call
func ParseListOneTimeTokensResponse(rsp *http.Response) (*ListOneTimeTokensResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListOneTimeTokensResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []struct {
			Context struct {
				JitOrganizationIds *[]string `json:"jitOrganizationIds,omitempty"`
			} `json:"context"`
			CreatedAt float32                    `json:"createdAt"`
			Email     string                     `json:"email"`
			ExpiresAt float32                    `json:"expiresAt"`
			Id        string                     `json:"id"`
			Status    ListOneTimeTokens200Status `json:"status"`
			TenantId  string                     `json:"tenantId"`
			Token     string                     `json:"token"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseAddOneTimeTokensResponse parses an HTTP response from a AddOneTimeTokensWithResponse call
func ParseAddOneTimeTokensResponse(rsp *http.Response) (*AddOneTimeTokensResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AddOneTimeTokensResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest struct {
			Context struct {
				JitOrganizationIds *[]string `json:"jitOrganizationIds,omitempty"`
			} `json:"context"`
			CreatedAt float32                   `json:"createdAt"`
			Email     string                    `json:"email"`
			ExpiresAt float32                   `json:"expiresAt"`
			Id        string                    `json:"id"`
			Status    AddOneTimeTokens201Status `json:"status"`
			TenantId  string                    `json:"tenantId"`
			Token     string                    `json:"token"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseVerifyOneTimeTokenResponse parses an HTTP response from a VerifyOneTimeTokenWithResponse call
func ParseVerifyOneTimeTokenResponse(rsp *http.Response) (*VerifyOneTimeTokenResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &VerifyOneTimeTokenResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Context struct {
				JitOrganizationIds *[]string `json:"jitOrganizationIds,omitempty"`
			} `json:"context"`
			CreatedAt float32                     `json:"createdAt"`
			Email     string                      `json:"email"`
			ExpiresAt float32                     `json:"expiresAt"`
			Id        string                      `json:"id"`
			Status    VerifyOneTimeToken200Status `json:"status"`
			TenantId  string                      `json:"tenantId"`
			Token     string                      `json:"token"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteOneTimeTokenResponse parses an HTTP response from a DeleteOneTimeTokenWithResponse call
func ParseDeleteOneTimeTokenResponse(rsp *http.Response) (*DeleteOneTimeTokenResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteOneTimeTokenResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetOneTimeTokenResponse parses an HTTP response from a GetOneTimeTokenWithResponse call
func ParseGetOneTimeTokenResponse(rsp *http.Response) (*GetOneTimeTokenResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetOneTimeTokenResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Context struct {
				JitOrganizationIds *[]string `json:"jitOrganizationIds,omitempty"`
			} `json:"context"`
			CreatedAt float32                  `json:"createdAt"`
			Email     string                   `json:"email"`
			ExpiresAt float32                  `json:"expiresAt"`
			Id        string                   `json:"id"`
			Status    GetOneTimeToken200Status `json:"status"`
			TenantId  string                   `json:"tenantId"`
			Token     string                   `json:"token"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseReplaceOneTimeTokenStatusResponse parses an HTTP response from a ReplaceOneTimeTokenStatusWithResponse call
func ParseReplaceOneTimeTokenStatusResponse(rsp *http.Response) (*ReplaceOneTimeTokenStatusResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReplaceOneTimeTokenStatusResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Context struct {
				JitOrganizationIds *[]string `json:"jitOrganizationIds,omitempty"`
			} `json:"context"`
			CreatedAt float32                            `json:"createdAt"`
			Email     string                             `json:"email"`
			ExpiresAt float32                            `json:"expiresAt"`
			Id        string                             `json:"id"`
			Status    ReplaceOneTimeTokenStatus200Status `json:"status"`
			TenantId  string                             `json:"tenantId"`
			Token     string                             `json:"token"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseListOrganizationInvitationsResponse parses an HTTP response from a ListOrganizationInvitationsWithResponse call
func ParseListOrganizationInvitationsResponse(rsp *http.Response) (*ListOrganizationInvitationsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListOrganizationInvitationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []struct {
			AcceptedUserId    *string `json:"acceptedUserId"`
			CreatedAt         float32 `json:"createdAt"`
			ExpiresAt         float32 `json:"expiresAt"`
			Id                string  `json:"id"`
			Invitee           string  `json:"invitee"`
			InviterId         *string `json:"inviterId"`
			OrganizationId    string  `json:"organizationId"`
			OrganizationRoles []struct {
				Id   string `json:"id"`
				Name string `json:"name"`
			} `json:"organizationRoles"`
			Status    ListOrganizationInvitations200Status `json:"status"`
			TenantId  string                               `json:"tenantId"`
			UpdatedAt float32                              `json:"updatedAt"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateOrganizationInvitationResponse parses an HTTP response from a CreateOrganizationInvitationWithResponse call
func ParseCreateOrganizationInvitationResponse(rsp *http.Response) (*CreateOrganizationInvitationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateOrganizationInvitationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest struct {
			AcceptedUserId    *string `json:"acceptedUserId"`
			CreatedAt         float32 `json:"createdAt"`
			ExpiresAt         float32 `json:"expiresAt"`
			Id                string  `json:"id"`
			Invitee           string  `json:"invitee"`
			InviterId         *string `json:"inviterId"`
			OrganizationId    string  `json:"organizationId"`
			OrganizationRoles []struct {
				Id   string `json:"id"`
				Name string `json:"name"`
			} `json:"organizationRoles"`
			Status    CreateOrganizationInvitation201Status `json:"status"`
			TenantId  string                                `json:"tenantId"`
			UpdatedAt float32                               `json:"updatedAt"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseDeleteOrganizationInvitationResponse parses an HTTP response from a DeleteOrganizationInvitationWithResponse call
func ParseDeleteOrganizationInvitationResponse(rsp *http.Response) (*DeleteOrganizationInvitationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteOrganizationInvitationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetOrganizationInvitationResponse parses an HTTP response from a GetOrganizationInvitationWithResponse call
func ParseGetOrganizationInvitationResponse(rsp *http.Response) (*GetOrganizationInvitationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetOrganizationInvitationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			AcceptedUserId    *string `json:"acceptedUserId"`
			CreatedAt         float32 `json:"createdAt"`
			ExpiresAt         float32 `json:"expiresAt"`
			Id                string  `json:"id"`
			Invitee           string  `json:"invitee"`
			InviterId         *string `json:"inviterId"`
			OrganizationId    string  `json:"organizationId"`
			OrganizationRoles []struct {
				Id   string `json:"id"`
				Name string `json:"name"`
			} `json:"organizationRoles"`
			Status    GetOrganizationInvitation200Status `json:"status"`
			TenantId  string                             `json:"tenantId"`
			UpdatedAt float32                            `json:"updatedAt"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateOrganizationInvitationMessageResponse parses an HTTP response from a CreateOrganizationInvitationMessageWithResponse call
func ParseCreateOrganizationInvitationMessageResponse(rsp *http.Response) (*CreateOrganizationInvitationMessageResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateOrganizationInvitationMessageResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseReplaceOrganizationInvitationStatusResponse parses an HTTP response from a ReplaceOrganizationInvitationStatusWithResponse call
func ParseReplaceOrganizationInvitationStatusResponse(rsp *http.Response) (*ReplaceOrganizationInvitationStatusResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReplaceOrganizationInvitationStatusResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			AcceptedUserId    *string `json:"acceptedUserId"`
			CreatedAt         float32 `json:"createdAt"`
			ExpiresAt         float32 `json:"expiresAt"`
			Id                string  `json:"id"`
			Invitee           string  `json:"invitee"`
			InviterId         *string `json:"inviterId"`
			OrganizationId    string  `json:"organizationId"`
			OrganizationRoles []struct {
				Id   string `json:"id"`
				Name string `json:"name"`
			} `json:"organizationRoles"`
			Status    ReplaceOrganizationInvitationStatus200Status `json:"status"`
			TenantId  string                                       `json:"tenantId"`
			UpdatedAt float32                                      `json:"updatedAt"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseListOrganizationRolesResponse parses an HTTP response from a ListOrganizationRolesWithResponse call
func ParseListOrganizationRolesResponse(rsp *http.Response) (*ListOrganizationRolesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListOrganizationRolesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []struct {
			Description    *string `json:"description"`
			Id             string  `json:"id"`
			Name           string  `json:"name"`
			ResourceScopes []struct {
				Id       string `json:"id"`
				Name     string `json:"name"`
				Resource struct {
					Id   string `json:"id"`
					Name string `json:"name"`
				} `json:"resource"`
			} `json:"resourceScopes"`
			Scopes []struct {
				Id   string `json:"id"`
				Name string `json:"name"`
			} `json:"scopes"`
			TenantId string                       `json:"tenantId"`
			Type     ListOrganizationRoles200Type `json:"type"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateOrganizationRoleResponse parses an HTTP response from a CreateOrganizationRoleWithResponse call
func ParseCreateOrganizationRoleResponse(rsp *http.Response) (*CreateOrganizationRoleResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateOrganizationRoleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest struct {
			Description *string                       `json:"description"`
			Id          string                        `json:"id"`
			Name        string                        `json:"name"`
			TenantId    string                        `json:"tenantId"`
			Type        CreateOrganizationRole201Type `json:"type"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseDeleteOrganizationRoleResponse parses an HTTP response from a DeleteOrganizationRoleWithResponse call
func ParseDeleteOrganizationRoleResponse(rsp *http.Response) (*DeleteOrganizationRoleResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteOrganizationRoleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetOrganizationRoleResponse parses an HTTP response from a GetOrganizationRoleWithResponse call
func ParseGetOrganizationRoleResponse(rsp *http.Response) (*GetOrganizationRoleResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetOrganizationRoleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Description *string                    `json:"description"`
			Id          string                     `json:"id"`
			Name        string                     `json:"name"`
			TenantId    string                     `json:"tenantId"`
			Type        GetOrganizationRole200Type `json:"type"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUpdateOrganizationRoleResponse parses an HTTP response from a UpdateOrganizationRoleWithResponse call
func ParseUpdateOrganizationRoleResponse(rsp *http.Response) (*UpdateOrganizationRoleResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateOrganizationRoleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Description *string                       `json:"description"`
			Id          string                        `json:"id"`
			Name        string                        `json:"name"`
			TenantId    string                        `json:"tenantId"`
			Type        UpdateOrganizationRole200Type `json:"type"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseListOrganizationRoleResourceScopesResponse parses an HTTP response from a ListOrganizationRoleResourceScopesWithResponse call
func ParseListOrganizationRoleResourceScopesResponse(rsp *http.Response) (*ListOrganizationRoleResourceScopesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListOrganizationRoleResourceScopesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []struct {
			CreatedAt   float32 `json:"createdAt"`
			Description *string `json:"description"`
			Id          string  `json:"id"`
			Name        string  `json:"name"`
			ResourceId  string  `json:"resourceId"`
			TenantId    string  `json:"tenantId"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateOrganizationRoleResourceScopeResponse parses an HTTP response from a CreateOrganizationRoleResourceScopeWithResponse call
func ParseCreateOrganizationRoleResourceScopeResponse(rsp *http.Response) (*CreateOrganizationRoleResourceScopeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateOrganizationRoleResourceScopeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseReplaceOrganizationRoleResourceScopesResponse parses an HTTP response from a ReplaceOrganizationRoleResourceScopesWithResponse call
func ParseReplaceOrganizationRoleResourceScopesResponse(rsp *http.Response) (*ReplaceOrganizationRoleResourceScopesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReplaceOrganizationRoleResourceScopesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteOrganizationRoleResourceScopeResponse parses an HTTP response from a DeleteOrganizationRoleResourceScopeWithResponse call
func ParseDeleteOrganizationRoleResourceScopeResponse(rsp *http.Response) (*DeleteOrganizationRoleResourceScopeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteOrganizationRoleResourceScopeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseListOrganizationRoleScopesResponse parses an HTTP response from a ListOrganizationRoleScopesWithResponse call
func ParseListOrganizationRoleScopesResponse(rsp *http.Response) (*ListOrganizationRoleScopesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListOrganizationRoleScopesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []struct {
			Description *string `json:"description"`
			Id          string  `json:"id"`
			Name        string  `json:"name"`
			TenantId    string  `json:"tenantId"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateOrganizationRoleScopeResponse parses an HTTP response from a CreateOrganizationRoleScopeWithResponse call
func ParseCreateOrganizationRoleScopeResponse(rsp *http.Response) (*CreateOrganizationRoleScopeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateOrganizationRoleScopeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseReplaceOrganizationRoleScopesResponse parses an HTTP response from a ReplaceOrganizationRoleScopesWithResponse call
func ParseReplaceOrganizationRoleScopesResponse(rsp *http.Response) (*ReplaceOrganizationRoleScopesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReplaceOrganizationRoleScopesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteOrganizationRoleScopeResponse parses an HTTP response from a DeleteOrganizationRoleScopeWithResponse call
func ParseDeleteOrganizationRoleScopeResponse(rsp *http.Response) (*DeleteOrganizationRoleScopeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteOrganizationRoleScopeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseListOrganizationScopesResponse parses an HTTP response from a ListOrganizationScopesWithResponse call
func ParseListOrganizationScopesResponse(rsp *http.Response) (*ListOrganizationScopesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListOrganizationScopesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []struct {
			Description *string `json:"description"`
			Id          string  `json:"id"`
			Name        string  `json:"name"`
			TenantId    string  `json:"tenantId"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateOrganizationScopeResponse parses an HTTP response from a CreateOrganizationScopeWithResponse call
func ParseCreateOrganizationScopeResponse(rsp *http.Response) (*CreateOrganizationScopeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateOrganizationScopeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest struct {
			Description *string `json:"description"`
			Id          string  `json:"id"`
			Name        string  `json:"name"`
			TenantId    string  `json:"tenantId"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseDeleteOrganizationScopeResponse parses an HTTP response from a DeleteOrganizationScopeWithResponse call
func ParseDeleteOrganizationScopeResponse(rsp *http.Response) (*DeleteOrganizationScopeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteOrganizationScopeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetOrganizationScopeResponse parses an HTTP response from a GetOrganizationScopeWithResponse call
func ParseGetOrganizationScopeResponse(rsp *http.Response) (*GetOrganizationScopeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetOrganizationScopeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Description *string `json:"description"`
			Id          string  `json:"id"`
			Name        string  `json:"name"`
			TenantId    string  `json:"tenantId"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUpdateOrganizationScopeResponse parses an HTTP response from a UpdateOrganizationScopeWithResponse call
func ParseUpdateOrganizationScopeResponse(rsp *http.Response) (*UpdateOrganizationScopeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateOrganizationScopeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Description *string `json:"description"`
			Id          string  `json:"id"`
			Name        string  `json:"name"`
			TenantId    string  `json:"tenantId"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseListOrganizationsResponse parses an HTTP response from a ListOrganizationsWithResponse call
func ParseListOrganizationsResponse(rsp *http.Response) (*ListOrganizationsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListOrganizationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []struct {
			Branding struct {
				DarkFavicon *string `json:"darkFavicon,omitempty"`
				DarkLogoUrl *string `json:"darkLogoUrl,omitempty"`
				Favicon     *string `json:"favicon,omitempty"`
				LogoUrl     *string `json:"logoUrl,omitempty"`
			} `json:"branding"`
			CreatedAt float32 `json:"createdAt"`

			// CustomData arbitrary
			CustomData    map[string]interface{} `json:"customData"`
			Description   *string                `json:"description"`
			FeaturedUsers *[]struct {
				Avatar *string `json:"avatar"`
				Id     string  `json:"id"`
				Name   *string `json:"name"`
			} `json:"featuredUsers,omitempty"`
			Id            string   `json:"id"`
			IsMfaRequired bool     `json:"isMfaRequired"`
			Name          string   `json:"name"`
			TenantId      string   `json:"tenantId"`
			UsersCount    *float32 `json:"usersCount,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateOrganizationResponse parses an HTTP response from a CreateOrganizationWithResponse call
func ParseCreateOrganizationResponse(rsp *http.Response) (*CreateOrganizationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateOrganizationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest struct {
			Branding struct {
				DarkFavicon *string `json:"darkFavicon,omitempty"`
				DarkLogoUrl *string `json:"darkLogoUrl,omitempty"`
				Favicon     *string `json:"favicon,omitempty"`
				LogoUrl     *string `json:"logoUrl,omitempty"`
			} `json:"branding"`
			CreatedAt float32 `json:"createdAt"`

			// CustomData arbitrary
			CustomData    map[string]interface{} `json:"customData"`
			Description   *string                `json:"description"`
			Id            string                 `json:"id"`
			IsMfaRequired bool                   `json:"isMfaRequired"`
			Name          string                 `json:"name"`
			TenantId      string                 `json:"tenantId"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseDeleteOrganizationResponse parses an HTTP response from a DeleteOrganizationWithResponse call
func ParseDeleteOrganizationResponse(rsp *http.Response) (*DeleteOrganizationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteOrganizationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetOrganizationResponse parses an HTTP response from a GetOrganizationWithResponse call
func ParseGetOrganizationResponse(rsp *http.Response) (*GetOrganizationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetOrganizationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Branding struct {
				DarkFavicon *string `json:"darkFavicon,omitempty"`
				DarkLogoUrl *string `json:"darkLogoUrl,omitempty"`
				Favicon     *string `json:"favicon,omitempty"`
				LogoUrl     *string `json:"logoUrl,omitempty"`
			} `json:"branding"`
			CreatedAt float32 `json:"createdAt"`

			// CustomData arbitrary
			CustomData    map[string]interface{} `json:"customData"`
			Description   *string                `json:"description"`
			Id            string                 `json:"id"`
			IsMfaRequired bool                   `json:"isMfaRequired"`
			Name          string                 `json:"name"`
			TenantId      string                 `json:"tenantId"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUpdateOrganizationResponse parses an HTTP response from a UpdateOrganizationWithResponse call
func ParseUpdateOrganizationResponse(rsp *http.Response) (*UpdateOrganizationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateOrganizationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Branding struct {
				DarkFavicon *string `json:"darkFavicon,omitempty"`
				DarkLogoUrl *string `json:"darkLogoUrl,omitempty"`
				Favicon     *string `json:"favicon,omitempty"`
				LogoUrl     *string `json:"logoUrl,omitempty"`
			} `json:"branding"`
			CreatedAt float32 `json:"createdAt"`

			// CustomData arbitrary
			CustomData    map[string]interface{} `json:"customData"`
			Description   *string                `json:"description"`
			Id            string                 `json:"id"`
			IsMfaRequired bool                   `json:"isMfaRequired"`
			Name          string                 `json:"name"`
			TenantId      string                 `json:"tenantId"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseListOrganizationApplicationsResponse parses an HTTP response from a ListOrganizationApplicationsWithResponse call
func ParseListOrganizationApplicationsResponse(rsp *http.Response) (*ListOrganizationApplicationsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListOrganizationApplicationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []struct {
			CreatedAt            float32 `json:"createdAt"`
			CustomClientMetadata struct {
				AlwaysIssueRefreshToken *bool     `json:"alwaysIssueRefreshToken,omitempty"`
				CorsAllowedOrigins      *[]string `json:"corsAllowedOrigins,omitempty"`
				IdTokenTtl              *float32  `json:"idTokenTtl,omitempty"`
				RefreshTokenTtl         *float32  `json:"refreshTokenTtl,omitempty"`
				RefreshTokenTtlInDays   *float32  `json:"refreshTokenTtlInDays,omitempty"`
				RotateRefreshToken      *bool     `json:"rotateRefreshToken,omitempty"`
				TenantId                *string   `json:"tenantId,omitempty"`
			} `json:"customClientMetadata"`

			// CustomData arbitrary
			CustomData         map[string]interface{} `json:"customData"`
			Description        *string                `json:"description"`
			Id                 string                 `json:"id"`
			IsThirdParty       bool                   `json:"isThirdParty"`
			Name               string                 `json:"name"`
			OidcClientMetadata struct {
				BackchannelLogoutSessionRequired *bool                                                                   `json:"backchannelLogoutSessionRequired,omitempty"`
				BackchannelLogoutUri             *string                                                                 `json:"backchannelLogoutUri,omitempty"`
				LogoUri                          *string                                                                 `json:"logoUri,omitempty"`
				PostLogoutRedirectUris           []string                                                                `json:"postLogoutRedirectUris"`
				RedirectUris                     []ListOrganizationApplications_200_OidcClientMetadata_RedirectUris_Item `json:"redirectUris"`
			} `json:"oidcClientMetadata"`
			OrganizationRoles []struct {
				Id   string `json:"id"`
				Name string `json:"name"`
			} `json:"organizationRoles"`
			ProtectedAppMetadata *struct {
				CustomDomains *[]struct {
					CloudflareData *struct {
						Id  string `json:"id"`
						Ssl struct {
							Status           string `json:"status"`
							ValidationErrors *[]struct {
								Message string `json:"message"`
							} `json:"validation_errors,omitempty"`
						} `json:"ssl"`
						Status             string    `json:"status"`
						VerificationErrors *[]string `json:"verification_errors,omitempty"`
					} `json:"cloudflareData"`
					DnsRecords []struct {
						Name  string `json:"name"`
						Type  string `json:"type"`
						Value string `json:"value"`
					} `json:"dnsRecords"`
					Domain       string                                                                 `json:"domain"`
					ErrorMessage *string                                                                `json:"errorMessage"`
					Status       ListOrganizationApplications200ProtectedAppMetadataCustomDomainsStatus `json:"status"`
				} `json:"customDomains,omitempty"`
				Host      string `json:"host"`
				Origin    string `json:"origin"`
				PageRules []struct {
					Path string `json:"path"`
				} `json:"pageRules"`
				SessionDuration float32 `json:"sessionDuration"`
			} `json:"protectedAppMetadata"`

			// Secret The internal client secret. Note it is only used for internal validation, and the actual secrets should be retrieved from `/api/applications/{id}/secrets` endpoints.
			// Deprecated:
			Secret   ApplicationLegacySecret             `json:"secret"`
			TenantId string                              `json:"tenantId"`
			Type     ListOrganizationApplications200Type `json:"type"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseAddOrganizationApplicationsResponse parses an HTTP response from a AddOrganizationApplicationsWithResponse call
func ParseAddOrganizationApplicationsResponse(rsp *http.Response) (*AddOrganizationApplicationsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AddOrganizationApplicationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseReplaceOrganizationApplicationsResponse parses an HTTP response from a ReplaceOrganizationApplicationsWithResponse call
func ParseReplaceOrganizationApplicationsResponse(rsp *http.Response) (*ReplaceOrganizationApplicationsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReplaceOrganizationApplicationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseAssignOrganizationRolesToApplicationsResponse parses an HTTP response from a AssignOrganizationRolesToApplicationsWithResponse call
func ParseAssignOrganizationRolesToApplicationsResponse(rsp *http.Response) (*AssignOrganizationRolesToApplicationsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AssignOrganizationRolesToApplicationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteOrganizationApplicationResponse parses an HTTP response from a DeleteOrganizationApplicationWithResponse call
func ParseDeleteOrganizationApplicationResponse(rsp *http.Response) (*DeleteOrganizationApplicationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteOrganizationApplicationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseListOrganizationApplicationRolesResponse parses an HTTP response from a ListOrganizationApplicationRolesWithResponse call
func ParseListOrganizationApplicationRolesResponse(rsp *http.Response) (*ListOrganizationApplicationRolesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListOrganizationApplicationRolesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []struct {
			Description *string                                 `json:"description"`
			Id          string                                  `json:"id"`
			Name        string                                  `json:"name"`
			TenantId    string                                  `json:"tenantId"`
			Type        ListOrganizationApplicationRoles200Type `json:"type"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseAssignOrganizationRolesToApplicationResponse parses an HTTP response from a AssignOrganizationRolesToApplicationWithResponse call
func ParseAssignOrganizationRolesToApplicationResponse(rsp *http.Response) (*AssignOrganizationRolesToApplicationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AssignOrganizationRolesToApplicationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseReplaceOrganizationApplicationRolesResponse parses an HTTP response from a ReplaceOrganizationApplicationRolesWithResponse call
func ParseReplaceOrganizationApplicationRolesResponse(rsp *http.Response) (*ReplaceOrganizationApplicationRolesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReplaceOrganizationApplicationRolesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteOrganizationApplicationRoleResponse parses an HTTP response from a DeleteOrganizationApplicationRoleWithResponse call
func ParseDeleteOrganizationApplicationRoleResponse(rsp *http.Response) (*DeleteOrganizationApplicationRoleResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteOrganizationApplicationRoleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseListOrganizationJitEmailDomainsResponse parses an HTTP response from a ListOrganizationJitEmailDomainsWithResponse call
func ParseListOrganizationJitEmailDomainsResponse(rsp *http.Response) (*ListOrganizationJitEmailDomainsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListOrganizationJitEmailDomainsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []struct {
			EmailDomain    string `json:"emailDomain"`
			OrganizationId string `json:"organizationId"`
			TenantId       string `json:"tenantId"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateOrganizationJitEmailDomainResponse parses an HTTP response from a CreateOrganizationJitEmailDomainWithResponse call
func ParseCreateOrganizationJitEmailDomainResponse(rsp *http.Response) (*CreateOrganizationJitEmailDomainResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateOrganizationJitEmailDomainResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest struct {
			EmailDomain    string `json:"emailDomain"`
			OrganizationId string `json:"organizationId"`
			TenantId       string `json:"tenantId"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseReplaceOrganizationJitEmailDomainsResponse parses an HTTP response from a ReplaceOrganizationJitEmailDomainsWithResponse call
func ParseReplaceOrganizationJitEmailDomainsResponse(rsp *http.Response) (*ReplaceOrganizationJitEmailDomainsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReplaceOrganizationJitEmailDomainsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteOrganizationJitEmailDomainResponse parses an HTTP response from a DeleteOrganizationJitEmailDomainWithResponse call
func ParseDeleteOrganizationJitEmailDomainResponse(rsp *http.Response) (*DeleteOrganizationJitEmailDomainResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteOrganizationJitEmailDomainResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseListOrganizationJitRolesResponse parses an HTTP response from a ListOrganizationJitRolesWithResponse call
func ParseListOrganizationJitRolesResponse(rsp *http.Response) (*ListOrganizationJitRolesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListOrganizationJitRolesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []struct {
			Description *string                         `json:"description"`
			Id          string                          `json:"id"`
			Name        string                          `json:"name"`
			TenantId    string                          `json:"tenantId"`
			Type        ListOrganizationJitRoles200Type `json:"type"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateOrganizationJitRoleResponse parses an HTTP response from a CreateOrganizationJitRoleWithResponse call
func ParseCreateOrganizationJitRoleResponse(rsp *http.Response) (*CreateOrganizationJitRoleResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateOrganizationJitRoleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseReplaceOrganizationJitRolesResponse parses an HTTP response from a ReplaceOrganizationJitRolesWithResponse call
func ParseReplaceOrganizationJitRolesResponse(rsp *http.Response) (*ReplaceOrganizationJitRolesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReplaceOrganizationJitRolesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteOrganizationJitRoleResponse parses an HTTP response from a DeleteOrganizationJitRoleWithResponse call
func ParseDeleteOrganizationJitRoleResponse(rsp *http.Response) (*DeleteOrganizationJitRoleResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteOrganizationJitRoleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseListOrganizationJitSsoConnectorsResponse parses an HTTP response from a ListOrganizationJitSsoConnectorsWithResponse call
func ParseListOrganizationJitSsoConnectorsResponse(rsp *http.Response) (*ListOrganizationJitSsoConnectorsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListOrganizationJitSsoConnectorsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []struct {
			Branding struct {
				DarkLogo    *string `json:"darkLogo,omitempty"`
				DisplayName *string `json:"displayName,omitempty"`
				Logo        *string `json:"logo,omitempty"`
			} `json:"branding"`

			// Config arbitrary
			Config        map[string]interface{} `json:"config"`
			ConnectorName string                 `json:"connectorName"`
			CreatedAt     float32                `json:"createdAt"`
			Domains       []string               `json:"domains"`
			Id            string                 `json:"id"`
			ProviderName  string                 `json:"providerName"`
			SyncProfile   bool                   `json:"syncProfile"`
			TenantId      string                 `json:"tenantId"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateOrganizationJitSsoConnectorResponse parses an HTTP response from a CreateOrganizationJitSsoConnectorWithResponse call
func ParseCreateOrganizationJitSsoConnectorResponse(rsp *http.Response) (*CreateOrganizationJitSsoConnectorResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateOrganizationJitSsoConnectorResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseReplaceOrganizationJitSsoConnectorsResponse parses an HTTP response from a ReplaceOrganizationJitSsoConnectorsWithResponse call
func ParseReplaceOrganizationJitSsoConnectorsResponse(rsp *http.Response) (*ReplaceOrganizationJitSsoConnectorsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReplaceOrganizationJitSsoConnectorsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteOrganizationJitSsoConnectorResponse parses an HTTP response from a DeleteOrganizationJitSsoConnectorWithResponse call
func ParseDeleteOrganizationJitSsoConnectorResponse(rsp *http.Response) (*DeleteOrganizationJitSsoConnectorResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteOrganizationJitSsoConnectorResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseListOrganizationUsersResponse parses an HTTP response from a ListOrganizationUsersWithResponse call
func ParseListOrganizationUsersResponse(rsp *http.Response) (*ListOrganizationUsersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListOrganizationUsersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []struct {
			ApplicationId *string `json:"applicationId"`
			Avatar        *string `json:"avatar"`
			CreatedAt     float32 `json:"createdAt"`

			// CustomData arbitrary
			CustomData map[string]interface{} `json:"customData"`
			Id         string                 `json:"id"`
			Identities map[string]struct {
				// Details arbitrary
				Details *map[string]interface{} `json:"details,omitempty"`
				UserId  string                  `json:"userId"`
			} `json:"identities"`
			IsSuspended       bool     `json:"isSuspended"`
			LastSignInAt      *float32 `json:"lastSignInAt"`
			Name              *string  `json:"name"`
			OrganizationRoles []struct {
				Id   string `json:"id"`
				Name string `json:"name"`
			} `json:"organizationRoles"`
			PrimaryEmail *string `json:"primaryEmail"`
			PrimaryPhone *string `json:"primaryPhone"`
			Profile      struct {
				Address *struct {
					Country       *string `json:"country,omitempty"`
					Formatted     *string `json:"formatted,omitempty"`
					Locality      *string `json:"locality,omitempty"`
					PostalCode    *string `json:"postalCode,omitempty"`
					Region        *string `json:"region,omitempty"`
					StreetAddress *string `json:"streetAddress,omitempty"`
				} `json:"address,omitempty"`
				Birthdate         *string `json:"birthdate,omitempty"`
				FamilyName        *string `json:"familyName,omitempty"`
				Gender            *string `json:"gender,omitempty"`
				GivenName         *string `json:"givenName,omitempty"`
				Locale            *string `json:"locale,omitempty"`
				MiddleName        *string `json:"middleName,omitempty"`
				Nickname          *string `json:"nickname,omitempty"`
				PreferredUsername *string `json:"preferredUsername,omitempty"`
				Profile           *string `json:"profile,omitempty"`
				Website           *string `json:"website,omitempty"`
				Zoneinfo          *string `json:"zoneinfo,omitempty"`
			} `json:"profile"`
			UpdatedAt float32 `json:"updatedAt"`
			Username  *string `json:"username"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseAddOrganizationUsersResponse parses an HTTP response from a AddOrganizationUsersWithResponse call
func ParseAddOrganizationUsersResponse(rsp *http.Response) (*AddOrganizationUsersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AddOrganizationUsersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseReplaceOrganizationUsersResponse parses an HTTP response from a ReplaceOrganizationUsersWithResponse call
func ParseReplaceOrganizationUsersResponse(rsp *http.Response) (*ReplaceOrganizationUsersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReplaceOrganizationUsersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseAssignOrganizationRolesToUsersResponse parses an HTTP response from a AssignOrganizationRolesToUsersWithResponse call
func ParseAssignOrganizationRolesToUsersResponse(rsp *http.Response) (*AssignOrganizationRolesToUsersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AssignOrganizationRolesToUsersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteOrganizationUserResponse parses an HTTP response from a DeleteOrganizationUserWithResponse call
func ParseDeleteOrganizationUserResponse(rsp *http.Response) (*DeleteOrganizationUserResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteOrganizationUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseListOrganizationUserRolesResponse parses an HTTP response from a ListOrganizationUserRolesWithResponse call
func ParseListOrganizationUserRolesResponse(rsp *http.Response) (*ListOrganizationUserRolesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListOrganizationUserRolesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []struct {
			Description *string                          `json:"description"`
			Id          string                           `json:"id"`
			Name        string                           `json:"name"`
			TenantId    string                           `json:"tenantId"`
			Type        ListOrganizationUserRoles200Type `json:"type"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseAssignOrganizationRolesToUserResponse parses an HTTP response from a AssignOrganizationRolesToUserWithResponse call
func ParseAssignOrganizationRolesToUserResponse(rsp *http.Response) (*AssignOrganizationRolesToUserResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AssignOrganizationRolesToUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseReplaceOrganizationUserRolesResponse parses an HTTP response from a ReplaceOrganizationUserRolesWithResponse call
func ParseReplaceOrganizationUserRolesResponse(rsp *http.Response) (*ReplaceOrganizationUserRolesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReplaceOrganizationUserRolesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteOrganizationUserRoleResponse parses an HTTP response from a DeleteOrganizationUserRoleWithResponse call
func ParseDeleteOrganizationUserRoleResponse(rsp *http.Response) (*DeleteOrganizationUserRoleResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteOrganizationUserRoleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseListOrganizationUserScopesResponse parses an HTTP response from a ListOrganizationUserScopesWithResponse call
func ParseListOrganizationUserScopesResponse(rsp *http.Response) (*ListOrganizationUserScopesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListOrganizationUserScopesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []struct {
			Description *string `json:"description"`
			Id          string  `json:"id"`
			Name        string  `json:"name"`
			TenantId    string  `json:"tenantId"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseListResourcesResponse parses an HTTP response from a ListResourcesWithResponse call
func ParseListResourcesResponse(rsp *http.Response) (*ListResourcesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListResourcesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []struct {
			AccessTokenTtl float32 `json:"accessTokenTtl"`
			Id             string  `json:"id"`
			Indicator      string  `json:"indicator"`
			IsDefault      bool    `json:"isDefault"`
			Name           string  `json:"name"`
			Scopes         *[]struct {
				CreatedAt   float32 `json:"createdAt"`
				Description *string `json:"description"`
				Id          string  `json:"id"`
				Name        string  `json:"name"`
				ResourceId  string  `json:"resourceId"`
				TenantId    string  `json:"tenantId"`
			} `json:"scopes,omitempty"`
			TenantId string `json:"tenantId"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateResourceResponse parses an HTTP response from a CreateResourceWithResponse call
func ParseCreateResourceResponse(rsp *http.Response) (*CreateResourceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateResourceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest struct {
			AccessTokenTtl float32 `json:"accessTokenTtl"`
			Id             string  `json:"id"`
			Indicator      string  `json:"indicator"`
			IsDefault      bool    `json:"isDefault"`
			Name           string  `json:"name"`
			Scopes         *[]struct {
				CreatedAt   float32 `json:"createdAt"`
				Description *string `json:"description"`
				Id          string  `json:"id"`
				Name        string  `json:"name"`
				ResourceId  string  `json:"resourceId"`
				TenantId    string  `json:"tenantId"`
			} `json:"scopes,omitempty"`
			TenantId string `json:"tenantId"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseDeleteResourceResponse parses an HTTP response from a DeleteResourceWithResponse call
func ParseDeleteResourceResponse(rsp *http.Response) (*DeleteResourceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteResourceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetResourceResponse parses an HTTP response from a GetResourceWithResponse call
func ParseGetResourceResponse(rsp *http.Response) (*GetResourceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetResourceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			AccessTokenTtl float32 `json:"accessTokenTtl"`
			Id             string  `json:"id"`
			Indicator      string  `json:"indicator"`
			IsDefault      bool    `json:"isDefault"`
			Name           string  `json:"name"`
			TenantId       string  `json:"tenantId"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUpdateResourceResponse parses an HTTP response from a UpdateResourceWithResponse call
func ParseUpdateResourceResponse(rsp *http.Response) (*UpdateResourceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateResourceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			AccessTokenTtl float32 `json:"accessTokenTtl"`
			Id             string  `json:"id"`
			Indicator      string  `json:"indicator"`
			IsDefault      bool    `json:"isDefault"`
			Name           string  `json:"name"`
			TenantId       string  `json:"tenantId"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUpdateResourceIsDefaultResponse parses an HTTP response from a UpdateResourceIsDefaultWithResponse call
func ParseUpdateResourceIsDefaultResponse(rsp *http.Response) (*UpdateResourceIsDefaultResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateResourceIsDefaultResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			AccessTokenTtl float32 `json:"accessTokenTtl"`
			Id             string  `json:"id"`
			Indicator      string  `json:"indicator"`
			IsDefault      bool    `json:"isDefault"`
			Name           string  `json:"name"`
			TenantId       string  `json:"tenantId"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseListResourceScopesResponse parses an HTTP response from a ListResourceScopesWithResponse call
func ParseListResourceScopesResponse(rsp *http.Response) (*ListResourceScopesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListResourceScopesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []struct {
			CreatedAt   float32 `json:"createdAt"`
			Description *string `json:"description"`
			Id          string  `json:"id"`
			Name        string  `json:"name"`
			ResourceId  string  `json:"resourceId"`
			TenantId    string  `json:"tenantId"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateResourceScopeResponse parses an HTTP response from a CreateResourceScopeWithResponse call
func ParseCreateResourceScopeResponse(rsp *http.Response) (*CreateResourceScopeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateResourceScopeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest struct {
			CreatedAt   float32 `json:"createdAt"`
			Description *string `json:"description"`
			Id          string  `json:"id"`
			Name        string  `json:"name"`
			ResourceId  string  `json:"resourceId"`
			TenantId    string  `json:"tenantId"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseDeleteResourceScopeResponse parses an HTTP response from a DeleteResourceScopeWithResponse call
func ParseDeleteResourceScopeResponse(rsp *http.Response) (*DeleteResourceScopeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteResourceScopeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseUpdateResourceScopeResponse parses an HTTP response from a UpdateResourceScopeWithResponse call
func ParseUpdateResourceScopeResponse(rsp *http.Response) (*UpdateResourceScopeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateResourceScopeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			CreatedAt   float32 `json:"createdAt"`
			Description *string `json:"description"`
			Id          string  `json:"id"`
			Name        string  `json:"name"`
			ResourceId  string  `json:"resourceId"`
			TenantId    string  `json:"tenantId"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseListRolesResponse parses an HTTP response from a ListRolesWithResponse call
func ParseListRolesResponse(rsp *http.Response) (*ListRolesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListRolesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []struct {
			ApplicationsCount    float32 `json:"applicationsCount"`
			Description          string  `json:"description"`
			FeaturedApplications []struct {
				Id   string                               `json:"id"`
				Name string                               `json:"name"`
				Type ListRoles200FeaturedApplicationsType `json:"type"`
			} `json:"featuredApplications"`
			FeaturedUsers []struct {
				Avatar *string `json:"avatar"`
				Id     string  `json:"id"`
				Name   *string `json:"name"`
			} `json:"featuredUsers"`
			Id         string           `json:"id"`
			IsDefault  bool             `json:"isDefault"`
			Name       string           `json:"name"`
			TenantId   string           `json:"tenantId"`
			Type       ListRoles200Type `json:"type"`
			UsersCount float32          `json:"usersCount"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateRoleResponse parses an HTTP response from a CreateRoleWithResponse call
func ParseCreateRoleResponse(rsp *http.Response) (*CreateRoleResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateRoleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Description string            `json:"description"`
			Id          string            `json:"id"`
			IsDefault   bool              `json:"isDefault"`
			Name        string            `json:"name"`
			TenantId    string            `json:"tenantId"`
			Type        CreateRole200Type `json:"type"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteRoleResponse parses an HTTP response from a DeleteRoleWithResponse call
func ParseDeleteRoleResponse(rsp *http.Response) (*DeleteRoleResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteRoleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetRoleResponse parses an HTTP response from a GetRoleWithResponse call
func ParseGetRoleResponse(rsp *http.Response) (*GetRoleResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRoleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Description string         `json:"description"`
			Id          string         `json:"id"`
			IsDefault   bool           `json:"isDefault"`
			Name        string         `json:"name"`
			TenantId    string         `json:"tenantId"`
			Type        GetRole200Type `json:"type"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUpdateRoleResponse parses an HTTP response from a UpdateRoleWithResponse call
func ParseUpdateRoleResponse(rsp *http.Response) (*UpdateRoleResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateRoleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Description string            `json:"description"`
			Id          string            `json:"id"`
			IsDefault   bool              `json:"isDefault"`
			Name        string            `json:"name"`
			TenantId    string            `json:"tenantId"`
			Type        UpdateRole200Type `json:"type"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseListRoleApplicationsResponse parses an HTTP response from a ListRoleApplicationsWithResponse call
func ParseListRoleApplicationsResponse(rsp *http.Response) (*ListRoleApplicationsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListRoleApplicationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []struct {
			CreatedAt            float32 `json:"createdAt"`
			CustomClientMetadata struct {
				AlwaysIssueRefreshToken *bool     `json:"alwaysIssueRefreshToken,omitempty"`
				CorsAllowedOrigins      *[]string `json:"corsAllowedOrigins,omitempty"`
				IdTokenTtl              *float32  `json:"idTokenTtl,omitempty"`
				RefreshTokenTtl         *float32  `json:"refreshTokenTtl,omitempty"`
				RefreshTokenTtlInDays   *float32  `json:"refreshTokenTtlInDays,omitempty"`
				RotateRefreshToken      *bool     `json:"rotateRefreshToken,omitempty"`
				TenantId                *string   `json:"tenantId,omitempty"`
			} `json:"customClientMetadata"`

			// CustomData arbitrary
			CustomData         map[string]interface{} `json:"customData"`
			Description        *string                `json:"description"`
			Id                 string                 `json:"id"`
			IsThirdParty       bool                   `json:"isThirdParty"`
			Name               string                 `json:"name"`
			OidcClientMetadata struct {
				BackchannelLogoutSessionRequired *bool                                                           `json:"backchannelLogoutSessionRequired,omitempty"`
				BackchannelLogoutUri             *string                                                         `json:"backchannelLogoutUri,omitempty"`
				LogoUri                          *string                                                         `json:"logoUri,omitempty"`
				PostLogoutRedirectUris           []string                                                        `json:"postLogoutRedirectUris"`
				RedirectUris                     []ListRoleApplications_200_OidcClientMetadata_RedirectUris_Item `json:"redirectUris"`
			} `json:"oidcClientMetadata"`
			ProtectedAppMetadata *struct {
				CustomDomains *[]struct {
					CloudflareData *struct {
						Id  string `json:"id"`
						Ssl struct {
							Status           string `json:"status"`
							ValidationErrors *[]struct {
								Message string `json:"message"`
							} `json:"validation_errors,omitempty"`
						} `json:"ssl"`
						Status             string    `json:"status"`
						VerificationErrors *[]string `json:"verification_errors,omitempty"`
					} `json:"cloudflareData"`
					DnsRecords []struct {
						Name  string `json:"name"`
						Type  string `json:"type"`
						Value string `json:"value"`
					} `json:"dnsRecords"`
					Domain       string                                                         `json:"domain"`
					ErrorMessage *string                                                        `json:"errorMessage"`
					Status       ListRoleApplications200ProtectedAppMetadataCustomDomainsStatus `json:"status"`
				} `json:"customDomains,omitempty"`
				Host      string `json:"host"`
				Origin    string `json:"origin"`
				PageRules []struct {
					Path string `json:"path"`
				} `json:"pageRules"`
				SessionDuration float32 `json:"sessionDuration"`
			} `json:"protectedAppMetadata"`
			Secret   string                      `json:"secret"`
			TenantId string                      `json:"tenantId"`
			Type     ListRoleApplications200Type `json:"type"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateRoleApplicationResponse parses an HTTP response from a CreateRoleApplicationWithResponse call
func ParseCreateRoleApplicationResponse(rsp *http.Response) (*CreateRoleApplicationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateRoleApplicationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteRoleApplicationResponse parses an HTTP response from a DeleteRoleApplicationWithResponse call
func ParseDeleteRoleApplicationResponse(rsp *http.Response) (*DeleteRoleApplicationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteRoleApplicationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseListRoleScopesResponse parses an HTTP response from a ListRoleScopesWithResponse call
func ParseListRoleScopesResponse(rsp *http.Response) (*ListRoleScopesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListRoleScopesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []struct {
			CreatedAt   float32 `json:"createdAt"`
			Description *string `json:"description"`
			Id          string  `json:"id"`
			Name        string  `json:"name"`
			Resource    struct {
				AccessTokenTtl float32 `json:"accessTokenTtl"`
				Id             string  `json:"id"`
				Indicator      string  `json:"indicator"`
				IsDefault      bool    `json:"isDefault"`
				Name           string  `json:"name"`
				TenantId       string  `json:"tenantId"`
			} `json:"resource"`
			ResourceId string `json:"resourceId"`
			TenantId   string `json:"tenantId"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateRoleScopeResponse parses an HTTP response from a CreateRoleScopeWithResponse call
func ParseCreateRoleScopeResponse(rsp *http.Response) (*CreateRoleScopeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateRoleScopeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest []struct {
			CreatedAt   float32 `json:"createdAt"`
			Description *string `json:"description"`
			Id          string  `json:"id"`
			Name        string  `json:"name"`
			ResourceId  string  `json:"resourceId"`
			TenantId    string  `json:"tenantId"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseDeleteRoleScopeResponse parses an HTTP response from a DeleteRoleScopeWithResponse call
func ParseDeleteRoleScopeResponse(rsp *http.Response) (*DeleteRoleScopeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteRoleScopeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseListRoleUsersResponse parses an HTTP response from a ListRoleUsersWithResponse call
func ParseListRoleUsersResponse(rsp *http.Response) (*ListRoleUsersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListRoleUsersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []struct {
			ApplicationId *string `json:"applicationId"`
			Avatar        *string `json:"avatar"`
			CreatedAt     float32 `json:"createdAt"`

			// CustomData arbitrary
			CustomData  map[string]interface{} `json:"customData"`
			HasPassword *bool                  `json:"hasPassword,omitempty"`
			Id          string                 `json:"id"`
			Identities  map[string]struct {
				// Details arbitrary
				Details *map[string]interface{} `json:"details,omitempty"`
				UserId  string                  `json:"userId"`
			} `json:"identities"`
			IsSuspended  bool     `json:"isSuspended"`
			LastSignInAt *float32 `json:"lastSignInAt"`
			Name         *string  `json:"name"`
			PrimaryEmail *string  `json:"primaryEmail"`
			PrimaryPhone *string  `json:"primaryPhone"`
			Profile      struct {
				Address *struct {
					Country       *string `json:"country,omitempty"`
					Formatted     *string `json:"formatted,omitempty"`
					Locality      *string `json:"locality,omitempty"`
					PostalCode    *string `json:"postalCode,omitempty"`
					Region        *string `json:"region,omitempty"`
					StreetAddress *string `json:"streetAddress,omitempty"`
				} `json:"address,omitempty"`
				Birthdate         *string `json:"birthdate,omitempty"`
				FamilyName        *string `json:"familyName,omitempty"`
				Gender            *string `json:"gender,omitempty"`
				GivenName         *string `json:"givenName,omitempty"`
				Locale            *string `json:"locale,omitempty"`
				MiddleName        *string `json:"middleName,omitempty"`
				Nickname          *string `json:"nickname,omitempty"`
				PreferredUsername *string `json:"preferredUsername,omitempty"`
				Profile           *string `json:"profile,omitempty"`
				Website           *string `json:"website,omitempty"`
				Zoneinfo          *string `json:"zoneinfo,omitempty"`
			} `json:"profile"`
			SsoIdentities *[]struct {
				CreatedAt float32 `json:"createdAt"`

				// Detail arbitrary
				Detail         map[string]interface{} `json:"detail"`
				Id             string                 `json:"id"`
				IdentityId     string                 `json:"identityId"`
				Issuer         string                 `json:"issuer"`
				SsoConnectorId string                 `json:"ssoConnectorId"`
				TenantId       string                 `json:"tenantId"`
				UpdatedAt      float32                `json:"updatedAt"`
				UserId         string                 `json:"userId"`
			} `json:"ssoIdentities,omitempty"`
			UpdatedAt float32 `json:"updatedAt"`
			Username  *string `json:"username"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateRoleUserResponse parses an HTTP response from a CreateRoleUserWithResponse call
func ParseCreateRoleUserResponse(rsp *http.Response) (*CreateRoleUserResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateRoleUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteRoleUserResponse parses an HTTP response from a DeleteRoleUserWithResponse call
func ParseDeleteRoleUserResponse(rsp *http.Response) (*DeleteRoleUserResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteRoleUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseCreateSamlApplicationResponse parses an HTTP response from a CreateSamlApplicationWithResponse call
func ParseCreateSamlApplicationResponse(rsp *http.Response) (*CreateSamlApplicationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateSamlApplicationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest struct {
			AcsUrl *struct {
				Binding CreateSamlApplication201AcsUrlBinding `json:"binding"`
				Url     string                                `json:"url"`
			} `json:"acsUrl"`
			AttributeMapping struct {
				Address             *string `json:"address,omitempty"`
				Birthdate           *string `json:"birthdate,omitempty"`
				CreatedAt           *string `json:"created_at,omitempty"`
				CustomData          *string `json:"custom_data,omitempty"`
				Email               *string `json:"email,omitempty"`
				EmailVerified       *string `json:"email_verified,omitempty"`
				FamilyName          *string `json:"family_name,omitempty"`
				Gender              *string `json:"gender,omitempty"`
				GivenName           *string `json:"given_name,omitempty"`
				Identities          *string `json:"identities,omitempty"`
				Locale              *string `json:"locale,omitempty"`
				MiddleName          *string `json:"middle_name,omitempty"`
				Name                *string `json:"name,omitempty"`
				Nickname            *string `json:"nickname,omitempty"`
				OrganizationData    *string `json:"organization_data,omitempty"`
				OrganizationRoles   *string `json:"organization_roles,omitempty"`
				Organizations       *string `json:"organizations,omitempty"`
				PhoneNumber         *string `json:"phone_number,omitempty"`
				PhoneNumberVerified *string `json:"phone_number_verified,omitempty"`
				Picture             *string `json:"picture,omitempty"`
				PreferredUsername   *string `json:"preferred_username,omitempty"`
				Profile             *string `json:"profile,omitempty"`
				Roles               *string `json:"roles,omitempty"`
				SsoIdentities       *string `json:"sso_identities,omitempty"`
				Sub                 *string `json:"sub,omitempty"`
				UpdatedAt           *string `json:"updated_at,omitempty"`
				Username            *string `json:"username,omitempty"`
				Website             *string `json:"website,omitempty"`
				Zoneinfo            *string `json:"zoneinfo,omitempty"`
			} `json:"attributeMapping"`
			CreatedAt float32 `json:"createdAt"`

			// CustomData arbitrary
			CustomData  map[string]interface{} `json:"customData"`
			Description *string                `json:"description"`

			// Encryption Validator function
			Encryption   *map[string]interface{}              `json:"encryption"`
			EntityId     *string                              `json:"entityId"`
			Id           string                               `json:"id"`
			IsThirdParty bool                                 `json:"isThirdParty"`
			Name         string                               `json:"name"`
			NameIdFormat CreateSamlApplication201NameIdFormat `json:"nameIdFormat"`
			TenantId     string                               `json:"tenantId"`
			Type         CreateSamlApplication201Type         `json:"type"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseDeleteSamlApplicationResponse parses an HTTP response from a DeleteSamlApplicationWithResponse call
func ParseDeleteSamlApplicationResponse(rsp *http.Response) (*DeleteSamlApplicationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteSamlApplicationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetSamlApplicationResponse parses an HTTP response from a GetSamlApplicationWithResponse call
func ParseGetSamlApplicationResponse(rsp *http.Response) (*GetSamlApplicationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSamlApplicationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			AcsUrl *struct {
				Binding GetSamlApplication200AcsUrlBinding `json:"binding"`
				Url     string                             `json:"url"`
			} `json:"acsUrl"`
			AttributeMapping struct {
				Address             *string `json:"address,omitempty"`
				Birthdate           *string `json:"birthdate,omitempty"`
				CreatedAt           *string `json:"created_at,omitempty"`
				CustomData          *string `json:"custom_data,omitempty"`
				Email               *string `json:"email,omitempty"`
				EmailVerified       *string `json:"email_verified,omitempty"`
				FamilyName          *string `json:"family_name,omitempty"`
				Gender              *string `json:"gender,omitempty"`
				GivenName           *string `json:"given_name,omitempty"`
				Identities          *string `json:"identities,omitempty"`
				Locale              *string `json:"locale,omitempty"`
				MiddleName          *string `json:"middle_name,omitempty"`
				Name                *string `json:"name,omitempty"`
				Nickname            *string `json:"nickname,omitempty"`
				OrganizationData    *string `json:"organization_data,omitempty"`
				OrganizationRoles   *string `json:"organization_roles,omitempty"`
				Organizations       *string `json:"organizations,omitempty"`
				PhoneNumber         *string `json:"phone_number,omitempty"`
				PhoneNumberVerified *string `json:"phone_number_verified,omitempty"`
				Picture             *string `json:"picture,omitempty"`
				PreferredUsername   *string `json:"preferred_username,omitempty"`
				Profile             *string `json:"profile,omitempty"`
				Roles               *string `json:"roles,omitempty"`
				SsoIdentities       *string `json:"sso_identities,omitempty"`
				Sub                 *string `json:"sub,omitempty"`
				UpdatedAt           *string `json:"updated_at,omitempty"`
				Username            *string `json:"username,omitempty"`
				Website             *string `json:"website,omitempty"`
				Zoneinfo            *string `json:"zoneinfo,omitempty"`
			} `json:"attributeMapping"`
			CreatedAt float32 `json:"createdAt"`

			// CustomData arbitrary
			CustomData  map[string]interface{} `json:"customData"`
			Description *string                `json:"description"`

			// Encryption Validator function
			Encryption   *map[string]interface{}           `json:"encryption"`
			EntityId     *string                           `json:"entityId"`
			Id           string                            `json:"id"`
			IsThirdParty bool                              `json:"isThirdParty"`
			Name         string                            `json:"name"`
			NameIdFormat GetSamlApplication200NameIdFormat `json:"nameIdFormat"`
			TenantId     string                            `json:"tenantId"`
			Type         GetSamlApplication200Type         `json:"type"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUpdateSamlApplicationResponse parses an HTTP response from a UpdateSamlApplicationWithResponse call
func ParseUpdateSamlApplicationResponse(rsp *http.Response) (*UpdateSamlApplicationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateSamlApplicationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			AcsUrl *struct {
				Binding UpdateSamlApplication200AcsUrlBinding `json:"binding"`
				Url     string                                `json:"url"`
			} `json:"acsUrl"`
			AttributeMapping struct {
				Address             *string `json:"address,omitempty"`
				Birthdate           *string `json:"birthdate,omitempty"`
				CreatedAt           *string `json:"created_at,omitempty"`
				CustomData          *string `json:"custom_data,omitempty"`
				Email               *string `json:"email,omitempty"`
				EmailVerified       *string `json:"email_verified,omitempty"`
				FamilyName          *string `json:"family_name,omitempty"`
				Gender              *string `json:"gender,omitempty"`
				GivenName           *string `json:"given_name,omitempty"`
				Identities          *string `json:"identities,omitempty"`
				Locale              *string `json:"locale,omitempty"`
				MiddleName          *string `json:"middle_name,omitempty"`
				Name                *string `json:"name,omitempty"`
				Nickname            *string `json:"nickname,omitempty"`
				OrganizationData    *string `json:"organization_data,omitempty"`
				OrganizationRoles   *string `json:"organization_roles,omitempty"`
				Organizations       *string `json:"organizations,omitempty"`
				PhoneNumber         *string `json:"phone_number,omitempty"`
				PhoneNumberVerified *string `json:"phone_number_verified,omitempty"`
				Picture             *string `json:"picture,omitempty"`
				PreferredUsername   *string `json:"preferred_username,omitempty"`
				Profile             *string `json:"profile,omitempty"`
				Roles               *string `json:"roles,omitempty"`
				SsoIdentities       *string `json:"sso_identities,omitempty"`
				Sub                 *string `json:"sub,omitempty"`
				UpdatedAt           *string `json:"updated_at,omitempty"`
				Username            *string `json:"username,omitempty"`
				Website             *string `json:"website,omitempty"`
				Zoneinfo            *string `json:"zoneinfo,omitempty"`
			} `json:"attributeMapping"`
			CreatedAt float32 `json:"createdAt"`

			// CustomData arbitrary
			CustomData  map[string]interface{} `json:"customData"`
			Description *string                `json:"description"`

			// Encryption Validator function
			Encryption   *map[string]interface{}              `json:"encryption"`
			EntityId     *string                              `json:"entityId"`
			Id           string                               `json:"id"`
			IsThirdParty bool                                 `json:"isThirdParty"`
			Name         string                               `json:"name"`
			NameIdFormat UpdateSamlApplication200NameIdFormat `json:"nameIdFormat"`
			TenantId     string                               `json:"tenantId"`
			Type         UpdateSamlApplication200Type         `json:"type"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetSamlApplicationCallbackResponse parses an HTTP response from a GetSamlApplicationCallbackWithResponse call
func ParseGetSamlApplicationCallbackResponse(rsp *http.Response) (*GetSamlApplicationCallbackResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSamlApplicationCallbackResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseListSamlApplicationMetadataResponse parses an HTTP response from a ListSamlApplicationMetadataWithResponse call
func ParseListSamlApplicationMetadataResponse(rsp *http.Response) (*ListSamlApplicationMetadataResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListSamlApplicationMetadataResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest string
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	}

	return response, nil
}

// ParseListSamlApplicationSecretsResponse parses an HTTP response from a ListSamlApplicationSecretsWithResponse call
func ParseListSamlApplicationSecretsResponse(rsp *http.Response) (*ListSamlApplicationSecretsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListSamlApplicationSecretsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []struct {
			Active bool `json:"active"`

			// Certificate The X.509 certificate in PEM format.
			Certificate string  `json:"certificate"`
			CreatedAt   float32 `json:"createdAt"`

			// ExpiresAt The expiration time of the certificate.
			ExpiresAt time.Time `json:"expiresAt"`

			// Fingerprint The SHA-256 fingerprint of the certificate.
			Fingerprint  *string `json:"fingerprint,omitempty"`
			Fingerprints struct {
				Sha256 struct {
					Formatted   string `json:"formatted"`
					Unformatted string `json:"unformatted"`
				} `json:"sha256"`
			} `json:"fingerprints"`

			// Id The ID of the signing certificate.
			Id string `json:"id"`

			// IsActive Whether this certificate is currently active.
			IsActive *bool `json:"isActive,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateSamlApplicationSecretResponse parses an HTTP response from a CreateSamlApplicationSecretWithResponse call
func ParseCreateSamlApplicationSecretResponse(rsp *http.Response) (*CreateSamlApplicationSecretResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateSamlApplicationSecretResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest struct {
			Active       bool    `json:"active"`
			Certificate  string  `json:"certificate"`
			CreatedAt    float32 `json:"createdAt"`
			ExpiresAt    float32 `json:"expiresAt"`
			Fingerprints struct {
				Sha256 struct {
					Formatted   string `json:"formatted"`
					Unformatted string `json:"unformatted"`
				} `json:"sha256"`
			} `json:"fingerprints"`
			Id string `json:"id"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseDeleteSamlApplicationSecretResponse parses an HTTP response from a DeleteSamlApplicationSecretWithResponse call
func ParseDeleteSamlApplicationSecretResponse(rsp *http.Response) (*DeleteSamlApplicationSecretResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteSamlApplicationSecretResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseUpdateSamlApplicationSecretResponse parses an HTTP response from a UpdateSamlApplicationSecretWithResponse call
func ParseUpdateSamlApplicationSecretResponse(rsp *http.Response) (*UpdateSamlApplicationSecretResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateSamlApplicationSecretResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Active       bool    `json:"active"`
			Certificate  string  `json:"certificate"`
			CreatedAt    float32 `json:"createdAt"`
			ExpiresAt    float32 `json:"expiresAt"`
			Fingerprints struct {
				Sha256 struct {
					Formatted   string `json:"formatted"`
					Unformatted string `json:"unformatted"`
				} `json:"sha256"`
			} `json:"fingerprints"`
			Id string `json:"id"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetSamlAuthnResponse parses an HTTP response from a GetSamlAuthnWithResponse call
func ParseGetSamlAuthnResponse(rsp *http.Response) (*GetSamlAuthnResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSamlAuthnResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseCreateSamlAuthnResponse parses an HTTP response from a CreateSamlAuthnWithResponse call
func ParseCreateSamlAuthnResponse(rsp *http.Response) (*CreateSamlAuthnResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateSamlAuthnResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteSentinelActivitiesResponse parses an HTTP response from a DeleteSentinelActivitiesWithResponse call
func ParseDeleteSentinelActivitiesResponse(rsp *http.Response) (*DeleteSentinelActivitiesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteSentinelActivitiesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetSignInExpResponse parses an HTTP response from a GetSignInExpWithResponse call
func ParseGetSignInExpResponse(rsp *http.Response) (*GetSignInExpResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSignInExpResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			AgreeToTermsPolicy GetSignInExp200AgreeToTermsPolicy `json:"agreeToTermsPolicy"`
			Branding           struct {
				DarkFavicon *string `json:"darkFavicon,omitempty"`
				DarkLogoUrl *string `json:"darkLogoUrl,omitempty"`
				Favicon     *string `json:"favicon,omitempty"`
				LogoUrl     *string `json:"logoUrl,omitempty"`
			} `json:"branding"`
			CaptchaPolicy struct {
				Enabled *bool `json:"enabled,omitempty"`
			} `json:"captchaPolicy"`

			// Color The primary branding color for the sign-in page (both light/dark mode).
			Color struct {
				DarkPrimaryColor  string `json:"darkPrimaryColor"`
				IsDarkModeEnabled bool   `json:"isDarkModeEnabled"`
				PrimaryColor      string `json:"primaryColor"`
			} `json:"color"`

			// CustomContent Custom content to display on experience flow pages. the page pathname will be the config key, the content will be the config value.
			CustomContent  map[string]string `json:"customContent"`
			CustomCss      *string           `json:"customCss"`
			CustomUiAssets *struct {
				CreatedAt float32 `json:"createdAt"`
				Id        string  `json:"id"`
			} `json:"customUiAssets"`

			// EmailBlocklistPolicy Define email restriction policies. Users will be prohibited from registering or linking any email addresses that are included in the blocklist.
			EmailBlocklistPolicy struct {
				// BlockDisposableAddress Cloud only.  Whether to block disposable email addresses. Once enabled, Logto will check the email domain against a list of known disposable email domains. If the domain is found in the list, the email address will be blocked.
				BlockDisposableAddress   *interface{} `json:"blockDisposableAddress,omitempty"`
				BlockDisposableAddresses *bool        `json:"blockDisposableAddresses,omitempty"`

				// BlockSubaddressing Whether to block sub-addresses. (E.g., example+shopping@test.com)
				BlockSubaddressing *bool `json:"blockSubaddressing,omitempty"`

				// CustomBlocklist Custom blocklist of email addresses or domains.
				CustomBlocklist *[]string `json:"customBlocklist,omitempty"`
			} `json:"emailBlocklistPolicy"`
			Id string `json:"id"`

			// LanguageInfo The language detection policy for the sign-in page.
			LanguageInfo struct {
				AutoDetect       bool                                        `json:"autoDetect"`
				FallbackLanguage GetSignInExp200LanguageInfoFallbackLanguage `json:"fallbackLanguage"`
			} `json:"languageInfo"`

			// Mfa MFA settings
			Mfa struct {
				Factors                       []GetSignInExp200MfaFactors                      `json:"factors"`
				OrganizationRequiredMfaPolicy *GetSignInExp200MfaOrganizationRequiredMfaPolicy `json:"organizationRequiredMfaPolicy,omitempty"`
				Policy                        GetSignInExp200MfaPolicy                         `json:"policy"`
			} `json:"mfa"`

			// PasswordPolicy Password policies to adjust the password strength requirements.
			PasswordPolicy struct {
				CharacterTypes *struct {
					Min float32 `json:"min"`
				} `json:"characterTypes,omitempty"`
				Length *struct {
					Max float32 `json:"max"`
					Min float32 `json:"min"`
				} `json:"length,omitempty"`
				Rejects *struct {
					Pwned                 bool     `json:"pwned"`
					RepetitionAndSequence bool     `json:"repetitionAndSequence"`
					UserInfo              bool     `json:"userInfo"`
					Words                 []string `json:"words"`
				} `json:"rejects,omitempty"`
			} `json:"passwordPolicy"`
			PrivacyPolicyUrl *string `json:"privacyPolicyUrl"`

			// SentinelPolicy Custom sentinel policy settings. Use this field to customize the user lockout policy. The default value is 100 failed attempts within one hour. The user will be locked out for 60 minutes after exceeding the limit.
			SentinelPolicy struct {
				LockoutDuration *float32 `json:"lockoutDuration,omitempty"`
				MaxAttempts     *float32 `json:"maxAttempts,omitempty"`
			} `json:"sentinelPolicy"`

			// SignIn Sign-in method settings.
			SignIn struct {
				Methods []struct {
					Identifier        GetSignInExp200SignInMethodsIdentifier `json:"identifier"`
					IsPasswordPrimary bool                                   `json:"isPasswordPrimary"`
					Password          bool                                   `json:"password"`
					VerificationCode  bool                                   `json:"verificationCode"`
				} `json:"methods"`
			} `json:"signIn"`
			SignInMode GetSignInExp200SignInMode `json:"signInMode"`

			// SignUp Sign-up method settings.
			SignUp struct {
				// Identifiers Allowed identifiers when signing-up.
				Identifiers []GetSignInExp200SignUpIdentifiers `json:"identifiers"`

				// Password Whether the user is required to set a password when signing-up.
				Password bool `json:"password"`

				// SecondaryIdentifiers Additional identifiers required during sign-up. Once specified, users will be prompted to provide these identifiers when creating an account.
				SecondaryIdentifiers *[]struct {
					Identifier GetSignInExp_200_SignUp_SecondaryIdentifiers_Identifier `json:"identifier"`
					Verify     *bool                                                   `json:"verify,omitempty"`
				} `json:"secondaryIdentifiers,omitempty"`

				// Verify Whether the user is required to verify their email/phone when signing-up.
				Verify bool `json:"verify"`
			} `json:"signUp"`
			SingleSignOnEnabled bool `json:"singleSignOnEnabled"`
			SocialSignIn        struct {
				AutomaticAccountLinking *bool `json:"automaticAccountLinking,omitempty"`
			} `json:"socialSignIn"`

			// SocialSignInConnectorTargets Enabled social sign-in connectors, will displayed on the sign-in page.
			SocialSignInConnectorTargets []string `json:"socialSignInConnectorTargets"`

			// SupportEmail The support email address to display on the error pages.
			SupportEmail *string `json:"supportEmail"`

			// SupportWebsiteUrl The support website URL to display on the error pages.
			SupportWebsiteUrl *string `json:"supportWebsiteUrl"`
			TenantId          string  `json:"tenantId"`
			TermsOfUseUrl     *string `json:"termsOfUseUrl"`

			// UnknownSessionRedirectUrl The fallback URL to redirect users when the sign-in session does not exist or unknown. Client should initiates a new authentication flow after the redirection.
			UnknownSessionRedirectUrl *string `json:"unknownSessionRedirectUrl"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUpdateSignInExpResponse parses an HTTP response from a UpdateSignInExpWithResponse call
func ParseUpdateSignInExpResponse(rsp *http.Response) (*UpdateSignInExpResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateSignInExpResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			AgreeToTermsPolicy UpdateSignInExp200AgreeToTermsPolicy `json:"agreeToTermsPolicy"`
			Branding           struct {
				DarkFavicon *string `json:"darkFavicon,omitempty"`
				DarkLogoUrl *string `json:"darkLogoUrl,omitempty"`
				Favicon     *string `json:"favicon,omitempty"`
				LogoUrl     *string `json:"logoUrl,omitempty"`
			} `json:"branding"`
			CaptchaPolicy struct {
				Enabled *bool `json:"enabled,omitempty"`
			} `json:"captchaPolicy"`
			Color struct {
				DarkPrimaryColor  string `json:"darkPrimaryColor"`
				IsDarkModeEnabled bool   `json:"isDarkModeEnabled"`
				PrimaryColor      string `json:"primaryColor"`
			} `json:"color"`
			CustomContent  map[string]string `json:"customContent"`
			CustomCss      *string           `json:"customCss"`
			CustomUiAssets *struct {
				CreatedAt float32 `json:"createdAt"`
				Id        string  `json:"id"`
			} `json:"customUiAssets"`
			EmailBlocklistPolicy struct {
				BlockDisposableAddresses *bool     `json:"blockDisposableAddresses,omitempty"`
				BlockSubaddressing       *bool     `json:"blockSubaddressing,omitempty"`
				CustomBlocklist          *[]string `json:"customBlocklist,omitempty"`
			} `json:"emailBlocklistPolicy"`
			Id           string `json:"id"`
			LanguageInfo struct {
				AutoDetect       bool                                           `json:"autoDetect"`
				FallbackLanguage UpdateSignInExp200LanguageInfoFallbackLanguage `json:"fallbackLanguage"`
			} `json:"languageInfo"`
			Mfa struct {
				Factors                       []UpdateSignInExp200MfaFactors                      `json:"factors"`
				OrganizationRequiredMfaPolicy *UpdateSignInExp200MfaOrganizationRequiredMfaPolicy `json:"organizationRequiredMfaPolicy,omitempty"`
				Policy                        UpdateSignInExp200MfaPolicy                         `json:"policy"`
			} `json:"mfa"`
			PasswordPolicy struct {
				CharacterTypes *struct {
					Min float32 `json:"min"`
				} `json:"characterTypes,omitempty"`
				Length *struct {
					Max float32 `json:"max"`
					Min float32 `json:"min"`
				} `json:"length,omitempty"`
				Rejects *struct {
					Pwned                 bool     `json:"pwned"`
					RepetitionAndSequence bool     `json:"repetitionAndSequence"`
					UserInfo              bool     `json:"userInfo"`
					Words                 []string `json:"words"`
				} `json:"rejects,omitempty"`
			} `json:"passwordPolicy"`
			PrivacyPolicyUrl *string `json:"privacyPolicyUrl"`
			SentinelPolicy   struct {
				LockoutDuration *float32 `json:"lockoutDuration,omitempty"`
				MaxAttempts     *float32 `json:"maxAttempts,omitempty"`
			} `json:"sentinelPolicy"`
			SignIn struct {
				Methods []struct {
					Identifier        UpdateSignInExp200SignInMethodsIdentifier `json:"identifier"`
					IsPasswordPrimary bool                                      `json:"isPasswordPrimary"`
					Password          bool                                      `json:"password"`
					VerificationCode  bool                                      `json:"verificationCode"`
				} `json:"methods"`
			} `json:"signIn"`
			SignInMode UpdateSignInExp200SignInMode `json:"signInMode"`
			SignUp     struct {
				Identifiers          []UpdateSignInExp200SignUpIdentifiers `json:"identifiers"`
				Password             bool                                  `json:"password"`
				SecondaryIdentifiers *[]struct {
					Identifier UpdateSignInExp_200_SignUp_SecondaryIdentifiers_Identifier `json:"identifier"`
					Verify     *bool                                                      `json:"verify,omitempty"`
				} `json:"secondaryIdentifiers,omitempty"`
				Verify bool `json:"verify"`
			} `json:"signUp"`
			SingleSignOnEnabled bool `json:"singleSignOnEnabled"`
			SocialSignIn        struct {
				AutomaticAccountLinking *bool `json:"automaticAccountLinking,omitempty"`
			} `json:"socialSignIn"`
			SocialSignInConnectorTargets []string `json:"socialSignInConnectorTargets"`
			SupportEmail                 *string  `json:"supportEmail"`
			SupportWebsiteUrl            *string  `json:"supportWebsiteUrl"`
			TenantId                     string   `json:"tenantId"`
			TermsOfUseUrl                *string  `json:"termsOfUseUrl"`
			UnknownSessionRedirectUrl    *string  `json:"unknownSessionRedirectUrl"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCheckPasswordWithDefaultSignInExperienceResponse parses an HTTP response from a CheckPasswordWithDefaultSignInExperienceWithResponse call
func ParseCheckPasswordWithDefaultSignInExperienceResponse(rsp *http.Response) (*CheckPasswordWithDefaultSignInExperienceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CheckPasswordWithDefaultSignInExperienceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			union json.RawMessage
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUploadCustomUiAssetsResponse parses an HTTP response from a UploadCustomUiAssetsWithResponse call
func ParseUploadCustomUiAssetsResponse(rsp *http.Response) (*UploadCustomUiAssetsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UploadCustomUiAssetsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			CustomUiAssetId string `json:"customUiAssetId"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseListSsoConnectorProvidersResponse parses an HTTP response from a ListSsoConnectorProvidersWithResponse call
func ParseListSsoConnectorProvidersResponse(rsp *http.Response) (*ListSsoConnectorProvidersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListSsoConnectorProvidersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []struct {
			Description  string                                   `json:"description"`
			Logo         string                                   `json:"logo"`
			LogoDark     string                                   `json:"logoDark"`
			Name         string                                   `json:"name"`
			ProviderName ListSsoConnectorProviders200ProviderName `json:"providerName"`
			ProviderType ListSsoConnectorProviders200ProviderType `json:"providerType"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseListSsoConnectorsResponse parses an HTTP response from a ListSsoConnectorsWithResponse call
func ParseListSsoConnectorsResponse(rsp *http.Response) (*ListSsoConnectorsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListSsoConnectorsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []struct {
			Branding struct {
				DarkLogo    *string `json:"darkLogo,omitempty"`
				DisplayName *string `json:"displayName,omitempty"`
				Logo        *string `json:"logo,omitempty"`
			} `json:"branding"`

			// Config arbitrary
			Config           map[string]interface{}           `json:"config"`
			ConnectorName    string                           `json:"connectorName"`
			CreatedAt        float32                          `json:"createdAt"`
			Domains          []string                         `json:"domains"`
			Id               string                           `json:"id"`
			Name             string                           `json:"name"`
			ProviderConfig   *map[string]interface{}          `json:"providerConfig,omitempty"`
			ProviderLogo     string                           `json:"providerLogo"`
			ProviderLogoDark string                           `json:"providerLogoDark"`
			ProviderName     ListSsoConnectors200ProviderName `json:"providerName"`
			ProviderType     ListSsoConnectors200ProviderType `json:"providerType"`
			SyncProfile      bool                             `json:"syncProfile"`
			TenantId         string                           `json:"tenantId"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateSsoConnectorResponse parses an HTTP response from a CreateSsoConnectorWithResponse call
func ParseCreateSsoConnectorResponse(rsp *http.Response) (*CreateSsoConnectorResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateSsoConnectorResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Branding struct {
				DarkLogo    *string `json:"darkLogo,omitempty"`
				DisplayName *string `json:"displayName,omitempty"`
				Logo        *string `json:"logo,omitempty"`
			} `json:"branding"`

			// Config arbitrary
			Config        map[string]interface{} `json:"config"`
			ConnectorName string                 `json:"connectorName"`
			CreatedAt     float32                `json:"createdAt"`
			Domains       []string               `json:"domains"`
			Id            string                 `json:"id"`
			ProviderName  string                 `json:"providerName"`
			SyncProfile   bool                   `json:"syncProfile"`
			TenantId      string                 `json:"tenantId"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteSsoConnectorResponse parses an HTTP response from a DeleteSsoConnectorWithResponse call
func ParseDeleteSsoConnectorResponse(rsp *http.Response) (*DeleteSsoConnectorResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteSsoConnectorResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetSsoConnectorResponse parses an HTTP response from a GetSsoConnectorWithResponse call
func ParseGetSsoConnectorResponse(rsp *http.Response) (*GetSsoConnectorResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSsoConnectorResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Branding struct {
				DarkLogo    *string `json:"darkLogo,omitempty"`
				DisplayName *string `json:"displayName,omitempty"`
				Logo        *string `json:"logo,omitempty"`
			} `json:"branding"`

			// Config arbitrary
			Config           map[string]interface{}         `json:"config"`
			ConnectorName    string                         `json:"connectorName"`
			CreatedAt        float32                        `json:"createdAt"`
			Domains          []string                       `json:"domains"`
			Id               string                         `json:"id"`
			Name             string                         `json:"name"`
			ProviderConfig   *map[string]interface{}        `json:"providerConfig,omitempty"`
			ProviderLogo     string                         `json:"providerLogo"`
			ProviderLogoDark string                         `json:"providerLogoDark"`
			ProviderName     GetSsoConnector200ProviderName `json:"providerName"`
			ProviderType     GetSsoConnector200ProviderType `json:"providerType"`
			SyncProfile      bool                           `json:"syncProfile"`
			TenantId         string                         `json:"tenantId"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUpdateSsoConnectorResponse parses an HTTP response from a UpdateSsoConnectorWithResponse call
func ParseUpdateSsoConnectorResponse(rsp *http.Response) (*UpdateSsoConnectorResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateSsoConnectorResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Branding struct {
				DarkLogo    *string `json:"darkLogo,omitempty"`
				DisplayName *string `json:"displayName,omitempty"`
				Logo        *string `json:"logo,omitempty"`
			} `json:"branding"`

			// Config arbitrary
			Config           map[string]interface{}            `json:"config"`
			ConnectorName    string                            `json:"connectorName"`
			CreatedAt        float32                           `json:"createdAt"`
			Domains          []string                          `json:"domains"`
			Id               string                            `json:"id"`
			Name             string                            `json:"name"`
			ProviderConfig   *map[string]interface{}           `json:"providerConfig,omitempty"`
			ProviderLogo     string                            `json:"providerLogo"`
			ProviderLogoDark string                            `json:"providerLogoDark"`
			ProviderName     UpdateSsoConnector200ProviderName `json:"providerName"`
			ProviderType     UpdateSsoConnector200ProviderType `json:"providerType"`
			SyncProfile      bool                              `json:"syncProfile"`
			TenantId         string                            `json:"tenantId"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetStatusResponse parses an HTTP response from a GetStatusWithResponse call
func ParseGetStatusResponse(rsp *http.Response) (*GetStatusResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetStatusResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseCreateSubjectTokenResponse parses an HTTP response from a CreateSubjectTokenWithResponse call
func ParseCreateSubjectTokenResponse(rsp *http.Response) (*CreateSubjectTokenResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateSubjectTokenResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest struct {
			ExpiresIn    float32 `json:"expiresIn"`
			SubjectToken string  `json:"subjectToken"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseGetSwaggerJsonResponse parses an HTTP response from a GetSwaggerJsonWithResponse call
func ParseGetSwaggerJsonResponse(rsp *http.Response) (*GetSwaggerJsonResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSwaggerJsonResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetSystemApplicationConfigResponse parses an HTTP response from a GetSystemApplicationConfigWithResponse call
func ParseGetSystemApplicationConfigResponse(rsp *http.Response) (*GetSystemApplicationConfigResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSystemApplicationConfigResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			ProtectedApps struct {
				DefaultDomain string `json:"defaultDomain"`
			} `json:"protectedApps"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateUserAssetResponse parses an HTTP response from a CreateUserAssetWithResponse call
func ParseCreateUserAssetResponse(rsp *http.Response) (*CreateUserAssetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateUserAssetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Url string `json:"url"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetUserAssetServiceStatusResponse parses an HTTP response from a GetUserAssetServiceStatusWithResponse call
func ParseGetUserAssetServiceStatusResponse(rsp *http.Response) (*GetUserAssetServiceStatusResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUserAssetServiceStatusResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			AllowUploadMimeTypes *[]GetUserAssetServiceStatus200AllowUploadMimeTypes `json:"allowUploadMimeTypes,omitempty"`
			MaxUploadFileSize    *float32                                            `json:"maxUploadFileSize,omitempty"`
			Status               GetUserAssetServiceStatus_200_Status                `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseListUsersResponse parses an HTTP response from a ListUsersWithResponse call
func ParseListUsersResponse(rsp *http.Response) (*ListUsersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListUsersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []struct {
			ApplicationId *string `json:"applicationId"`
			Avatar        *string `json:"avatar"`
			CreatedAt     float32 `json:"createdAt"`

			// CustomData arbitrary
			CustomData  map[string]interface{} `json:"customData"`
			HasPassword *bool                  `json:"hasPassword,omitempty"`
			Id          string                 `json:"id"`
			Identities  map[string]struct {
				// Details arbitrary
				Details *map[string]interface{} `json:"details,omitempty"`
				UserId  string                  `json:"userId"`
			} `json:"identities"`
			IsSuspended  bool     `json:"isSuspended"`
			LastSignInAt *float32 `json:"lastSignInAt"`
			Name         *string  `json:"name"`
			PrimaryEmail *string  `json:"primaryEmail"`
			PrimaryPhone *string  `json:"primaryPhone"`
			Profile      struct {
				Address *struct {
					Country       *string `json:"country,omitempty"`
					Formatted     *string `json:"formatted,omitempty"`
					Locality      *string `json:"locality,omitempty"`
					PostalCode    *string `json:"postalCode,omitempty"`
					Region        *string `json:"region,omitempty"`
					StreetAddress *string `json:"streetAddress,omitempty"`
				} `json:"address,omitempty"`
				Birthdate         *string `json:"birthdate,omitempty"`
				FamilyName        *string `json:"familyName,omitempty"`
				Gender            *string `json:"gender,omitempty"`
				GivenName         *string `json:"givenName,omitempty"`
				Locale            *string `json:"locale,omitempty"`
				MiddleName        *string `json:"middleName,omitempty"`
				Nickname          *string `json:"nickname,omitempty"`
				PreferredUsername *string `json:"preferredUsername,omitempty"`
				Profile           *string `json:"profile,omitempty"`
				Website           *string `json:"website,omitempty"`
				Zoneinfo          *string `json:"zoneinfo,omitempty"`
			} `json:"profile"`
			SsoIdentities *[]struct {
				CreatedAt float32 `json:"createdAt"`

				// Detail arbitrary
				Detail         map[string]interface{} `json:"detail"`
				Id             string                 `json:"id"`
				IdentityId     string                 `json:"identityId"`
				Issuer         string                 `json:"issuer"`
				SsoConnectorId string                 `json:"ssoConnectorId"`
				TenantId       string                 `json:"tenantId"`
				UpdatedAt      float32                `json:"updatedAt"`
				UserId         string                 `json:"userId"`
			} `json:"ssoIdentities,omitempty"`
			UpdatedAt float32 `json:"updatedAt"`
			Username  *string `json:"username"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateUserResponse parses an HTTP response from a CreateUserWithResponse call
func ParseCreateUserResponse(rsp *http.Response) (*CreateUserResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			ApplicationId *string `json:"applicationId"`
			Avatar        *string `json:"avatar"`
			CreatedAt     float32 `json:"createdAt"`

			// CustomData arbitrary
			CustomData  map[string]interface{} `json:"customData"`
			HasPassword *bool                  `json:"hasPassword,omitempty"`
			Id          string                 `json:"id"`
			Identities  map[string]struct {
				// Details arbitrary
				Details *map[string]interface{} `json:"details,omitempty"`
				UserId  string                  `json:"userId"`
			} `json:"identities"`
			IsSuspended  bool     `json:"isSuspended"`
			LastSignInAt *float32 `json:"lastSignInAt"`
			Name         *string  `json:"name"`
			PrimaryEmail *string  `json:"primaryEmail"`
			PrimaryPhone *string  `json:"primaryPhone"`
			Profile      struct {
				Address *struct {
					Country       *string `json:"country,omitempty"`
					Formatted     *string `json:"formatted,omitempty"`
					Locality      *string `json:"locality,omitempty"`
					PostalCode    *string `json:"postalCode,omitempty"`
					Region        *string `json:"region,omitempty"`
					StreetAddress *string `json:"streetAddress,omitempty"`
				} `json:"address,omitempty"`
				Birthdate         *string `json:"birthdate,omitempty"`
				FamilyName        *string `json:"familyName,omitempty"`
				Gender            *string `json:"gender,omitempty"`
				GivenName         *string `json:"givenName,omitempty"`
				Locale            *string `json:"locale,omitempty"`
				MiddleName        *string `json:"middleName,omitempty"`
				Nickname          *string `json:"nickname,omitempty"`
				PreferredUsername *string `json:"preferredUsername,omitempty"`
				Profile           *string `json:"profile,omitempty"`
				Website           *string `json:"website,omitempty"`
				Zoneinfo          *string `json:"zoneinfo,omitempty"`
			} `json:"profile"`
			SsoIdentities *[]struct {
				CreatedAt float32 `json:"createdAt"`

				// Detail arbitrary
				Detail         map[string]interface{} `json:"detail"`
				Id             string                 `json:"id"`
				IdentityId     string                 `json:"identityId"`
				Issuer         string                 `json:"issuer"`
				SsoConnectorId string                 `json:"ssoConnectorId"`
				TenantId       string                 `json:"tenantId"`
				UpdatedAt      float32                `json:"updatedAt"`
				UserId         string                 `json:"userId"`
			} `json:"ssoIdentities,omitempty"`
			UpdatedAt float32 `json:"updatedAt"`
			Username  *string `json:"username"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteUserResponse parses an HTTP response from a DeleteUserWithResponse call
func ParseDeleteUserResponse(rsp *http.Response) (*DeleteUserResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetUserResponse parses an HTTP response from a GetUserWithResponse call
func ParseGetUserResponse(rsp *http.Response) (*GetUserResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			ApplicationId *string `json:"applicationId"`
			Avatar        *string `json:"avatar"`
			CreatedAt     float32 `json:"createdAt"`

			// CustomData arbitrary
			CustomData  map[string]interface{} `json:"customData"`
			HasPassword *bool                  `json:"hasPassword,omitempty"`
			Id          string                 `json:"id"`
			Identities  map[string]struct {
				// Details arbitrary
				Details *map[string]interface{} `json:"details,omitempty"`
				UserId  string                  `json:"userId"`
			} `json:"identities"`
			IsSuspended  bool     `json:"isSuspended"`
			LastSignInAt *float32 `json:"lastSignInAt"`
			Name         *string  `json:"name"`
			PrimaryEmail *string  `json:"primaryEmail"`
			PrimaryPhone *string  `json:"primaryPhone"`
			Profile      struct {
				Address *struct {
					Country       *string `json:"country,omitempty"`
					Formatted     *string `json:"formatted,omitempty"`
					Locality      *string `json:"locality,omitempty"`
					PostalCode    *string `json:"postalCode,omitempty"`
					Region        *string `json:"region,omitempty"`
					StreetAddress *string `json:"streetAddress,omitempty"`
				} `json:"address,omitempty"`
				Birthdate         *string `json:"birthdate,omitempty"`
				FamilyName        *string `json:"familyName,omitempty"`
				Gender            *string `json:"gender,omitempty"`
				GivenName         *string `json:"givenName,omitempty"`
				Locale            *string `json:"locale,omitempty"`
				MiddleName        *string `json:"middleName,omitempty"`
				Nickname          *string `json:"nickname,omitempty"`
				PreferredUsername *string `json:"preferredUsername,omitempty"`
				Profile           *string `json:"profile,omitempty"`
				Website           *string `json:"website,omitempty"`
				Zoneinfo          *string `json:"zoneinfo,omitempty"`
			} `json:"profile"`

			// SsoIdentities List of SSO identities associated with the user. Only available when the `includeSsoIdentities` query parameter is provided with a truthy value.
			SsoIdentities *[]struct {
				CreatedAt float32 `json:"createdAt"`

				// Detail arbitrary
				Detail         map[string]interface{} `json:"detail"`
				Id             string                 `json:"id"`
				IdentityId     string                 `json:"identityId"`
				Issuer         string                 `json:"issuer"`
				SsoConnectorId string                 `json:"ssoConnectorId"`
				TenantId       string                 `json:"tenantId"`
				UpdatedAt      float32                `json:"updatedAt"`
				UserId         string                 `json:"userId"`
			} `json:"ssoIdentities,omitempty"`
			UpdatedAt float32 `json:"updatedAt"`
			Username  *string `json:"username"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUpdateUserResponse parses an HTTP response from a UpdateUserWithResponse call
func ParseUpdateUserResponse(rsp *http.Response) (*UpdateUserResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			ApplicationId *string `json:"applicationId"`
			Avatar        *string `json:"avatar"`
			CreatedAt     float32 `json:"createdAt"`

			// CustomData arbitrary
			CustomData  map[string]interface{} `json:"customData"`
			HasPassword *bool                  `json:"hasPassword,omitempty"`
			Id          string                 `json:"id"`
			Identities  map[string]struct {
				// Details arbitrary
				Details *map[string]interface{} `json:"details,omitempty"`
				UserId  string                  `json:"userId"`
			} `json:"identities"`
			IsSuspended  bool     `json:"isSuspended"`
			LastSignInAt *float32 `json:"lastSignInAt"`
			Name         *string  `json:"name"`
			PrimaryEmail *string  `json:"primaryEmail"`
			PrimaryPhone *string  `json:"primaryPhone"`
			Profile      struct {
				Address *struct {
					Country       *string `json:"country,omitempty"`
					Formatted     *string `json:"formatted,omitempty"`
					Locality      *string `json:"locality,omitempty"`
					PostalCode    *string `json:"postalCode,omitempty"`
					Region        *string `json:"region,omitempty"`
					StreetAddress *string `json:"streetAddress,omitempty"`
				} `json:"address,omitempty"`
				Birthdate         *string `json:"birthdate,omitempty"`
				FamilyName        *string `json:"familyName,omitempty"`
				Gender            *string `json:"gender,omitempty"`
				GivenName         *string `json:"givenName,omitempty"`
				Locale            *string `json:"locale,omitempty"`
				MiddleName        *string `json:"middleName,omitempty"`
				Nickname          *string `json:"nickname,omitempty"`
				PreferredUsername *string `json:"preferredUsername,omitempty"`
				Profile           *string `json:"profile,omitempty"`
				Website           *string `json:"website,omitempty"`
				Zoneinfo          *string `json:"zoneinfo,omitempty"`
			} `json:"profile"`
			SsoIdentities *[]struct {
				CreatedAt float32 `json:"createdAt"`

				// Detail arbitrary
				Detail         map[string]interface{} `json:"detail"`
				Id             string                 `json:"id"`
				IdentityId     string                 `json:"identityId"`
				Issuer         string                 `json:"issuer"`
				SsoConnectorId string                 `json:"ssoConnectorId"`
				TenantId       string                 `json:"tenantId"`
				UpdatedAt      float32                `json:"updatedAt"`
				UserId         string                 `json:"userId"`
			} `json:"ssoIdentities,omitempty"`
			UpdatedAt float32 `json:"updatedAt"`
			Username  *string `json:"username"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseListUserCustomDataResponse parses an HTTP response from a ListUserCustomDataWithResponse call
func ParseListUserCustomDataResponse(rsp *http.Response) (*ListUserCustomDataResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListUserCustomDataResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUpdateUserCustomDataResponse parses an HTTP response from a UpdateUserCustomDataWithResponse call
func ParseUpdateUserCustomDataResponse(rsp *http.Response) (*UpdateUserCustomDataResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateUserCustomDataResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetUserHasPasswordResponse parses an HTTP response from a GetUserHasPasswordWithResponse call
func ParseGetUserHasPasswordResponse(rsp *http.Response) (*GetUserHasPasswordResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUserHasPasswordResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			HasPassword bool `json:"hasPassword"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateUserIdentityResponse parses an HTTP response from a CreateUserIdentityWithResponse call
func ParseCreateUserIdentityResponse(rsp *http.Response) (*CreateUserIdentityResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateUserIdentityResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]struct {
			// Details arbitrary
			Details *map[string]interface{} `json:"details,omitempty"`
			UserId  string                  `json:"userId"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteUserIdentityResponse parses an HTTP response from a DeleteUserIdentityWithResponse call
func ParseDeleteUserIdentityResponse(rsp *http.Response) (*DeleteUserIdentityResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteUserIdentityResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			ApplicationId *string `json:"applicationId"`
			Avatar        *string `json:"avatar"`
			CreatedAt     float32 `json:"createdAt"`

			// CustomData arbitrary
			CustomData  map[string]interface{} `json:"customData"`
			HasPassword *bool                  `json:"hasPassword,omitempty"`
			Id          string                 `json:"id"`
			Identities  map[string]struct {
				// Details arbitrary
				Details *map[string]interface{} `json:"details,omitempty"`
				UserId  string                  `json:"userId"`
			} `json:"identities"`
			IsSuspended  bool     `json:"isSuspended"`
			LastSignInAt *float32 `json:"lastSignInAt"`
			Name         *string  `json:"name"`
			PrimaryEmail *string  `json:"primaryEmail"`
			PrimaryPhone *string  `json:"primaryPhone"`
			Profile      struct {
				Address *struct {
					Country       *string `json:"country,omitempty"`
					Formatted     *string `json:"formatted,omitempty"`
					Locality      *string `json:"locality,omitempty"`
					PostalCode    *string `json:"postalCode,omitempty"`
					Region        *string `json:"region,omitempty"`
					StreetAddress *string `json:"streetAddress,omitempty"`
				} `json:"address,omitempty"`
				Birthdate         *string `json:"birthdate,omitempty"`
				FamilyName        *string `json:"familyName,omitempty"`
				Gender            *string `json:"gender,omitempty"`
				GivenName         *string `json:"givenName,omitempty"`
				Locale            *string `json:"locale,omitempty"`
				MiddleName        *string `json:"middleName,omitempty"`
				Nickname          *string `json:"nickname,omitempty"`
				PreferredUsername *string `json:"preferredUsername,omitempty"`
				Profile           *string `json:"profile,omitempty"`
				Website           *string `json:"website,omitempty"`
				Zoneinfo          *string `json:"zoneinfo,omitempty"`
			} `json:"profile"`
			SsoIdentities *[]struct {
				CreatedAt float32 `json:"createdAt"`

				// Detail arbitrary
				Detail         map[string]interface{} `json:"detail"`
				Id             string                 `json:"id"`
				IdentityId     string                 `json:"identityId"`
				Issuer         string                 `json:"issuer"`
				SsoConnectorId string                 `json:"ssoConnectorId"`
				TenantId       string                 `json:"tenantId"`
				UpdatedAt      float32                `json:"updatedAt"`
				UserId         string                 `json:"userId"`
			} `json:"ssoIdentities,omitempty"`
			UpdatedAt float32 `json:"updatedAt"`
			Username  *string `json:"username"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseReplaceUserIdentityResponse parses an HTTP response from a ReplaceUserIdentityWithResponse call
func ParseReplaceUserIdentityResponse(rsp *http.Response) (*ReplaceUserIdentityResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReplaceUserIdentityResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]struct {
			// Details arbitrary
			Details *map[string]interface{} `json:"details,omitempty"`
			UserId  string                  `json:"userId"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest map[string]struct {
			// Details arbitrary
			Details *map[string]interface{} `json:"details,omitempty"`
			UserId  string                  `json:"userId"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseUpdateUserIsSuspendedResponse parses an HTTP response from a UpdateUserIsSuspendedWithResponse call
func ParseUpdateUserIsSuspendedResponse(rsp *http.Response) (*UpdateUserIsSuspendedResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateUserIsSuspendedResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			ApplicationId *string `json:"applicationId"`
			Avatar        *string `json:"avatar"`
			CreatedAt     float32 `json:"createdAt"`

			// CustomData arbitrary
			CustomData  map[string]interface{} `json:"customData"`
			HasPassword *bool                  `json:"hasPassword,omitempty"`
			Id          string                 `json:"id"`
			Identities  map[string]struct {
				// Details arbitrary
				Details *map[string]interface{} `json:"details,omitempty"`
				UserId  string                  `json:"userId"`
			} `json:"identities"`
			IsSuspended  bool     `json:"isSuspended"`
			LastSignInAt *float32 `json:"lastSignInAt"`
			Name         *string  `json:"name"`
			PrimaryEmail *string  `json:"primaryEmail"`
			PrimaryPhone *string  `json:"primaryPhone"`
			Profile      struct {
				Address *struct {
					Country       *string `json:"country,omitempty"`
					Formatted     *string `json:"formatted,omitempty"`
					Locality      *string `json:"locality,omitempty"`
					PostalCode    *string `json:"postalCode,omitempty"`
					Region        *string `json:"region,omitempty"`
					StreetAddress *string `json:"streetAddress,omitempty"`
				} `json:"address,omitempty"`
				Birthdate         *string `json:"birthdate,omitempty"`
				FamilyName        *string `json:"familyName,omitempty"`
				Gender            *string `json:"gender,omitempty"`
				GivenName         *string `json:"givenName,omitempty"`
				Locale            *string `json:"locale,omitempty"`
				MiddleName        *string `json:"middleName,omitempty"`
				Nickname          *string `json:"nickname,omitempty"`
				PreferredUsername *string `json:"preferredUsername,omitempty"`
				Profile           *string `json:"profile,omitempty"`
				Website           *string `json:"website,omitempty"`
				Zoneinfo          *string `json:"zoneinfo,omitempty"`
			} `json:"profile"`
			SsoIdentities *[]struct {
				CreatedAt float32 `json:"createdAt"`

				// Detail arbitrary
				Detail         map[string]interface{} `json:"detail"`
				Id             string                 `json:"id"`
				IdentityId     string                 `json:"identityId"`
				Issuer         string                 `json:"issuer"`
				SsoConnectorId string                 `json:"ssoConnectorId"`
				TenantId       string                 `json:"tenantId"`
				UpdatedAt      float32                `json:"updatedAt"`
				UserId         string                 `json:"userId"`
			} `json:"ssoIdentities,omitempty"`
			UpdatedAt float32 `json:"updatedAt"`
			Username  *string `json:"username"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseListUserMfaVerificationsResponse parses an HTTP response from a ListUserMfaVerificationsWithResponse call
func ParseListUserMfaVerificationsResponse(rsp *http.Response) (*ListUserMfaVerificationsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListUserMfaVerificationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []struct {
			Agent       *string                         `json:"agent,omitempty"`
			CreatedAt   string                          `json:"createdAt"`
			Id          string                          `json:"id"`
			Name        *string                         `json:"name,omitempty"`
			RemainCodes *float32                        `json:"remainCodes,omitempty"`
			Type        ListUserMfaVerifications200Type `json:"type"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateUserMfaVerificationResponse parses an HTTP response from a CreateUserMfaVerificationWithResponse call
func ParseCreateUserMfaVerificationResponse(rsp *http.Response) (*CreateUserMfaVerificationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateUserMfaVerificationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			union json.RawMessage
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteUserMfaVerificationResponse parses an HTTP response from a DeleteUserMfaVerificationWithResponse call
func ParseDeleteUserMfaVerificationResponse(rsp *http.Response) (*DeleteUserMfaVerificationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteUserMfaVerificationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseListUserOrganizationsResponse parses an HTTP response from a ListUserOrganizationsWithResponse call
func ParseListUserOrganizationsResponse(rsp *http.Response) (*ListUserOrganizationsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListUserOrganizationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []struct {
			Branding struct {
				DarkFavicon *string `json:"darkFavicon,omitempty"`
				DarkLogoUrl *string `json:"darkLogoUrl,omitempty"`
				Favicon     *string `json:"favicon,omitempty"`
				LogoUrl     *string `json:"logoUrl,omitempty"`
			} `json:"branding"`
			CreatedAt float32 `json:"createdAt"`

			// CustomData arbitrary
			CustomData        map[string]interface{} `json:"customData"`
			Description       *string                `json:"description"`
			Id                string                 `json:"id"`
			IsMfaRequired     bool                   `json:"isMfaRequired"`
			Name              string                 `json:"name"`
			OrganizationRoles []struct {
				Id   string `json:"id"`
				Name string `json:"name"`
			} `json:"organizationRoles"`
			TenantId string `json:"tenantId"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUpdateUserPasswordResponse parses an HTTP response from a UpdateUserPasswordWithResponse call
func ParseUpdateUserPasswordResponse(rsp *http.Response) (*UpdateUserPasswordResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateUserPasswordResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			ApplicationId *string `json:"applicationId"`
			Avatar        *string `json:"avatar"`
			CreatedAt     float32 `json:"createdAt"`

			// CustomData arbitrary
			CustomData  map[string]interface{} `json:"customData"`
			HasPassword *bool                  `json:"hasPassword,omitempty"`
			Id          string                 `json:"id"`
			Identities  map[string]struct {
				// Details arbitrary
				Details *map[string]interface{} `json:"details,omitempty"`
				UserId  string                  `json:"userId"`
			} `json:"identities"`
			IsSuspended  bool     `json:"isSuspended"`
			LastSignInAt *float32 `json:"lastSignInAt"`
			Name         *string  `json:"name"`
			PrimaryEmail *string  `json:"primaryEmail"`
			PrimaryPhone *string  `json:"primaryPhone"`
			Profile      struct {
				Address *struct {
					Country       *string `json:"country,omitempty"`
					Formatted     *string `json:"formatted,omitempty"`
					Locality      *string `json:"locality,omitempty"`
					PostalCode    *string `json:"postalCode,omitempty"`
					Region        *string `json:"region,omitempty"`
					StreetAddress *string `json:"streetAddress,omitempty"`
				} `json:"address,omitempty"`
				Birthdate         *string `json:"birthdate,omitempty"`
				FamilyName        *string `json:"familyName,omitempty"`
				Gender            *string `json:"gender,omitempty"`
				GivenName         *string `json:"givenName,omitempty"`
				Locale            *string `json:"locale,omitempty"`
				MiddleName        *string `json:"middleName,omitempty"`
				Nickname          *string `json:"nickname,omitempty"`
				PreferredUsername *string `json:"preferredUsername,omitempty"`
				Profile           *string `json:"profile,omitempty"`
				Website           *string `json:"website,omitempty"`
				Zoneinfo          *string `json:"zoneinfo,omitempty"`
			} `json:"profile"`
			SsoIdentities *[]struct {
				CreatedAt float32 `json:"createdAt"`

				// Detail arbitrary
				Detail         map[string]interface{} `json:"detail"`
				Id             string                 `json:"id"`
				IdentityId     string                 `json:"identityId"`
				Issuer         string                 `json:"issuer"`
				SsoConnectorId string                 `json:"ssoConnectorId"`
				TenantId       string                 `json:"tenantId"`
				UpdatedAt      float32                `json:"updatedAt"`
				UserId         string                 `json:"userId"`
			} `json:"ssoIdentities,omitempty"`
			UpdatedAt float32 `json:"updatedAt"`
			Username  *string `json:"username"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseVerifyUserPasswordResponse parses an HTTP response from a VerifyUserPasswordWithResponse call
func ParseVerifyUserPasswordResponse(rsp *http.Response) (*VerifyUserPasswordResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &VerifyUserPasswordResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseListUserPersonalAccessTokensResponse parses an HTTP response from a ListUserPersonalAccessTokensWithResponse call
func ParseListUserPersonalAccessTokensResponse(rsp *http.Response) (*ListUserPersonalAccessTokensResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListUserPersonalAccessTokensResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []struct {
			CreatedAt float32  `json:"createdAt"`
			ExpiresAt *float32 `json:"expiresAt"`
			Name      string   `json:"name"`
			TenantId  string   `json:"tenantId"`
			UserId    string   `json:"userId"`
			Value     string   `json:"value"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateUserPersonalAccessTokenResponse parses an HTTP response from a CreateUserPersonalAccessTokenWithResponse call
func ParseCreateUserPersonalAccessTokenResponse(rsp *http.Response) (*CreateUserPersonalAccessTokenResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateUserPersonalAccessTokenResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest struct {
			CreatedAt float32  `json:"createdAt"`
			ExpiresAt *float32 `json:"expiresAt"`
			Name      string   `json:"name"`
			TenantId  string   `json:"tenantId"`
			UserId    string   `json:"userId"`
			Value     string   `json:"value"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseDeleteUserPersonalAccessTokenResponse parses an HTTP response from a DeleteUserPersonalAccessTokenWithResponse call
func ParseDeleteUserPersonalAccessTokenResponse(rsp *http.Response) (*DeleteUserPersonalAccessTokenResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteUserPersonalAccessTokenResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseUpdateUserPersonalAccessTokenResponse parses an HTTP response from a UpdateUserPersonalAccessTokenWithResponse call
func ParseUpdateUserPersonalAccessTokenResponse(rsp *http.Response) (*UpdateUserPersonalAccessTokenResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateUserPersonalAccessTokenResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			CreatedAt float32  `json:"createdAt"`
			ExpiresAt *float32 `json:"expiresAt"`
			Name      string   `json:"name"`
			TenantId  string   `json:"tenantId"`
			UserId    string   `json:"userId"`
			Value     string   `json:"value"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUpdateUserProfileResponse parses an HTTP response from a UpdateUserProfileWithResponse call
func ParseUpdateUserProfileResponse(rsp *http.Response) (*UpdateUserProfileResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateUserProfileResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Address *struct {
				Country       *string `json:"country,omitempty"`
				Formatted     *string `json:"formatted,omitempty"`
				Locality      *string `json:"locality,omitempty"`
				PostalCode    *string `json:"postalCode,omitempty"`
				Region        *string `json:"region,omitempty"`
				StreetAddress *string `json:"streetAddress,omitempty"`
			} `json:"address,omitempty"`
			Birthdate         *string `json:"birthdate,omitempty"`
			FamilyName        *string `json:"familyName,omitempty"`
			Gender            *string `json:"gender,omitempty"`
			GivenName         *string `json:"givenName,omitempty"`
			Locale            *string `json:"locale,omitempty"`
			MiddleName        *string `json:"middleName,omitempty"`
			Nickname          *string `json:"nickname,omitempty"`
			PreferredUsername *string `json:"preferredUsername,omitempty"`
			Profile           *string `json:"profile,omitempty"`
			Website           *string `json:"website,omitempty"`
			Zoneinfo          *string `json:"zoneinfo,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseListUserRolesResponse parses an HTTP response from a ListUserRolesWithResponse call
func ParseListUserRolesResponse(rsp *http.Response) (*ListUserRolesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListUserRolesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []struct {
			Description string               `json:"description"`
			Id          string               `json:"id"`
			IsDefault   bool                 `json:"isDefault"`
			Name        string               `json:"name"`
			TenantId    string               `json:"tenantId"`
			Type        ListUserRoles200Type `json:"type"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseAssignUserRolesResponse parses an HTTP response from a AssignUserRolesWithResponse call
func ParseAssignUserRolesResponse(rsp *http.Response) (*AssignUserRolesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AssignUserRolesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseReplaceUserRolesResponse parses an HTTP response from a ReplaceUserRolesWithResponse call
func ParseReplaceUserRolesResponse(rsp *http.Response) (*ReplaceUserRolesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReplaceUserRolesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteUserRoleResponse parses an HTTP response from a DeleteUserRoleWithResponse call
func ParseDeleteUserRoleResponse(rsp *http.Response) (*DeleteUserRoleResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteUserRoleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseCreateVerificationCodeResponse parses an HTTP response from a CreateVerificationCodeWithResponse call
func ParseCreateVerificationCodeResponse(rsp *http.Response) (*CreateVerificationCodeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateVerificationCodeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseVerifyVerificationCodeResponse parses an HTTP response from a VerifyVerificationCodeWithResponse call
func ParseVerifyVerificationCodeResponse(rsp *http.Response) (*VerifyVerificationCodeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &VerifyVerificationCodeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseCreateVerificationByPasswordResponse parses an HTTP response from a CreateVerificationByPasswordWithResponse call
func ParseCreateVerificationByPasswordResponse(rsp *http.Response) (*CreateVerificationByPasswordResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateVerificationByPasswordResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest struct {
			ExpiresAt            string `json:"expiresAt"`
			VerificationRecordId string `json:"verificationRecordId"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseCreateVerificationBySocialResponse parses an HTTP response from a CreateVerificationBySocialWithResponse call
func ParseCreateVerificationBySocialResponse(rsp *http.Response) (*CreateVerificationBySocialResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateVerificationBySocialResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest struct {
			// AuthorizationUri The authorization URI to navigate to for authentication and authorization in the connected social identity provider.
			AuthorizationUri string `json:"authorizationUri"`

			// ExpiresAt The expiration date and time of the verification record.
			ExpiresAt string `json:"expiresAt"`

			// VerificationRecordId The ID of the verification record.
			VerificationRecordId string `json:"verificationRecordId"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseVerifyVerificationBySocialResponse parses an HTTP response from a VerifyVerificationBySocialWithResponse call
func ParseVerifyVerificationBySocialResponse(rsp *http.Response) (*VerifyVerificationBySocialResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &VerifyVerificationBySocialResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			VerificationRecordId string `json:"verificationRecordId"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateVerificationByVerificationCodeResponse parses an HTTP response from a CreateVerificationByVerificationCodeWithResponse call
func ParseCreateVerificationByVerificationCodeResponse(rsp *http.Response) (*CreateVerificationByVerificationCodeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateVerificationByVerificationCodeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest struct {
			ExpiresAt            string `json:"expiresAt"`
			VerificationRecordId string `json:"verificationRecordId"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseVerifyVerificationByVerificationCodeResponse parses an HTTP response from a VerifyVerificationByVerificationCodeWithResponse call
func ParseVerifyVerificationByVerificationCodeResponse(rsp *http.Response) (*VerifyVerificationByVerificationCodeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &VerifyVerificationByVerificationCodeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			VerificationRecordId string `json:"verificationRecordId"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGenerateWebAuthnRegistrationOptionsResponse parses an HTTP response from a GenerateWebAuthnRegistrationOptionsWithResponse call
func ParseGenerateWebAuthnRegistrationOptionsResponse(rsp *http.Response) (*GenerateWebAuthnRegistrationOptionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GenerateWebAuthnRegistrationOptionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			ExpiresAt           string `json:"expiresAt"`
			RegistrationOptions struct {
				Attestation            *GenerateWebAuthnRegistrationOptions200RegistrationOptionsAttestation `json:"attestation,omitempty"`
				AuthenticatorSelection *struct {
					AuthenticatorAttachment *GenerateWebAuthnRegistrationOptions200RegistrationOptionsAuthenticatorSelectionAuthenticatorAttachment `json:"authenticatorAttachment,omitempty"`
					RequireResidentKey      *bool                                                                                                   `json:"requireResidentKey,omitempty"`
					ResidentKey             *GenerateWebAuthnRegistrationOptions200RegistrationOptionsAuthenticatorSelectionResidentKey             `json:"residentKey,omitempty"`
					UserVerification        *GenerateWebAuthnRegistrationOptions200RegistrationOptionsAuthenticatorSelectionUserVerification        `json:"userVerification,omitempty"`
				} `json:"authenticatorSelection,omitempty"`
				Challenge          string `json:"challenge"`
				ExcludeCredentials *[]struct {
					Id         string                                                                                   `json:"id"`
					Transports *[]GenerateWebAuthnRegistrationOptions200RegistrationOptionsExcludeCredentialsTransports `json:"transports,omitempty"`
					Type       string                                                                                   `json:"type"`
				} `json:"excludeCredentials,omitempty"`
				Extensions *struct {
					Appid            *string `json:"appid,omitempty"`
					CredProps        *bool   `json:"credProps,omitempty"`
					HmacCreateSecret *bool   `json:"hmacCreateSecret,omitempty"`
				} `json:"extensions,omitempty"`
				PubKeyCredParams []struct {
					Alg  float32 `json:"alg"`
					Type string  `json:"type"`
				} `json:"pubKeyCredParams"`
				Rp struct {
					Id   *string `json:"id,omitempty"`
					Name string  `json:"name"`
				} `json:"rp"`
				Timeout *float32 `json:"timeout,omitempty"`
				User    struct {
					DisplayName string `json:"displayName"`
					Id          string `json:"id"`
					Name        string `json:"name"`
				} `json:"user"`
			} `json:"registrationOptions"`
			VerificationRecordId string `json:"verificationRecordId"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseVerifyWebAuthnRegistrationResponse parses an HTTP response from a VerifyWebAuthnRegistrationWithResponse call
func ParseVerifyWebAuthnRegistrationResponse(rsp *http.Response) (*VerifyWebAuthnRegistrationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &VerifyWebAuthnRegistrationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			VerificationRecordId string `json:"verificationRecordId"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}
